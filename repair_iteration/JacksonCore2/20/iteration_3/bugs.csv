bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  char  len  =  _inputBuffer.length-1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  char  len  =  _inputBuffer.length-1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	char  len  =  _inputBuffer.length-1;	  int    len    =    _inputBuffer.length-1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
2	[BUG]  [BUGGY]  int  len  =  fractLen-expLen;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  fractLen-expLen;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  fractLen-expLen;	  int    len    =    startPtr-expLen;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
3	[BUG]  [BUGGY]  int  len  =  _inputPtr-expLen;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputPtr-expLen;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputPtr-expLen;	  int    len    =    startPtr-expLen;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
4	[BUG]  [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    return    reset(negative,    intLen,    fractLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
5	[BUG]  [BUGGY]  if(expLen  <  =  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  if(expLen  <  =  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	if(expLen  <  =  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    return    reset(negative,    intLen,    fractLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
6	[BUG]  [BUGGY]  if(expLen  <  2)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  if(expLen  <  2)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	if(expLen  <  2)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    return    reset(negative,    intLen,    fractLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
7	[BUG]  [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    return    reset(negative,    intLen,    fractLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
8	[BUG]  [BUGGY]  int  len  =  fractLen-startPtr  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  fractLen-startPtr  +  1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  fractLen-startPtr  +  1;	  int    len    =    expLen-startPtr    +    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
9	[BUG]  [BUGGY]  int  len  =  expLen-offset  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  expLen-offset  +  1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  expLen-offset  +  1;	  int    len    =    expLen-startPtr    +    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
10	[BUG]  [BUGGY]  int  len  =  _inputPtr-offset  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputPtr-offset  +  1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputPtr-offset  +  1;	  int    len    =    _inputPtr-offset;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
11	[BUG]  [BUGGY]  int  len  =  _inputBuffer.length-offset;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputBuffer.length-offset;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputBuffer.length-offset;	  int    len    =    _inputPtr-offset;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
12	[BUG]  [BUGGY]  int  len  =  _inputPtr+1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputPtr+1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputPtr+1;	  int    len    =    _inputPtr-1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
13	[BUG]  [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  intLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  intLen,  expLen);  }  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  intLen,  expLen);  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    return    reset(negative,    intLen,    intLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
14	[BUG]  [BUGGY]  int  len  =  ptr-inputLen  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  ptr-inputLen  +  1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  ptr-inputLen  +  1;	  int    len    =    ptr-inputLen;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
15	[BUG]  [BUGGY]  int  len  =  _inputBuffer.length-inputLen;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputBuffer.length-inputLen;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputBuffer.length-inputLen;	  int    len    =    ptr-inputLen;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
16	[BUG]  [BUGGY]  int  len  =  fractLen-inpLen;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  fractLen-inpLen;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  fractLen-inpLen;	  int    len    =    expLen-inpLen;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
17	[BUG]  [BUGGY]  int  len  =  _inputPtr-inpLen;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputPtr-inpLen;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputPtr-inpLen;	  int    len    =    expLen-inpLen;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
18	[BUG]  [BUGGY]  int  len  =  inputLen-inpLen;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  inputLen-inpLen;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  inputLen-inpLen;	  int    len    =    expLen-inpLen;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
19	[BUG]  [BUGGY]  int  len  =  expLen-fractLen;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  expLen-fractLen;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  expLen-fractLen;	  int    len    =    expLen-inpLen;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
20	[BUG]  [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  expLen,  fractLen);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  expLen,  fractLen);  }  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  expLen,  fractLen);  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    return    reset(negative,    intLen,    expLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
21	[BUG]  [BUGGY]  int  len  =  fractLen-offset;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  fractLen-offset;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  fractLen-offset;	  int    len    =    fractLen-startPtr;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
22	[BUG]  [BUGGY]  int  len  =  fractLen-inputPtr;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  fractLen-inputPtr;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  fractLen-inputPtr;	  int    len    =    fractLen-startPtr;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
23	[BUG]  [BUGGY]  int  len  =  _inputPtr-startPtr  +  2;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputPtr-startPtr  +  2;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputPtr-startPtr  +  2;	  int    len    =    _inputPtr-startPtr    +    1;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
24	[BUG]  [BUGGY]  char  len  =  _inputPtr-ptr;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  char  len  =  _inputPtr-ptr;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	char  len  =  _inputPtr-ptr;	  int    len    =    _inputPtr-ptr;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
25	[BUG]  [BUGGY]  int  len  =  expLen-offset  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  expLen-offset  -  1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  expLen-offset  -  1;	  int    len    =    expLen-offset;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
26	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
27	[BUG]  [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  }  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
28	[BUG]  [BUGGY]  int  len  =  _inputEnd-startPtr;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputEnd-startPtr;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputEnd-startPtr;	  int    len    =    inputLen-startPtr;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
29	[BUG]  [BUGGY]  int  len  =  startPtr-inputLen;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  startPtr-inputLen;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  startPtr-inputLen;	  int    len    =    inputLen-startPtr;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
30	[BUG]  [BUGGY]  char  len  =  _inputPtr-startPtr;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  char  len  =  _inputPtr-startPtr;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	char  len  =  _inputPtr-startPtr;	  int    len    =    _inputPtr-startPtr;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
31	[BUG]  [BUGGY]  int  len  =  _inputBuffer.length()  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputBuffer.length()  +  1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputBuffer.length()  +  1;	  int    len    =    _inputBuffer.length();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
32	[BUG]  [BUGGY]  int  len  =  _inputBuffer.length()  -  1;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputBuffer.length()  -  1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputBuffer.length()  -  1;	  int    len    =    _inputBuffer.length();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
33	[BUG]  [BUGGY]  char  len  =  _inputBuffer.length();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  char  len  =  _inputBuffer.length();  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	char  len  =  _inputBuffer.length();	  int    len    =    _inputBuffer.length();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
34	[BUG]  [BUGGY]  int  len  =  startPtr-startPtr  +  1L;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  startPtr-startPtr  +  1L;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  startPtr-startPtr  +  1L;	  int    len    =    ptr-startPtr    +    1L;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
35	[BUG]  [BUGGY]  int  len  =  expLen-startPtr  +  1L;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  expLen-startPtr  +  1L;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  expLen-startPtr  +  1L;	  int    len    =    ptr-startPtr    +    1L;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
36	[BUG]  [BUGGY]  int  len  =  _inputEnd-2;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputEnd-2;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputEnd-2;	  int    len    =    _inputEnd-1;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
37	[BUG]  [BUGGY]  int  len  =  _inputEnd+1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputEnd+1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputEnd+1;	  int    len    =    _inputEnd-1;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
38	[BUG]  [BUGGY]  int  len  =  fractLen-ptr;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  fractLen-ptr;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  fractLen-ptr;	  int    len    =    expLen-ptr;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
39	[BUG]  [BUGGY]  int  len  =  expLen-len;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  expLen-len;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  expLen-len;	  int    len    =    expLen-ptr;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
40	[BUG]  [BUGGY]  int  len  =  fractLen-1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  fractLen-1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  fractLen-1;	  int    len    =    expLen-1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
41	[BUG]  [BUGGY]  int  len  =  expLen-1  -  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  expLen-1  -  1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  expLen-1  -  1;	  int    len    =    expLen-1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
42	[BUG]  [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(intLen,  intLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(intLen,  intLen,  expLen);  }  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(intLen,  intLen,  expLen);  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    return    reset(intLen,    intLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
43	[BUG]  [BUGGY]  if(expLen  <  =  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(intLen,  intLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  if(expLen  <  =  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(intLen,  intLen,  expLen);  }  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	if(expLen  <  =  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(intLen,  intLen,  expLen);  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    return    reset(intLen,    intLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
44	[BUG]  [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(intLen,  intLen,  expLen);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(intLen,  intLen,  expLen);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(intLen,  intLen,  expLen);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    return    reset(intLen,    intLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
45	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    return    reset(intLen,    intLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
46	[BUG]  [BUGGY]  String  len  =  ptr-startPtr  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  String  len  =  ptr-startPtr  +  1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	String  len  =  ptr-startPtr  +  1;	  char    len    =    ptr-startPtr    +    1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
47	[BUG]  [BUGGY]  Char  len  =  ptr-startPtr  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  Char  len  =  ptr-startPtr  +  1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	Char  len  =  ptr-startPtr  +  1;	  char    len    =    ptr-startPtr    +    1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
48	[BUG]  [BUGGY]  Character  len  =  ptr-startPtr  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  Character  len  =  ptr-startPtr  +  1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	Character  len  =  ptr-startPtr  +  1;	  char    len    =    ptr-startPtr    +    1;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
49	[BUG]  [BUGGY]  int  len  =  _inputEnd-ptr  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputEnd-ptr  +  1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputEnd-ptr  +  1;	  int    len    =    _inputEnd-ptr;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
50	[BUG]  [BUGGY]  int  len  =  _inputEnd-offset;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputEnd-offset;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputEnd-offset;	  int    len    =    _inputEnd-ptr;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
51	[BUG]  [BUGGY]  int  len  =  _inputBuffer.length-startPtr  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputBuffer.length-startPtr  +  1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputBuffer.length-startPtr  +  1;	  int    len    =    startPtr-startPtr    +    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
52	[BUG]  [BUGGY]  int  len  =  inputLen-inputPtr;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  inputLen-inputPtr;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  inputLen-inputPtr;	  int    len    =    expLen-inputPtr;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
53	[BUG]  [BUGGY]  int  len  =  expLen-inputPtr  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  expLen-inputPtr  +  1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  expLen-inputPtr  +  1;	  int    len    =    expLen-inputPtr;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
54	[BUG]  [BUGGY]  int  len  =  _inputPtr-inputLen;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputPtr-inputLen;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputPtr-inputLen;	  int    len    =    expLen-inputPtr;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
55	[BUG]  [BUGGY]  char  len  =  inputLen-ptr;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  char  len  =  inputLen-ptr;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	char  len  =  inputLen-ptr;	  int    len    =    inputLen-ptr;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
56	[BUG]  [BUGGY]  Integer  len  =  _inputBuffer.readInt(ch);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  Integer  len  =  _inputBuffer.readInt(ch);  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	Integer  len  =  _inputBuffer.readInt(ch);	  Integer    len    =    _inputBuffer.readInt();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
57	[BUG]  [BUGGY]  Integer  len  =  _textBuffer.readInt();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  Integer  len  =  _textBuffer.readInt();  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	Integer  len  =  _textBuffer.readInt();	  Integer    len    =    _inputBuffer.readInt();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
58	[BUG]  [BUGGY]  Integer  len  =  _inputBuffer.readInt(0);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  Integer  len  =  _inputBuffer.readInt(0);  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	Integer  len  =  _inputBuffer.readInt(0);	  Integer    len    =    _inputBuffer.readInt();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
59	[BUG]  [BUGGY]  char  len  =  ptr-offset-1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  char  len  =  ptr-offset-1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	char  len  =  ptr-offset-1;	  int    len    =    ptr-offset-1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
60	[BUG]  [BUGGY]  int  len  =  ptr-offset-2;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  ptr-offset-2;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  ptr-offset-2;	  int    len    =    ptr-offset-1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
61	[BUG]  [BUGGY]  int  len  =  ptr-outputEnd;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  ptr-outputEnd;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  ptr-outputEnd;	  int    len    =    outputEnd-ptr;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
62	[BUG]  [BUGGY]  int  len  =  outputEnd-offset;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  outputEnd-offset;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  outputEnd-offset;	  int    len    =    outputEnd-ptr;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
63	[BUG]  [BUGGY]  int  len  =  startPtr-outputEnd;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  startPtr-outputEnd;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  startPtr-outputEnd;	  int    len    =    outputEnd-ptr;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
64	[BUG]  [BUGGY]  int  len  =  fractLen-inputLen;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  fractLen-inputLen;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  fractLen-inputLen;	  int    len    =    expLen-inputLen;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
65	[BUG]  [BUGGY]  int  len  =  inputLen-inputLen;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  inputLen-inputLen;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  inputLen-inputLen;	  int    len    =    expLen-inputLen;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
66	[BUG]  [BUGGY]  int  len  =  negative-inputLen;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  negative-inputLen;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  negative-inputLen;	  int    len    =    expLen-inputLen;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
67	[BUG]  [BUGGY]  int  len  =  expLen-ptr  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  expLen-ptr  +  1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  expLen-ptr  +  1;	  int    len    =    ptr-expLen    +    1;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
68	[BUG]  [BUGGY]  int  len  =  expLen-expLen  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  expLen-expLen  +  1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  expLen-expLen  +  1;	  int    len    =    ptr-expLen    +    1;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
69	[BUG]  [BUGGY]  String  len  =  startPtr-ptr;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  String  len  =  startPtr-ptr;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	String  len  =  startPtr-ptr;	  char    len    =    startPtr-ptr;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
70	[BUG]  [BUGGY]  char  len  =  ptr-startPtr;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  char  len  =  ptr-startPtr;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	char  len  =  ptr-startPtr;	  char    len    =    startPtr-ptr;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
71	[BUG]  [BUGGY]  Char  len  =  ptr-startPtr;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  Char  len  =  ptr-startPtr;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	Char  len  =  ptr-startPtr;	  char    len    =    startPtr-ptr;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
72	[BUG]  [BUGGY]  Char  len  =  startPtr-ptr;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  Char  len  =  startPtr-ptr;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	Char  len  =  startPtr-ptr;	  char    len    =    startPtr-ptr;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
73	[BUG]  [BUGGY]  char  len  =  ptr-offset  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  char  len  =  ptr-offset  +  1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	char  len  =  ptr-offset  +  1;	  int    len    =    ptr-offset    +    1;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
74	[BUG]  [BUGGY]  char  len  =  ptr-inputPtr;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  char  len  =  ptr-inputPtr;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	char  len  =  ptr-inputPtr;	  int    len    =    ptr-inputPtr;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
75	[BUG]  [BUGGY]  int  len  =  _inputBuffer.length-1  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputBuffer.length-1  +  1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputBuffer.length-1  +  1;	  int    len    =    _inputBuffer.length-1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
76	[BUG]  [BUGGY]  int  len  =  _inputLen-1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputLen-1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputLen-1;	  int    len    =    expLen-1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
77	[BUG]  [BUGGY]  int  len  =  expLen-2;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  expLen-2;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  expLen-2;	  int    len    =    expLen-1;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
78	[BUG]  [BUGGY]  int  len  =  inputLen-startPtr  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  inputLen-startPtr  +  1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  inputLen-startPtr  +  1;	  int    len    =    inputLen-startPtr;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
79	[BUG]  [BUGGY]  if(len  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  if(len  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	if(len  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    return    reset(negative,    intLen,    expLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
80	[BUG]  [BUGGY]  if(_inputPtr  >=  inputEnd)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  if(_inputPtr  >=  inputEnd)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	if(_inputPtr  >=  inputEnd)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    return    reset(negative,    intLen,    expLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
81	[BUG]  [BUGGY]  int  len  =  inputLen-expLen;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  inputLen-expLen;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  inputLen-expLen;	  int    len    =    startPtr-expLen;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
82	[BUG]  [BUGGY]  int  len  =  outputEnd-expLen;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  outputEnd-expLen;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  outputEnd-expLen;	  int    len    =    startPtr-expLen;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
83	[BUG]  [BUGGY]  char  len  =  startPtr-startPtr;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  char  len  =  startPtr-startPtr;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	char  len  =  startPtr-startPtr;	  char    len    =    startPtr-ptr;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
84	[BUG]  [BUGGY]  char  len  =  startPtr-outputPtr;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  char  len  =  startPtr-outputPtr;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	char  len  =  startPtr-outputPtr;	  char    len    =    startPtr-ptr;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
85	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  inputLen);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  inputLen);  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  inputLen);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
86	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  outputEnd);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  outputEnd);  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  outputEnd);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
87	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative);  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
88	[BUG]  [BUGGY]  if(expLen  >=  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(intLen,  intLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  if(expLen  >=  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(intLen,  intLen,  expLen);  }  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	if(expLen  >=  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(intLen,  intLen,  expLen);  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    return    reset(intLen,    intLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
89	[BUG]  [BUGGY]  if(expLen  ==  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(intLen,  intLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  if(expLen  ==  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(intLen,  intLen,  expLen);  }  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	if(expLen  ==  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(intLen,  intLen,  expLen);  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    return    reset(intLen,    intLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
90	[BUG]  [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(intLen,  intLen,  expLen);  }  else  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(intLen,  intLen,  expLen);  }  else  {  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(intLen,  intLen,  expLen);  }  else  {	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    return    reset(intLen,    intLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
91	[BUG]  [BUGGY]  int  len  =  ptr-_inputPtr;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  ptr-_inputPtr;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  ptr-_inputPtr;	  int    len    =    _inputPtr-ptr;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
92	[BUG]  [BUGGY]  int  len  =  outputLen-inputPtr;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  outputLen-inputPtr;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  outputLen-inputPtr;	  int    len    =    expLen-inputPtr;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
93	[BUG]  [BUGGY]  if(expLen  >=  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  intLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  if(expLen  >=  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  intLen,  expLen);  }  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	if(expLen  >=  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  intLen,  expLen);  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    return    reset(negative,    intLen,    intLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
94	[BUG]  [BUGGY]  if(expLen  >=  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  if(expLen  >=  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	if(expLen  >=  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    return    reset(negative,    intLen,    intLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
95	[BUG]  [BUGGY]  int  len  =  inputLen-offset;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  inputLen-offset;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  inputLen-offset;	  int    len    =    inputLen-ptr;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
96	[BUG]  [BUGGY]  int  len  =  _inputPtr-startPtr  +  1L;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputPtr-startPtr  +  1L;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputPtr-startPtr  +  1L;	  int    len    =    _inputPtr-startPtr    +    1;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
97	[BUG]  [BUGGY]  int  len  =  _inputPtr-startPtr  *  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputPtr-startPtr  *  1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputPtr-startPtr  *  1;	  int    len    =    _inputPtr-startPtr    +    1;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
98	[BUG]  [BUGGY]  Integer  len  =  _inputBuffer.readInt(ptr);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  Integer  len  =  _inputBuffer.readInt(ptr);  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	Integer  len  =  _inputBuffer.readInt(ptr);	  Integer    len    =    _inputBuffer.readInt();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
99	[BUG]  [BUGGY]  int  len  =  ptr-offset  +  1L;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  ptr-offset  +  1L;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  ptr-offset  +  1L;	  int    len    =    ptr-offset    +    1;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
100	[BUG]  [BUGGY]  int  len  =  _inputLen-inpLen;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputLen-inpLen;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputLen-inpLen;	  int    len    =    expLen-inpLen;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
101	[BUG]  [BUGGY]  int  len  =  _inputEnd-inpLen;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputEnd-inpLen;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputEnd-inpLen;	  int    len    =    expLen-inpLen;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
102	[BUG]  [BUGGY]  int  len  =  _offset-offset;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _offset-offset;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _offset-offset;	  int    len    =    expLen-offset;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
103	[BUG]  [BUGGY]  int  len  =  _inputPtr.length-1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputPtr.length-1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputPtr.length-1;	  int    len    =    ptr.length-1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
104	[BUG]  [BUGGY]  int  len  =  _inputPtr-startPtr-1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputPtr-startPtr-1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputPtr-startPtr-1;	  int    len    =    _inputPtr-startPtr;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
105	[BUG]  [BUGGY]  int  len  =  ptr-inputPtr  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  ptr-inputPtr  +  1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  ptr-inputPtr  +  1;	  int    len    =    ptr-expLen    +    1;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
106	[BUG]  [BUGGY]  int  len  =  outputEnd-ptr  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  outputEnd-ptr  +  1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  outputEnd-ptr  +  1;	  int    len    =    outputEnd-ptr;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
107	[BUG]  [BUGGY]  int  len  =  outputEnd-startPtr;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  outputEnd-startPtr;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  outputEnd-startPtr;	  int    len    =    outputEnd-ptr;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
108	[BUG]  [BUGGY]  int  len  =  outputLen-ptr;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  outputLen-ptr;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  outputLen-ptr;	  int    len    =    expLen-ptr;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
109	[BUG]  [BUGGY]  int  len  =  outputPtr-startPtr  /  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  outputPtr-startPtr  /  1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  outputPtr-startPtr  /  1;	  int    len    =    outputPtr-startPtr    +    1;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
110	[BUG]  [BUGGY]  int  len  =  _textBuffer.length();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _textBuffer.length();  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _textBuffer.length();	  int    len    =    _inputBuffer.length();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
111	[BUG]  [BUGGY]  int  len  =  _inputPtr-inputPtr;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputPtr-inputPtr;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputPtr-inputPtr;	  int    len    =    ptr-inputPtr;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
112	[BUG]  [BUGGY]  int  len  =  _inputLen-inputLen;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputLen-inputLen;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputLen-inputLen;	  int    len    =    expLen-inputLen;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
113	[BUG]  [BUGGY]  int  len  =  outputLen-inputLen;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  outputLen-inputLen;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  outputLen-inputLen;	  int    len    =    expLen-inputLen;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
114	[BUG]  [BUGGY]  int  len  =  _inputEnd-1  -  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputEnd-1  -  1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputEnd-1  -  1;	  int    len    =    _inputEnd-1;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
115	[BUG]  [BUGGY]  int  len  =  _inputPtr-2;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputPtr-2;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputPtr-2;	  int    len    =    _inputPtr-1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
116	[BUG]  [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  else  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  else  {  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  else  {	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    return    reset(negative,    intLen,    fractLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
117	[BUG]  [BUGGY]  int  len  =  expLen-inputLen  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  expLen-inputLen  +  1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  expLen-inputLen  +  1;	  int    len    =    ptr-expLen    +    1;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
118	[BUG]  [BUGGY]  int  len  =  _inputEnd-inputPtr;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputEnd-inputPtr;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputEnd-inputPtr;	  int    len    =    expLen-inputPtr;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
119	[BUG]  [BUGGY]  int  len  =  ptr-startPtr  +  expLen;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  ptr-startPtr  +  expLen;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  ptr-startPtr  +  expLen;	  int    len    =    ptr-startPtr    +    1L;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
120	[BUG]  [BUGGY]  int  len  =  _inputBuffer.length-1  +  expLen;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputBuffer.length-1  +  expLen;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputBuffer.length-1  +  expLen;	  int    len    =    _inputBuffer.length-1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
121	[BUG]  [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  expLen);  }  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  expLen);  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    return    reset(intLen,    intLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
122	[BUG]  [BUGGY]  int  len  =  _inputEnd-inputLen;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputEnd-inputLen;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputEnd-inputLen;	  int    len    =    expLen-inputLen;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
123	[BUG]  [BUGGY]  if(len  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  if(len  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  }  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	if(len  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
124	[BUG]  [BUGGY]  int  len  =  _inputPtr-startPtr  *  startPtr  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputPtr-startPtr  *  startPtr  +  1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputPtr-startPtr  *  startPtr  +  1;	  int    len    =    _inputPtr-startPtr    +    1;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
125	[BUG]  [BUGGY]  int  len  =  _inputPtr-startPtr  +  expLen;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputPtr-startPtr  +  expLen;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputPtr-startPtr  +  expLen;	  int    len    =    _inputPtr-startPtr    +    1;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
126	[BUG]  [BUGGY]  Character  len  =  startPtr-ptr;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  Character  len  =  startPtr-ptr;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	Character  len  =  startPtr-ptr;	  char    len    =    startPtr-ptr;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
127	[BUG]  [BUGGY]  int  len  =  _inputBuffer.length-ptr;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputBuffer.length-ptr;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputBuffer.length-ptr;	  int    len    =    _inputPtr-ptr;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
128	[BUG]  [BUGGY]  int  len  =  expLen-inpLen  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  expLen-inpLen  +  1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  expLen-inpLen  +  1;	  int    len    =    expLen-inpLen;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
129	[BUG]  [BUGGY]  int  len  =  _inputPtr-offset-1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  int  len  =  _inputPtr-offset-1;  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	int  len  =  _inputPtr-offset-1;	  int    len    =    ptr-offset-1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
130	[BUG]  [BUGGY]  Integer  len  =  _inputBuffer.readInt(_inputBuffer,  startPtr);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;        [BUGGY]  Integer  len  =  _inputBuffer.readInt(_inputBuffer,  startPtr);  [BUGGY]      _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	Integer  len  =  _inputBuffer.readInt(_inputBuffer,  startPtr);	  Integer    len    =    _inputBuffer.readInt();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
