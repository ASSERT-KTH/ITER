bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c)+  2;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c)+  2;  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  Character.toLowerCase(c)+  2;	  outBuf[outPtr++]    =    Character.toLowerCase(c)+    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
2	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c)+  3;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c)+  3;  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  Character.toLowerCase(c)+  3;	  outBuf[outPtr++]    =    Character.toLowerCase(c)+    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
3	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c)+  4;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c)+  4;  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  Character.toLowerCase(c)+  4;	  outBuf[outPtr++]    =    Character.toLowerCase(c)+    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
4	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  _inputBuffer,  outPtr);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  _inputBuffer,  outPtr);  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  Character.toLowerCase(c,  _inputBuffer,  outPtr);	  outBuf[outPtr++]    =    Character.toLowerCase(c,    outPtr);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
5	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  INT_0);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  INT_0);  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  Character.toLowerCase(c,  INT_0);	  outBuf[outPtr++]    =    Character.toLowerCase(c,    outPtr);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
6	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(c,  outPtr);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(c,  outPtr);  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  Character.toUpperCase(c,  outPtr);	  outBuf[outPtr++]    =    Character.toLowerCase(c,    outPtr);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
7	[BUG]  [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_INT;	  outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_FLOAT;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
8	[BUG]  [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_FLOAT  |  JsonToken.VALUE_NUMBER_INT;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_FLOAT  |  JsonToken.VALUE_NUMBER_INT;  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_FLOAT  |  JsonToken.VALUE_NUMBER_INT;	  outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_FLOAT;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
9	[BUG]  [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER;  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER;	  outBuf[outPtr++]    =    JsonToken.VALUE_STRING;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
10	[BUG]  [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_STRING  |  JsonToken.VALUE_NUMBER_FLOAT;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_STRING  |  JsonToken.VALUE_NUMBER_FLOAT;  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  JsonToken.VALUE_STRING  |  JsonToken.VALUE_NUMBER_FLOAT;	  outBuf[outPtr++]    =    JsonToken.VALUE_STRING;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
11	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
12	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(outPtr  >=  outBuf.length)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
13	[BUG]  [BUGGY]  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
14	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(outPtr  >=  outBuf.length)  {  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(outPtr    >=    outBuf.length)    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
15	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(c  ==  '.')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  ==  '.')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(outPtr    >=    outBuf.length)    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
16	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  positive,  intLen);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  positive,  intLen);  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  positive,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(outPtr    >=    outBuf.length)    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
17	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  negative,  intLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  negative,  intLen);  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  Character.toLowerCase(c,  negative,  intLen);	  outBuf[outPtr++]    =    Character.toLowerCase(c,    negative);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
18	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  _inputBuffer,  negative);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  _inputBuffer,  negative);  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  Character.toLowerCase(c,  _inputBuffer,  negative);	  outBuf[outPtr++]    =    Character.toLowerCase(c,    negative);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
19	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  0xFF);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  0xFF);  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  Character.toLowerCase(c,  0xFF);	  outBuf[outPtr++]    =    Character.toLowerCase(c,    negative);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
20	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(c  <  INT_0  ||  c  >  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(c  ==  '.')  {  if(c  <  INT_0  ||  c  >  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  ==  '.')  {  if(c  <  INT_0  ||  c  >  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(outPtr    >=    outBuf.length)    {    return    _parseFloat(outBuf,    outPtr,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
21	[BUG]  [BUGGY]  if(c  >=  INT_0  ||  c  ==  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(c  >=  INT_0  ||  c  ==  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  >=  INT_0  ||  c  ==  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(outPtr    >=    outBuf.length)    {    return    _parseFloat(outBuf,    outPtr,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
22	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(c  ==  '.')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  ==  '.')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(outPtr    >=    outBuf.length)    {    return    _parseFloat(outBuf,    outPtr,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
23	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(outPtr  >=  outBuf.length)  {  if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
24	[BUG]  [BUGGY]  c  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  c  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	c  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
25	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    return    _parseFloat(outBuf,    outPtr,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
26	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    return    _parseFloat(outBuf,    outPtr,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
27	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    return    _parseFloat(outBuf,    outPtr,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
28	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  out  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  out  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  out	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    if(outPtr    >=    outBuf.length)    {    return    _parseFloat(outBuf,    outPtr,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
29	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(c!=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c!=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    if(outPtr    >=    outBuf.length)    {    return    _parseFloat(outBuf,    outPtr,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
30	[BUG]  [BUGGY]  if(c  >=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(c  >=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  >=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    if(outPtr    >=    outBuf.length)    {    return    _parseFloat(outBuf,    outPtr,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
31	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(c,  negative);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(c,  negative);  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  Character.toUpperCase(c,  negative);	  outBuf[outPtr++]    =    Character.toUpperCase(c);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
32	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(c,  _inputBuffer[outPtr++]);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(c,  _inputBuffer[outPtr++]);  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  Character.toUpperCase(c,  _inputBuffer[outPtr++]);	  outBuf[outPtr++]    =    Character.toUpperCase(c);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
33	[BUG]  [BUGGY]  if(c  >=  INT_0  ||  c  ==  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(c  >=  INT_0  ||  c  ==  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  >=  INT_0  ||  c  ==  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	  if(c    ==    INT_0    ||    c    ==    INT_9)    {    if(outPtr    >=    outBuf.length)    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
34	[BUG]  [BUGGY]  if(c!=  INT_0  ||  c  ==  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(c!=  INT_0  ||  c  ==  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c!=  INT_0  ||  c  ==  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	  if(c    ==    INT_0    ||    c    ==    INT_9)    {    if(outPtr    >=    outBuf.length)    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
35	[BUG]  [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_NULL;  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  JsonToken.VALUE_NULL;	  outBuf[outPtr++]    =    JsonToken.VALUE_STRING;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
36	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  _quad1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  _quad1);  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  Character.toLowerCase(c,  _quad1);	  outBuf[outPtr++]    =    Character.toLowerCase(c,    negative);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
37	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(outPtr    >=    outBuf.length)    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
38	[BUG]  [BUGGY]  if(c  >=  '.')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(c  >=  '.')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  >=  '.')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(outPtr    >=    outBuf.length)    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
39	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    if(outPtr    >=    outBuf.length)    {    return    _parseFloat(outBuf,    outPtr,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
40	[BUG]  [BUGGY]  if(c  >=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(c  >=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  >=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    return    _parseFloat(outBuf,    outPtr,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
41	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    return    _parseFloat(outBuf,    outPtr,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
42	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
43	[BUG]  [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_FLOAT  ||  outPtr  >  0;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_FLOAT  ||  outPtr  >  0;  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_FLOAT  ||  outPtr  >  0;	  outBuf[outPtr++]    =    JsonToken.VALUE_NUMBER_FLOAT;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
44	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  ==  INT_0  ||  c  ==  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  ==  INT_0  ||  c  ==  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(outPtr  >=  outBuf.length)  {  if(c  ==  INT_0  ||  c  ==  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	  if(c    ==    INT_0    ||    c    ==    INT_9)    {    if(outPtr    >=    outBuf.length)    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
45	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  outputEnd);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  outputEnd);  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  Character.toLowerCase(c,  outputEnd);	  outBuf[outPtr++]    =    Character.toLowerCase(c,    outPtr);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
46	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  outBuf);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  outBuf);  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  Character.toLowerCase(c,  outBuf);	  outBuf[outPtr++]    =    Character.toLowerCase(c,    outPtr);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
47	[BUG]  [BUGGY]  if(c  >=  '.')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(c  >=  '.')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  >=  '.')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(outPtr    >=    outBuf.length)    {    return    _parseFloat(outBuf,    outPtr,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
48	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(outPtr    >=    outBuf.length)    {    return    _parseFloat(outBuf,    outPtr,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
49	[BUG]  [BUGGY]  if(c  >=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(c  >=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  >=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
50	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    if(outPtr    >=    outBuf.length)    {    return    _parseFloat(outBuf,    outPtr,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
51	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  if(outPtr  >=  outBuf.length)return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  if(outPtr  >=  outBuf.length)return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  if(outPtr  >=  outBuf.length)return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    if(outPtr    >=    outBuf.length)    {    return    _parseFloat(outBuf,    outPtr,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
52	[BUG]  [BUGGY]  if(c  ==  INT_0  ||  c  ==  INT_9)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(c  ==  INT_0  ||  c  ==  INT_9)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  ==  INT_0  ||  c  ==  INT_9)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
53	[BUG]  [BUGGY]  if(c  >=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(c  >=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  >=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    return    _parseFloat(outBuf,    outPtr,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
54	[BUG]  [BUGGY]  outBuf[outPtr++]  =  positive;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  outBuf[outPtr++]  =  positive;  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  positive;	  outBuf[outPtr++]    =    value;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
55	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(c  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(c  +  1);  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  Character.toUpperCase(c  +  1);	  outBuf[outPtr++]    =    Character.toUpperCase(c);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
56	[BUG]  [BUGGY]  if(c  ==  INT_0  ||  c  ==  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(c  ==  INT_0  ||  c  ==  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  ==  INT_0  ||  c  ==  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(outPtr    >=    outBuf.length)    {    return    _parseFloat(outBuf,    outPtr,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
57	[BUG]  [BUGGY]  if(outPtr  <  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(outPtr  <  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(outPtr  <  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
58	[BUG]  [BUGGY]  if(c  ==  INT_QUOTE)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(c  ==  INT_QUOTE)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  ==  INT_QUOTE)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(outPtr    >=    outBuf.length)    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
59	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  if(c  ==  '.'  ||  c  ==  ',')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  ==  '.'  ||  c  ==  ',')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(outPtr    >=    outBuf.length)    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
60	[BUG]  [BUGGY]  outBuf[outPtr++]  =  CharacterEscapes.ESCAPE_STANDARD;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  outBuf[outPtr++]  =  CharacterEscapes.ESCAPE_STANDARD;  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  CharacterEscapes.ESCAPE_STANDARD;	  outBuf[outPtr++]    =    negative;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
61	[BUG]  [BUGGY]  outBuf[outPtr++]  =  CharacterEscapes.ESCAPE;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  outBuf[outPtr++]  =  CharacterEscapes.ESCAPE;  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  CharacterEscapes.ESCAPE;	  outBuf[outPtr++]    =    negative;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
62	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c)/  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c)/  1;  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  Character.toLowerCase(c)/  1;	  outBuf[outPtr++]    =    Character.toLowerCase(c)+    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
63	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(c)+  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }      [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(c)+  1;  [BUGGY]      }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  Character.toUpperCase(c)+  1;	  outBuf[outPtr++]    =    Character.toLowerCase(c)+    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
