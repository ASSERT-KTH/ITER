bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  negative);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }    [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  negative);  [BUGGY]    }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  Character.toLowerCase(c,  negative);	  outBuf[outPtr++]    =    Character.toLowerCase(c);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
2	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(c);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }    [BUGGY]  outBuf[outPtr++]  =  Character.toUpperCase(c);  [BUGGY]    }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  Character.toUpperCase(c);	  outBuf[outPtr++]    =    Character.toLowerCase(c);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
3	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  outPtr);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }    [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c,  outPtr);  [BUGGY]    }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  Character.toLowerCase(c,  outPtr);	  outBuf[outPtr++]    =    Character.toLowerCase(c);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
4	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }    [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]    }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
5	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }    [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]    }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
6	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }    [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [BUGGY]    }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
7	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }    [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]    }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
8	[BUG]  [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_FLOAT;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }    [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_FLOAT;  [BUGGY]    }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  JsonToken.VALUE_NUMBER_FLOAT;	  outBuf[outPtr++]    =    c;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
9	[BUG]  [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_STRING;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }    [BUGGY]  outBuf[outPtr++]  =  JsonToken.VALUE_STRING;  [BUGGY]    }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  JsonToken.VALUE_STRING;	  outBuf[outPtr++]    =    c;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
10	[BUG]  [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c)+  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }    [BUGGY]  outBuf[outPtr++]  =  Character.toLowerCase(c)+  1;  [BUGGY]    }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  Character.toLowerCase(c)+  1;	  outBuf[outPtr++]    =    Character.toLowerCase(c);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
11	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }    [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [BUGGY]    }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
12	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }    [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [BUGGY]    }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
13	[BUG]  [BUGGY]  outBuf[outPtr++]  =  negative;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }    [BUGGY]  outBuf[outPtr++]  =  negative;  [BUGGY]    }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  negative;	  outBuf[outPtr++]    =    c;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
14	[BUG]  [BUGGY]  outBuf[outPtr++]  =  value;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }    [BUGGY]  outBuf[outPtr++]  =  value;  [BUGGY]    }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	outBuf[outPtr++]  =  value;	  outBuf[outPtr++]    =    c;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
15	[BUG]  [BUGGY]  if(c  ==  INT_0  ||  c  ==  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;  if  (outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }    [BUGGY]  if(c  ==  INT_0  ||  c  ==  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]    }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  _textBuffer.setCurrentLength(outPtr);    [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	if(c  ==  INT_0  ||  c  ==  INT_9)  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	      	non-compiled	[CE]  illegal  start  of  type	3	None	replace
