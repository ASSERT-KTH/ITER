bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer.parseInt(ch,  _inputPtr);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]                AssertionFailedError      [CONTEXT]      {            [BUGGY]  Integer  ptr  =  _inputBuffer.parseInt(ch,  _inputPtr);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	Integer  ptr  =  _inputBuffer.parseInt(ch,  _inputPtr);	  Integer    ptr    =    _inputBuffer.parseInt(ch);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	25	None	replace
2	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer.parseInt(ch,  startPtr);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]                  AssertionFailedError      [CONTEXT]      {            [BUGGY]  Integer  ptr  =  _inputBuffer.parseInt(ch,  startPtr);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	Integer  ptr  =  _inputBuffer.parseInt(ch,  startPtr);	  Integer    ptr    =    _inputBuffer.parseInt(ch);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	25	None	replace
3	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer.parseInt(ch,  _inputLen);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]                    AssertionFailedError      [CONTEXT]      {            [BUGGY]  Integer  ptr  =  _inputBuffer.parseInt(ch,  _inputLen);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	Integer  ptr  =  _inputBuffer.parseInt(ch,  _inputLen);	  Integer    ptr    =    _inputBuffer.parseInt(ch);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	25	None	replace
4	[BUG]  [BUGGY]  boolean  negative  =(ch  ==  INT_QUOTE  ||  ch  ==  INT_VALUE);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]                AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  ==  INT_QUOTE  ||  ch  ==  INT_VALUE);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  ==  INT_QUOTE  ||  ch  ==  INT_VALUE);	  boolean    negative    =(ch    ==    INT_VALUE    ||    ch    ==    INT_QUOTE);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	14	None	replace
5	[BUG]  [BUGGY]  boolean  negative  =(ch  ==  INT_VALUE  ||  ch  ==  INT_QUOTE  ||  ch  ==  INT_ROOT);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]                  AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  ==  INT_VALUE  ||  ch  ==  INT_QUOTE  ||  ch  ==  INT_ROOT);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  ==  INT_VALUE  ||  ch  ==  INT_QUOTE  ||  ch  ==  INT_ROOT);	  boolean    negative    =(ch    ==    INT_VALUE    ||    ch    ==    INT_QUOTE);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	14	None	replace
6	[BUG]  [BUGGY]  boolean  negative  =(ch  ==  INT_VALUE  ||  ch  ==  INT_QUOTE  ||  ch  ==  INT_DECEMBER);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]                    AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  ==  INT_VALUE  ||  ch  ==  INT_QUOTE  ||  ch  ==  INT_DECEMBER);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  ==  INT_VALUE  ||  ch  ==  INT_QUOTE  ||  ch  ==  INT_DECEMBER);	  boolean    negative    =(ch    ==    INT_VALUE    ||    ch    ==    INT_QUOTE);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	14	None	replace
7	[BUG]  [BUGGY]  boolean  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_FLOAT);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_FLOAT);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_FLOAT);	  boolean    negative    =(ch    ==    INT_NUMBER    ||    ch    ==    INT_FLUSH);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	2	None	replace
8	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[_inputPtr  +  1];  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]                    AssertionFailedError      [CONTEXT]      {            [BUGGY]  Integer  ptr  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	Integer  ptr  =  _inputBuffer[_inputPtr  +  1];	  Integer    ptr    =    _inputBuffer[_inputPtr];    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	11	None	replace
9	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[_inputPtr]  &  0xff;  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]                      AssertionFailedError      [CONTEXT]      {            [BUGGY]  Integer  ptr  =  _inputBuffer[_inputPtr]  &  0xff;  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	Integer  ptr  =  _inputBuffer[_inputPtr]  &  0xff;	  Integer    ptr    =    _inputBuffer[_inputPtr];    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	11	None	replace
10	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[_inputPtr  -  1];  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]                        AssertionFailedError      [CONTEXT]      {            [BUGGY]  Integer  ptr  =  _inputBuffer[_inputPtr  -  1];  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	Integer  ptr  =  _inputBuffer[_inputPtr  -  1];	  Integer    ptr    =    _inputBuffer[_inputPtr];    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	11	None	replace
11	[BUG]  [BUGGY]  boolean  negative  =(ch  ==  INT_VALUE  ||  ch  ==  INT_VALUE)&&  Character.isDigit(ch);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  ==  INT_VALUE  ||  ch  ==  INT_VALUE)&&  Character.isDigit(ch);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  ==  INT_VALUE  ||  ch  ==  INT_VALUE)&&  Character.isDigit(ch);	  boolean    negative    =(ch    ==    INT_VALUE    ||    ch    ==    INT_VALUE);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	13	None	replace
12	[BUG]  [BUGGY]  boolean  negative  =(ch  ==  INT_QUOTE  ||  ch  ==  INT_NUMBER);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  ==  INT_QUOTE  ||  ch  ==  INT_NUMBER);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  ==  INT_QUOTE  ||  ch  ==  INT_NUMBER);	  boolean    negative    =(ch    ==    INT_NUMBER    ||    ch    ==    INT_QUOTE);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	6	None	replace
13	[BUG]  [BUGGY]  boolean  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_QUOTE  ||  ch  ==  INT_ROOT);  [CE]  call  to  this  must  be  first  statement  in  constructor  [FE]                AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_QUOTE  ||  ch  ==  INT_ROOT);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_QUOTE  ||  ch  ==  INT_ROOT);	  boolean    negative    =(ch    ==    INT_NUMBER    ||    ch    ==    INT_QUOTE);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	6	None	replace
14	[BUG]  [BUGGY]  Integer  ptr  =  _reader.readUnsignedInt();  [CE]  call  to  this  must  be  first  statement  in  constructor  [FE]                AssertionFailedError      [CONTEXT]      {            [BUGGY]  Integer  ptr  =  _reader.readUnsignedInt();  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	Integer  ptr  =  _reader.readUnsignedInt();	  Integer    ptr    =    _reader.readInt();    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	19	None	replace
15	[BUG]  [BUGGY]  Integer  ptr  =  _reader.indexOf(ch);  [CE]  call  to  this  must  be  first  statement  in  constructor  [FE]                  AssertionFailedError      [CONTEXT]      {            [BUGGY]  Integer  ptr  =  _reader.indexOf(ch);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	Integer  ptr  =  _reader.indexOf(ch);	  Integer    ptr    =    _reader.readInt();    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	19	None	replace
16	[BUG]  [BUGGY]  Integer  ptr  =  _reader.getChars(0,  0);  [CE]  call  to  this  must  be  first  statement  in  constructor  [FE]                    AssertionFailedError      [CONTEXT]      {            [BUGGY]  Integer  ptr  =  _reader.getChars(0,  0);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	Integer  ptr  =  _reader.getChars(0,  0);	  Integer    ptr    =    _reader.readInt();    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	19	None	replace
17	[BUG]  [BUGGY]  boolean  negative  =(_inputBuffer.length  >  0)&&(ch  ==  INT_LCURLY);  [CE]  call  to  this  must  be  first  statement  in  constructor  [FE]                AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(_inputBuffer.length  >  0)&&(ch  ==  INT_LCURLY);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(_inputBuffer.length  >  0)&&(ch  ==  INT_LCURLY);	  boolean    negative    =(ch    ==    INT_LCURLY)&&(_inputBuffer.length    >    0);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	16	None	replace
18	[BUG]  [BUGGY]  boolean  negative  =(_inputPtr  ==  INT_LCURLY)&&(_inputBuffer.length  >  0);  [CE]  call  to  this  must  be  first  statement  in  constructor  [FE]                  AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(_inputPtr  ==  INT_LCURLY)&&(_inputBuffer.length  >  0);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(_inputPtr  ==  INT_LCURLY)&&(_inputBuffer.length  >  0);	  boolean    negative    =(ch    ==    INT_LCURLY)&&(_inputBuffer.length    >    0);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	16	None	replace
19	[BUG]  [BUGGY]  boolean  negative  =(_inputBuffer.length  ==  INT_LCURLY)&&(ch  ==  INT_LCURLY);  [CE]  call  to  this  must  be  first  statement  in  constructor  [FE]                    AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(_inputBuffer.length  ==  INT_LCURLY)&&(ch  ==  INT_LCURLY);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(_inputBuffer.length  ==  INT_LCURLY)&&(ch  ==  INT_LCURLY);	  boolean    negative    =(ch    ==    INT_LCURLY)&&(_inputBuffer.length    >    0);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	16	None	replace
20	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[_inputPtr++]  &  0xff;  [CE]  call  to  this  must  be  first  statement  in  constructor  [FE]                AssertionFailedError      [CONTEXT]      {            [BUGGY]  Integer  ptr  =  _inputBuffer[_inputPtr++]  &  0xff;  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	Integer  ptr  =  _inputBuffer[_inputPtr++]  &  0xff;	  Integer    ptr    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	9	None	replace
21	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[_inputPtr++];  [CE]  call  to  this  must  be  first  statement  in  constructor  [FE]                  AssertionFailedError      [CONTEXT]      {            [BUGGY]  int  ptr  =  _inputBuffer[_inputPtr++];  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	int  ptr  =  _inputBuffer[_inputPtr++];	  Integer    ptr    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	9	None	replace
22	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[_inputPtr++]  +  1;  [CE]  call  to  this  must  be  first  statement  in  constructor  [FE]                    AssertionFailedError      [CONTEXT]      {            [BUGGY]  Integer  ptr  =  _inputBuffer[_inputPtr++]  +  1;  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	Integer  ptr  =  _inputBuffer[_inputPtr++]  +  1;	  Integer    ptr    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	9	None	replace
23	[BUG]  [BUGGY]  boolean  negative  =(_tokenIncomplete  ==  0);  [CE]  call  to  this  must  be  first  statement  in  constructor  [FE]            AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(_tokenIncomplete  ==  0);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(_tokenIncomplete  ==  0);	  boolean    negative    =(_tokenIncomplete    ==    INT_QUOTE);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	21	None	replace
24	[BUG]  [BUGGY]  boolean  negative  =(_tokenIncomplete  ==  INT_QUOTE  ||  _tokenIncomplete  ==  INT_QUOTE);  [CE]  call  to  this  must  be  first  statement  in  constructor  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(_tokenIncomplete  ==  INT_QUOTE  ||  _tokenIncomplete  ==  INT_QUOTE);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(_tokenIncomplete  ==  INT_QUOTE  ||  _tokenIncomplete  ==  INT_QUOTE);	  boolean    negative    =(_tokenIncomplete    ==    INT_QUOTE);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	21	None	replace
25	[BUG]  [BUGGY]  boolean  negative  =(_inputPtr  ==  0);  [CE]  call  to  this  must  be  first  statement  in  constructor  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(_inputPtr  ==  0);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(_inputPtr  ==  0);	  boolean    negative    =(_inputPtr    ==    INT_VALUE);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	17	None	replace
26	[BUG]  [BUGGY]  boolean  negative  =(_inputPtr  >=  0);  [CE]  call  to  this  must  be  first  statement  in  constructor  [FE]                AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(_inputPtr  >=  0);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(_inputPtr  >=  0);	  boolean    negative    =(_inputPtr    ==    INT_VALUE);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	17	None	replace
27	[BUG]  [BUGGY]  boolean  negative  =(_inputPtr  <  INT_VALUE);  [CE]  call  to  this  must  be  first  statement  in  constructor  [FE]                  AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(_inputPtr  <  INT_VALUE);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(_inputPtr  <  INT_VALUE);	  boolean    negative    =(_inputPtr    ==    INT_VALUE);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	17	None	replace
28	[BUG]  [BUGGY]  int  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_FLUSH);  [CE]  call  to  this  must  be  first  statement  in  constructor  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  int  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_FLUSH);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	int  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_FLUSH);	  int    negative    =(ch    ==    INT_MINUS    ||    ch    ==    INT_FLUSH);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	29	None	replace
29	[BUG]  [BUGGY]  int  negative  =(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE);  [CE]  call  to  this  must  be  first  statement  in  constructor  [FE]                AssertionFailedError      [CONTEXT]      {            [BUGGY]  int  negative  =(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	int  negative  =(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE);	  int    negative    =(ch    ==    INT_MINUS    ||    ch    ==    INT_FLUSH);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	29	None	replace
30	[BUG]  [BUGGY]  int  negative  =(ch  ==  INT_NEGATIVE  ||  ch  ==  INT_NEGATIVE);  [CE]  call  to  this  must  be  first  statement  in  constructor  [FE]                  AssertionFailedError      [CONTEXT]      {            [BUGGY]  int  negative  =(ch  ==  INT_NEGATIVE  ||  ch  ==  INT_NEGATIVE);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	int  negative  =(ch  ==  INT_NEGATIVE  ||  ch  ==  INT_NEGATIVE);	  int    negative    =(ch    ==    INT_MINUS    ||    ch    ==    INT_FLUSH);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	29	None	replace
31	[BUG]  [BUGGY]  boolean  negative  =(_tokenIncomplete  ==  INT_LCURLY  ||  _tokenIncomplete  ==  INT_LCURLY);  [CE]  call  to  this  must  be  first  statement  in  constructor  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(_tokenIncomplete  ==  INT_LCURLY  ||  _tokenIncomplete  ==  INT_LCURLY);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(_tokenIncomplete  ==  INT_LCURLY  ||  _tokenIncomplete  ==  INT_LCURLY);	  boolean    negative    =(_tokenIncomplete    ==    INT_LCURLY);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	24	None	replace
32	[BUG]  [BUGGY]  boolean  negative  =(_tokenIncomplete  ==  INT_LCURLY)&&(_inputBuffer.length  >  0);  [CE]  call  to  this  must  be  first  statement  in  constructor  [FE]                AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(_tokenIncomplete  ==  INT_LCURLY)&&(_inputBuffer.length  >  0);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(_tokenIncomplete  ==  INT_LCURLY)&&(_inputBuffer.length  >  0);	  boolean    negative    =(_tokenIncomplete    ==    INT_LCURLY);    	non-compiled	[CE]  call  to  this  must  be  first  statement  in  constructor	24	None	replace
33	[BUG]  [BUGGY]  int  negative  =(ch  ==  INT_QUOTE);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]            AssertionFailedError      [CONTEXT]      {            [BUGGY]  int  negative  =(ch  ==  INT_QUOTE);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	int  negative  =(ch  ==  INT_QUOTE);	  int    negative    =(ch    ==    INT_LBRACKET);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	27	None	replace
34	[BUG]  [BUGGY]  int  negative  =(ch  ==  JsonToken.VALUE_NUMBER_INT);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  int  negative  =(ch  ==  JsonToken.VALUE_NUMBER_INT);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	int  negative  =(ch  ==  JsonToken.VALUE_NUMBER_INT);	  int    negative    =(ch    ==    INT_LBRACKET);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	27	None	replace
35	[BUG]  [BUGGY]  int  negative  =(_inputPtr  ==  _inputEnd);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]                AssertionFailedError      [CONTEXT]      {            [BUGGY]  int  negative  =(_inputPtr  ==  _inputEnd);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	int  negative  =(_inputPtr  ==  _inputEnd);	  int    negative    =(ch    ==    INT_LBRACKET);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	27	None	replace
36	[BUG]  [BUGGY]  int  negative  =(ch  ==  0);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]                  AssertionFailedError      [CONTEXT]      {            [BUGGY]  int  negative  =(ch  ==  0);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	int  negative  =(ch  ==  0);	  int    negative    =(ch    ==    INT_LBRACKET);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	27	None	replace
37	[BUG]  [BUGGY]  boolean  negative  =(ch  ==  INT_QUOTE  ||  ch  ==  INT_LCURLY);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  ==  INT_QUOTE  ||  ch  ==  INT_LCURLY);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  ==  INT_QUOTE  ||  ch  ==  INT_LCURLY);	  boolean    negative    =(ch    ==    INT_LCURLY    ||    ch    ==    INT_QUOTE);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	18	None	replace
38	[BUG]  [BUGGY]  boolean  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_SUBJECT  ||  ch  ==  INT_ROOT);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]                  AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_SUBJECT  ||  ch  ==  INT_ROOT);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_SUBJECT  ||  ch  ==  INT_ROOT);	  boolean    negative    =(ch    ==    INT_NUMBER    ||    ch    ==    INT_SUBJECT);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	8	None	replace
39	[BUG]  [BUGGY]  boolean  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_SUBJECT  ||  ch  ==  INT_PROP);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]                    AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_SUBJECT  ||  ch  ==  INT_PROP);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_SUBJECT  ||  ch  ==  INT_PROP);	  boolean    negative    =(ch    ==    INT_NUMBER    ||    ch    ==    INT_SUBJECT);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	8	None	replace
40	[BUG]  [BUGGY]  boolean  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_SUBJECT  ||  ch  ==  INT_FLUSH);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]                      AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_SUBJECT  ||  ch  ==  INT_FLUSH);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_SUBJECT  ||  ch  ==  INT_FLUSH);	  boolean    negative    =(ch    ==    INT_NUMBER    ||    ch    ==    INT_SUBJECT);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	8	None	replace
41	[BUG]  [BUGGY]  boolean  negative  =(ch  ==  INT_LCURLY  ||  ch  ==  INT_LCURLY)&&  Character.isDigit(ch);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  ==  INT_LCURLY  ||  ch  ==  INT_LCURLY)&&  Character.isDigit(ch);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  ==  INT_LCURLY  ||  ch  ==  INT_LCURLY)&&  Character.isDigit(ch);	  boolean    negative    =(ch    ==    INT_LCURLY    ||    ch    ==    INT_LCURLY);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	15	None	replace
42	[BUG]  [BUGGY]  boolean  negative  =(_inputPtr  <  _inputEnd);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(_inputPtr  <  _inputEnd);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(_inputPtr  <  _inputEnd);	  boolean    negative    =(_inputPtr    ==    _inputEnd);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	22	None	replace
43	[BUG]  [BUGGY]  boolean  negative  =(_inputPtr  >=  _inputEnd);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]                AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(_inputPtr  >=  _inputEnd);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(_inputPtr  >=  _inputEnd);	  boolean    negative    =(_inputPtr    ==    _inputEnd);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	22	None	replace
44	[BUG]  [BUGGY]  boolean  negative  =(_inputPtr  >>  _inputEnd);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]                  AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(_inputPtr  >>  _inputEnd);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(_inputPtr  >>  _inputEnd);	  boolean    negative    =(_inputPtr    ==    _inputEnd);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	22	None	replace
45	[BUG]  [BUGGY]  boolean  negative  =(ch  ==  INT_VALUE  ||  ch  ==  INT_NUMBER);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]                AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  ==  INT_VALUE  ||  ch  ==  INT_NUMBER);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  ==  INT_VALUE  ||  ch  ==  INT_NUMBER);	  boolean    negative    =(ch    ==    INT_NUMBER    ||    ch    ==    INT_VALUE);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	7	None	replace
46	[BUG]  [BUGGY]  boolean  negative  =(ch  ==  INT_PLUS  ||  ch  ==  INT_QUOTE);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]            AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  ==  INT_PLUS  ||  ch  ==  INT_QUOTE);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  ==  INT_PLUS  ||  ch  ==  INT_QUOTE);	  boolean    negative    =(ch    ==    INT_QUOTE    ||    ch    ==    INT_PLUS);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	20	None	replace
47	[BUG]  [BUGGY]  boolean  negative  =(ch  >=  INT_MINUS  ||  ch  >  INT_FLUSH);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]            AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  >=  INT_MINUS  ||  ch  >  INT_FLUSH);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  >=  INT_MINUS  ||  ch  >  INT_FLUSH);	  boolean    negative    =(ch    >=    INT_MINUS    ||    ch    ==    INT_FLUSH);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	28	None	replace
48	[BUG]  [BUGGY]  boolean  negative  =(ch  ==  DEFAULT_QUOTE  ||  ch  ==  INT_QUOTE);  [CE]  call  to  super  must  be  first  statement  in  constructor  [FE]                AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  ==  DEFAULT_QUOTE  ||  ch  ==  INT_QUOTE);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  ==  DEFAULT_QUOTE  ||  ch  ==  INT_QUOTE);	  boolean    negative    =(ch    ==    INT_QUOTE    ||    ch    ==    DEFAULT_QUOTE);    	non-compiled	[CE]  call  to  super  must  be  first  statement  in  constructor	5	None	replace
49	[BUG]  [BUGGY]  boolean  negative  =(ch  ==  INT_QUOTE  ||  ch  ==  DEFAULT_QUOTE  ||  ch  ==  DEFAULT_QUOTE);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  ==  INT_QUOTE  ||  ch  ==  DEFAULT_QUOTE  ||  ch  ==  DEFAULT_QUOTE);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  ==  INT_QUOTE  ||  ch  ==  DEFAULT_QUOTE  ||  ch  ==  DEFAULT_QUOTE);	  boolean    negative    =(ch    ==    INT_QUOTE    ||    ch    ==    DEFAULT_QUOTE);    	non-compiled	[CE]  ';'  expected	5	None	replace
50	[BUG]  [BUGGY]  boolean  negative  =(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE);	  boolean    negative    =(ch    ==    INT_QUOTE    ||    ch    >=    INT_QUOTE);    	non-compiled	[CE]  ';'  expected	4	None	replace
51	[BUG]  [BUGGY]  int  len  =  _inputBuffer.length()  +  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      {            [BUGGY]  int  len  =  _inputBuffer.length()  +  1;  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	int  len  =  _inputBuffer.length()  +  1;	  int    len    =    _inputBuffer.length();    	non-compiled	[CE]  ';'  expected	10	None	replace
52	[BUG]  [BUGGY]  int  len  =  _inputBuffer.length()  -  1;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      {            [BUGGY]  int  len  =  _inputBuffer.length()  -  1;  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	int  len  =  _inputBuffer.length()  -  1;	  int    len    =    _inputBuffer.length();    	non-compiled	[CE]  ';'  expected	10	None	replace
53	[BUG]  [BUGGY]  char  len  =  _inputBuffer.length();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      {            [BUGGY]  char  len  =  _inputBuffer.length();  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	char  len  =  _inputBuffer.length();	  int    len    =    _inputBuffer.length();    	non-compiled	[CE]  ';'  expected	10	None	replace
54	[BUG]  [BUGGY]  _reportError( "Current  token( "+_tokenIncomplete+ ")not  a  digit  or  a  value. ");  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      {            [BUGGY]  _reportError( "Current  token( "+_tokenIncomplete+ ")not  a  digit  or  a  value. ");  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	_reportError( "Current  token( "+_tokenIncomplete+ ")not  a  digit  or  a  value. ");	  _reportError(   "Current    token(   "+_tokenIncomplete+   ")not    a    digit    or    a    value   ");    	non-compiled	[CE]  ';'  expected	26	None	replace
55	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer.readInt(_inputPtr);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      {            [BUGGY]  Integer  ptr  =  _inputBuffer.readInt(_inputPtr);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	Integer  ptr  =  _inputBuffer.readInt(_inputPtr);	  Integer    ptr    =    _inputBuffer.readInt();    	non-compiled	[CE]  ';'  expected	12	None	replace
56	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer.readFully(_inputPtr);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      {            [BUGGY]  Integer  ptr  =  _inputBuffer.readFully(_inputPtr);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	Integer  ptr  =  _inputBuffer.readFully(_inputPtr);	  Integer    ptr    =    _inputBuffer.readInt();    	non-compiled	[CE]  ';'  expected	12	None	replace
57	[BUG]  [BUGGY]  boolean  negative  =(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE  ||  ch  >  INT_QUOTE);	  boolean    negative    =(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTE);    	non-compiled	[CE]  ';'  expected	3	None	replace
58	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer.readInt(ch);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      {            [BUGGY]  Integer  ptr  =  _inputBuffer.readInt(ch);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	Integer  ptr  =  _inputBuffer.readInt(ch);	  Integer    ptr    =    _inputBuffer.readInt();    	non-compiled	[CE]  ';'  expected	12	None	replace
59	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer.readInt(_inputBuffer,  _inputLen);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      {            [BUGGY]  Integer  ptr  =  _inputBuffer.readInt(_inputBuffer,  _inputLen);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	Integer  ptr  =  _inputBuffer.readInt(_inputBuffer,  _inputLen);	  Integer    ptr    =    _inputBuffer.readInt();    	non-compiled	[CE]  ';'  expected	12	None	replace
60	[BUG]  [BUGGY]  boolean  negative  =(ch  ==  INT_SUBJECT  ||  ch  ==  INT_NUMBER);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  ==  INT_SUBJECT  ||  ch  ==  INT_NUMBER);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  ==  INT_SUBJECT  ||  ch  ==  INT_NUMBER);	  boolean    negative    =(ch    ==    INT_NUMBER    ||    ch    ==    INT_SUBJECT);    	non-compiled	[CE]  ';'  expected	8	None	replace
61	[BUG]  [BUGGY]  boolean  negative  =(_tokenIncomplete  ==  false);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(_tokenIncomplete  ==  false);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(_tokenIncomplete  ==  false);	  boolean    negative    =(_tokenIncomplete    ==    INT_QUOTE);    	non-compiled	[CE]  ';'  expected	21	None	replace
62	[BUG]  [BUGGY]  boolean  negative  =(_tokenIncomplete  ==  INT_QUOTE)&&(_inputPtr  >=  _inputEnd);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(_tokenIncomplete  ==  INT_QUOTE)&&(_inputPtr  >=  _inputEnd);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(_tokenIncomplete  ==  INT_QUOTE)&&(_inputPtr  >=  _inputEnd);	  boolean    negative    =(_tokenIncomplete    ==    INT_QUOTE);    	non-compiled	[CE]  ';'  expected	21	None	replace
63	[BUG]  [BUGGY]  boolean  negative  =(ch  >  INT_MINUS  ||  ch  ==  INT_FLUSH);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  >  INT_MINUS  ||  ch  ==  INT_FLUSH);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  >  INT_MINUS  ||  ch  ==  INT_FLUSH);	  boolean    negative    =(ch    >=    INT_MINUS    ||    ch    ==    INT_FLUSH);    	non-compiled	[CE]  ';'  expected	28	None	replace
64	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer.parseInt(ch,  outputPtr);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      {            [BUGGY]  Integer  ptr  =  _inputBuffer.parseInt(ch,  outputPtr);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	Integer  ptr  =  _inputBuffer.parseInt(ch,  outputPtr);	  Integer    ptr    =    _inputBuffer.parseInt(ch);    	non-compiled	[CE]  ';'  expected	25	None	replace
65	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer.parseInt(ch,  inputLen);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      {            [BUGGY]  Integer  ptr  =  _inputBuffer.parseInt(ch,  inputLen);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	Integer  ptr  =  _inputBuffer.parseInt(ch,  inputLen);	  Integer    ptr    =    _inputBuffer.parseInt(ch);    	non-compiled	[CE]  ';'  expected	25	None	replace
66	[BUG]  [BUGGY]  boolean  negative  =(ch  ==  INT_NEGATIVE  ||  ch  ==  INT_NEGATIVE);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  ==  INT_NEGATIVE  ||  ch  ==  INT_NEGATIVE);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  ==  INT_NEGATIVE  ||  ch  ==  INT_NEGATIVE);	  boolean    negative    =(ch    ==    INT_FLUSH    ||    ch    ==    INT_MINUS);    	non-compiled	[CE]  ';'  expected	1	None	replace
67	[BUG]  [BUGGY]  boolean  negative  =(ch  ==  INT_INHERITED  ||  ch  ==  INT_INHERITED);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  ==  INT_INHERITED  ||  ch  ==  INT_INHERITED);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  ==  INT_INHERITED  ||  ch  ==  INT_INHERITED);	  boolean    negative    =(ch    ==    INT_FLUSH    ||    ch    ==    INT_MINUS);    	non-compiled	[CE]  ';'  expected	1	None	replace
68	[BUG]  [BUGGY]  boolean  negative  =(_inputLen  ==  INT_LCURLY)&&(_inputBuffer.length  >  0);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(_inputLen  ==  INT_LCURLY)&&(_inputBuffer.length  >  0);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(_inputLen  ==  INT_LCURLY)&&(_inputBuffer.length  >  0);	  boolean    negative    =(ch    ==    INT_LCURLY)&&(_inputBuffer.length    >    0);    	non-compiled	[CE]  ';'  expected	16	None	replace
69	[BUG]  [BUGGY]  boolean  negative  =(_inputPtr  ==  _inputEnd)&&(_inputBuffer.length  >  0);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(_inputPtr  ==  _inputEnd)&&(_inputBuffer.length  >  0);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(_inputPtr  ==  _inputEnd)&&(_inputBuffer.length  >  0);	  boolean    negative    =(ch    ==    INT_LCURLY)&&(_inputBuffer.length    >    0);    	non-compiled	[CE]  ';'  expected	16	None	replace
70	[BUG]  [BUGGY]  boolean  negative  =(_inputPtr  >  INT_VALUE);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(_inputPtr  >  INT_VALUE);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(_inputPtr  >  INT_VALUE);	  boolean    negative    =(_inputPtr    ==    INT_VALUE);    	non-compiled	[CE]  ';'  expected	17	None	replace
71	[BUG]  [BUGGY]  _reportError( "Current  token( "+_tokenIncomplete+ ")not  a  value ");  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      {            [BUGGY]  _reportError( "Current  token( "+_tokenIncomplete+ ")not  a  value ");  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	_reportError( "Current  token( "+_tokenIncomplete+ ")not  a  value ");	  _reportError(   "Current    token(   "+_tokenIncomplete+   ")not    a    digit    or    a    value   ");    	non-compiled	[CE]  ';'  expected	26	None	replace
72	[BUG]  [BUGGY]  boolean  negative  =(_inputPtr  >  _inputEnd);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(_inputPtr  >  _inputEnd);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(_inputPtr  >  _inputEnd);	  boolean    negative    =(_inputPtr    ==    _inputEnd);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
73	[BUG]  [BUGGY]  Integer  ptr  =  _reader.readFully(_inputBuffer,  _inputPtr,  _inputLen);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {            [BUGGY]  Integer  ptr  =  _reader.readFully(_inputBuffer,  _inputPtr,  _inputLen);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	Integer  ptr  =  _reader.readFully(_inputBuffer,  _inputPtr,  _inputLen);	  Integer    ptr    =    _reader.readInt();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
74	[BUG]  [BUGGY]  Integer  ptr  =  _reader.readFully(_inputBuffer,  _inputPtr,  _inputEnd);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {            [BUGGY]  Integer  ptr  =  _reader.readFully(_inputBuffer,  _inputPtr,  _inputEnd);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	Integer  ptr  =  _reader.readFully(_inputBuffer,  _inputPtr,  _inputEnd);	  Integer    ptr    =    _reader.readInt();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
75	[BUG]  [BUGGY]  Integer  ptr  =  _reader.readFully(_inputBuffer,  _inputPtr);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {            [BUGGY]  Integer  ptr  =  _reader.readFully(_inputBuffer,  _inputPtr);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	Integer  ptr  =  _reader.readFully(_inputBuffer,  _inputPtr);	  Integer    ptr    =    _reader.readInt();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
76	[BUG]  [BUGGY]  boolean  negative  =(ch  >=  INT_LCURLY  ||  ch  ==  INT_LCURLY);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  >=  INT_LCURLY  ||  ch  ==  INT_LCURLY);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  >=  INT_LCURLY  ||  ch  ==  INT_LCURLY);	  boolean    negative    =(ch    ==    INT_LCURLY    ||    ch    ==    INT_LCURLY);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
77	[BUG]  [BUGGY]  boolean  negative  =(ch  >=  INT_QUOTE  ||  ch  ==  INT_QUOTE);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  >=  INT_QUOTE  ||  ch  ==  INT_QUOTE);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  >=  INT_QUOTE  ||  ch  ==  INT_QUOTE);	  boolean    negative    =(ch    ==    INT_QUOTE    ||    ch    >=    INT_QUOTE);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
78	[BUG]  [BUGGY]  boolean  negative  =(_tokenIncomplete  ==  INT_LCURLY)&&(_inputBuffer!=  null);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(_tokenIncomplete  ==  INT_LCURLY)&&(_inputBuffer!=  null);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(_tokenIncomplete  ==  INT_LCURLY)&&(_inputBuffer!=  null);	  boolean    negative    =(_tokenIncomplete    ==    INT_LCURLY);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
79	[BUG]  [BUGGY]  boolean  negative  =(ch  ==  INT_LBRACKET  ||  ch  ==  INT_QUOTE);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  ==  INT_LBRACKET  ||  ch  ==  INT_QUOTE);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  ==  INT_LBRACKET  ||  ch  ==  INT_QUOTE);	  boolean    negative    =(ch    ==    INT_LCURLY    ||    ch    ==    INT_QUOTE);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
80	[BUG]  [BUGGY]  boolean  negative  =(ch  >=  INT_NUMBER  ||  ch  ==  INT_FLUSH);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  >=  INT_NUMBER  ||  ch  ==  INT_FLUSH);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  >=  INT_NUMBER  ||  ch  ==  INT_FLUSH);	  boolean    negative    =(ch    ==    INT_NUMBER    ||    ch    ==    INT_FLUSH);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
81	[BUG]  [BUGGY]  int  negative  =(_tokenIncomplete  ||  ch  ==  INT_LBRACKET);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {            [BUGGY]  int  negative  =(_tokenIncomplete  ||  ch  ==  INT_LBRACKET);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	int  negative  =(_tokenIncomplete  ||  ch  ==  INT_LBRACKET);	  int    negative    =(ch    ==    INT_LBRACKET);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
82	[BUG]  [BUGGY]  int  negative  =(ch  ==  INT_NUMBER);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  int  negative  =(ch  ==  INT_NUMBER);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	int  negative  =(ch  ==  INT_NUMBER);	  int    negative    =(ch    ==    INT_LBRACKET);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
83	[BUG]  [BUGGY]  Integer  ptr  =  _reader.readInt(_inputBuffer,  _inputPtr,  _inputLen);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {            [BUGGY]  Integer  ptr  =  _reader.readInt(_inputBuffer,  _inputPtr,  _inputLen);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	Integer  ptr  =  _reader.readInt(_inputBuffer,  _inputPtr,  _inputLen);	  Integer    ptr    =    _reader.readInt();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
84	[BUG]  [BUGGY]  Integer  ptr  =  _reader.readInt(_inputBuffer,  _inputPtr);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {            [BUGGY]  Integer  ptr  =  _reader.readInt(_inputBuffer,  _inputPtr);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	Integer  ptr  =  _reader.readInt(_inputBuffer,  _inputPtr);	  Integer    ptr    =    _reader.readInt();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
85	[BUG]  [BUGGY]  Integer  ptr  =  _reader.readInt(ch);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {            [BUGGY]  Integer  ptr  =  _reader.readInt(ch);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	Integer  ptr  =  _reader.readInt(ch);	  Integer    ptr    =    _reader.readInt();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
86	[BUG]  [BUGGY]  int  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {            [BUGGY]  int  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	int  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER);	  boolean    negative    =(ch    ==    INT_NUMBER    ||    ch    ==    INT_NUMBER);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
87	[BUG]  [BUGGY]  boolean  negative  =(ch  >=  INT_NUMBER  ||  ch  ==  INT_NUMBER);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  >=  INT_NUMBER  ||  ch  ==  INT_NUMBER);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  >=  INT_NUMBER  ||  ch  ==  INT_NUMBER);	  boolean    negative    =(ch    ==    INT_NUMBER    ||    ch    ==    INT_NUMBER);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
88	[BUG]  [BUGGY]  int  negative  =(ch  ==  INT_QUOTE  ||  ch  ==  INT_FLUSH);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  int  negative  =(ch  ==  INT_QUOTE  ||  ch  ==  INT_FLUSH);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	int  negative  =(ch  ==  INT_QUOTE  ||  ch  ==  INT_FLUSH);	  int    negative    =(ch    ==    INT_MINUS    ||    ch    ==    INT_FLUSH);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
89	[BUG]  [BUGGY]  int  negative  =(ch  ==  INT_NEGATIVE  ||  ch  ==  INT_FLUSH);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      {            [BUGGY]  int  negative  =(ch  ==  INT_NEGATIVE  ||  ch  ==  INT_FLUSH);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	int  negative  =(ch  ==  INT_NEGATIVE  ||  ch  ==  INT_FLUSH);	  int    negative    =(ch    ==    INT_MINUS    ||    ch    ==    INT_FLUSH);    	non-compiled	[CE]  ';'  expected	29	None	replace
90	[BUG]  [BUGGY]  int  negative  =(ch  ==  INT_FLUSH  ||  ch  ==  INT_MINUS);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {            [BUGGY]  int  negative  =(ch  ==  INT_FLUSH  ||  ch  ==  INT_MINUS);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	int  negative  =(ch  ==  INT_FLUSH  ||  ch  ==  INT_MINUS);	  boolean    negative    =(ch    ==    INT_FLUSH    ||    ch    ==    INT_MINUS);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
91	[BUG]  [BUGGY]  boolean  negative  =(_tokenIncomplete  ==  INT_LCURLY)&&(_inputPtr  >=  _inputEnd);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(_tokenIncomplete  ==  INT_LCURLY)&&(_inputPtr  >=  _inputEnd);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(_tokenIncomplete  ==  INT_LCURLY)&&(_inputPtr  >=  _inputEnd);	  boolean    negative    =(_tokenIncomplete    ==    INT_LCURLY);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
92	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer.readInt(_inputBuffer,  _inputPtr);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {            [BUGGY]  Integer  ptr  =  _inputBuffer.readInt(_inputBuffer,  _inputPtr);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	Integer  ptr  =  _inputBuffer.readInt(_inputBuffer,  _inputPtr);	  Integer    ptr    =    _inputBuffer.readInt();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
93	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer.readInt(0);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {            [BUGGY]  Integer  ptr  =  _inputBuffer.readInt(0);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	Integer  ptr  =  _inputBuffer.readInt(0);	  Integer    ptr    =    _inputBuffer.readInt();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
94	[BUG]  [BUGGY]  boolean  negative  =(_inputPtr  >=  INT_VALUE);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(_inputPtr  >=  INT_VALUE);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(_inputPtr  >=  INT_VALUE);	  boolean    negative    =(_inputPtr    ==    INT_VALUE);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
95	[BUG]  [BUGGY]  int  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_SUBJECT);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {            [BUGGY]  int  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_SUBJECT);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	int  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_SUBJECT);	  boolean    negative    =(ch    ==    INT_NUMBER    ||    ch    ==    INT_SUBJECT);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
96	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[_inputPtr++].intValue();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {            [BUGGY]  Integer  ptr  =  _inputBuffer[_inputPtr++].intValue();  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	Integer  ptr  =  _inputBuffer[_inputPtr++].intValue();	  Integer    ptr    =    _inputBuffer[_inputPtr++];    	non-compiled	[CE]  <identifier>  expected	9	None	replace
97	[BUG]  [BUGGY]  int  negative  =(ch  ==  INT_VALUE  ||  ch  ==  INT_VALUE);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  int  negative  =(ch  ==  INT_VALUE  ||  ch  ==  INT_VALUE);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	int  negative  =(ch  ==  INT_VALUE  ||  ch  ==  INT_VALUE);	  boolean    negative    =(ch    ==    INT_VALUE    ||    ch    ==    INT_VALUE);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
98	[BUG]  [BUGGY]  boolean  negative  =(ch  >=  INT_QUOTE  ||  ch  >  INT_QUOTE);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  >=  INT_QUOTE  ||  ch  >  INT_QUOTE);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  >=  INT_QUOTE  ||  ch  >  INT_QUOTE);	  boolean    negative    =(ch    ==    INT_QUOTE    ||    ch    >=    INT_QUOTE);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
99	[BUG]  [BUGGY]  int  negative  =(ch  ==  DEFAULT_QUOTE  ||  ch  ==  INT_QUOTE);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {            [BUGGY]  int  negative  =(ch  ==  DEFAULT_QUOTE  ||  ch  ==  INT_QUOTE);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	int  negative  =(ch  ==  DEFAULT_QUOTE  ||  ch  ==  INT_QUOTE);	  boolean    negative    =(ch    ==    INT_QUOTE    ||    ch    ==    DEFAULT_QUOTE);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
100	[BUG]  [BUGGY]  int  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_QUOTE);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  int  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_QUOTE);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	int  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_QUOTE);	  boolean    negative    =(ch    ==    INT_NUMBER    ||    ch    ==    INT_QUOTE);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
101	[BUG]  [BUGGY]  boolean  negative  =(ch  ==  INT_LBRACKET  ||  ch  ==  INT_LBRACKET);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {            [BUGGY]  boolean  negative  =(ch  ==  INT_LBRACKET  ||  ch  ==  INT_LBRACKET);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	boolean  negative  =(ch  ==  INT_LBRACKET  ||  ch  ==  INT_LBRACKET);	  boolean    negative    =(ch    ==    INT_LCURLY    ||    ch    ==    INT_LCURLY);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
102	[BUG]  [BUGGY]  int  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_VALUE);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      {            [BUGGY]  int  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_VALUE);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	int  negative  =(ch  ==  INT_NUMBER  ||  ch  ==  INT_VALUE);	  boolean    negative    =(ch    ==    INT_NUMBER    ||    ch    ==    INT_VALUE);    	non-compiled	[CE]  ';'  expected	7	None	replace
103	[BUG]  [BUGGY]  int  negative  =(ch  ==  INT_VALUE  ||  ch  ==  INT_QUOTE);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      {            [BUGGY]  int  negative  =(ch  ==  INT_VALUE  ||  ch  ==  INT_QUOTE);  [BUGGY]      int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read  final  int  inputLen  =  _inputEnd;  dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	int  negative  =(ch  ==  INT_VALUE  ||  ch  ==  INT_QUOTE);	  boolean    negative    =(ch    ==    INT_VALUE    ||    ch    ==    INT_QUOTE);    	non-compiled	[CE]  ';'  expected	14	None	replace
