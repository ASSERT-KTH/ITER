bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr-1]  +  startPtr;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr-1]  +  startPtr;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr-1]  +  startPtr;	  final    int    inputLen    =    _inputBuffer[ptr-1];    	non-compiled	[CE]  <identifier>  expected	19	None	replace
2	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr-1]  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr-1]  +  1;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr-1]  +  1;	  final    int    inputLen    =    _inputBuffer[ptr-1];    	non-compiled	[CE]  <identifier>  expected	19	None	replace
3	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr-2];  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr-2];  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr-2];	  final    int    inputLen    =    _inputBuffer[ptr-1];    	non-compiled	[CE]  <identifier>  expected	19	None	replace
4	[BUG]  [BUGGY]  final  int  inputLen  =  _inputPtr.length  -  startPtr;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputPtr.length  -  startPtr;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputPtr.length  -  startPtr;	  final    int    inputLen    =    _inputPtr.length;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
5	[BUG]  [BUGGY]  final  int  inputLen  =  _inputPtr.length  -  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputPtr.length  -  1;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputPtr.length  -  1;	  final    int    inputLen    =    _inputPtr.length;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
6	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[_inputPtr  +  1];  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[_inputPtr  +  1];	  final    int    inputLen    =    _inputBuffer[_inputEnd    +    1];    	non-compiled	[CE]  <identifier>  expected	11	None	replace
7	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[_inputStart  +  1];  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[_inputStart  +  1];  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[_inputStart  +  1];	  final    int    inputLen    =    _inputBuffer[_inputEnd    +    1];    	non-compiled	[CE]  <identifier>  expected	11	None	replace
8	[BUG]  [BUGGY]  if(startPtr  >=  _inputEnd)  {  if(negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(startPtr  >=  _inputEnd)  {  if(negative)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(startPtr  >=  _inputEnd)  {  if(negative)  {  break  dummy_loop;  }	  if(ptr    >=    _inputEnd)    {    if(negative)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
9	[BUG]  [BUGGY]  if(_inputPtr  >=  startPtr)  {  if(negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(_inputPtr  >=  startPtr)  {  if(negative)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(_inputPtr  >=  startPtr)  {  if(negative)  {  break  dummy_loop;  }	  if(ptr    >=    _inputEnd)    {    if(negative)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
10	[BUG]  [BUGGY]  if(startPtr  ==  _inputEnd)  {  if(negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(startPtr  ==  _inputEnd)  {  if(negative)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(startPtr  ==  _inputEnd)  {  if(negative)  {  break  dummy_loop;  }	  if(ptr    >=    _inputEnd)    {    if(negative)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
11	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer.length  -  ptr;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer.length  -  ptr;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer.length  -  ptr;	  final    int    inputLen    =    _inputEnd    -    ptr;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
12	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr]  -  ptr;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr]  -  ptr;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr]  -  ptr;	  final    int    inputLen    =    _inputEnd    -    ptr;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
13	[BUG]  [BUGGY]  String  inputLen  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  String  inputLen  =  _inputBuffer[ptr++];  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	String  inputLen  =  _inputBuffer[ptr++];	  char    inputLen    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	29	None	replace
14	[BUG]  [BUGGY]  Character  inputLen  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  Character  inputLen  =  _inputBuffer[ptr++];  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	Character  inputLen  =  _inputBuffer[ptr++];	  char    inputLen    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	29	None	replace
15	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer.length  -  _inputEnd;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer.length  -  _inputEnd;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer.length  -  _inputEnd;	  final    int    inputLen    =    startPtr    -    _inputEnd;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
16	[BUG]  [BUGGY]  final  int  inputLen  =  ptr  -  startPtr  +  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  ptr  -  startPtr  +  1;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  ptr  -  startPtr  +  1;	  final    int    inputLen    =    ptr    -    startPtr;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
17	[BUG]  [BUGGY]  final  int  inputLen  =  startPtr  -  ptr;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  startPtr  -  ptr;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  startPtr  -  ptr;	  final    int    inputLen    =    ptr    -    startPtr;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
18	[BUG]  [BUGGY]  final  int  inputLen  =  ptr  -  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  ptr  -  1;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  ptr  -  1;	  final    int    inputLen    =    ptr    -    startPtr;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
19	[BUG]  [BUGGY]  final  int  inputLen  =  ptr  /  startPtr;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  ptr  /  startPtr;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  ptr  /  startPtr;	  final    int    inputLen    =    ptr    -    startPtr;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
20	[BUG]  [BUGGY]  if(ch  ==  INT_9  ||  ch  ==  INT_0)  {  if(negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(ch  ==  INT_9  ||  ch  ==  INT_0)  {  if(negative)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(ch  ==  INT_9  ||  ch  ==  INT_0)  {  if(negative)  {  break  dummy_loop;  }	  if(negative)    {    if(ch    ==    INT_0)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
21	[BUG]  [BUGGY]  if(_tokenIncomplete)  {  if(ch  ==  INT_0)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(_tokenIncomplete)  {  if(ch  ==  INT_0)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(_tokenIncomplete)  {  if(ch  ==  INT_0)  {  break  dummy_loop;  }	  if(negative)    {    if(ch    ==    INT_0)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
22	[BUG]  [BUGGY]  ||(ch  ==  INT_9  &&  ch  <  INT_0))  {  break  dummy_loop;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  ||(ch  ==  INT_9  &&  ch  <  INT_0))  {  break  dummy_loop;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	||(ch  ==  INT_9  &&  ch  <  INT_0))  {  break  dummy_loop;	  if(negative)    {    if(ch    ==    INT_0)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
23	[BUG]  [BUGGY]  ||(ch  ==  INT_0  &&  ch  <  =  INT_9))  {  break  dummy_loop;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  ||(ch  ==  INT_0  &&  ch  <  =  INT_9))  {  break  dummy_loop;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	||(ch  ==  INT_0  &&  ch  <  =  INT_9))  {  break  dummy_loop;	  if(negative)    {    if(ch    ==    INT_0)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
24	[BUG]  [BUGGY]  reader.write(_inputBuffer,  startPtr,  ch,  negative);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  reader.write(_inputBuffer,  startPtr,  ch,  negative);  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	reader.write(_inputBuffer,  startPtr,  ch,  negative);	  reader.write(_inputBuffer,    startPtr,    ch);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
25	[BUG]  [BUGGY]  reader.write(_inputBuffer,  startPtr,  ch  +  1);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  reader.write(_inputBuffer,  startPtr,  ch  +  1);  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	reader.write(_inputBuffer,  startPtr,  ch  +  1);	  reader.write(_inputBuffer,    startPtr,    ch);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
26	[BUG]  [BUGGY]  reader.write(ch,  startPtr,  _inputBuffer);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  reader.write(ch,  startPtr,  _inputBuffer);  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	reader.write(ch,  startPtr,  _inputBuffer);	  reader.write(_inputBuffer,    startPtr,    ch);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
27	[BUG]  [BUGGY]  final  String  inputLen  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  String  inputLen  =  _inputBuffer[ptr++];  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  String  inputLen  =  _inputBuffer[ptr++];	  final    char    inputLen    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	14	None	replace
28	[BUG]  [BUGGY]  if(startPtr  >=  _inputEnd)  {  if(!negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(startPtr  >=  _inputEnd)  {  if(!negative)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(startPtr  >=  _inputEnd)  {  if(!negative)  {  break  dummy_loop;  }	  if(ptr    >=    _inputEnd)    {    if(!negative)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
29	[BUG]  [BUGGY]  if(ptr  >=  startPtr)  {  if(!negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(ptr  >=  startPtr)  {  if(!negative)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(ptr  >=  startPtr)  {  if(!negative)  {  break  dummy_loop;  }	  if(ptr    >=    _inputEnd)    {    if(!negative)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
30	[BUG]  [BUGGY]  if(_inputPtr  >=  startPtr)  {  if(!negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(_inputPtr  >=  startPtr)  {  if(!negative)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(_inputPtr  >=  startPtr)  {  if(!negative)  {  break  dummy_loop;  }	  if(ptr    >=    _inputEnd)    {    if(!negative)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
31	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr]  +  fractLen;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr]  +  fractLen;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr]  +  fractLen;	  final    int    inputLen    =    _inputBuffer[ptr]    +    startPtr;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
32	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr]  &  startPtr;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr]  &  startPtr;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr]  &  startPtr;	  final    int    inputLen    =    _inputBuffer[ptr]    +    startPtr;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
33	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr]  *  startPtr;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr]  *  startPtr;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr]  *  startPtr;	  final    int    inputLen    =    _inputBuffer[ptr]    +    startPtr;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
34	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr]  -  startPtr;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr]  -  startPtr;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr]  -  startPtr;	  final    int    inputLen    =    _inputBuffer[ptr]    +    startPtr;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
35	[BUG]  [BUGGY]  final  char  dummy_loop  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  char  dummy_loop  =  _inputBuffer[ptr++];  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  char  dummy_loop  =  _inputBuffer[ptr++];	  final    int    dummy_loop    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	20	None	replace
36	[BUG]  [BUGGY]  char  dummy_loop  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  char  dummy_loop  =  _inputBuffer[ptr++];  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	char  dummy_loop  =  _inputBuffer[ptr++];	  final    int    dummy_loop    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	20	None	replace
37	[BUG]  [BUGGY]  final  int  dummy_loop  =  _inputBuffer[ptr++]  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  dummy_loop  =  _inputBuffer[ptr++]  +  1;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  dummy_loop  =  _inputBuffer[ptr++]  +  1;	  final    int    dummy_loop    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	20	None	replace
38	[BUG]  [BUGGY]  final  int  inputLen  =  _inputEnd  -  startPtr  :  _inputBuffer[ptr];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputEnd  -  startPtr  :  _inputBuffer[ptr];  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputEnd  -  startPtr  :  _inputBuffer[ptr];	  final    int    inputLen    =    negative?    _inputEnd    -    startPtr    :    _inputBuffer[ptr];    	non-compiled	[CE]  <identifier>  expected	4	None	replace
39	[BUG]  [BUGGY]  final  int  inputLen  =  negative?  _inputEnd  -  startPtr  :  _inputBuffer[ptr  +  1];  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  negative?  _inputEnd  -  startPtr  :  _inputBuffer[ptr  +  1];  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  negative?  _inputEnd  -  startPtr  :  _inputBuffer[ptr  +  1];	  final    int    inputLen    =    negative?    _inputEnd    -    startPtr    :    _inputBuffer[ptr];    	non-compiled	[CE]  <identifier>  expected	4	None	replace
40	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer.length  /  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer.length  /  1;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer.length  /  1;	  final    int    inputLen    =    _inputBuffer.length    +    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
41	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr]  &  INT_0;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr]  &  INT_0;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr]  &  INT_0;	  final    int    inputLen    =    _inputBuffer[ptr]    &    0xff;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
42	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr]  &  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr]  &  1;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr]  &  1;	  final    int    inputLen    =    _inputBuffer[ptr]    &    0xff;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
43	[BUG]  [BUGGY]  final  char  inputLen  =  _inputBuffer[ptr]  &  0xff;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  char  inputLen  =  _inputBuffer[ptr]  &  0xff;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  char  inputLen  =  _inputBuffer[ptr]  &  0xff;	  final    int    inputLen    =    _inputBuffer[ptr]    &    0xff;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
44	[BUG]  [BUGGY]  final  int  len  =  _inputBuffer[ptr++]  &  0xff;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  len  =  _inputBuffer[ptr++]  &  0xff;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  len  =  _inputBuffer[ptr++]  &  0xff;	  final    int    len    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	30	None	replace
45	[BUG]  [BUGGY]  final  int  len  =  _inputBuffer[ptr++]  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  len  =  _inputBuffer[ptr++]  +  1;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  len  =  _inputBuffer[ptr++]  +  1;	  final    int    len    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	30	None	replace
46	[BUG]  [BUGGY]  final  int  len  =  _inputBuffer[ptr++]  +  startPtr;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  len  =  _inputBuffer[ptr++]  +  startPtr;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  len  =  _inputBuffer[ptr++]  +  startPtr;	  final    int    len    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	30	None	replace
47	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr++]  &  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr++]  &  1;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr++]  &  1;	  final    int    inputLen    =    _inputBuffer[ptr++]    +    1;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
48	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr++]  -  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr++]  -  1;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr++]  -  1;	  final    int    inputLen    =    _inputBuffer[ptr++]    +    1;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
49	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr++]  *  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr++]  *  1;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr++]  *  1;	  final    int    inputLen    =    _inputBuffer[ptr++]    +    1;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
50	[BUG]  [BUGGY]  reader.write(_inputBuffer,  startPtr,  ptr  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  reader.write(_inputBuffer,  startPtr,  ptr  +  1);  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	reader.write(_inputBuffer,  startPtr,  ptr  +  1);	  reader.write(_inputBuffer,    startPtr,    ptr);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
51	[BUG]  [BUGGY]  reader.write(_inputBuffer,  startPtr,  ptr-1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  reader.write(_inputBuffer,  startPtr,  ptr-1);  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	reader.write(_inputBuffer,  startPtr,  ptr-1);	  reader.write(_inputBuffer,    startPtr,    ptr);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
52	[BUG]  [BUGGY]  final  int  inputLen  =  startPtr  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  startPtr  +  1;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  startPtr  +  1;	  final    int    inputLen    =    _inputPtr    +    1;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
53	[BUG]  [BUGGY]  final  int  inputLen  =  negative?  _inputPtr  :  _inputPtr  -  startPtr;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  negative?  _inputPtr  :  _inputPtr  -  startPtr;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  negative?  _inputPtr  :  _inputPtr  -  startPtr;	  final    int    inputLen    =    _inputPtr    -    startPtr;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
54	[BUG]  [BUGGY]  final  int  inputLen  =  startPtr  -  _inputPtr;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  startPtr  -  _inputPtr;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  startPtr  -  _inputPtr;	  final    int    inputLen    =    _inputPtr    -    startPtr;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
55	[BUG]  [BUGGY]  final  int  inputLen  =  _inputPtr  -  startPtr  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputPtr  -  startPtr  +  1;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputPtr  -  startPtr  +  1;	  final    int    inputLen    =    _inputPtr    -    startPtr;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
56	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr++]  -  _inputEnd;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr++]  -  _inputEnd;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr++]  -  _inputEnd;	  final    int    inputLen    =    ptr    -    _inputEnd;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
57	[BUG]  [BUGGY]  final  int  inputLen  =  negative?  _inputEnd  -  startPtr  +  1  :  ptr;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  negative?  _inputEnd  -  startPtr  +  1  :  ptr;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  negative?  _inputEnd  -  startPtr  +  1  :  ptr;	  final    int    inputLen    =    _inputEnd    -    startPtr    +    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
58	[BUG]  [BUGGY]  final  int  inputLen  =  negative  -  startPtr  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  negative  -  startPtr  +  1;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  negative  -  startPtr  +  1;	  final    int    inputLen    =    _inputEnd    -    startPtr    +    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
59	[BUG]  [BUGGY]  if(_tokenIncomplete)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(_tokenIncomplete)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(_tokenIncomplete)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    _inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
60	[BUG]  [BUGGY]  readFully(_inputBuffer,  startPtr,  ptr);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  readFully(_inputBuffer,  startPtr,  ptr);  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	readFully(_inputBuffer,  startPtr,  ptr);	  if(negative)    {    if(ptr    >=    _inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
61	[BUG]  [BUGGY]  readFully(_inputBuffer,  startPtr,  ch);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  readFully(_inputBuffer,  startPtr,  ch);  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	readFully(_inputBuffer,  startPtr,  ch);	  if(negative)    {    if(ptr    >=    _inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
62	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr].length  -  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr].length  -  1;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr].length  -  1;	  final    int    inputLen    =    _inputBuffer[ptr].length;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
63	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr++].length;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr++].length;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr++].length;	  final    int    inputLen    =    _inputBuffer[ptr].length;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
64	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr++]  +  fractLen;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr++]  +  fractLen;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr++]  +  fractLen;	  final    int    inputLen    =    _inputBuffer[ptr++]    +    startPtr;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
65	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr++]  &  startPtr;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr++]  &  startPtr;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr++]  &  startPtr;	  final    int    inputLen    =    _inputBuffer[ptr++]    +    startPtr;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
66	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr++]  +  ch;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr++]  +  ch;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr++]  +  ch;	  final    int    inputLen    =    _inputBuffer[ptr++]    +    startPtr;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
67	[BUG]  [BUGGY]  char[]  buf  =  _reader.getChars(ptr,  startPtr);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  char[]  buf  =  _reader.getChars(ptr,  startPtr);  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	char[]  buf  =  _reader.getChars(ptr,  startPtr);	  char[]    buf    =    _reader.getChars(startPtr,    startPtr);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
68	[BUG]  [BUGGY]  char[]  buf  =  _reader.getChars(startPtr,  startPtr  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  char[]  buf  =  _reader.getChars(startPtr,  startPtr  +  1);  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	char[]  buf  =  _reader.getChars(startPtr,  startPtr  +  1);	  char[]    buf    =    _reader.getChars(startPtr,    startPtr);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
69	[BUG]  [BUGGY]  if(ptr  ==  startPtr)  {  if(negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(ptr  ==  startPtr)  {  if(negative)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(ptr  ==  startPtr)  {  if(negative)  {  break  dummy_loop;  }	  if(ptr    >=    startPtr)    {    if(negative)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
70	[BUG]  [BUGGY]  final  int  inputLen  =  _inputEnd  -  startPtr  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputEnd  -  startPtr  :  _inputBuffer[ptr++];  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputEnd  -  startPtr  :  _inputBuffer[ptr++];	  final    int    inputLen    =    negative?    _inputEnd    -    startPtr    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	2	None	replace
71	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr++]?  _inputEnd  -  startPtr  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr++]?  _inputEnd  -  startPtr  :  _inputBuffer[ptr++];  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr++]?  _inputEnd  -  startPtr  :  _inputBuffer[ptr++];	  final    int    inputLen    =    negative?    _inputEnd    -    startPtr    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	2	None	replace
72	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer.length  -  startPtr  +  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer.length  -  startPtr  +  1;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer.length  -  startPtr  +  1;	  final    int    inputLen    =    _inputBuffer.length    -    startPtr;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
73	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer.length  -  2;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer.length  -  2;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer.length  -  2;	  final    int    inputLen    =    _inputBuffer.length    -    1;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
74	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer.length  -  1  +  startPtr;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer.length  -  1  +  startPtr;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer.length  -  1  +  startPtr;	  final    int    inputLen    =    _inputBuffer.length    -    1;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
75	[BUG]  [BUGGY]  char[]  buf  =  _reader.getChars(startPtr,  endPtr);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  char[]  buf  =  _reader.getChars(startPtr,  endPtr);  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	char[]  buf  =  _reader.getChars(startPtr,  endPtr);	  char[]    buf    =    _reader.getChars(startPtr,    ptr);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
76	[BUG]  [BUGGY]  char[]  buf  =  _reader.getChars(startPtr,  ptr  +  1);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  char[]  buf  =  _reader.getChars(startPtr,  ptr  +  1);  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	char[]  buf  =  _reader.getChars(startPtr,  ptr  +  1);	  char[]    buf    =    _reader.getChars(startPtr,    ptr);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
77	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr  +  1];  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr  +  1];  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr  +  1];	  final    int    inputLen    =    ptr    +    1;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
78	[BUG]  [BUGGY]  int  inputLen  =  _inputBuffer[ptr++]  +  startPtr;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  int  inputLen  =  _inputBuffer[ptr++]  +  startPtr;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	int  inputLen  =  _inputBuffer[ptr++]  +  startPtr;	  int    inputLen    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	28	None	replace
79	[BUG]  [BUGGY]  int  inputLen  =  _inputBuffer[ptr++]  &  0xff;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  int  inputLen  =  _inputBuffer[ptr++]  &  0xff;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	int  inputLen  =  _inputBuffer[ptr++]  &  0xff;	  int    inputLen    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	28	None	replace
80	[BUG]  [BUGGY]  final  int  inputLen  =  ptr  +  startPtr;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  ptr  +  startPtr;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  ptr  +  startPtr;	  final    int    inputLen    =    ptr    +    1;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
81	[BUG]  [BUGGY]  final  int  inputLen  =  ptr  -  _inputBuffer.length;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  ptr  -  _inputBuffer.length;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  ptr  -  _inputBuffer.length;	  final    int    inputLen    =    _inputBuffer.length    -    startPtr;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
82	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr++]  +  startPtr  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr++]  +  startPtr  +  1;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr++]  +  startPtr  +  1;	  final    int    inputLen    =    _inputBuffer[ptr++]    +    startPtr;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
83	[BUG]  [BUGGY]  final  int  inputLen  =  startPtr  -  _inputEnd  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  startPtr  -  _inputEnd  +  1;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  startPtr  -  _inputEnd  +  1;	  final    int    inputLen    =    _inputEnd    -    startPtr    +    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
84	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr]  &  0xff  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr]  &  0xff  +  1;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr]  &  0xff  +  1;	  final    int    inputLen    =    _inputBuffer[ptr]    &    0xff;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
85	[BUG]  [BUGGY]  final  int  inputLen  =  negative  -  _inputEnd;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  negative  -  _inputEnd;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  negative  -  _inputEnd;	  final    int    inputLen    =    startPtr    -    _inputEnd;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
86	[BUG]  [BUGGY]  final  int  inputLen  =  _inputPtr  -  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputPtr  -  1;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputPtr  -  1;	  final    int    inputLen    =    _inputEnd    -    1;    	non-compiled	[CE]  <identifier>  expected	21	None	replace
87	[BUG]  [BUGGY]  final  int  dummy_loop  =  _inputBuffer[ptr++]  +  startPtr;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  dummy_loop  =  _inputBuffer[ptr++]  +  startPtr;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  dummy_loop  =  _inputBuffer[ptr++]  +  startPtr;	  final    int    dummy_loop    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	20	None	replace
88	[BUG]  [BUGGY]  final  int  inputLen  =  ptr  -  startPtr-1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  ptr  -  startPtr-1;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  ptr  -  startPtr-1;	  final    int    inputLen    =    ptr    -    startPtr;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
89	[BUG]  [BUGGY]  final  int  inputLen  =  _inputPtr  +  startPtr;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputPtr  +  startPtr;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputPtr  +  startPtr;	  final    int    inputLen    =    _inputPtr    +    1;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
90	[BUG]  [BUGGY]  final  int  inputLen  =  _inputPtr  -  ptr;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputPtr  -  ptr;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputPtr  -  ptr;	  final    int    inputLen    =    ptr    -    _inputEnd;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
91	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(negative)  {  if(ch  ==  INT_0)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(negative)  {  if(ch  ==  INT_0)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(_inputPtr  >=  _inputEnd)  {  if(negative)  {  if(ch  ==  INT_0)  {  break  dummy_loop;  }	  if(negative)    {    if(ch    ==    INT_0)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
92	[BUG]  [BUGGY]  if(_tokenIncomplete)  {  if(ptr  ==  _inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(_tokenIncomplete)  {  if(ptr  ==  _inputEnd)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(_tokenIncomplete)  {  if(ptr  ==  _inputEnd)  {  break  dummy_loop;  }	  if(negative)    {    if(ch    ==    INT_0)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
93	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(negative)  {  if(ch  ==  INT_0  ||  ch  ==  INT_9)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(negative)  {  if(ch  ==  INT_0  ||  ch  ==  INT_9)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(_inputPtr  >=  _inputEnd)  {  if(negative)  {  if(ch  ==  INT_0  ||  ch  ==  INT_9)  {  break  dummy_loop;  }	  if(negative)    {    if(ch    ==    INT_0)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
94	[BUG]  [BUGGY]  final  char  inputLen  =  _inputBuffer[ptr++]  +  startPtr;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  char  inputLen  =  _inputBuffer[ptr++]  +  startPtr;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  char  inputLen  =  _inputBuffer[ptr++]  +  startPtr;	  final    char    inputLen    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	14	None	replace
95	[BUG]  [BUGGY]  if(startPtr  >=  _inputEnd)  {  if(positive)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(startPtr  >=  _inputEnd)  {  if(positive)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(startPtr  >=  _inputEnd)  {  if(positive)  {  break  dummy_loop;  }	  if(ptr    >=    _inputEnd)    {    if(negative)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
96	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer.length  *  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer.length  *  1;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer.length  *  1;	  final    int    inputLen    =    _inputBuffer.length    +    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
97	[BUG]  [BUGGY]  final  int  inputLen  =  _inputEnd.length;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputEnd.length;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputEnd.length;	  final    int    inputLen    =    _inputPtr.length;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
98	[BUG]  [BUGGY]  if(startPtr  >=  _inputEnd)  {  if(negative)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(startPtr  >=  _inputEnd)  {  if(negative)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(startPtr  >=  _inputEnd)  {  if(negative)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    _inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
99	[BUG]  [BUGGY]  if(startPtr  ==  _inputEnd)  {  if(negative)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(startPtr  ==  _inputEnd)  {  if(negative)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(startPtr  ==  _inputEnd)  {  if(negative)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    _inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
100	[BUG]  [BUGGY]  if(startPtr  >=  _inputEnd)  {  if(negative)  {  if(ptr  <  _inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(startPtr  >=  _inputEnd)  {  if(negative)  {  if(ptr  <  _inputEnd)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(startPtr  >=  _inputEnd)  {  if(negative)  {  if(ptr  <  _inputEnd)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    _inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
101	[BUG]  [BUGGY]  reader.write(_inputBuffer,  startPtr,  ptr  -  startPtr);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  reader.write(_inputBuffer,  startPtr,  ptr  -  startPtr);  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	reader.write(_inputBuffer,  startPtr,  ptr  -  startPtr);	  reader.write(_inputBuffer,    startPtr,    ptr);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
102	[BUG]  [BUGGY]  final  int  inputLen  =  negative?  startPtr  -  startPtr  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  negative?  startPtr  -  startPtr  :  _inputBuffer[ptr++];  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  negative?  startPtr  -  startPtr  :  _inputBuffer[ptr++];	  final    int    inputLen    =    negative?    _inputEnd    -    startPtr    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	2	None	replace
103	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr].length  -  startPtr;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr].length  -  startPtr;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr].length  -  startPtr;	  final    int    inputLen    =    _inputBuffer[ptr].length;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
104	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr].length  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr].length  +  1;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr].length  +  1;	  final    int    inputLen    =    _inputBuffer[ptr].length;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
105	[BUG]  [BUGGY]  if(startPtr  >=  ptr)  {  if(negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(startPtr  >=  ptr)  {  if(negative)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(startPtr  >=  ptr)  {  if(negative)  {  break  dummy_loop;  }	  if(ptr    >=    startPtr)    {    if(negative)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
106	[BUG]  [BUGGY]  final  int  inputLen  =  negative  -  startPtr;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  negative  -  startPtr;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  negative  -  startPtr;	  final    int    inputLen    =    _inputPtr    -    startPtr;    	non-compiled	[CE]  <identifier>  expected	36	None	replace
107	[BUG]  [BUGGY]  if(startPtr  ==  _inputEnd)  {  if(!negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(startPtr  ==  _inputEnd)  {  if(!negative)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(startPtr  ==  _inputEnd)  {  if(!negative)  {  break  dummy_loop;  }	  if(ptr    >=    _inputEnd)    {    if(!negative)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
108	[BUG]  [BUGGY]  char[]  buf  =  _reader.getChars(ch,  startPtr);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  char[]  buf  =  _reader.getChars(ch,  startPtr);  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	char[]  buf  =  _reader.getChars(ch,  startPtr);	  char[]    buf    =    _reader.getChars(startPtr,    startPtr);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
109	[BUG]  [BUGGY]  final  int  inputLen  =  _inputPtr  -  _inputEnd;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputPtr  -  _inputEnd;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputPtr  -  _inputEnd;	  final    int    inputLen    =    ptr    -    _inputEnd;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
110	[BUG]  [BUGGY]  final  int  len  =  _inputBuffer[ptr].length;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  len  =  _inputBuffer[ptr].length;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  len  =  _inputBuffer[ptr].length;	  final    int    inputLen    =    _inputBuffer[ptr].length;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
111	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(ch  ==  INT_QUOTE)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    _inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
112	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    _inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
113	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(ch  ==  INT_NUMBER)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(ch  ==  INT_NUMBER)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    _inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
114	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(_inputPtr  >=  _inputEnd)  {  break  dummy_loop;  }	  if(negative)    {    if(ptr    >=    _inputEnd)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
115	[BUG]  [BUGGY]  if(startPtr  <  _inputEnd)  {  if(negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(startPtr  <  _inputEnd)  {  if(negative)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(startPtr  <  _inputEnd)  {  if(negative)  {  break  dummy_loop;  }	  if(ptr    >=    _inputEnd)    {    if(negative)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
116	[BUG]  [BUGGY]  int  inputLen  =  _inputBuffer[ptr++].length;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  int  inputLen  =  _inputBuffer[ptr++].length;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	int  inputLen  =  _inputBuffer[ptr++].length;	  int    inputLen    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	28	None	replace
117	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(negative)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(_inputPtr  >=  _inputEnd)  {  if(negative)  {  break  dummy_loop;  }	  if(negative)    {    if(ch    ==    INT_0)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
118	[BUG]  [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_9)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_9)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(ch  ==  INT_0  ||  ch  ==  INT_9)  {  break  dummy_loop;  }	  if(negative)    {    if(ch    ==    INT_0)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
119	[BUG]  [BUGGY]  final  int  len  =(_inputPtr  <  _inputEnd)?  _inputBuffer[ptr++]  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  len  =(_inputPtr  <  _inputEnd)?  _inputBuffer[ptr++]  :  _inputBuffer[ptr++];  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  len  =(_inputPtr  <  _inputEnd)?  _inputBuffer[ptr++]  :  _inputBuffer[ptr++];	  final    int    len    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	30	None	replace
120	[BUG]  [BUGGY]  int  len  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  int  len  =  _inputBuffer[ptr++];  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	int  len  =  _inputBuffer[ptr++];	  final    int    len    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	30	None	replace
121	[BUG]  [BUGGY]  char  len  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  char  len  =  _inputBuffer[ptr++];  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	char  len  =  _inputBuffer[ptr++];	  final    int    len    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	30	None	replace
122	[BUG]  [BUGGY]  final  char  inputLen  =(_inputPtr  <  _inputEnd)?  _inputBuffer[ptr++]  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  char  inputLen  =(_inputPtr  <  _inputEnd)?  _inputBuffer[ptr++]  :  _inputBuffer[ptr++];  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  char  inputLen  =(_inputPtr  <  _inputEnd)?  _inputBuffer[ptr++]  :  _inputBuffer[ptr++];	  final    char    inputLen    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	14	None	replace
123	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr++]  -  startPtr;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr++]  -  startPtr;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr++]  -  startPtr;	  final    int    inputLen    =    _inputBuffer[ptr++]    +    startPtr;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
124	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr++]  +  _inputEnd;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr++]  +  _inputEnd;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr++]  +  _inputEnd;	  final    int    inputLen    =    _inputBuffer[ptr++]    +    startPtr;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
125	[BUG]  [BUGGY]  int  dummy_loop  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  int  dummy_loop  =  _inputBuffer[ptr++];  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	int  dummy_loop  =  _inputBuffer[ptr++];	  final    int    dummy_loop    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	20	None	replace
126	[BUG]  [BUGGY]  char[]  buf  =  _reader.getChars(0,  ptr);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  char[]  buf  =  _reader.getChars(0,  ptr);  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	char[]  buf  =  _reader.getChars(0,  ptr);	  char[]    buf    =    _reader.getChars(startPtr,    ptr);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
127	[BUG]  [BUGGY]  if(ptr  >=  startPtr)  {  if(_inputEnd  <  =  0)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(ptr  >=  startPtr)  {  if(_inputEnd  <  =  0)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(ptr  >=  startPtr)  {  if(_inputEnd  <  =  0)  {  break  dummy_loop;  }	  if(ptr    >=    startPtr)    {    if(negative)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
128	[BUG]  [BUGGY]  final  int  inputLen  =  negative?  _inputEnd  :  startPtr  -  _inputEnd;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  negative?  _inputEnd  :  startPtr  -  _inputEnd;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  negative?  _inputEnd  :  startPtr  -  _inputEnd;	  final    int    inputLen    =    startPtr    -    _inputEnd;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
129	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr  -  startPtr  :  negative?  _inputEnd  -  startPtr  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr  -  startPtr  :  negative?  _inputEnd  -  startPtr  :  _inputBuffer[ptr++];  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr  -  startPtr  :  negative?  _inputEnd  -  startPtr  :  _inputBuffer[ptr++];	  final    int    inputLen    =    negative?    _inputEnd    -    startPtr    :    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	2	None	replace
130	[BUG]  [BUGGY]  reader.write(_inputBuffer,  ptr,  ch);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  reader.write(_inputBuffer,  ptr,  ch);  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	reader.write(_inputBuffer,  ptr,  ch);	  reader.write(_inputBuffer,    startPtr,    ch);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
131	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[_inputEnd  +  startPtr];  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  _inputBuffer[_inputEnd  +  startPtr];  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[_inputEnd  +  startPtr];	  final    int    inputLen    =    _inputBuffer[_inputEnd    +    1];    	non-compiled	[CE]  <identifier>  expected	11	None	replace
132	[BUG]  [BUGGY]  if(startPtr  <  _inputEnd)  {  if(!negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(startPtr  <  _inputEnd)  {  if(!negative)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(startPtr  <  _inputEnd)  {  if(!negative)  {  break  dummy_loop;  }	  if(ptr    >=    _inputEnd)    {    if(!negative)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
133	[BUG]  [BUGGY]  if(ptr  <  startPtr)  {  if(!negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  if(ptr  <  startPtr)  {  if(!negative)  {  break  dummy_loop;  }  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(ptr  <  startPtr)  {  if(!negative)  {  break  dummy_loop;  }	  if(ptr    >=    _inputEnd)    {    if(!negative)    {    break    dummy_loop;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
134	[BUG]  [BUGGY]  final  int  inputLen  =  negative?  ptr  -  startPtr  :  startPtr;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  negative?  ptr  -  startPtr  :  startPtr;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  negative?  ptr  -  startPtr  :  startPtr;	  final    int    inputLen    =    ptr    -    startPtr;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
135	[BUG]  [BUGGY]  final  int  inputLen  =  ptr  -  _inputPtr;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  final  int  inputLen  =  ptr  -  _inputPtr;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  ptr  -  _inputPtr;	  final    int    inputLen    =    ptr    -    startPtr;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
136	[BUG]  [BUGGY]  int  inputLen  =  _inputBuffer[ptr]  &  0xff;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  int  inputLen  =  _inputBuffer[ptr]  &  0xff;  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	int  inputLen  =  _inputBuffer[ptr]  &  0xff;	  final    int    inputLen    =    _inputBuffer[ptr]    &    0xff;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
137	[BUG]  [BUGGY]  int  inputLen  =  _inputBuffer[ptr-1];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read      [BUGGY]  int  inputLen  =  _inputBuffer[ptr-1];  [BUGGY]        dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	int  inputLen  =  _inputBuffer[ptr-1];	  final    int    inputLen    =    _inputBuffer[ptr-1];    	non-compiled	[CE]  <identifier>  expected	19	None	replace
