bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  int  inputLen  =  ptr  -  startPtr;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  final  int  inputLen  =  ptr  -  startPtr;  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  ptr  -  startPtr;	  final    int    inputLen    =    _inputEnd    -    startPtr;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
2	[BUG]  [BUGGY]  final  int  inputLen  =  negative?  _inputEnd  -  startPtr  :  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  final  int  inputLen  =  negative?  _inputEnd  -  startPtr  :  _inputBuffer[ptr++];  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  negative?  _inputEnd  -  startPtr  :  _inputBuffer[ptr++];	  final    int    inputLen    =    _inputEnd    -    startPtr;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
3	[BUG]  [BUGGY]  final  int  inputLen  =  _inputEnd  -  startPtr  +  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  final  int  inputLen  =  _inputEnd  -  startPtr  +  1;  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputEnd  -  startPtr  +  1;	  final    int    inputLen    =    _inputEnd    -    startPtr;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
4	[BUG]  [BUGGY]  final  int  inputLen  =  negative?  _inputEnd  -  startPtr  :  _inputBuffer[ptr];  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  final  int  inputLen  =  negative?  _inputEnd  -  startPtr  :  _inputBuffer[ptr];  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  negative?  _inputEnd  -  startPtr  :  _inputBuffer[ptr];	  final    int    inputLen    =    _inputEnd    -    startPtr;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
5	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr]  &  0xff;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr]  &  0xff;  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr]  &  0xff;	  final    int    inputLen    =    _inputBuffer[ptr];    	non-compiled	[CE]  <identifier>  expected	4	None	replace
6	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr]  +  startPtr;  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr]  +  startPtr;  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr]  +  startPtr;	  final    int    inputLen    =    _inputBuffer[ptr];    	non-compiled	[CE]  <identifier>  expected	4	None	replace
7	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer.length  -  startPtr;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  final  int  inputLen  =  _inputBuffer.length  -  startPtr;  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer.length  -  startPtr;	  final    int    inputLen    =    _inputBuffer.length;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
8	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer.length  -  1;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  final  int  inputLen  =  _inputBuffer.length  -  1;  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer.length  -  1;	  final    int    inputLen    =    _inputBuffer.length;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
9	[BUG]  [BUGGY]  final  int  inputLen  =  ptr  +  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  final  int  inputLen  =  ptr  +  1;  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  ptr  +  1;	  final    int    inputLen    =    _inputEnd    +    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
10	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer.length  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  final  int  inputLen  =  _inputBuffer.length  +  1;  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer.length  +  1;	  final    int    inputLen    =    _inputEnd    +    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
11	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[_inputEnd  +  1];  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  final  int  inputLen  =  _inputBuffer[_inputEnd  +  1];  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[_inputEnd  +  1];	  final    int    inputLen    =    _inputEnd    +    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
12	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr++]  +  startPtr;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr++]  +  startPtr;  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr++]  +  startPtr;	  final    int    inputLen    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	2	None	replace
13	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr++]  +  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr++]  +  1;  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr++]  +  1;	  final    int    inputLen    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	2	None	replace
14	[BUG]  [BUGGY]  final  char  inputLen  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  final  char  inputLen  =  _inputBuffer[ptr++];  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  char  inputLen  =  _inputBuffer[ptr++];	  final    int    inputLen    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	2	None	replace
15	[BUG]  [BUGGY]  char[]  buf  =  _reader.getChars(startPtr,  startPtr);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  char[]  buf  =  _reader.getChars(startPtr,  startPtr);  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	char[]  buf  =  _reader.getChars(startPtr,  startPtr);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
16	[BUG]  [BUGGY]  reader.write(_inputBuffer,  startPtr,  ptr);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  reader.write(_inputBuffer,  startPtr,  ptr);  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	reader.write(_inputBuffer,  startPtr,  ptr);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
17	[BUG]  [BUGGY]  reader.write(_inputBuffer,  startPtr,  ch);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  reader.write(_inputBuffer,  startPtr,  ch);  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	reader.write(_inputBuffer,  startPtr,  ch);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
18	[BUG]  [BUGGY]  char[]  buf  =  _reader.getChars(startPtr,  ptr);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  char[]  buf  =  _reader.getChars(startPtr,  ptr);  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	char[]  buf  =  _reader.getChars(startPtr,  ptr);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
19	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr-1];  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr-1];  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr-1];	  final    int    inputLen    =    _inputBuffer[ptr];    	non-compiled	[CE]  <identifier>  expected	4	None	replace
20	[BUG]  [BUGGY]  final  int  dummy_loop  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  final  int  dummy_loop  =  _inputBuffer[ptr++];  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  dummy_loop  =  _inputBuffer[ptr++];	  final    int    inputLen    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	2	None	replace
21	[BUG]  [BUGGY]  final  int  inputLen  =  _inputEnd  -  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  final  int  inputLen  =  _inputEnd  -  1;  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputEnd  -  1;	  final    int    inputLen    =    _inputEnd    +    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
22	[BUG]  [BUGGY]  final  int  inputLen  =  _inputPtr  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  final  int  inputLen  =  _inputPtr  +  1;  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputPtr  +  1;	  final    int    inputLen    =    _inputEnd    +    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
23	[BUG]  [BUGGY]  final  int  inputLen  =  startPtr  -  _inputEnd;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  final  int  inputLen  =  startPtr  -  _inputEnd;  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  startPtr  -  _inputEnd;	  final    int    inputLen    =    _inputEnd    -    startPtr;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
24	[BUG]  [BUGGY]  final  int  inputLen  =  ptr  -  _inputEnd;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  final  int  inputLen  =  ptr  -  _inputEnd;  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  ptr  -  _inputEnd;	  final    int    inputLen    =    _inputEnd    -    startPtr;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
25	[BUG]  [BUGGY]  if(negative)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  if(negative)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(negative)  {  if(ptr  >=  _inputEnd)  {  break  dummy_loop;  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
26	[BUG]  [BUGGY]  if(negative)  {  if(ch  ==  INT_0)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  if(negative)  {  if(ch  ==  INT_0)  {  break  dummy_loop;  }  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(negative)  {  if(ch  ==  INT_0)  {  break  dummy_loop;  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
27	[BUG]  [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr].length;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  final  int  inputLen  =  _inputBuffer[ptr].length;  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputBuffer[ptr].length;	  final    int    inputLen    =    _inputBuffer[ptr];    	non-compiled	[CE]  <identifier>  expected	4	None	replace
28	[BUG]  [BUGGY]  int  inputLen  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  int  inputLen  =  _inputBuffer[ptr++];  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	int  inputLen  =  _inputBuffer[ptr++];	  final    int    inputLen    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	2	None	replace
29	[BUG]  [BUGGY]  char  inputLen  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  char  inputLen  =  _inputBuffer[ptr++];  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	char  inputLen  =  _inputBuffer[ptr++];	  final    int    inputLen    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	2	None	replace
30	[BUG]  [BUGGY]  final  int  len  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  final  int  len  =  _inputBuffer[ptr++];  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  len  =  _inputBuffer[ptr++];	  final    int    inputLen    =    _inputBuffer[ptr++];    	non-compiled	[CE]  <identifier>  expected	2	None	replace
31	[BUG]  [BUGGY]  final  int  inputLen  =  _inputPtr.length;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  final  int  inputLen  =  _inputPtr.length;  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputPtr.length;	  final    int    inputLen    =    _inputBuffer.length;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
32	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  if(negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  if(ptr  >=  _inputEnd)  {  if(negative)  {  break  dummy_loop;  }  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(ptr  >=  _inputEnd)  {  if(negative)  {  break  dummy_loop;  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
33	[BUG]  [BUGGY]  if(ptr  >=  startPtr)  {  if(negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  if(ptr  >=  startPtr)  {  if(negative)  {  break  dummy_loop;  }  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(ptr  >=  startPtr)  {  if(negative)  {  break  dummy_loop;  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
34	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  if(!negative)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  if(ptr  >=  _inputEnd)  {  if(!negative)  {  break  dummy_loop;  }  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	if(ptr  >=  _inputEnd)  {  if(!negative)  {  break  dummy_loop;  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
35	[BUG]  [BUGGY]  final  int  inputLen  =  _inputEnd  -  ptr;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  final  int  inputLen  =  _inputEnd  -  ptr;  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputEnd  -  ptr;	  final    int    inputLen    =    _inputEnd    -    startPtr;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
36	[BUG]  [BUGGY]  final  int  inputLen  =  _inputPtr  -  startPtr;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {      boolean  negative  =  (ch  ==  INT_MINUS);  int  ptr  =  _inputPtr;  int  startPtr  =  ptr-1;  //  to  include  sign/digit  already  read    [BUGGY]  final  int  inputLen  =  _inputPtr  -  startPtr;  [BUGGY]      dummy_loop:  do  {  //  dummy  loop,  to  be  able  to  break  out  if  (negative)  {  //  need  to  read  the  next  digit  if  (ptr  >=  _inputEnd)  {  break  dummy_loop;  }  ch  =  _inputBuffer[ptr++];  if  (ch  >  INT_9  ||  ch  <  INT_0)  {  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	final  int  inputLen  =  _inputPtr  -  startPtr;	  final    int    inputLen    =    _inputPtr;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
