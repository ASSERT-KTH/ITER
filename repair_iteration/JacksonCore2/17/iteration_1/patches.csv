bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_NUMBER_FLOAT)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_NUMBER_FLOAT)  {  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_NUMBER_FLOAT)  {	  if(ch    ==    INT_NUMBER_INT    ||    ch    ==    INT_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
2	[BUG]  [BUGGY]  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DEFAULT)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DEFAULT)  {  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DEFAULT)  {	  if(ch    ==    INT_DEFAULT    ||    ch    ==    INT_DECIMAL)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
3	[BUG]  [BUGGY]  if(ch  ==  INT_Decimal  ||  ch  ==  INT_DECIMAL)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  if(ch  ==  INT_Decimal  ||  ch  ==  INT_DECIMAL)  {  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_Decimal  ||  ch  ==  INT_DECIMAL)  {	  if(ch    ==    INT_DEFAULT    ||    ch    ==    INT_DECIMAL)    {    	non-compiled	[CE]  ';'  expected	6	None	replace
4	[BUG]  [BUGGY]  if(ch  ==  INT_DEFAULT  ||  ch  ==  INT_DECIMAL  ||  fractLen  ==  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  if(ch  ==  INT_DEFAULT  ||  ch  ==  INT_DECIMAL  ||  fractLen  ==  0)  {  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_DEFAULT  ||  ch  ==  INT_DECIMAL  ||  fractLen  ==  0)  {	  if(ch    ==    INT_DEFAULT    ||    ch    ==    INT_DECIMAL)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
5	[BUG]  [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_10)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_10)  {  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_0  ||  ch  ==  INT_10)  {	  if(ch    ==    INT_0    ||    ch    ==    INT_0)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
6	[BUG]  [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_9)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_9)  {  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_0  ||  ch  ==  INT_9)  {	  if(ch    ==    INT_0    ||    ch    ==    INT_0)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
7	[BUG]  [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_1)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_1)  {  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_0  ||  ch  ==  INT_1)  {	  if(ch    ==    INT_0    ||    ch    ==    INT_0)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
8	[BUG]  [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_BLOCK)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_BLOCK)  {  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_0  ||  ch  ==  INT_BLOCK)  {	  if(ch    ==    INT_0    ||    ch    ==    INT_0)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
9	[BUG]  [BUGGY]  if(ch  ==  INT_PLUS  ||  ch  ==  INT_MINUS)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  if(ch  ==  INT_PLUS  ||  ch  ==  INT_MINUS)  {  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_PLUS  ||  ch  ==  INT_MINUS)  {	  if(ch    ==    INT_MINUS    ||    ch    ==    INT_PLUS)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
10	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_NUMBER_INT)  {  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_NUMBER_INT)  {	  if(ch    ==    INT_DECIMAL    ||    ch    ==    INT_DECIMAL)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
11	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  if(ch  ==  INT_NUMBER)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_NUMBER)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
12	[BUG]  [BUGGY]  if(expLen  >  0)  {  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  if(expLen  >  0)  {  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  break  dummy_loop;  }  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(expLen  >  0)  {  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  break  dummy_loop;  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
13	[BUG]  [BUGGY]  int  ptr  =(int)_inputBuffer[ptr++];  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  int  ptr  =(int)_inputBuffer[ptr++];  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	int  ptr  =(int)_inputBuffer[ptr++];	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
14	[BUG]  [BUGGY]  if(expLen  >  0)  {  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  if(expLen  >  0)  {  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(expLen  >  0)  {  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
15	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  <  INT_0  ||  ch  >  INT_9)  {	  if(ch    ==    INT_0    ||    ch    ==    INT_0)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
16	[BUG]  [BUGGY]  int  inputLen  =  _inputBuffer[ptr++];  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  int  inputLen  =  _inputBuffer[ptr++];  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	int  inputLen  =  _inputBuffer[ptr++];	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
17	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++];  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++];  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	Integer  ptr  =  _inputBuffer[ptr++];	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
18	[BUG]  [BUGGY]  int  ptr  =  _reader.read();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  int  ptr  =  _reader.read();  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	int  ptr  =  _reader.read();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
19	[BUG]  [BUGGY]  int  ptr  =(int)_reader.readInt();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  int  ptr  =(int)_reader.readInt();  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	int  ptr  =(int)_reader.readInt();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
20	[BUG]  [BUGGY]  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DeFAULT)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DeFAULT)  {  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DeFAULT)  {	  if(ch    ==    INT_DEFAULT    ||    ch    ==    INT_DECIMAL)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
21	[BUG]  [BUGGY]  if(ch  ==  INT_PLUS  ||  ch  ==  INT_PLUS)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  if(ch  ==  INT_PLUS  ||  ch  ==  INT_PLUS)  {  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_PLUS  ||  ch  ==  INT_PLUS)  {	  if(ch    ==    INT_QUOTE    ||    ch    ==    INT_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
22	[BUG]  [BUGGY]  if(ch  ==  INT_e  ||  ch  ==  INT_E)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  if(ch  ==  INT_e  ||  ch  ==  INT_E)  {  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_e  ||  ch  ==  INT_E)  {	  if(ch    ==    INT_0    ||    ch    ==    INT_0)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
23	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_DECIMAL)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_DECIMAL)  {  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_DECIMAL)  {	  if(ch    ==    INT_DEFAULT    ||    ch    ==    INT_DECIMAL)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
24	[BUG]  [BUGGY]  if(ch  ==  INT_SIZE  ||  ch  ==  INT_SIZE)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  if(ch  ==  INT_SIZE  ||  ch  ==  INT_SIZE)  {  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_SIZE  ||  ch  ==  INT_SIZE)  {	  if(ch    ==    INT_NUMBER_INT    ||    ch    ==    INT_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
25	[BUG]  [BUGGY]  if(ch  ==  INT_DECIMAL_ERROR  ||  ch  ==  INT_DECIMAL_ERROR)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  if(ch  ==  INT_DECIMAL_ERROR  ||  ch  ==  INT_DECIMAL_ERROR)  {  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_DECIMAL_ERROR  ||  ch  ==  INT_DECIMAL_ERROR)  {	  if(ch    ==    INT_NUMBER_INT    ||    ch    ==    INT_NUMBER)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
26	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(inputPtr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  if(ptr  >=  inputLen)  {  if(inputPtr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ptr  >=  inputLen)  {  if(inputPtr  >=  inputLen)  {  break  dummy_loop;  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
27	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  break  dummy_loop;  }  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ptr  >=  inputLen)  {  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  break  dummy_loop;  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
28	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL)  {  break  dummy_loop;  }  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ptr  >=  inputLen)  {  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL)  {  break  dummy_loop;  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
29	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER)  {  break  dummy_loop;  }  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ptr  >=  inputLen)  {  if(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER)  {  break  dummy_loop;  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
30	[BUG]  [BUGGY]  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_PLUS)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Decimal  point  not  followed  by  a  digit   ");  }  }  int  expLen  =  0;    [BUGGY]  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_PLUS)  {  [BUGGY]    if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_PLUS)  {	  if(ch    ==    INT_DECIMAL    ||    ch    ==    INT_DECIMAL)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
