bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  break  dummy_loop;  }	  if(expLen    >    0)    {    if(ch    ==    INT_MINUS    ||    ch    ==    INT_PLUS)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
2	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_NUMBER_FLOAT)  {  if(expLen  >  0)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_NUMBER_FLOAT)  {  if(expLen  >  0)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_NUMBER_FLOAT)  {  if(expLen  >  0)  {  break  dummy_loop;  }	  if(expLen    >    0)    {    if(ch    ==    INT_MINUS    ||    ch    ==    INT_PLUS)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
3	[BUG]  [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  break  dummy_loop;  }	  if(expLen    >    0)    {    if(ch    ==    INT_MINUS    ||    ch    ==    INT_PLUS)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
4	[BUG]  [BUGGY]  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  throw  new  IllegalArgumentException( " ");  }	  if(expLen    >    0)    {    if(ch    ==    INT_MINUS    ||    ch    ==    INT_PLUS)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
5	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_10)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_10)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  <  INT_0  ||  ch  >  INT_10)  {	  if(ch    ==    INT_0    ||    ch    ==    INT_10)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
6	[BUG]  [BUGGY]  if(ch!=  INT_0  ||  ch  ==  INT_10)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch!=  INT_0  ||  ch  ==  INT_10)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch!=  INT_0  ||  ch  ==  INT_10)  {	  if(ch    ==    INT_0    ||    ch    ==    INT_10)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
7	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER_ERROR  ||  ch  ==  INT_DECIMAL_ERROR)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_NUMBER_ERROR  ||  ch  ==  INT_DECIMAL_ERROR)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_NUMBER_ERROR  ||  ch  ==  INT_DECIMAL_ERROR)  {	  if(ch    ==    INT_DECIMAL_ERROR    ||    ch    ==    INT_DECIMAL_ERROR)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
8	[BUG]  [BUGGY]  if(ch  ==  INT_DECIMAL_ERROR  ||  ch  ==  INT_DECIMAL_MILLIS)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_DECIMAL_ERROR  ||  ch  ==  INT_DECIMAL_MILLIS)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_DECIMAL_ERROR  ||  ch  ==  INT_DECIMAL_MILLIS)  {	  if(ch    ==    INT_DECIMAL_ERROR    ||    ch    ==    INT_DECIMAL_ERROR)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
9	[BUG]  [BUGGY]  if(ch!=  INT_0  ||  ch  ==  INT_9)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch!=  INT_0  ||  ch  ==  INT_9)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch!=  INT_0  ||  ch  ==  INT_9)  {	  if(ch    ==    INT_0    ||    ch    ==    INT_9)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
10	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(ch    ==    INT_NUMBER)    {    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
11	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_QUOTE)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_QUOTE)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(ch    ==    INT_NUMBER)    {    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
12	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_NUMBER)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_NUMBER)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ptr  >=  inputLen)  {  if(ch  ==  INT_NUMBER)  {  break  dummy_loop;  }	  if(ch    ==    INT_NUMBER)    {    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
13	[BUG]  [BUGGY]  int  ptr  =  _reader.read(_inputBuffer,  expLen);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  int  ptr  =  _reader.read(_inputBuffer,  expLen);  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	int  ptr  =  _reader.read(_inputBuffer,  expLen);	  int    ptr    =    _reader.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
14	[BUG]  [BUGGY]  int  ptr  =  _reader.readLine();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  int  ptr  =  _reader.readLine();  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	int  ptr  =  _reader.readLine();	  int    ptr    =    _reader.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
15	[BUG]  [BUGGY]  int  ptr  =  _reader.read(_buffer,  expLen);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  int  ptr  =  _reader.read(_buffer,  expLen);  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	int  ptr  =  _reader.read(_buffer,  expLen);	  int    ptr    =    _reader.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
16	[BUG]  [BUGGY]  char  ptr  =  _reader.read();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  char  ptr  =  _reader.read();  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	char  ptr  =  _reader.read();	  int    ptr    =    _reader.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
17	[BUG]  [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  <  =  INT_0  ||  ch  >  INT_9)  {	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
18	[BUG]  [BUGGY]  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(ch    ==    INT_MINUS    ||    ch    ==    INT_PLUS)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
19	[BUG]  [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(ch    ==    INT_MINUS    ||    ch    ==    INT_PLUS)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
20	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++]  &  0xff;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++]  &  0xff;  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	Integer  ptr  =  _inputBuffer[ptr++]  &  0xff;	  Integer    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
21	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[ptr++];  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  int  ptr  =  _inputBuffer[ptr++];  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	int  ptr  =  _inputBuffer[ptr++];	  Integer    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
22	[BUG]  [BUGGY]  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  if(inputPtr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  if(inputPtr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  if(inputPtr  >=  inputLen)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(inputPtr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
23	[BUG]  [BUGGY]  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  if(inputLen  >=  inputLen)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  if(inputLen  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  if(inputLen  >=  inputLen)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(inputPtr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
24	[BUG]  [BUGGY]  if(expLen  >  0)  {  if(inputPtr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(expLen  >  0)  {  if(inputPtr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(expLen  >  0)  {  if(inputPtr  >=  inputLen)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(inputPtr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
25	[BUG]  [BUGGY]  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_Decimal)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_Decimal)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_Decimal)  {	  if(ch    ==    INT_Decimal    ||    ch    ==    INT_DECIMAL)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
26	[BUG]  [BUGGY]  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_Decimal  ||  ch  ==  INT_DECIMAL)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_Decimal  ||  ch  ==  INT_DECIMAL)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_Decimal  ||  ch  ==  INT_DECIMAL)  {	  if(ch    ==    INT_Decimal    ||    ch    ==    INT_DECIMAL)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
27	[BUG]  [BUGGY]  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_decimal)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_decimal)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_decimal)  {	  if(ch    ==    INT_Decimal    ||    ch    ==    INT_DECIMAL)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
28	[BUG]  [BUGGY]  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(ch    ==    INT_DECIMAL    ||    ch    ==    INT_DECIMAL)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
29	[BUG]  [BUGGY]  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(ch    ==    INT_DECIMAL    ||    ch    ==    INT_DECIMAL)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
30	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_NUMBER_INT)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_NUMBER_INT)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_NUMBER_INT)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(ch    ==    INT_DECIMAL    ||    ch    ==    INT_DECIMAL)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
31	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_1)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  <  INT_0  ||  ch  >  INT_1)  {	  if(ch    ==    INT_0    ||    ch    ==    INT_1)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
32	[BUG]  [BUGGY]  if(ch  ==  INT_DECL  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_DEFAULT)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_DECL  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_DEFAULT)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_DECL  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_DEFAULT)  {	  if(ch    ==    INT_DECIMAL    ||    ch    ==    INT_DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
33	[BUG]  [BUGGY]  if(ch  <  INT_DECIMAL  ||  ch  >  INT_DEFAULT)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  <  INT_DECIMAL  ||  ch  >  INT_DEFAULT)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  <  INT_DECIMAL  ||  ch  >  INT_DEFAULT)  {	  if(ch    ==    INT_DECIMAL    ||    ch    ==    INT_DEFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
34	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_DeFAULT)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_NUMBER  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_DeFAULT)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_NUMBER  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_DeFAULT)  {	  if(ch    ==    INT_DECIMAL    ||    ch    ==    INT_DeFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
35	[BUG]  [BUGGY]  char  ptr  =(char)_reader.readInt();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  char  ptr  =(char)_reader.readInt();  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	char  ptr  =(char)_reader.readInt();	  int    ptr    =(int)_reader.readInt();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
36	[BUG]  [BUGGY]  int  ptr  =(int)_reader.readObject();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  int  ptr  =(int)_reader.readObject();  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	int  ptr  =(int)_reader.readObject();	  int    ptr    =(int)_reader.readInt();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
37	[BUG]  [BUGGY]  char  inputLen  =  _inputBuffer[ptr++];  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  char  inputLen  =  _inputBuffer[ptr++];  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	char  inputLen  =  _inputBuffer[ptr++];	  int    inputLen    =    _inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
38	[BUG]  [BUGGY]  int  inputLen  =  _inputBuffer[ptr++]  &  0xff;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  int  inputLen  =  _inputBuffer[ptr++]  &  0xff;  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	int  inputLen  =  _inputBuffer[ptr++]  &  0xff;	  int    inputLen    =    _inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
39	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(ch    ==    INT_NUMBER    ||    ch    ==    INT_NUMBER)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
40	[BUG]  [BUGGY]  if(ch  <  INT_NUMBER  ||  ch  >  INT_NUMBER)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  <  INT_NUMBER  ||  ch  >  INT_NUMBER)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  <  INT_NUMBER  ||  ch  >  INT_NUMBER)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(ch    ==    INT_NUMBER    ||    ch    ==    INT_NUMBER)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
41	[BUG]  [BUGGY]  char  ptr  =(char)_inputBuffer[ptr++];  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  char  ptr  =(char)_inputBuffer[ptr++];  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	char  ptr  =(char)_inputBuffer[ptr++];	  int    ptr    =(int)_inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
42	[BUG]  [BUGGY]  if(ch  ==  INT_DEFAULT  ||  ch  ==  INT_DECIMAL  ||  expLen  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_DEFAULT  ||  ch  ==  INT_DECIMAL  ||  expLen  ==  0)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_DEFAULT  ||  ch  ==  INT_DECIMAL  ||  expLen  ==  0)  {	  if(ch    ==    INT_DEFAULT    ||    ch    ==    INT_DECIMAL    ||    fractLen    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
43	[BUG]  [BUGGY]  if(ch  ==  INT_DEFAULT  ||  ch  ==  INT_DECIMAL  ||  fractLen  ==  1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_DEFAULT  ||  ch  ==  INT_DECIMAL  ||  fractLen  ==  1)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_DEFAULT  ||  ch  ==  INT_DECIMAL  ||  fractLen  ==  1)  {	  if(ch    ==    INT_DEFAULT    ||    ch    ==    INT_DECIMAL    ||    fractLen    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
44	[BUG]  [BUGGY]  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DEFAULT  ||  fractLen  ==  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DEFAULT  ||  fractLen  ==  0)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DEFAULT  ||  fractLen  ==  0)  {	  if(ch    ==    INT_DEFAULT    ||    ch    ==    INT_DECIMAL    ||    fractLen    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
45	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER)  {	  if(ch    ==    INT_PLUS    ||    ch    ==    INT_PLUS)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
46	[BUG]  [BUGGY]  if(ch  ==  INT_E  ||  ch  ==  INT_e)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_E  ||  ch  ==  INT_e)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_E  ||  ch  ==  INT_e)  {	  if(ch    ==    INT_e    ||    ch    ==    INT_E)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
47	[BUG]  [BUGGY]  if(ch  ==  INT_SEMICOLON  ||  ch  ==  INT_SEMICOLON)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_SEMICOLON  ||  ch  ==  INT_SEMICOLON)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_SEMICOLON  ||  ch  ==  INT_SEMICOLON)  {	  if(ch    ==    INT_e    ||    ch    ==    INT_E)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
48	[BUG]  [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  throw  new  IllegalArgumentException( " ");  }	  if(expLen    >    0)    {    if(ch    ==    INT_MINUS    ||    ch    ==    INT_PLUS)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
49	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER)  {  throw  new  IllegalArgumentException( " ");  }	  if(expLen    >    0)    {    if(ch    ==    INT_MINUS    ||    ch    ==    INT_PLUS)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
50	[BUG]  [BUGGY]  ||  ch  ==  INT_PLUS)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  ||  ch  ==  INT_PLUS)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	||  ch  ==  INT_PLUS)  {  throw  new  IllegalArgumentException( " ");	  if(expLen    >    0)    {    if(ch    ==    INT_MINUS    ||    ch    ==    INT_PLUS)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
51	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_BLOCK)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_BLOCK)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  <  INT_0  ||  ch  >  INT_BLOCK)  {	  if(ch    ==    INT_0    ||    ch    ==    INT_BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
52	[BUG]  [BUGGY]  if(ch  ==  INT_BLOCK  ||  ch  ==  INT_0)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_BLOCK  ||  ch  ==  INT_0)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_BLOCK  ||  ch  ==  INT_0)  {	  if(ch    ==    INT_0    ||    ch    ==    INT_BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
53	[BUG]  [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_BLOCK  ||  ch  ==  INT_MINUS)  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_BLOCK  ||  ch  ==  INT_MINUS)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_0  ||  ch  ==  INT_BLOCK  ||  ch  ==  INT_MINUS)  {	  if(ch    ==    INT_0    ||    ch    ==    INT_BLOCK)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
54	[BUG]  [BUGGY]  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_NUMBER_INT)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_NUMBER_INT)  {	  if(ch    ==    INT_NUMBER_INT    ||    ch    ==    INT_DECIMAL)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
55	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_DECIMAL)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_DECIMAL)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_QUOTE  ||  ch  ==  INT_DECIMAL)  {	  if(ch    ==    INT_NUMBER_INT    ||    ch    ==    INT_DECIMAL)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
56	[BUG]  [BUGGY]  if(ch  ==  INT_SEMICOLON  ||  ch  ==  INT_DECIMAL)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_SEMICOLON  ||  ch  ==  INT_DECIMAL)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_SEMICOLON  ||  ch  ==  INT_DECIMAL)  {	  if(ch    ==    INT_NUMBER_INT    ||    ch    ==    INT_DECIMAL)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
57	[BUG]  [BUGGY]  if(ch  ==  INT_SIZE  ||  ch  ==  INT_DECIMAL)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_SIZE  ||  ch  ==  INT_DECIMAL)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_SIZE  ||  ch  ==  INT_DECIMAL)  {	  if(ch    ==    INT_SIZE    ||    ch    ==    INT_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
58	[BUG]  [BUGGY]  if(ch  <  INT_SIZE  ||  ch  >  INT_SIZE)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  <  INT_SIZE  ||  ch  >  INT_SIZE)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  <  INT_SIZE  ||  ch  >  INT_SIZE)  {	  if(ch    ==    INT_SIZE    ||    ch    ==    INT_SIZE)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
59	[BUG]  [BUGGY]  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_MINUS)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_MINUS)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_MINUS)  {	  if(ch    ==    INT_DECIMAL    ||    ch    ==    INT_DECIMAL    ||    ch    ==    INT_PLUS)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
60	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {	  if(ch    ==    INT_DECIMAL    ||    ch    ==    INT_DECIMAL    ||    ch    ==    INT_PLUS)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
61	[BUG]  [BUGGY]  if(ch  ==  INT_MINUS  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_PLUS)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_MINUS  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_PLUS)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_MINUS  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_PLUS)  {	  if(ch    ==    INT_DECIMAL    ||    ch    ==    INT_DECIMAL    ||    ch    ==    INT_PLUS)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
62	[BUG]  [BUGGY]  int  ptr  =  _reader.read(_inputBuffer,  0,  expLen);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  int  ptr  =  _reader.read(_inputBuffer,  0,  expLen);  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	int  ptr  =  _reader.read(_inputBuffer,  0,  expLen);	  int    ptr    =    _reader.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
63	[BUG]  [BUGGY]  int  ptr  =  _reader.read(_inputBuffer,  _inputPtr,  expLen);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  int  ptr  =  _reader.read(_inputBuffer,  _inputPtr,  expLen);  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	int  ptr  =  _reader.read(_inputBuffer,  _inputPtr,  expLen);	  int    ptr    =    _reader.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
64	[BUG]  [BUGGY]  int  ptr  =  _reader.read(_inputBuffer,  0,  inputLen);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  int  ptr  =  _reader.read(_inputBuffer,  0,  inputLen);  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	int  ptr  =  _reader.read(_inputBuffer,  0,  inputLen);	  int    ptr    =    _reader.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
65	[BUG]  [BUGGY]  int  ptr  =  _reader.read(_inputBuffer,  inputLen);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  int  ptr  =  _reader.read(_inputBuffer,  inputLen);  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	int  ptr  =  _reader.read(_inputBuffer,  inputLen);	  int    ptr    =    _reader.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
66	[BUG]  [BUGGY]  Integer  ptr  =(Integer)_reader.readInt();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  Integer  ptr  =(Integer)_reader.readInt();  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	Integer  ptr  =(Integer)_reader.readInt();	  int    ptr    =(int)_reader.readInt();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
67	[BUG]  [BUGGY]  if(ch  <  INT_DECIMAL  ||  ch  >  INT_Decimal)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  <  INT_DECIMAL  ||  ch  >  INT_Decimal)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  <  INT_DECIMAL  ||  ch  >  INT_Decimal)  {	  if(ch    ==    INT_Decimal    ||    ch    ==    INT_DECIMAL)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
68	[BUG]  [BUGGY]  if(expLen  <  =  0)  {  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(expLen  <  =  0)  {  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(expLen  <  =  0)  {  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(ch    ==    INT_MINUS    ||    ch    ==    INT_PLUS)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
69	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  <  INT_0  ||  ch  >  INT_9)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(ch    ==    INT_MINUS    ||    ch    ==    INT_PLUS)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
70	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++]  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++]  +  1;  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	Integer  ptr  =  _inputBuffer[ptr++]  +  1;	  Integer    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
71	[BUG]  [BUGGY]  if(ch  ==  INT_X  ||  ch  ==  INT_X)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_X  ||  ch  ==  INT_X)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_X  ||  ch  ==  INT_X)  {	  if(ch    ==    INT_PLUS    ||    ch    ==    INT_PLUS)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
72	[BUG]  [BUGGY]  if(ch  >=  INT_0  ||  ch  ==  INT_9)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  >=  INT_0  ||  ch  ==  INT_9)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  >=  INT_0  ||  ch  ==  INT_9)  {	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
73	[BUG]  [BUGGY]  if(ch  ==  INT_9  ||  ch  ==  INT_0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_9  ||  ch  ==  INT_0)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_9  ||  ch  ==  INT_0)  {	  if(ch    ==    INT_0    ||    ch    ==    INT_9)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
74	[BUG]  [BUGGY]  if(ch  ==  INT_PLUS  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_PLUS  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_PLUS  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL)  {	  if(ch    ==    INT_DECIMAL    ||    ch    ==    INT_DECIMAL    ||    ch    ==    INT_PLUS)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
75	[BUG]  [BUGGY]  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  if(ptr  >=  inputLen)  {  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  if(ptr  >=  inputLen)  {  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  if(ptr  >=  inputLen)  {  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(ch    ==    INT_DECIMAL    ||    ch    ==    INT_DECIMAL)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
76	[BUG]  [BUGGY]  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  if(ptr  >=  inputLen)  {  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL)  {  break  dummy_loop  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  if(ptr  >=  inputLen)  {  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL)  {  break  dummy_loop  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  if(ptr  >=  inputLen)  {  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL)  {  break  dummy_loop	  if(ptr    >=    inputLen)    {    if(ch    ==    INT_DECIMAL    ||    ch    ==    INT_DECIMAL)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
77	[BUG]  [BUGGY]  if(ch  ==  INT_Decimal  ||  ch  ==  INT_DECIMAL  ||  fractLen  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_Decimal  ||  ch  ==  INT_DECIMAL  ||  fractLen  ==  0)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_Decimal  ||  ch  ==  INT_DECIMAL  ||  fractLen  ==  0)  {	  if(ch    ==    INT_DEFAULT    ||    ch    ==    INT_DECIMAL    ||    fractLen    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
78	[BUG]  [BUGGY]  if(ch  ==  INT_PLUS  ||  ch  ==  INT_PLUS)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_PLUS  ||  ch  ==  INT_PLUS)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_PLUS  ||  ch  ==  INT_PLUS)  {  break  dummy_loop;  }	  if(expLen    >    0)    {    if(ch    ==    INT_MINUS    ||    ch    ==    INT_PLUS)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
79	[BUG]  [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_9)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_9)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_0  ||  ch  ==  INT_9)  {  break  dummy_loop;  }	  if(expLen    >    0)    {    if(ch    ==    INT_MINUS    ||    ch    ==    INT_PLUS)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
80	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  if(expLen  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  if(expLen  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  <  INT_0  ||  ch  >  INT_9)  {  if(expLen  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(expLen    >    0)    {    if(ch    ==    INT_MINUS    ||    ch    ==    INT_PLUS)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
81	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER)  {  if(expLen  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_NUMBER)  {  if(expLen  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_NUMBER)  {  if(expLen  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(expLen    >    0)    {    if(ch    ==    INT_MINUS    ||    ch    ==    INT_PLUS)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
82	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER_INT)  {  if(expLen  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_NUMBER_INT)  {  if(expLen  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_NUMBER_INT)  {  if(expLen  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(expLen    >    0)    {    if(ch    ==    INT_MINUS    ||    ch    ==    INT_PLUS)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
83	[BUG]  [BUGGY]  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  if(ptr  >=  inputLen)  {  if(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  if(ptr  >=  inputLen)  {  if(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  if(ptr  >=  inputLen)  {  if(ch  ==  INT_NUMBER  ||  ch  ==  INT_NUMBER)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(ch    ==    INT_NUMBER    ||    ch    ==    INT_NUMBER)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
84	[BUG]  [BUGGY]  if(expLen  <  =  0)  {  if(inputPtr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(expLen  <  =  0)  {  if(inputPtr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(expLen  <  =  0)  {  if(inputPtr  >=  inputLen)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(inputPtr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
85	[BUG]  [BUGGY]  if(expLen  ==  0)  {  if(inputPtr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(expLen  ==  0)  {  if(inputPtr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(expLen  ==  0)  {  if(inputPtr  >=  inputLen)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(inputPtr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
86	[BUG]  [BUGGY]  if(ch!=  INT_DECIMAL  ||  ch  ==  INT_NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch!=  INT_DECIMAL  ||  ch  ==  INT_NUMBER_INT)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch!=  INT_DECIMAL  ||  ch  ==  INT_NUMBER_INT)  {	  if(ch    ==    INT_NUMBER_INT    ||    ch    ==    INT_DECIMAL)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
87	[BUG]  [BUGGY]  if(ch  <  INT_DECIMAL  ||  ch  >  INT_NUMBER_INT)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  <  INT_DECIMAL  ||  ch  >  INT_NUMBER_INT)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  <  INT_DECIMAL  ||  ch  >  INT_NUMBER_INT)  {	  if(ch    ==    INT_NUMBER_INT    ||    ch    ==    INT_DECIMAL)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
88	[BUG]  [BUGGY]  int  ptr  =(int)_inputBuffer[ptr++]  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  int  ptr  =(int)_inputBuffer[ptr++]  +  1;  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	int  ptr  =(int)_inputBuffer[ptr++]  +  1;	  int    ptr    =(int)_inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
89	[BUG]  [BUGGY]  int  inputLen  =  _inputBuffer[ptr++]  +  fractLen;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  int  inputLen  =  _inputBuffer[ptr++]  +  fractLen;  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	int  inputLen  =  _inputBuffer[ptr++]  +  fractLen;	  int    inputLen    =    _inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
90	[BUG]  [BUGGY]  if(ch  ==  INT_ERROR  ||  ch  ==  INT_DECIMAL_ERROR)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_ERROR  ||  ch  ==  INT_DECIMAL_ERROR)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_ERROR  ||  ch  ==  INT_DECIMAL_ERROR)  {	  if(ch    ==    INT_DECIMAL_ERROR    ||    ch    ==    INT_DECIMAL_ERROR)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
91	[BUG]  [BUGGY]  int  ptr  =(int)_reader.readLine();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  int  ptr  =(int)_reader.readLine();  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	int  ptr  =(int)_reader.readLine();	  int    ptr    =(int)_reader.readInt();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
92	[BUG]  [BUGGY]  if(ch  ==  INT_e  ||  ch  ==  INT_E  ||  ch  ==  INT_NE)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_e  ||  ch  ==  INT_E  ||  ch  ==  INT_NE)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_e  ||  ch  ==  INT_E  ||  ch  ==  INT_NE)  {	  if(ch    ==    INT_e    ||    ch    ==    INT_E)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
93	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(ch    ==    INT_DECIMAL    ||    ch    ==    INT_DECIMAL)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
94	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_NUMBER_FLOAT)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_NUMBER_FLOAT)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_NUMBER_FLOAT)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(ch    ==    INT_DECIMAL    ||    ch    ==    INT_DECIMAL)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
95	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_NUMBER_FLOAT  ||  ch  ==  INT_MINUS)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_NUMBER_FLOAT  ||  ch  ==  INT_MINUS)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_NUMBER_FLOAT  ||  ch  ==  INT_MINUS)  {	  if(ch    ==    INT_NUMBER_INT    ||    ch    ==    INT_NUMBER_FLOAT)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
96	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  <  INT_0  ||  ch  >  INT_9)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  <  INT_0  ||  ch  >  INT_9)  {  throw  new  IllegalArgumentException( " ");  }	  if(expLen    >    0)    {    if(ch    ==    INT_MINUS    ||    ch    ==    INT_PLUS)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
97	[BUG]  [BUGGY]  if(ch  ==  INT_Decimal  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_PLUS)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_Decimal  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_PLUS)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_Decimal  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_PLUS)  {	  if(ch    ==    INT_Decimal    ||    ch    ==    INT_DECIMAL)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
98	[BUG]  [BUGGY]  if(_inputPtr  >=  inputLen)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(_inputPtr  >=  inputLen)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(_inputPtr  >=  inputLen)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(inputPtr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
99	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER)  {  if(inputPtr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_NUMBER)  {  if(inputPtr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_NUMBER)  {  if(inputPtr  >=  inputLen)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(inputPtr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
100	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_PLUS)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_PLUS)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_PLUS)  {	  if(ch    ==    INT_NUMBER_INT    ||    ch    ==    INT_DECIMAL)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
101	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_DECIMAL  ||  fractLen  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_DECIMAL  ||  fractLen  ==  0)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_DECIMAL  ||  fractLen  ==  0)  {	  if(ch    ==    INT_DEFAULT    ||    ch    ==    INT_DECIMAL    ||    fractLen    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
102	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++].intValue;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++].intValue;  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	Integer  ptr  =  _inputBuffer[ptr++].intValue;	  Integer    ptr    =    _inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
103	[BUG]  [BUGGY]  int  ptr  =  _reader.read(_inputBuffer,  _inputPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  int  ptr  =  _reader.read(_inputBuffer,  _inputPtr,  fractLen);  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	int  ptr  =  _reader.read(_inputBuffer,  _inputPtr,  fractLen);	  int    ptr    =    _reader.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
104	[BUG]  [BUGGY]  int  ptr  =  _reader.readFully(_inputBuffer,  _inputPtr,  expLen);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  int  ptr  =  _reader.readFully(_inputBuffer,  _inputPtr,  expLen);  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	int  ptr  =  _reader.readFully(_inputBuffer,  _inputPtr,  expLen);	  int    ptr    =    _reader.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
105	[BUG]  [BUGGY]  t  ptr  =(int)_inputBuffer[ptr++];  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  t  ptr  =(int)_inputBuffer[ptr++];  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	t  ptr  =(int)_inputBuffer[ptr++];	  int    ptr    =(int)_inputBuffer[ptr++];    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
106	[BUG]  [BUGGY]  if(ch  ==  INT_SEMI)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_SEMI)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_SEMI)  {  if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(ptr    >=    inputLen)    {    if(ch    ==    INT_NUMBER    ||    ch    ==    INT_NUMBER)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
107	[BUG]  [BUGGY]  if(ch  ==  INT_EXPECTED  ||  ch  ==  INT_DECIMAL)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_EXPECTED  ||  ch  ==  INT_DECIMAL)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_EXPECTED  ||  ch  ==  INT_DECIMAL)  {	  if(ch    ==    INT_DECIMAL    ||    ch    ==    INT_DeFAULT)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
108	[BUG]  [BUGGY]  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_UNKNOWN)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_UNKNOWN)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_UNKNOWN)  {	  if(ch    ==    INT_DECIMAL    ||    ch    ==    INT_DECIMAL    ||    ch    ==    INT_PLUS)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
109	[BUG]  [BUGGY]  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_UNQUOTED)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_UNQUOTED)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL  ||  ch  ==  INT_UNQUOTED)  {	  if(ch    ==    INT_DECIMAL    ||    ch    ==    INT_DECIMAL    ||    ch    ==    INT_PLUS)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
110	[BUG]  [BUGGY]  if(ch  ==  INT_DECIMAL_ERROR  ||  ch  ==  INT_DECIMAL_ERROR  ||  ch  ==  INT_PLUS)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ch  ==  INT_DECIMAL_ERROR  ||  ch  ==  INT_DECIMAL_ERROR  ||  ch  ==  INT_PLUS)  {  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_DECIMAL_ERROR  ||  ch  ==  INT_DECIMAL_ERROR  ||  ch  ==  INT_PLUS)  {	  if(ch    ==    INT_DECIMAL_ERROR    ||    ch    ==    INT_DECIMAL_ERROR)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
111	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Decimal  point  not  followed  by  a  digit     ");  }  }  int  expLen  =  0;      [BUGGY]  if(ptr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]      if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ptr  >=  inputLen)  {  break  dummy_loop;  }	  if(ch    ==    INT_NUMBER)    {    if(ptr    >=    inputLen)    {    break    dummy_loop;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
