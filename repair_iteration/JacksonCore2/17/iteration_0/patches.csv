bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL)  {  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,   "Decimal  point  not  followed  by  a  digit ");  }  }  int  expLen  =  0;  [BUGGY]  if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL)  {  [BUGGY]  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_DECIMAL  ||  ch  ==  INT_DECIMAL)  {	if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  	non-compiled	[CE]  ';'  expected	34	None	replace
2	[BUG]  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,   "Decimal  point  not  followed  by  a  digit ");  }  }  int  expLen  =  0;  [BUGGY]  if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {  [BUGGY]  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_QUOTE  ||  ch  ==  INT_QUOTE)  {	if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  	non-compiled	[CE]  illegal  start  of  type	34	None	replace
3	[BUG]  [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,   "Decimal  point  not  followed  by  a  digit ");  }  }  int  expLen  =  0;  [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_0)  {  [BUGGY]  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_0  ||  ch  ==  INT_0)  {	if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  	non-compiled	[CE]  illegal  start  of  type	34	None	replace
4	[BUG]  [BUGGY]  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,   "Decimal  point  not  followed  by  a  digit ");  }  }  int  expLen  =  0;  [BUGGY]  if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  [BUGGY]  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {	if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  	non-compiled	[CE]  illegal  start  of  type	34	None	replace
5	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]            AssertionFailedError  [CONTEXT]  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,   "Decimal  point  not  followed  by  a  digit ");  }  }  int  expLen  =  0;  [BUGGY]    [BUGGY]  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	  	if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  	non-compiled	[CE]  illegal  start  of  type	34	None	replace
6	[BUG]  [BUGGY]  if(ch  ==  INT_DEFAULT  ||  ch  ==  INT_DECIMAL)  {  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,   "Decimal  point  not  followed  by  a  digit ");  }  }  int  expLen  =  0;  [BUGGY]  if(ch  ==  INT_DEFAULT  ||  ch  ==  INT_DECIMAL)  {  [BUGGY]  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_DEFAULT  ||  ch  ==  INT_DECIMAL)  {	if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  	non-compiled	[CE]  illegal  start  of  type	34	None	replace
7	[BUG]  [BUGGY]  if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_NUMBER)  {  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  }  ++fractLen;  }  if  (fractLen  ==  0)  {  reportUnexpectedNumberChar(ch,   "Decimal  point  not  followed  by  a  digit ");  }  }  int  expLen  =  0;  [BUGGY]  if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_NUMBER)  {  [BUGGY]  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  ==  INT_MINUS  ||  ch  ==  INT_PLUS)  {  //  yup,  skip  for  now  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	if(ch  ==  INT_NUMBER_INT  ||  ch  ==  INT_NUMBER)  {	if  (ch  ==  'e'  ||  ch  ==  'E')  {  //  and/or  exponent  if  (ptr  >=  inputLen)  {  	non-compiled	[CE]  illegal  start  of  type	34	None	replace
