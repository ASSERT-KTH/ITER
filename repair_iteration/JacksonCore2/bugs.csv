bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] t = _parseNumber(i); [FE] AssertionFailedError [CONTEXT] case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9': [BUGGY] t = _parseNumber(i); [BUGGY] break; default: t = _handleOddValue(i); break; } if (inObject) { _nextToken = t; return _currToken; } [CLASS] ReaderBasedJsonParser [METHOD] nextToken [RETURN_TYPE] JsonToken  [VARIABLES] boolean _tokenIncomplete inObject Reader _reader r int[] _icLatin1 _icWS JsonToken t ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st String name int _hashSeed bits count decodedData features i nameLen origPtr outputCount outputEnd outputPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	674	674	2	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9': [BUGGY] [BUGGY] t = _parseNumber(i); break; default: t = _handleOddValue(i); break; } if (inObject) { _nextToken = t; return _currToken; } [CLASS] ReaderBasedJsonParser [METHOD] nextToken [RETURN_TYPE] JsonToken  [VARIABLES] boolean _tokenIncomplete inObject Reader _reader r int[] _icLatin1 _icWS JsonToken t ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st String name int _hashSeed bits count decodedData features i nameLen origPtr outputCount outputEnd outputPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	674	674	2	add	
3	[BUG] [BUGGY] break; [FE] AssertionFailedError [CONTEXT] case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9': t = _parseNumber(i); [BUGGY] break; [BUGGY] default: t = _handleOddValue(i); break; } if (inObject) { _nextToken = t; return _currToken; } _currToken = t; [CLASS] ReaderBasedJsonParser [METHOD] nextToken [RETURN_TYPE] JsonToken  [VARIABLES] boolean _tokenIncomplete inObject Reader _reader r int[] _icLatin1 _icWS JsonToken t ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st String name int _hashSeed bits count decodedData features i nameLen origPtr outputCount outputEnd outputPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	675	675	2	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9': t = _parseNumber(i); [BUGGY] [BUGGY] break; default: t = _handleOddValue(i); break; } if (inObject) { _nextToken = t; return _currToken; } _currToken = t; [CLASS] ReaderBasedJsonParser [METHOD] nextToken [RETURN_TYPE] JsonToken  [VARIABLES] boolean _tokenIncomplete inObject Reader _reader r int[] _icLatin1 _icWS JsonToken t ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st String name int _hashSeed bits count decodedData features i nameLen origPtr outputCount outputEnd outputPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	675	675	2	add	
5	[BUG] [BUGGY] boolean negative = (ch == INT_MINUS); [FE] AssertionFailedError [CONTEXT] {      [BUGGY] boolean negative = (ch == INT_MINUS); [BUGGY] int ptr = _inputPtr; int startPtr = ptr-1; // to include sign/digit already read final int inputLen = _inputEnd; dummy_loop: do { // dummy loop, to be able to break out if (negative) { // need to read the next digit if (ptr >= _inputEnd) { break dummy_loop; } [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] {      [BUGGY] [BUGGY] boolean negative = (ch == INT_MINUS); int ptr = _inputPtr; int startPtr = ptr-1; // to include sign/digit already read final int inputLen = _inputEnd; dummy_loop: do { // dummy loop, to be able to break out if (negative) { // need to read the next digit if (ptr >= _inputEnd) { break dummy_loop; } [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	853	853	2	add	
7	[BUG] [BUGGY] int ptr = _inputPtr; [FE] AssertionFailedError [CONTEXT] {      boolean negative = (ch == INT_MINUS); [BUGGY] int ptr = _inputPtr; [BUGGY] int startPtr = ptr-1; // to include sign/digit already read final int inputLen = _inputEnd; dummy_loop: do { // dummy loop, to be able to break out if (negative) { // need to read the next digit if (ptr >= _inputEnd) { break dummy_loop; } ch = _inputBuffer[ptr++]; [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] {      boolean negative = (ch == INT_MINUS); [BUGGY] [BUGGY] int ptr = _inputPtr; int startPtr = ptr-1; // to include sign/digit already read final int inputLen = _inputEnd; dummy_loop: do { // dummy loop, to be able to break out if (negative) { // need to read the next digit if (ptr >= _inputEnd) { break dummy_loop; } ch = _inputBuffer[ptr++]; [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	854	854	2	add	
9	[BUG] [BUGGY] int startPtr = ptr-1; // to include sign/digit already read final int inputLen = _inputEnd; [FE] AssertionFailedError [CONTEXT] {      boolean negative = (ch == INT_MINUS); int ptr = _inputPtr; [BUGGY] int startPtr = ptr-1; // to include sign/digit already read  final int inputLen = _inputEnd; [BUGGY] final int inputLen = _inputEnd; dummy_loop: do { // dummy loop, to be able to break out if (negative) { // need to read the next digit if (ptr >= _inputEnd) { break dummy_loop; } ch = _inputBuffer[ptr++];  [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] {      boolean negative = (ch == INT_MINUS); int ptr = _inputPtr; [BUGGY] [BUGGY] int startPtr = ptr-1; // to include sign/digit already read  final int inputLen = _inputEnd; final int inputLen = _inputEnd; dummy_loop: do { // dummy loop, to be able to break out if (negative) { // need to read the next digit if (ptr >= _inputEnd) { break dummy_loop; } ch = _inputBuffer[ptr++];  [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	855	856	2	add	
11	[BUG] [BUGGY] final int inputLen = _inputEnd; [FE] AssertionFailedError [CONTEXT] {      boolean negative = (ch == INT_MINUS); int ptr = _inputPtr; int startPtr = ptr-1; // to include sign/digit already read [BUGGY] final int inputLen = _inputEnd; [BUGGY]  dummy_loop: do { // dummy loop, to be able to break out if (negative) { // need to read the next digit if (ptr >= _inputEnd) { break dummy_loop; } ch = _inputBuffer[ptr++];  if (ch > INT_9 || ch < INT_0) { [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] {      boolean negative = (ch == INT_MINUS); int ptr = _inputPtr; int startPtr = ptr-1; // to include sign/digit already read [BUGGY] [BUGGY] final int inputLen = _inputEnd; dummy_loop: do { // dummy loop, to be able to break out if (negative) { // need to read the next digit if (ptr >= _inputEnd) { break dummy_loop; } ch = _inputBuffer[ptr++];  if (ch > INT_9 || ch < INT_0) { [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	856	856	2	add	
13	[BUG] [BUGGY] if (negative) { // need to read the next digit if (ptr >= _inputEnd) { [FE] AssertionFailedError [CONTEXT]    boolean negative = (ch == INT_MINUS); int ptr = _inputPtr; int startPtr = ptr-1; // to include sign/digit already read final int inputLen = _inputEnd; dummy_loop: do { // dummy loop, to be able to break out [BUGGY] if (negative) { // need to read the next digit    if (ptr >= _inputEnd) { [BUGGY] if (ptr >= _inputEnd) { break dummy_loop; } ch = _inputBuffer[ptr++];  if (ch > INT_9 || ch < INT_0) { _inputPtr = ptr; return _handleInvalidNumberStart(ch, true); }  [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]    boolean negative = (ch == INT_MINUS); int ptr = _inputPtr; int startPtr = ptr-1; // to include sign/digit already read final int inputLen = _inputEnd; dummy_loop: do { // dummy loop, to be able to break out [BUGGY] [BUGGY] if (negative) { // need to read the next digit    if (ptr >= _inputEnd) { if (ptr >= _inputEnd) { break dummy_loop; } ch = _inputBuffer[ptr++];  if (ch > INT_9 || ch < INT_0) { _inputPtr = ptr; return _handleInvalidNumberStart(ch, true); }  [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	860	861	2	add	
15	[BUG] [BUGGY] if (ch == INT_0) { [FE] AssertionFailedError [CONTEXT] if (ch > INT_9 || ch < INT_0) { _inputPtr = ptr; return _handleInvalidNumberStart(ch, true); }     }  [BUGGY] if (ch == INT_0) { [BUGGY] break dummy_loop; }       int intLen = 1; // already got one [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	876	876	2	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (ch > INT_9 || ch < INT_0) { _inputPtr = ptr; return _handleInvalidNumberStart(ch, true); }     }  [BUGGY] [BUGGY] if (ch == INT_0) { break dummy_loop; }       int intLen = 1; // already got one [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	876	876	2	add	
17	[BUG] [BUGGY] int intLen = 1; // already got one  // First let's get the obligatory integer part: [FE] AssertionFailedError [CONTEXT] if (ch == INT_0) { break dummy_loop; }       [BUGGY] int intLen = 1; // already got one      // First let's get the obligatory integer part: [BUGGY]   int_loop: while (true) { if (ptr >= _inputEnd) { break dummy_loop; } ch = (int) _inputBuffer[ptr++]; if (ch < INT_0 || ch > INT_9) { [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	886	888	2	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (ch == INT_0) { break dummy_loop; }       [BUGGY] [BUGGY] int intLen = 1; // already got one      // First let's get the obligatory integer part:   int_loop: while (true) { if (ptr >= _inputEnd) { break dummy_loop; } ch = (int) _inputBuffer[ptr++]; if (ch < INT_0 || ch > INT_9) { [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	886	888	2	add	
19	[BUG] [BUGGY] if (ptr >= _inputEnd) { [FE] AssertionFailedError [CONTEXT]    int intLen = 1; // already got one   int_loop: while (true) { [BUGGY] if (ptr >= _inputEnd) { [BUGGY] break dummy_loop; } ch = (int) _inputBuffer[ptr++]; if (ch < INT_0 || ch > INT_9) { break int_loop; } ++intLen; } int fractLen = 0; [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	892	892	2	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]    int intLen = 1; // already got one   int_loop: while (true) { [BUGGY] [BUGGY] if (ptr >= _inputEnd) { break dummy_loop; } ch = (int) _inputBuffer[ptr++]; if (ch < INT_0 || ch > INT_9) { break int_loop; } ++intLen; } int fractLen = 0; [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	892	892	2	add	
21	[BUG] [BUGGY] ch = (int) _inputBuffer[ptr++]; [FE] AssertionFailedError [CONTEXT] int intLen = 1; // already got one   int_loop: while (true) { if (ptr >= _inputEnd) { break dummy_loop; } [BUGGY] ch = (int) _inputBuffer[ptr++]; [BUGGY] if (ch < INT_0 || ch > INT_9) { break int_loop; } ++intLen; } int fractLen = 0;  if (ch == '.') { // yes, fraction [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	895	895	2	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] int intLen = 1; // already got one   int_loop: while (true) { if (ptr >= _inputEnd) { break dummy_loop; } [BUGGY] [BUGGY] ch = (int) _inputBuffer[ptr++]; if (ch < INT_0 || ch > INT_9) { break int_loop; } ++intLen; } int fractLen = 0;  if (ch == '.') { // yes, fraction [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	895	895	2	add	
23	[BUG] [BUGGY] if (ch < INT_0 || ch > INT_9) { [FE] AssertionFailedError [CONTEXT] int intLen = 1; // already got one   int_loop: while (true) { if (ptr >= _inputEnd) { break dummy_loop; } ch = (int) _inputBuffer[ptr++]; [BUGGY] if (ch < INT_0 || ch > INT_9) { [BUGGY] break int_loop; } ++intLen; } int fractLen = 0;  if (ch == '.') { // yes, fraction fract_loop: [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] int intLen = 1; // already got one   int_loop: while (true) { if (ptr >= _inputEnd) { break dummy_loop; } ch = (int) _inputBuffer[ptr++]; [BUGGY] [BUGGY] if (ch < INT_0 || ch > INT_9) { break int_loop; } ++intLen; } int fractLen = 0;  if (ch == '.') { // yes, fraction fract_loop: [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	896	896	2	add	
25	[BUG] [BUGGY] break int_loop; [FE] AssertionFailedError [CONTEXT]   int_loop: while (true) { if (ptr >= _inputEnd) { break dummy_loop; } ch = (int) _inputBuffer[ptr++]; if (ch < INT_0 || ch > INT_9) { [BUGGY] break int_loop; [BUGGY] } ++intLen; } int fractLen = 0;  if (ch == '.') { // yes, fraction fract_loop: while (true) { [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	897	897	2	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]   int_loop: while (true) { if (ptr >= _inputEnd) { break dummy_loop; } ch = (int) _inputBuffer[ptr++]; if (ch < INT_0 || ch > INT_9) { [BUGGY] [BUGGY] break int_loop; } ++intLen; } int fractLen = 0;  if (ch == '.') { // yes, fraction fract_loop: while (true) { [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	897	897	2	add	
28	[BUG] [BUGGY] int fractLen = 0; [FE] AssertionFailedError [CONTEXT] if (ptr >= _inputEnd) { break dummy_loop; } ch = (int) _inputBuffer[ptr++]; if (ch < INT_0 || ch > INT_9) { break int_loop; } ++intLen; } [BUGGY] int fractLen = 0; [BUGGY]   if (ch == '.') { // yes, fraction fract_loop: while (true) { if (ptr >= inputLen) { break dummy_loop; } ch = (int) _inputBuffer[ptr++]; if (ch < INT_0 || ch > INT_9) { [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	902	902	2	replace	
29	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (ptr >= _inputEnd) { break dummy_loop; } ch = (int) _inputBuffer[ptr++]; if (ch < INT_0 || ch > INT_9) { break int_loop; } ++intLen; } [BUGGY] [BUGGY] int fractLen = 0;  if (ch == '.') { // yes, fraction fract_loop: while (true) { if (ptr >= inputLen) { break dummy_loop; } ch = (int) _inputBuffer[ptr++]; if (ch < INT_0 || ch > INT_9) { [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	902	902	2	add	
30	[BUG] [BUGGY] if (ch == '.') { // yes, fraction fract_loop:  while (true) { [FE] AssertionFailedError [CONTEXT] ch = (int) _inputBuffer[ptr++]; if (ch < INT_0 || ch > INT_9) { break int_loop; } ++intLen; } int fractLen = 0;  [BUGGY] if (ch == '.') { // yes, fraction    fract_loop:        while (true) { [BUGGY] fract_loop: while (true) { if (ptr >= inputLen) { break dummy_loop; } ch = (int) _inputBuffer[ptr++]; if (ch < INT_0 || ch > INT_9) { break fract_loop; } ++fractLen; [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	905	907	2	replace	
31	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] ch = (int) _inputBuffer[ptr++]; if (ch < INT_0 || ch > INT_9) { break int_loop; } ++intLen; } int fractLen = 0;  [BUGGY] [BUGGY] if (ch == '.') { // yes, fraction    fract_loop:        while (true) { fract_loop: while (true) { if (ptr >= inputLen) { break dummy_loop; } ch = (int) _inputBuffer[ptr++]; if (ch < INT_0 || ch > INT_9) { break fract_loop; } ++fractLen; [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	905	907	2	add	
32	[BUG] [BUGGY] int expLen = 0; [FE] AssertionFailedError [CONTEXT] break fract_loop; } ++fractLen; }  if (fractLen == 0) { reportUnexpectedNumberChar(ch, "Decimal point not followed by a digit"); } } [BUGGY] int expLen = 0; [BUGGY] if (ch == 'e' || ch == 'E') { // and/or exponent if (ptr >= inputLen) { break dummy_loop; }  ch = (int) _inputBuffer[ptr++]; if (ch == INT_MINUS || ch == INT_PLUS) { // yup, skip for now if (ptr >= inputLen) { break dummy_loop; } [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	replace	
33	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] break fract_loop; } ++fractLen; }  if (fractLen == 0) { reportUnexpectedNumberChar(ch, "Decimal point not followed by a digit"); } } [BUGGY] [BUGGY] int expLen = 0; if (ch == 'e' || ch == 'E') { // and/or exponent if (ptr >= inputLen) { break dummy_loop; }  ch = (int) _inputBuffer[ptr++]; if (ch == INT_MINUS || ch == INT_PLUS) { // yup, skip for now if (ptr >= inputLen) { break dummy_loop; } [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	923	923	2	add	
34	[BUG] [BUGGY] if (ch == 'e' || ch == 'E') { // and/or exponent if (ptr >= inputLen) { [FE] AssertionFailedError [CONTEXT] } ++fractLen; }  if (fractLen == 0) { reportUnexpectedNumberChar(ch, "Decimal point not followed by a digit"); } } int expLen = 0; [BUGGY] if (ch == 'e' || ch == 'E') { // and/or exponent    if (ptr >= inputLen) { [BUGGY] if (ptr >= inputLen) { break dummy_loop; }  ch = (int) _inputBuffer[ptr++]; if (ch == INT_MINUS || ch == INT_PLUS) { // yup, skip for now if (ptr >= inputLen) { break dummy_loop; } ch = (int) _inputBuffer[ptr++]; [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	replace	
35	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } ++fractLen; }  if (fractLen == 0) { reportUnexpectedNumberChar(ch, "Decimal point not followed by a digit"); } } int expLen = 0; [BUGGY] [BUGGY] if (ch == 'e' || ch == 'E') { // and/or exponent    if (ptr >= inputLen) { if (ptr >= inputLen) { break dummy_loop; }  ch = (int) _inputBuffer[ptr++]; if (ch == INT_MINUS || ch == INT_PLUS) { // yup, skip for now if (ptr >= inputLen) { break dummy_loop; } ch = (int) _inputBuffer[ptr++]; [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	924	925	2	add	
36	[BUG] [BUGGY] --ptr; // need to push back following separator _inputPtr = ptr; [FE] AssertionFailedError [CONTEXT] break dummy_loop; } ch = (int) _inputBuffer[ptr++]; }  if (expLen == 0) { reportUnexpectedNumberChar(ch, "Exponent indicator not followed by a digit"); } }  [BUGGY] --ptr; // need to push back following separator   _inputPtr = ptr; [BUGGY] _inputPtr = ptr;  int len = ptr-startPtr; _textBuffer.resetWithShared(_inputBuffer, startPtr, len); return reset(negative, intLen, fractLen, expLen); } while (false); _inputPtr = negative ? (startPtr+1) : startPtr; return _parseNumber2(negative); } [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	
37	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] break dummy_loop; } ch = (int) _inputBuffer[ptr++]; }  if (expLen == 0) { reportUnexpectedNumberChar(ch, "Exponent indicator not followed by a digit"); } }  [BUGGY] [BUGGY] --ptr; // need to push back following separator   _inputPtr = ptr; _inputPtr = ptr;  int len = ptr-startPtr; _textBuffer.resetWithShared(_inputBuffer, startPtr, len); return reset(negative, intLen, fractLen, expLen); } while (false); _inputPtr = negative ? (startPtr+1) : startPtr; return _parseNumber2(negative); } [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	add	
38	[BUG] [BUGGY] _inputPtr = ptr; [FE] AssertionFailedError [CONTEXT] } ch = (int) _inputBuffer[ptr++]; }  if (expLen == 0) { reportUnexpectedNumberChar(ch, "Exponent indicator not followed by a digit"); } }  --ptr; // need to push back following separator [BUGGY] _inputPtr = ptr; [BUGGY]  int len = ptr-startPtr; _textBuffer.resetWithShared(_inputBuffer, startPtr, len); return reset(negative, intLen, fractLen, expLen); } while (false); _inputPtr = negative ? (startPtr+1) : startPtr; return _parseNumber2(negative); } [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	950	950	2	replace	
39	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } ch = (int) _inputBuffer[ptr++]; }  if (expLen == 0) { reportUnexpectedNumberChar(ch, "Exponent indicator not followed by a digit"); } }  --ptr; // need to push back following separator [BUGGY] [BUGGY] _inputPtr = ptr;  int len = ptr-startPtr; _textBuffer.resetWithShared(_inputBuffer, startPtr, len); return reset(negative, intLen, fractLen, expLen); } while (false); _inputPtr = negative ? (startPtr+1) : startPtr; return _parseNumber2(negative); } [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	950	950	2	add	
40	[BUG] [BUGGY] int len = ptr-startPtr; [FE] AssertionFailedError [CONTEXT] }  if (expLen == 0) { reportUnexpectedNumberChar(ch, "Exponent indicator not followed by a digit"); } }  --ptr; // need to push back following separator _inputPtr = ptr;  [BUGGY] int len = ptr-startPtr; [BUGGY] _textBuffer.resetWithShared(_inputBuffer, startPtr, len); return reset(negative, intLen, fractLen, expLen); } while (false); _inputPtr = negative ? (startPtr+1) : startPtr; return _parseNumber2(negative); } [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	replace	
41	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] }  if (expLen == 0) { reportUnexpectedNumberChar(ch, "Exponent indicator not followed by a digit"); } }  --ptr; // need to push back following separator _inputPtr = ptr;  [BUGGY] [BUGGY] int len = ptr-startPtr; _textBuffer.resetWithShared(_inputBuffer, startPtr, len); return reset(negative, intLen, fractLen, expLen); } while (false); _inputPtr = negative ? (startPtr+1) : startPtr; return _parseNumber2(negative); } [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	952	952	2	add	
42	[BUG] [BUGGY] _textBuffer.resetWithShared(_inputBuffer, startPtr, len); [FE] AssertionFailedError [CONTEXT]  if (expLen == 0) { reportUnexpectedNumberChar(ch, "Exponent indicator not followed by a digit"); } }  --ptr; // need to push back following separator _inputPtr = ptr;  int len = ptr-startPtr; [BUGGY] _textBuffer.resetWithShared(_inputBuffer, startPtr, len); [BUGGY] return reset(negative, intLen, fractLen, expLen); } while (false); _inputPtr = negative ? (startPtr+1) : startPtr; return _parseNumber2(negative); } [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	replace	
43	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  if (expLen == 0) { reportUnexpectedNumberChar(ch, "Exponent indicator not followed by a digit"); } }  --ptr; // need to push back following separator _inputPtr = ptr;  int len = ptr-startPtr; [BUGGY] [BUGGY] _textBuffer.resetWithShared(_inputBuffer, startPtr, len); return reset(negative, intLen, fractLen, expLen); } while (false); _inputPtr = negative ? (startPtr+1) : startPtr; return _parseNumber2(negative); } [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	953	953	2	add	
44	[BUG] [BUGGY] return reset(negative, intLen, fractLen, expLen); [FE] AssertionFailedError [CONTEXT] if (expLen == 0) { reportUnexpectedNumberChar(ch, "Exponent indicator not followed by a digit"); } }  --ptr; // need to push back following separator _inputPtr = ptr;  int len = ptr-startPtr; _textBuffer.resetWithShared(_inputBuffer, startPtr, len); [BUGGY] return reset(negative, intLen, fractLen, expLen); [BUGGY] } while (false); _inputPtr = negative ? (startPtr+1) : startPtr; return _parseNumber2(negative); } [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	
45	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (expLen == 0) { reportUnexpectedNumberChar(ch, "Exponent indicator not followed by a digit"); } }  --ptr; // need to push back following separator _inputPtr = ptr;  int len = ptr-startPtr; _textBuffer.resetWithShared(_inputBuffer, startPtr, len); [BUGGY] [BUGGY] return reset(negative, intLen, fractLen, expLen); } while (false); _inputPtr = negative ? (startPtr+1) : startPtr; return _parseNumber2(negative); } [CLASS] ReaderBasedJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int ch [VARIABLES] boolean _tokenIncomplete inObject negative Reader _reader r int[] _icLatin1 _icWS ObjectCodec _objectCodec c codec CharsToNameCanonicalizer _symbols st int _hashSeed bits ch count decodedData defaultValue expLen features fractLen i inputLen intLen len nameLen origPtr outputCount outputEnd outputPtr ptr startPtr char[] _inputBuffer buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	add	
46	[BUG] [BUGGY] return (_currToken = _parseNumber(i)); [FE] AssertionFailedError [CONTEXT] case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9': [BUGGY] return (_currToken = _parseNumber(i)); [BUGGY] } return (_currToken = _handleUnexpectedValue(i)); } [CLASS] UTF8StreamJsonParser [METHOD] _nextTokenNotInObject [RETURN_TYPE] JsonToken  int i [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer boolean _bufferRecyclable _tokenIncomplete bufferRecyclable byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits ch count decodedData end features i minAvailable nameLen origPtr outputCount outputEnd outputPtr start  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	787	787	2	replace	
47	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9': [BUGGY] [BUGGY] return (_currToken = _parseNumber(i)); } return (_currToken = _handleUnexpectedValue(i)); } [CLASS] UTF8StreamJsonParser [METHOD] _nextTokenNotInObject [RETURN_TYPE] JsonToken  int i [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer boolean _bufferRecyclable _tokenIncomplete bufferRecyclable byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits ch count decodedData end features i minAvailable nameLen origPtr outputCount outputEnd outputPtr start  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	787	787	2	add	
48	[BUG] [BUGGY] char[] outBuf = _textBuffer.emptyAndGetCurrentSegment(); [FE] AssertionFailedError [CONTEXT] { [BUGGY] char[] outBuf = _textBuffer.emptyAndGetCurrentSegment(); [BUGGY] int outPtr = 0; boolean negative = (c == INT_MINUS);  if (negative) { outBuf[outPtr++] = '-';  if (_inputPtr >= _inputEnd) { loadMoreGuaranteed(); } [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1187	1187	2	replace	
49	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { [BUGGY] [BUGGY] char[] outBuf = _textBuffer.emptyAndGetCurrentSegment(); int outPtr = 0; boolean negative = (c == INT_MINUS);  if (negative) { outBuf[outPtr++] = '-';  if (_inputPtr >= _inputEnd) { loadMoreGuaranteed(); } [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1187	1187	2	add	
50	[BUG] [BUGGY] int outPtr = 0; [FE] AssertionFailedError [CONTEXT] { char[] outBuf = _textBuffer.emptyAndGetCurrentSegment(); [BUGGY] int outPtr = 0; [BUGGY] boolean negative = (c == INT_MINUS);  if (negative) { outBuf[outPtr++] = '-';  if (_inputPtr >= _inputEnd) { loadMoreGuaranteed(); } c = (int) _inputBuffer[_inputPtr++] & 0xFF; [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1188	1188	2	replace	
51	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { char[] outBuf = _textBuffer.emptyAndGetCurrentSegment(); [BUGGY] [BUGGY] int outPtr = 0; boolean negative = (c == INT_MINUS);  if (negative) { outBuf[outPtr++] = '-';  if (_inputPtr >= _inputEnd) { loadMoreGuaranteed(); } c = (int) _inputBuffer[_inputPtr++] & 0xFF; [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1188	1188	2	add	
52	[BUG] [BUGGY] boolean negative = (c == INT_MINUS); [FE] AssertionFailedError [CONTEXT] { char[] outBuf = _textBuffer.emptyAndGetCurrentSegment(); int outPtr = 0; [BUGGY] boolean negative = (c == INT_MINUS); [BUGGY]   if (negative) { outBuf[outPtr++] = '-';  if (_inputPtr >= _inputEnd) { loadMoreGuaranteed(); } c = (int) _inputBuffer[_inputPtr++] & 0xFF;  [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1189	1189	2	replace	
53	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { char[] outBuf = _textBuffer.emptyAndGetCurrentSegment(); int outPtr = 0; [BUGGY] [BUGGY] boolean negative = (c == INT_MINUS);  if (negative) { outBuf[outPtr++] = '-';  if (_inputPtr >= _inputEnd) { loadMoreGuaranteed(); } c = (int) _inputBuffer[_inputPtr++] & 0xFF;  [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1189	1189	2	add	
54	[BUG] [BUGGY] if (negative) { [FE] AssertionFailedError [CONTEXT] { char[] outBuf = _textBuffer.emptyAndGetCurrentSegment(); int outPtr = 0; boolean negative = (c == INT_MINUS);  [BUGGY] if (negative) { [BUGGY] outBuf[outPtr++] = '-';  if (_inputPtr >= _inputEnd) { loadMoreGuaranteed(); } c = (int) _inputBuffer[_inputPtr++] & 0xFF;  if (c < INT_0 || c > INT_9) { return _handleInvalidNumberStart(c, true); } [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1192	1192	2	replace	
55	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { char[] outBuf = _textBuffer.emptyAndGetCurrentSegment(); int outPtr = 0; boolean negative = (c == INT_MINUS);  [BUGGY] [BUGGY] if (negative) { outBuf[outPtr++] = '-';  if (_inputPtr >= _inputEnd) { loadMoreGuaranteed(); } c = (int) _inputBuffer[_inputPtr++] & 0xFF;  if (c < INT_0 || c > INT_9) { return _handleInvalidNumberStart(c, true); } [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1192	1192	2	add	
56	[BUG] [BUGGY] if (c == INT_0) { [FE] AssertionFailedError [CONTEXT] loadMoreGuaranteed(); } c = (int) _inputBuffer[_inputPtr++] & 0xFF;  if (c < INT_0 || c > INT_9) { return _handleInvalidNumberStart(c, true); } }  [BUGGY] if (c == INT_0) { [BUGGY] c = _verifyNoLeadingZeroes(); }  outBuf[outPtr++] = (char) c; int intLen = 1;  int end = _inputPtr + outBuf.length; if (end > _inputEnd) { [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1206	1206	2	replace	
57	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] loadMoreGuaranteed(); } c = (int) _inputBuffer[_inputPtr++] & 0xFF;  if (c < INT_0 || c > INT_9) { return _handleInvalidNumberStart(c, true); } }  [BUGGY] [BUGGY] if (c == INT_0) { c = _verifyNoLeadingZeroes(); }  outBuf[outPtr++] = (char) c; int intLen = 1;  int end = _inputPtr + outBuf.length; if (end > _inputEnd) { [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1206	1206	2	add	
58	[BUG] [BUGGY] outBuf[outPtr++] = (char) c; [FE] AssertionFailedError [CONTEXT] return _handleInvalidNumberStart(c, true); } }  if (c == INT_0) { c = _verifyNoLeadingZeroes(); }  [BUGGY] outBuf[outPtr++] = (char) c; [BUGGY] int intLen = 1;  int end = _inputPtr + outBuf.length; if (end > _inputEnd) { end = _inputEnd; }  while (true) { [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1211	1211	2	replace	
59	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return _handleInvalidNumberStart(c, true); } }  if (c == INT_0) { c = _verifyNoLeadingZeroes(); }  [BUGGY] [BUGGY] outBuf[outPtr++] = (char) c; int intLen = 1;  int end = _inputPtr + outBuf.length; if (end > _inputEnd) { end = _inputEnd; }  while (true) { [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1211	1211	2	add	
60	[BUG] [BUGGY] int intLen = 1; [FE] AssertionFailedError [CONTEXT] } }  if (c == INT_0) { c = _verifyNoLeadingZeroes(); }  outBuf[outPtr++] = (char) c; [BUGGY] int intLen = 1; [BUGGY]   int end = _inputPtr + outBuf.length; if (end > _inputEnd) { end = _inputEnd; }  while (true) { if (_inputPtr >= end) { [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1212	1212	2	replace	
61	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } }  if (c == INT_0) { c = _verifyNoLeadingZeroes(); }  outBuf[outPtr++] = (char) c; [BUGGY] [BUGGY] int intLen = 1;  int end = _inputPtr + outBuf.length; if (end > _inputEnd) { end = _inputEnd; }  while (true) { if (_inputPtr >= end) { [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1212	1212	2	add	
62	[BUG] [BUGGY] int end = _inputPtr + outBuf.length; [FE] AssertionFailedError [CONTEXT]  if (c == INT_0) { c = _verifyNoLeadingZeroes(); }  outBuf[outPtr++] = (char) c; int intLen = 1;  [BUGGY] int end = _inputPtr + outBuf.length; [BUGGY] if (end > _inputEnd) { end = _inputEnd; }  while (true) { if (_inputPtr >= end) {  return _parserNumber2(outBuf, outPtr, negative, intLen); } [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1215	1215	2	replace	
63	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  if (c == INT_0) { c = _verifyNoLeadingZeroes(); }  outBuf[outPtr++] = (char) c; int intLen = 1;  [BUGGY] [BUGGY] int end = _inputPtr + outBuf.length; if (end > _inputEnd) { end = _inputEnd; }  while (true) { if (_inputPtr >= end) {  return _parserNumber2(outBuf, outPtr, negative, intLen); } [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1215	1215	2	add	
64	[BUG] [BUGGY] if (end > _inputEnd) { [FE] AssertionFailedError [CONTEXT] if (c == INT_0) { c = _verifyNoLeadingZeroes(); }  outBuf[outPtr++] = (char) c; int intLen = 1;  int end = _inputPtr + outBuf.length; [BUGGY] if (end > _inputEnd) { [BUGGY] end = _inputEnd; }  while (true) { if (_inputPtr >= end) {  return _parserNumber2(outBuf, outPtr, negative, intLen); } c = (int) _inputBuffer[_inputPtr++] & 0xFF; [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1216	1216	2	replace	
65	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (c == INT_0) { c = _verifyNoLeadingZeroes(); }  outBuf[outPtr++] = (char) c; int intLen = 1;  int end = _inputPtr + outBuf.length; [BUGGY] [BUGGY] if (end > _inputEnd) { end = _inputEnd; }  while (true) { if (_inputPtr >= end) {  return _parserNumber2(outBuf, outPtr, negative, intLen); } c = (int) _inputBuffer[_inputPtr++] & 0xFF; [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1216	1216	2	add	
66	[BUG] [BUGGY] end = _inputEnd; [FE] AssertionFailedError [CONTEXT] c = _verifyNoLeadingZeroes(); }  outBuf[outPtr++] = (char) c; int intLen = 1;  int end = _inputPtr + outBuf.length; if (end > _inputEnd) { [BUGGY] end = _inputEnd; [BUGGY] }  while (true) { if (_inputPtr >= end) {  return _parserNumber2(outBuf, outPtr, negative, intLen); } c = (int) _inputBuffer[_inputPtr++] & 0xFF; if (c < INT_0 || c > INT_9) { [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1217	1217	2	replace	
67	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] c = _verifyNoLeadingZeroes(); }  outBuf[outPtr++] = (char) c; int intLen = 1;  int end = _inputPtr + outBuf.length; if (end > _inputEnd) { [BUGGY] [BUGGY] end = _inputEnd; }  while (true) { if (_inputPtr >= end) {  return _parserNumber2(outBuf, outPtr, negative, intLen); } c = (int) _inputBuffer[_inputPtr++] & 0xFF; if (c < INT_0 || c > INT_9) { [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1217	1217	2	add	
68	[BUG] [BUGGY] if (_inputPtr >= end) { [FE] AssertionFailedError [CONTEXT] int intLen = 1;  int end = _inputPtr + outBuf.length; if (end > _inputEnd) { end = _inputEnd; }  while (true) { [BUGGY] if (_inputPtr >= end) { [BUGGY]  return _parserNumber2(outBuf, outPtr, negative, intLen); } c = (int) _inputBuffer[_inputPtr++] & 0xFF; if (c < INT_0 || c > INT_9) { break; } ++intLen; if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1222	1222	2	replace	
69	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] int intLen = 1;  int end = _inputPtr + outBuf.length; if (end > _inputEnd) { end = _inputEnd; }  while (true) { [BUGGY] [BUGGY] if (_inputPtr >= end) {  return _parserNumber2(outBuf, outPtr, negative, intLen); } c = (int) _inputBuffer[_inputPtr++] & 0xFF; if (c < INT_0 || c > INT_9) { break; } ++intLen; if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1222	1222	2	add	
70	[BUG] [BUGGY] c = (int) _inputBuffer[_inputPtr++] & 0xFF; [FE] AssertionFailedError [CONTEXT] if (end > _inputEnd) { end = _inputEnd; }  while (true) { if (_inputPtr >= end) {  return _parserNumber2(outBuf, outPtr, negative, intLen); } [BUGGY] c = (int) _inputBuffer[_inputPtr++] & 0xFF; [BUGGY] if (c < INT_0 || c > INT_9) { break; } ++intLen; if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } outBuf[outPtr++] = (char) c; } [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1226	1226	2	replace	
71	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (end > _inputEnd) { end = _inputEnd; }  while (true) { if (_inputPtr >= end) {  return _parserNumber2(outBuf, outPtr, negative, intLen); } [BUGGY] [BUGGY] c = (int) _inputBuffer[_inputPtr++] & 0xFF; if (c < INT_0 || c > INT_9) { break; } ++intLen; if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } outBuf[outPtr++] = (char) c; } [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1226	1226	2	add	
72	[BUG] [BUGGY] if (c < INT_0 || c > INT_9) { [FE] AssertionFailedError [CONTEXT] end = _inputEnd; }  while (true) { if (_inputPtr >= end) {  return _parserNumber2(outBuf, outPtr, negative, intLen); } c = (int) _inputBuffer[_inputPtr++] & 0xFF; [BUGGY] if (c < INT_0 || c > INT_9) { [BUGGY] break; } ++intLen; if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } outBuf[outPtr++] = (char) c; } if (c == '.' || c == 'e' || c == 'E') { [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1227	1227	2	replace	
73	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] end = _inputEnd; }  while (true) { if (_inputPtr >= end) {  return _parserNumber2(outBuf, outPtr, negative, intLen); } c = (int) _inputBuffer[_inputPtr++] & 0xFF; [BUGGY] [BUGGY] if (c < INT_0 || c > INT_9) { break; } ++intLen; if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } outBuf[outPtr++] = (char) c; } if (c == '.' || c == 'e' || c == 'E') { [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1227	1227	2	add	
74	[BUG] [BUGGY] break; [FE] AssertionFailedError [CONTEXT] }  while (true) { if (_inputPtr >= end) {  return _parserNumber2(outBuf, outPtr, negative, intLen); } c = (int) _inputBuffer[_inputPtr++] & 0xFF; if (c < INT_0 || c > INT_9) { [BUGGY] break; [BUGGY] } ++intLen; if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } outBuf[outPtr++] = (char) c; } if (c == '.' || c == 'e' || c == 'E') { return _parseFloat(outBuf, outPtr, c, negative, intLen); [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1228	1228	2	replace	
75	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] }  while (true) { if (_inputPtr >= end) {  return _parserNumber2(outBuf, outPtr, negative, intLen); } c = (int) _inputBuffer[_inputPtr++] & 0xFF; if (c < INT_0 || c > INT_9) { [BUGGY] [BUGGY] break; } ++intLen; if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } outBuf[outPtr++] = (char) c; } if (c == '.' || c == 'e' || c == 'E') { return _parseFloat(outBuf, outPtr, c, negative, intLen); [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1228	1228	2	add	
76	[BUG] [BUGGY] ++intLen; [FE] AssertionFailedError [CONTEXT]  while (true) { if (_inputPtr >= end) {  return _parserNumber2(outBuf, outPtr, negative, intLen); } c = (int) _inputBuffer[_inputPtr++] & 0xFF; if (c < INT_0 || c > INT_9) { break; } [BUGGY] ++intLen; [BUGGY] if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } outBuf[outPtr++] = (char) c; } if (c == '.' || c == 'e' || c == 'E') { return _parseFloat(outBuf, outPtr, c, negative, intLen); }  [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1230	1230	2	replace	
77	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  while (true) { if (_inputPtr >= end) {  return _parserNumber2(outBuf, outPtr, negative, intLen); } c = (int) _inputBuffer[_inputPtr++] & 0xFF; if (c < INT_0 || c > INT_9) { break; } [BUGGY] [BUGGY] ++intLen; if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } outBuf[outPtr++] = (char) c; } if (c == '.' || c == 'e' || c == 'E') { return _parseFloat(outBuf, outPtr, c, negative, intLen); }  [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1230	1230	2	add	
78	[BUG] [BUGGY] if (outPtr >= outBuf.length) { [FE] AssertionFailedError [CONTEXT] while (true) { if (_inputPtr >= end) {  return _parserNumber2(outBuf, outPtr, negative, intLen); } c = (int) _inputBuffer[_inputPtr++] & 0xFF; if (c < INT_0 || c > INT_9) { break; } ++intLen; [BUGGY] if (outPtr >= outBuf.length) { [BUGGY] outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } outBuf[outPtr++] = (char) c; } if (c == '.' || c == 'e' || c == 'E') { return _parseFloat(outBuf, outPtr, c, negative, intLen); } --_inputPtr; // to push back trailing char (comma etc) [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	
79	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] while (true) { if (_inputPtr >= end) {  return _parserNumber2(outBuf, outPtr, negative, intLen); } c = (int) _inputBuffer[_inputPtr++] & 0xFF; if (c < INT_0 || c > INT_9) { break; } ++intLen; [BUGGY] [BUGGY] if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } outBuf[outPtr++] = (char) c; } if (c == '.' || c == 'e' || c == 'E') { return _parseFloat(outBuf, outPtr, c, negative, intLen); } --_inputPtr; // to push back trailing char (comma etc) [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	add	
80	[BUG] [BUGGY] outBuf[outPtr++] = (char) c; [FE] AssertionFailedError [CONTEXT] } c = (int) _inputBuffer[_inputPtr++] & 0xFF; if (c < INT_0 || c > INT_9) { break; } ++intLen; if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } [BUGGY] outBuf[outPtr++] = (char) c; [BUGGY] } if (c == '.' || c == 'e' || c == 'E') { return _parseFloat(outBuf, outPtr, c, negative, intLen); } --_inputPtr; // to push back trailing char (comma etc) _textBuffer.setCurrentLength(outPtr);    [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	replace	
81	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } c = (int) _inputBuffer[_inputPtr++] & 0xFF; if (c < INT_0 || c > INT_9) { break; } ++intLen; if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } [BUGGY] [BUGGY] outBuf[outPtr++] = (char) c; } if (c == '.' || c == 'e' || c == 'E') { return _parseFloat(outBuf, outPtr, c, negative, intLen); } --_inputPtr; // to push back trailing char (comma etc) _textBuffer.setCurrentLength(outPtr);    [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1235	1235	2	add	
82	[BUG] [BUGGY] if (c == '.' || c == 'e' || c == 'E') { [FE] AssertionFailedError [CONTEXT] if (c < INT_0 || c > INT_9) { break; } ++intLen; if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } outBuf[outPtr++] = (char) c; } [BUGGY] if (c == '.' || c == 'e' || c == 'E') { [BUGGY] return _parseFloat(outBuf, outPtr, c, negative, intLen); } --_inputPtr; // to push back trailing char (comma etc) _textBuffer.setCurrentLength(outPtr);   return resetInt(negative, intLen); } [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1237	1237	2	replace	
83	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (c < INT_0 || c > INT_9) { break; } ++intLen; if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } outBuf[outPtr++] = (char) c; } [BUGGY] [BUGGY] if (c == '.' || c == 'e' || c == 'E') { return _parseFloat(outBuf, outPtr, c, negative, intLen); } --_inputPtr; // to push back trailing char (comma etc) _textBuffer.setCurrentLength(outPtr);   return resetInt(negative, intLen); } [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1237	1237	2	add	
84	[BUG] [BUGGY] --_inputPtr; // to push back trailing char (comma etc) _textBuffer.setCurrentLength(outPtr); [FE] AssertionFailedError [CONTEXT] if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } outBuf[outPtr++] = (char) c; } if (c == '.' || c == 'e' || c == 'E') { return _parseFloat(outBuf, outPtr, c, negative, intLen); } [BUGGY] --_inputPtr; // to push back trailing char (comma etc)  _textBuffer.setCurrentLength(outPtr); [BUGGY] _textBuffer.setCurrentLength(outPtr);   return resetInt(negative, intLen); } [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1241	1242	2	replace	
85	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (outPtr >= outBuf.length) { outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } outBuf[outPtr++] = (char) c; } if (c == '.' || c == 'e' || c == 'E') { return _parseFloat(outBuf, outPtr, c, negative, intLen); } [BUGGY] [BUGGY] --_inputPtr; // to push back trailing char (comma etc)  _textBuffer.setCurrentLength(outPtr); _textBuffer.setCurrentLength(outPtr);   return resetInt(negative, intLen); } [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1241	1242	2	add	
86	[BUG] [BUGGY] _textBuffer.setCurrentLength(outPtr); [FE] AssertionFailedError [CONTEXT] outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } outBuf[outPtr++] = (char) c; } if (c == '.' || c == 'e' || c == 'E') { return _parseFloat(outBuf, outPtr, c, negative, intLen); } --_inputPtr; // to push back trailing char (comma etc) [BUGGY] _textBuffer.setCurrentLength(outPtr); [BUGGY]    return resetInt(negative, intLen); } [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1242	1242	2	replace	
87	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] outBuf = _textBuffer.finishCurrentSegment(); outPtr = 0; } outBuf[outPtr++] = (char) c; } if (c == '.' || c == 'e' || c == 'E') { return _parseFloat(outBuf, outPtr, c, negative, intLen); } --_inputPtr; // to push back trailing char (comma etc) [BUGGY] [BUGGY] _textBuffer.setCurrentLength(outPtr);   return resetInt(negative, intLen); } [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1242	1242	2	add	
88	[BUG] [BUGGY] return resetInt(negative, intLen); [FE] AssertionFailedError [CONTEXT] } if (c == '.' || c == 'e' || c == 'E') { return _parseFloat(outBuf, outPtr, c, negative, intLen); } --_inputPtr; // to push back trailing char (comma etc) _textBuffer.setCurrentLength(outPtr);   [BUGGY] return resetInt(negative, intLen); [BUGGY] } [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1246	1246	2	replace	
89	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } if (c == '.' || c == 'e' || c == 'E') { return _parseFloat(outBuf, outPtr, c, negative, intLen); } --_inputPtr; // to push back trailing char (comma etc) _textBuffer.setCurrentLength(outPtr);   [BUGGY] [BUGGY] return resetInt(negative, intLen); } [CLASS] UTF8StreamJsonParser [METHOD] _parseNumber [RETURN_TYPE] JsonToken  int c [VARIABLES] byte[] _inputBuffer b buf buffer inputBuffer nameBytes boolean _bufferRecyclable _tokenIncomplete bufferRecyclable match negative byte BYTE_LF InputStream _inputStream in BytesToNameCanonicalizer _symbols sym int[] _icLatin1 _icUTF8 _icWS _quadBuffer ObjectCodec _objectCodec c codec int _quad1 amount bits c ch count decodedData defaultValue end features i intLen len minAvailable nameLen offset origPtr outPtr outputCount outputEnd outputPtr ptr start char[] outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1246	1246	2	add	
90	[BUG] [BUGGY] super(ctxt, features); [FE] AssertionFailedError [CONTEXT] public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r, ObjectCodec codec, CharsToNameCanonicalizer st) { [BUGGY] super(ctxt, features); [BUGGY] _reader = r; _inputBuffer = ctxt.allocTokenBuffer(); _objectCodec = codec; _symbols = st; _hashSeed = st.hashSeed(); } [CLASS] ReaderBasedJsonParser [METHOD] <init> [RETURN_TYPE] CharsToNameCanonicalizer)  IOContext ctxt int features Reader r ObjectCodec codec CharsToNameCanonicalizer st [VARIABLES] boolean _tokenIncomplete Reader _reader r IOContext ctxt int[] _icLatin1 _icWS ObjectCodec _objectCodec codec CharsToNameCanonicalizer _symbols st int _hashSeed features char[] _inputBuffer  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5	80	80	2	replace	
91	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r, ObjectCodec codec, CharsToNameCanonicalizer st) { [BUGGY] [BUGGY] super(ctxt, features); _reader = r; _inputBuffer = ctxt.allocTokenBuffer(); _objectCodec = codec; _symbols = st; _hashSeed = st.hashSeed(); } [CLASS] ReaderBasedJsonParser [METHOD] <init> [RETURN_TYPE] CharsToNameCanonicalizer)  IOContext ctxt int features Reader r ObjectCodec codec CharsToNameCanonicalizer st [VARIABLES] boolean _tokenIncomplete Reader _reader r IOContext ctxt int[] _icLatin1 _icWS ObjectCodec _objectCodec codec CharsToNameCanonicalizer _symbols st int _hashSeed features char[] _inputBuffer  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5	80	80	2	add	
92	[BUG] [BUGGY] protected boolean _tokenIncomplete = false; [FE] AssertionFailedError [CONTEXT] [BUGGY] protected boolean _tokenIncomplete = false; [BUGGY]  [CLASS] ReaderBasedJsonParser  [VARIABLES] 	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5	69	69	2	replace	
93	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] protected boolean _tokenIncomplete = false; [CLASS] ReaderBasedJsonParser  [VARIABLES] 	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5	69	69	2	add	
94	[BUG] [BUGGY] _reader = r; [FE] AssertionFailedError [CONTEXT] public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r, ObjectCodec codec, CharsToNameCanonicalizer st) { super(ctxt, features); [BUGGY] _reader = r; [BUGGY] _inputBuffer = ctxt.allocTokenBuffer(); _objectCodec = codec; _symbols = st; _hashSeed = st.hashSeed(); } [CLASS] ReaderBasedJsonParser [METHOD] <init> [RETURN_TYPE] CharsToNameCanonicalizer)  IOContext ctxt int features Reader r ObjectCodec codec CharsToNameCanonicalizer st [VARIABLES] boolean _tokenIncomplete Reader _reader r IOContext ctxt int[] _icLatin1 _icWS ObjectCodec _objectCodec codec CharsToNameCanonicalizer _symbols st int _hashSeed features char[] _inputBuffer  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5	81	81	2	replace	
95	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r, ObjectCodec codec, CharsToNameCanonicalizer st) { super(ctxt, features); [BUGGY] [BUGGY] _reader = r; _inputBuffer = ctxt.allocTokenBuffer(); _objectCodec = codec; _symbols = st; _hashSeed = st.hashSeed(); } [CLASS] ReaderBasedJsonParser [METHOD] <init> [RETURN_TYPE] CharsToNameCanonicalizer)  IOContext ctxt int features Reader r ObjectCodec codec CharsToNameCanonicalizer st [VARIABLES] boolean _tokenIncomplete Reader _reader r IOContext ctxt int[] _icLatin1 _icWS ObjectCodec _objectCodec codec CharsToNameCanonicalizer _symbols st int _hashSeed features char[] _inputBuffer  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5	81	81	2	add	
96	[BUG] [BUGGY] _inputBuffer = ctxt.allocTokenBuffer(); [FE] AssertionFailedError [CONTEXT] public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r, ObjectCodec codec, CharsToNameCanonicalizer st) { super(ctxt, features); _reader = r; [BUGGY] _inputBuffer = ctxt.allocTokenBuffer(); [BUGGY] _objectCodec = codec; _symbols = st; _hashSeed = st.hashSeed(); } [CLASS] ReaderBasedJsonParser [METHOD] <init> [RETURN_TYPE] CharsToNameCanonicalizer)  IOContext ctxt int features Reader r ObjectCodec codec CharsToNameCanonicalizer st [VARIABLES] boolean _tokenIncomplete Reader _reader r IOContext ctxt int[] _icLatin1 _icWS ObjectCodec _objectCodec codec CharsToNameCanonicalizer _symbols st int _hashSeed features char[] _inputBuffer  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5	82	82	2	replace	
97	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r, ObjectCodec codec, CharsToNameCanonicalizer st) { super(ctxt, features); _reader = r; [BUGGY] [BUGGY] _inputBuffer = ctxt.allocTokenBuffer(); _objectCodec = codec; _symbols = st; _hashSeed = st.hashSeed(); } [CLASS] ReaderBasedJsonParser [METHOD] <init> [RETURN_TYPE] CharsToNameCanonicalizer)  IOContext ctxt int features Reader r ObjectCodec codec CharsToNameCanonicalizer st [VARIABLES] boolean _tokenIncomplete Reader _reader r IOContext ctxt int[] _icLatin1 _icWS ObjectCodec _objectCodec codec CharsToNameCanonicalizer _symbols st int _hashSeed features char[] _inputBuffer  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5	82	82	2	add	
98	[BUG] [BUGGY] _objectCodec = codec; [FE] AssertionFailedError [CONTEXT] public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r, ObjectCodec codec, CharsToNameCanonicalizer st) { super(ctxt, features); _reader = r; _inputBuffer = ctxt.allocTokenBuffer(); [BUGGY] _objectCodec = codec; [BUGGY] _symbols = st; _hashSeed = st.hashSeed(); } [CLASS] ReaderBasedJsonParser [METHOD] <init> [RETURN_TYPE] CharsToNameCanonicalizer)  IOContext ctxt int features Reader r ObjectCodec codec CharsToNameCanonicalizer st [VARIABLES] boolean _tokenIncomplete Reader _reader r IOContext ctxt int[] _icLatin1 _icWS ObjectCodec _objectCodec codec CharsToNameCanonicalizer _symbols st int _hashSeed features char[] _inputBuffer  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5	83	83	2	replace	
99	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r, ObjectCodec codec, CharsToNameCanonicalizer st) { super(ctxt, features); _reader = r; _inputBuffer = ctxt.allocTokenBuffer(); [BUGGY] [BUGGY] _objectCodec = codec; _symbols = st; _hashSeed = st.hashSeed(); } [CLASS] ReaderBasedJsonParser [METHOD] <init> [RETURN_TYPE] CharsToNameCanonicalizer)  IOContext ctxt int features Reader r ObjectCodec codec CharsToNameCanonicalizer st [VARIABLES] boolean _tokenIncomplete Reader _reader r IOContext ctxt int[] _icLatin1 _icWS ObjectCodec _objectCodec codec CharsToNameCanonicalizer _symbols st int _hashSeed features char[] _inputBuffer  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.5	83	83	2	add	
