bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  reset(negative,  intLen,  len,  inputLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  return  reset(negative,  intLen,  len,  inputLen);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  len,  inputLen);	  return    reset(negative,    intLen,    fractLen,    inputLen);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
2	[BUG]  [BUGGY]  return  reset(negative,  intLen,  inputLen,  fractLen);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  return  reset(negative,  intLen,  inputLen,  fractLen);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  inputLen,  fractLen);	  return    reset(negative,    intLen,    fractLen,    inputLen);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
3	[BUG]  [BUGGY]  return  reset(negative,  intLen,  len,  fractLen);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  return  reset(negative,  intLen,  len,  fractLen);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  len,  fractLen);	  return    reset(negative,    intLen,    fractLen,    len);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
4	[BUG]  [BUGGY]  return  reset(negative,  intLen,  outputPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  return  reset(negative,  intLen,  outputPtr,  fractLen);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  outputPtr,  fractLen);	  return    reset(negative,    intLen,    fractLen,    outputPtr);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
5	[BUG]  [BUGGY]  return  reset(negative,  intLen,  outputEnd,  fractLen);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  return  reset(negative,  intLen,  outputEnd,  fractLen);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  outputEnd,  fractLen);	  return    reset(negative,    intLen,    fractLen,    outputPtr);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
6	[BUG]  [BUGGY]  return  reset(negative,  intLen,  outputCount,  fractLen);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  return  reset(negative,  intLen,  outputCount,  fractLen);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  outputCount,  fractLen);	  return    reset(negative,    intLen,    fractLen,    outputPtr);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
7	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  len  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  return  reset(negative,  intLen,  fractLen,  len  +  1);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  len  +  1);	  return    reset(negative,    intLen,    fractLen,    expLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
8	[BUG]  [BUGGY]  return  reset(negative,  intLen,  expLen,  fractLen  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  return  reset(negative,  intLen,  expLen,  fractLen  +  1);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  expLen,  fractLen  +  1);	  return    reset(negative,    intLen,    fractLen,    expLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
9	[BUG]  [BUGGY]  return  reset(negative,  intLen,  len,  expLen  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  return  reset(negative,  intLen,  len,  expLen  +  1);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  len,  expLen  +  1);	  return    reset(negative,    intLen,    fractLen,    expLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
10	[BUG]  [BUGGY]  return  reset(negative,  intLen,  startPtr,  expLen);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  return  reset(negative,  intLen,  startPtr,  expLen);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  startPtr,  expLen);	  return    reset(negative,    intLen,    len,    expLen);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
11	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
12	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  _parseNumber2(negative);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  _parseNumber2(negative);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  _parseNumber2(negative);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
13	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  len  -  1);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  return  reset(negative,  intLen,  fractLen,  len  -  1);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  len  -  1);	  return    reset(negative,    intLen,    fractLen,    expLen    -    1);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
14	[BUG]  [BUGGY]  return  reset(negative,  intLen,  len,  expLen  -  1);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  return  reset(negative,  intLen,  len,  expLen  -  1);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  len,  expLen  -  1);	  return    reset(negative,    intLen,    fractLen,    expLen    -    1);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
15	[BUG]  [BUGGY]  return  reset(negative,  intLen,  expLen,  fractLen  -  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  return  reset(negative,  intLen,  expLen,  fractLen  -  1);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  expLen,  fractLen  -  1);	  return    reset(negative,    intLen,    fractLen,    expLen    -    1);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
16	[BUG]  [BUGGY]  return  reset(negative,  intLen,  expLen,  fractLen,  len);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  return  reset(negative,  intLen,  expLen,  fractLen,  len);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  expLen,  fractLen,  len);	  return    reset(negative,    intLen,    expLen,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
17	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  outputEnd);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  return  reset(negative,  intLen,  fractLen,  outputEnd);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  outputEnd);	  return    reset(negative,    intLen,    fractLen,    inputLen);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
18	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  if(len  >  0)  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	if(len  >  0)  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
19	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  _parseNumber2(len);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  _parseNumber2(len);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  _parseNumber2(len);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
20	[BUG]  [BUGGY]  return  reset(negative,  intLen,  startPtr,  len);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  return  reset(negative,  intLen,  startPtr,  len);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  startPtr,  len);	  return    reset(negative,    intLen,    len,    expLen);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
21	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  outputEnd,  outputPtr);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  return  reset(negative,  intLen,  fractLen,  outputEnd,  outputPtr);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  outputEnd,  outputPtr);	  return    reset(negative,    intLen,    fractLen,    outputPtr);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
22	[BUG]  [BUGGY]  return  reset(negative,  intLen,  inputLen,  fractLen,  outputPtr);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  return  reset(negative,  intLen,  inputLen,  fractLen,  outputPtr);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  inputLen,  fractLen,  outputPtr);	  return    reset(negative,    intLen,    fractLen,    outputPtr);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
23	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  outputPtr  -  1);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  return  reset(negative,  intLen,  fractLen,  outputPtr  -  1);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  outputPtr  -  1);	  return    reset(negative,    intLen,    fractLen,    expLen    -    1);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
24	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  outputPtr  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  return  reset(negative,  intLen,  fractLen,  outputPtr  +  1);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  outputPtr  +  1);	  return    reset(negative,    intLen,    fractLen,    expLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
25	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  inputLen  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  return  reset(negative,  intLen,  fractLen,  inputLen  +  1);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  inputLen  +  1);	  return    reset(negative,    intLen,    fractLen,    expLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
26	[BUG]  [BUGGY]  return  reset(negative,  intLen,  expLen,  len);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  return  reset(negative,  intLen,  expLen,  len);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  expLen,  len);	  return    reset(negative,    intLen,    fractLen,    len);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
27	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  i  =  startPtr;  i  <  expLen;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  if(len  >  0)  {  for(int  i  =  startPtr;  i  <  expLen;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  }  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	if(len  >  0)  {  for(int  i  =  startPtr;  i  <  expLen;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
28	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  if(len  >  0)  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	if(len  >  0)  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
29	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  expLen  *  expLen  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  return  reset(negative,  intLen,  fractLen,  expLen  *  expLen  +  1);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  expLen  *  expLen  +  1);	  return    reset(negative,    intLen,    fractLen,    expLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
30	[BUG]  [BUGGY]  return  reset(negative,  intLen,  inputLen,  fractLen  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  return  reset(negative,  intLen,  inputLen,  fractLen  +  1);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  inputLen,  fractLen  +  1);	  return    reset(negative,    intLen,    fractLen,    expLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
31	[BUG]  [BUGGY]  return  reset(negative,  intLen,  expLen,  outputPtr);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  return  reset(negative,  intLen,  expLen,  outputPtr);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  expLen,  outputPtr);	  return    reset(negative,    intLen,    fractLen,    outputPtr);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
32	[BUG]  [BUGGY]  return  reset(negative,  intLen,  inputLen,  fractLen,  expLen);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  return  reset(negative,  intLen,  inputLen,  fractLen,  expLen);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  inputLen,  fractLen,  expLen);	  return    reset(negative,    intLen,    fractLen,    outputPtr);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
33	[BUG]  [BUGGY]  return  reset(negative,  intLen,  expLen,  fractLen,  expLen);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);    [BUGGY]  return  reset(negative,  intLen,  expLen,  fractLen,  expLen);  [BUGGY]    }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  expLen,  fractLen,  expLen);	  return    reset(negative,    intLen,    expLen,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
