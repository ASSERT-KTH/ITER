bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  readFully(_inputBuffer,  startPtr,  len);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  readFully(_inputBuffer,  startPtr,  len);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	readFully(_inputBuffer,  startPtr,  len);	  if(len    >    0)    {    for(int    i    =    startPtr;    i    <    expLen;    ++i)    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
2	[BUG]  [BUGGY]  readFully(_textBuffer,  _inputBuffer,  startPtr,  len);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  readFully(_textBuffer,  _inputBuffer,  startPtr,  len);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	readFully(_textBuffer,  _inputBuffer,  startPtr,  len);	  if(len    >    0)    {    for(int    i    =    startPtr;    i    <    expLen;    ++i)    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
3	[BUG]  [BUGGY]  readFully(_textBuffer,  startPtr,  len);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  readFully(_textBuffer,  startPtr,  len);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	readFully(_textBuffer,  startPtr,  len);	  if(len    >    0)    {    for(int    i    =    startPtr;    i    <    expLen;    ++i)    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
4	[BUG]  [BUGGY]  readFully(_textBuffer,  _inputPtr,  len);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  readFully(_textBuffer,  _inputPtr,  len);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	readFully(_textBuffer,  _inputPtr,  len);	  if(len    >    0)    {    for(int    i    =    startPtr;    i    <    expLen;    ++i)    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
5	[BUG]  [BUGGY]  return  reset(negative,  intLen,  outputEnd,  fractLen  -  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  outputEnd,  fractLen  -  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  outputEnd,  fractLen  -  1);	  return    reset(negative,    intLen,    fractLen,    outputPtr    -    1);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
6	[BUG]  [BUGGY]  return  reset(negative,  intLen,  outputCount,  fractLen  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  outputCount,  fractLen  -  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  outputCount,  fractLen  -  1);	  return    reset(negative,    intLen,    fractLen,    outputPtr    -    1);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
7	[BUG]  [BUGGY]  return  reset(negative,  intLen,  len,  outputPtr  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  len,  outputPtr  -  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  len,  outputPtr  -  1);	  return    reset(negative,    intLen,    fractLen,    outputPtr    -    1);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
8	[BUG]  [BUGGY]  return  reset(negative,  intLen,  len,  outputPtr);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  len,  outputPtr);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  len,  outputPtr);	  return    reset(negative,    intLen,    expLen,    outputPtr);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
9	[BUG]  [BUGGY]  return  reset(negative,  intLen,  outputPtr,  expLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  outputPtr,  expLen);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  outputPtr,  expLen);	  return    reset(negative,    intLen,    expLen,    outputPtr);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
10	[BUG]  [BUGGY]  return  reset(negative,  intLen,  outputEnd,  expLen);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  outputEnd,  expLen);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  outputEnd,  expLen);	  return    reset(negative,    intLen,    expLen,    outputPtr);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
11	[BUG]  [BUGGY]  return  reset(negative,  intLen,  expLen,  len  -  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  expLen,  len  -  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  expLen,  len  -  1);	  return    reset(negative,    intLen,    fractLen,    len    -    1);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
12	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  outputCount);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  fractLen,  outputCount);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  outputCount);	  return    reset(negative,    intLen,    outputEnd,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
13	[BUG]  [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  _parseNumber2(negative);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  _parseNumber2(negative);  }  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  _parseNumber2(negative);  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    return    _parseNumber2(negative);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
14	[BUG]  [BUGGY]  if(len  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  _parseNumber2(negative);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  if(len  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  _parseNumber2(negative);  }  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	if(len  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  _parseNumber2(negative);  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    return    _parseNumber2(negative);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
15	[BUG]  [BUGGY]  readLimits(ptr,  startPtr,  len);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  readLimits(ptr,  startPtr,  len);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	readLimits(ptr,  startPtr,  len);	  if(len    >    0)    {    for(int    i    =    startPtr;    i    <    len;    ++i)    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    fractLen);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
16	[BUG]  [BUGGY]  readFully(_inputBuffer,  ptr,  len);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  readFully(_inputBuffer,  ptr,  len);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	readFully(_inputBuffer,  ptr,  len);	  if(len    >    0)    {    for(int    i    =    startPtr;    i    <    len;    ++i)    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    fractLen);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
17	[BUG]  [BUGGY]  readFully(_inputBuffer,  fractLen,  len);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  readFully(_inputBuffer,  fractLen,  len);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	readFully(_inputBuffer,  fractLen,  len);	  if(len    >    0)    {    for(int    i    =    startPtr;    i    <    len;    ++i)    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    fractLen);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
18	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  startPtr,  len);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  fractLen,  startPtr,  len);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  startPtr,  len);	  return    reset(negative,    intLen,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
19	[BUG]  [BUGGY]  return  reset(negative,  intLen,  startPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  startPtr,  fractLen);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  startPtr,  fractLen);	  return    reset(negative,    intLen,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
20	[BUG]  [BUGGY]  return  reset(negative,  intLen,  len,  fractLen  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  len,  fractLen  +  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  len,  fractLen  +  1);	  return    reset(negative,    intLen,    len,    expLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
21	[BUG]  [BUGGY]  return  reset(negative,  intLen,  startPtr,  expLen  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  startPtr,  expLen  +  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  startPtr,  expLen  +  1);	  return    reset(negative,    intLen,    len,    expLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
22	[BUG]  [BUGGY]  readFully(_textBuffer,  _inputBuffer,  startPtr,  expLen);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  readFully(_textBuffer,  _inputBuffer,  startPtr,  expLen);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	readFully(_textBuffer,  _inputBuffer,  startPtr,  expLen);	  if(len    >    0)    {    for(int    i    =    startPtr;    i    <    len;    ++i)    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
23	[BUG]  [BUGGY]  return  reset(negative,  intLen,  len,  inputLen  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  len,  inputLen  +  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  len,  inputLen  +  1);	  return    reset(negative,    intLen,    fractLen,    inputLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
24	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  expLen,  outputPtr);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  fractLen,  expLen,  outputPtr);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  expLen,  outputPtr);	  return    reset(negative,    intLen,    inputLen,    fractLen,    outputPtr);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
25	[BUG]  [BUGGY]  return  reset(negative,  intLen,  expLen,  fractLen,  outputPtr);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  expLen,  fractLen,  outputPtr);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  expLen,  fractLen,  outputPtr);	  return    reset(negative,    intLen,    inputLen,    fractLen,    outputPtr);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
26	[BUG]  [BUGGY]  return  reset(negative,  intLen,  len,  fractLen,  outputPtr);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  len,  fractLen,  outputPtr);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  len,  fractLen,  outputPtr);	  return    reset(negative,    intLen,    inputLen,    fractLen,    outputPtr);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
27	[BUG]  [BUGGY]  return  reset(negative,  intLen,  len,  fractLen,  expLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  len,  fractLen,  expLen);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  len,  fractLen,  expLen);	  return    reset(negative,    intLen,    expLen,    fractLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
28	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  expLen,  len);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  fractLen,  expLen,  len);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  expLen,  len);	  return    reset(negative,    intLen,    expLen,    fractLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
29	[BUG]  [BUGGY]  return  reset(negative,  intLen,  outputPtr,  len);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  outputPtr,  len);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  outputPtr,  len);	  return    reset(negative,    intLen,    outputPtr,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
30	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len,  expLen);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len,  expLen);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  len,  expLen);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
31	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
32	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len  +  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  len  +  1);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
33	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  len  *  expLen  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  fractLen,  len  *  expLen  +  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  len  *  expLen  +  1);	  return    reset(negative,    intLen,    fractLen,    expLen    *    expLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
34	[BUG]  [BUGGY]  return  reset(negative,  intLen,  expLen,  fractLen  *  expLen  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  expLen,  fractLen  *  expLen  +  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  expLen,  fractLen  *  expLen  +  1);	  return    reset(negative,    intLen,    fractLen,    expLen    *    expLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
35	[BUG]  [BUGGY]  return  reset(negative,  intLen,  inputLen,  fractLen  *  expLen  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  inputLen,  fractLen  *  expLen  +  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  inputLen,  fractLen  *  expLen  +  1);	  return    reset(negative,    intLen,    fractLen,    expLen    *    expLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
36	[BUG]  [BUGGY]  return  reset(negative,  intLen,  inputLen,  fractLen,  len);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  inputLen,  fractLen,  len);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  inputLen,  fractLen,  len);	  return    reset(negative,    intLen,    expLen,    fractLen,    len);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
37	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  outputCount,  outputPtr);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  fractLen,  outputCount,  outputPtr);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  outputCount,  outputPtr);	  return    reset(negative,    intLen,    fractLen,    outputEnd,    outputPtr);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
38	[BUG]  [BUGGY]  return  reset(negative,  intLen,  outputCount,  fractLen,  outputPtr);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  outputCount,  fractLen,  outputPtr);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  outputCount,  fractLen,  outputPtr);	  return    reset(negative,    intLen,    fractLen,    outputEnd,    outputPtr);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
39	[BUG]  [BUGGY]  return  reset(negative,  intLen,  len,  outputEnd,  fractLen);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  len,  outputEnd,  fractLen);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  len,  outputEnd,  fractLen);	  return    reset(negative,    intLen,    fractLen,    outputEnd,    outputPtr);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
40	[BUG]  [BUGGY]  return  reset(negative,  intLen,  inputLen,  outputEnd,  ptr);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  inputLen,  outputEnd,  ptr);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  inputLen,  outputEnd,  ptr);	  return    reset(negative,    intLen,    fractLen,    outputEnd,    outputPtr);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
41	[BUG]  [BUGGY]  return  reset(negative,  intLen,  expLen,  fractLen,  inputLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  expLen,  fractLen,  inputLen);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  expLen,  fractLen,  inputLen);	  return    reset(negative,    intLen,    inputLen,    fractLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
42	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  expLen,  inputLen);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  fractLen,  expLen,  inputLen);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  expLen,  inputLen);	  return    reset(negative,    intLen,    inputLen,    fractLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
43	[BUG]  [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  _parseNumber2(len);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  _parseNumber2(len);  }  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  _parseNumber2(len);  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    return    _parseNumber2(len);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
44	[BUG]  [BUGGY]  if(len  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  _parseNumber2(len);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  if(len  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  _parseNumber2(len);  }  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	if(len  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  _parseNumber2(len);  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    return    _parseNumber2(len);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
45	[BUG]  [BUGGY]  if(len  <  =  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  _parseNumber2(len);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  if(len  <  =  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  _parseNumber2(len);  }  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	if(len  <  =  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  _parseNumber2(len);  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    return    _parseNumber2(len);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
46	[BUG]  [BUGGY]  return  reset(negative,  intLen,  outputEnd,  fractLen  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  outputEnd,  fractLen  +  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  outputEnd,  fractLen  +  1);	  return    reset(negative,    intLen,    fractLen,    outputPtr    +    1);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
47	[BUG]  [BUGGY]  return  reset(negative,  intLen,  outputPtr,  fractLen  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  outputPtr,  fractLen  +  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  outputPtr,  fractLen  +  1);	  return    reset(negative,    intLen,    fractLen,    outputPtr    +    1);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
48	[BUG]  [BUGGY]  return  reset(negative,  intLen,  outputCount,  fractLen  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  outputCount,  fractLen  +  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  outputCount,  fractLen  +  1);	  return    reset(negative,    intLen,    fractLen,    outputPtr    +    1);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
49	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  outputEnd  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  fractLen,  outputEnd  +  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  outputEnd  +  1);	  return    reset(negative,    intLen,    fractLen,    outputPtr    +    1);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
50	[BUG]  [BUGGY]  return  reset(negative,  intLen,  inputLen,  fractLen  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  inputLen,  fractLen  -  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  inputLen,  fractLen  -  1);	  return    reset(negative,    intLen,    expLen,    fractLen    -    1);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
51	[BUG]  [BUGGY]  return  reset(negative,  intLen,  len,  fractLen  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  len,  fractLen  -  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  len,  fractLen  -  1);	  return    reset(negative,    intLen,    len,    expLen    -    1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
52	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  outputPtr,  expLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  fractLen,  outputPtr,  expLen);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  outputPtr,  expLen);	  return    reset(negative,    intLen,    inputLen,    fractLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
53	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  inputLen,  expLen);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  fractLen,  inputLen,  expLen);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  inputLen,  expLen);	  return    reset(negative,    intLen,    inputLen,    fractLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
54	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  outputEnd);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  outputEnd);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  outputEnd);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
55	[BUG]  [BUGGY]  readFully(_textBuffer,  _inputBuffer,  startPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  readFully(_textBuffer,  _inputBuffer,  startPtr,  fractLen);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	readFully(_textBuffer,  _inputBuffer,  startPtr,  fractLen);	  if(len    >    0)    {    for(int    i    =    startPtr;    i    <    len;    ++i)    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    fractLen);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
56	[BUG]  [BUGGY]  return  reset(negative,  intLen,  inputPtr,  fractLen  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  inputPtr,  fractLen  +  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  inputPtr,  fractLen  +  1);	  return    reset(negative,    intLen,    inputLen,    fractLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
57	[BUG]  [BUGGY]  return  reset(negative,  intLen,  startPtr,  outputEnd);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  startPtr,  outputEnd);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  startPtr,  outputEnd);	  return    reset(negative,    intLen,    startPtr,    len);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
58	[BUG]  [BUGGY]  Integer  negative  =  _parseInt(negative);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  Integer  negative  =  _parseInt(negative);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	Integer  negative  =  _parseInt(negative);	  if(len    >    0)    {    for(int    i    =    startPtr;    i    <    len;    ++i)    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
59	[BUG]  [BUGGY]  Integer  negative  =  _parseNumber(negative);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  Integer  negative  =  _parseNumber(negative);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	Integer  negative  =  _parseNumber(negative);	  if(len    >    0)    {    for(int    i    =    startPtr;    i    <    len;    ++i)    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
60	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  inputLen,  len);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  fractLen,  inputLen,  len);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  inputLen,  len);	  return    reset(negative,    intLen,    expLen,    fractLen,    len);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
61	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  outputPtr,  len);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  fractLen,  outputPtr,  len);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  outputPtr,  len);	  return    reset(negative,    intLen,    expLen,    fractLen,    len);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
62	[BUG]  [BUGGY]  return  reset(negative,  intLen,  inputPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  inputPtr,  fractLen);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  inputPtr,  fractLen);	  return    reset(negative,    intLen,    outputPtr,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
63	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  startPtr,  expLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  fractLen,  startPtr,  expLen);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  startPtr,  expLen);	  return    reset(negative,    intLen,    startPtr,    expLen);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
64	[BUG]  [BUGGY]  return  reset(negative,  intLen,  outputCount,  expLen);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  outputCount,  expLen);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  outputCount,  expLen);	  return    reset(negative,    intLen,    expLen,    outputPtr);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
65	[BUG]  [BUGGY]  return  reset(negative,  intLen,  len,  outputPtr  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  len,  outputPtr  +  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  len,  outputPtr  +  1);	  return    reset(negative,    intLen,    len,    expLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
66	[BUG]  [BUGGY]  return  reset(negative,  intLen,  startPtr,  len  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  startPtr,  len  +  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  startPtr,  len  +  1);	  return    reset(negative,    intLen,    len,    expLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
67	[BUG]  [BUGGY]  Integer  negative  =  _parseNumber2(negative);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  Integer  negative  =  _parseNumber2(negative);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	Integer  negative  =  _parseNumber2(negative);	  if(len    >    0)    {    for(int    i    =    startPtr;    i    <    expLen;    ++i)    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
68	[BUG]  [BUGGY]  return  reset(negative,  intLen,  inputLen,  outputEnd,  fractLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  inputLen,  outputEnd,  fractLen);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  inputLen,  outputEnd,  fractLen);	  return    reset(negative,    intLen,    outputEnd,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
69	[BUG]  [BUGGY]  return  reset(negative,  intLen,  inputLen,  fractLen,  outputEnd);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  inputLen,  fractLen,  outputEnd);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  inputLen,  fractLen,  outputEnd);	  return    reset(negative,    intLen,    fractLen,    outputEnd);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
70	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  outputPtr  *  expLen  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  fractLen,  outputPtr  *  expLen  +  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  outputPtr  *  expLen  +  1);	  return    reset(negative,    intLen,    fractLen,    expLen    *    expLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
71	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  inputLen  *  expLen  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  fractLen,  inputLen  *  expLen  +  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  inputLen  *  expLen  +  1);	  return    reset(negative,    intLen,    fractLen,    expLen    *    expLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
72	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  startPtr  *  expLen  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  fractLen,  startPtr  *  expLen  +  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  startPtr  *  expLen  +  1);	  return    reset(negative,    intLen,    fractLen,    expLen    *    expLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
73	[BUG]  [BUGGY]  return  reset(negative,  intLen,  inputPtr,  len);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  inputPtr,  len);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  inputPtr,  len);	  return    reset(negative,    intLen,    len,    inputLen);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
74	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  inputPtr  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  fractLen,  inputPtr  +  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  inputPtr  +  1);	  return    reset(negative,    intLen,    fractLen,    inputLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
75	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  inputEnd  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  fractLen,  inputEnd  +  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  inputEnd  +  1);	  return    reset(negative,    intLen,    fractLen,    inputLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
76	[BUG]  [BUGGY]  if(len  <  =  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  _parseNumber2(negative);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  if(len  <  =  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  _parseNumber2(negative);  }  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	if(len  <  =  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  _parseNumber2(negative);  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    return    _parseNumber2(negative);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
77	[BUG]  [BUGGY]  return  reset(negative,  intLen,  outputPtr,  fractLen,  outputEnd);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  outputPtr,  fractLen,  outputEnd);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  outputPtr,  fractLen,  outputEnd);	  return    reset(negative,    intLen,    fractLen,    outputEnd,    outputPtr);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
78	[BUG]  [BUGGY]  return  reset(negative,  intLen,  outputStart,  fractLen,  outputPtr);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  outputStart,  fractLen,  outputPtr);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  outputStart,  fractLen,  outputPtr);	  return    reset(negative,    intLen,    fractLen,    outputEnd,    outputPtr);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
79	[BUG]  [BUGGY]  return  reset(negative,  intLen,  inputPtr,  fractLen,  outputLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  inputPtr,  fractLen,  outputLen);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  inputPtr,  fractLen,  outputLen);	  return    reset(negative,    intLen,    inputLen,    fractLen,    outputPtr);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
80	[BUG]  [BUGGY]  return  reset(negative,  intLen,  outputPtr,  fractLen,  inputLen);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  outputPtr,  fractLen,  inputLen);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  outputPtr,  fractLen,  inputLen);	  return    reset(negative,    intLen,    inputLen,    fractLen,    outputPtr);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
81	[BUG]  [BUGGY]  return  reset(negative,  intLen,  outputCount,  fractLen,  inputLen);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  outputCount,  fractLen,  inputLen);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  outputCount,  fractLen,  inputLen);	  return    reset(negative,    intLen,    inputLen,    fractLen,    outputPtr);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
82	[BUG]  [BUGGY]  return  reset(negative,  intLen,  outputCount,  len);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  outputCount,  len);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  outputCount,  len);	  return    reset(negative,    intLen,    outputCount,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
83	[BUG]  [BUGGY]  return  reset(negative,  intLen,  outputCount,  fractLen,  expLen);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  outputCount,  fractLen,  expLen);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  outputCount,  fractLen,  expLen);	  return    reset(negative,    intLen,    outputCount,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
84	[BUG]  [BUGGY]  return  reset(negative,  intLen,  outputPtr,  fractLen  -  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  outputPtr,  fractLen  -  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  outputPtr,  fractLen  -  1);	  return    reset(negative,    intLen,    fractLen,    outputPtr    -    1);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
85	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  outputEnd  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  fractLen,  outputEnd  -  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  outputEnd  -  1);	  return    reset(negative,    intLen,    fractLen,    outputPtr    -    1);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
86	[BUG]  [BUGGY]  return  reset(negative,  intLen,  startPtr,  len  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  startPtr,  len  -  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  startPtr,  len  -  1);	  return    reset(negative,    intLen,    len,    expLen    -    1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
87	[BUG]  [BUGGY]  return  reset(negative,  intLen,  startPtr,  expLen  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  startPtr,  expLen  -  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  startPtr,  expLen  -  1);	  return    reset(negative,    intLen,    len,    expLen    -    1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
88	[BUG]  [BUGGY]  if(fractLen  >  0)  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  if(fractLen  >  0)  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	if(fractLen  >  0)  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }	  if(len    >    0)    {    for(int    i    =    startPtr;    i    <    len;    ++i)    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    fractLen);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
89	[BUG]  [BUGGY]  if(fractLen  >  0)  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  if(fractLen  >  0)  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	if(fractLen  >  0)  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }	  if(len    >    0)    {    for(int    i    =    startPtr;    i    <    len;    ++i)    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    fractLen);    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
90	[BUG]  [BUGGY]  return  reset(negative,  intLen,  expLen,  len  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  expLen,  len  +  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  expLen,  len  +  1);	  return    reset(negative,    intLen,    fractLen,    len    +    1);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
91	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  outputEnd,  expLen);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  fractLen,  outputEnd,  expLen);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  outputEnd,  expLen);	  return    reset(negative,    intLen,    fractLen,    outputEnd);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
92	[BUG]  [BUGGY]  return  reset(negative,  intLen,  expLen,  outputPtr  -  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  expLen,  outputPtr  -  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  expLen,  outputPtr  -  1);	  return    reset(negative,    intLen,    fractLen,    outputPtr    -    1);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
93	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  expLen,  decodedData);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  fractLen,  expLen,  decodedData);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  expLen,  decodedData);	  return    reset(negative,    intLen,    inputLen,    fractLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
94	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  expLen,  expLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  fractLen,  expLen,  expLen);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  expLen,  expLen);	  return    reset(negative,    intLen,    expLen,    fractLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
95	[BUG]  [BUGGY]  return  reset(negative,  intLen,  expLen,  fractLen,  expLen  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  expLen,  fractLen,  expLen  +  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  expLen,  fractLen,  expLen  +  1);	  return    reset(negative,    intLen,    expLen,    fractLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
96	[BUG]  [BUGGY]  if(expLen  >  0)  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  if(expLen  >  0)  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	if(expLen  >  0)  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }	  if(len    >    0)    {    for(int    i    =    startPtr;    i    <    len;    ++i)    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
97	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  i  =  startPtr;  i  <  expLen;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  if(len  >  0)  {  for(int  i  =  startPtr;  i  <  expLen;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	if(len  >  0)  {  for(int  i  =  startPtr;  i  <  expLen;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }	  if(len    >    0)    {    for(int    i    =    startPtr;    i    <    len;    ++i)    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
98	[BUG]  [BUGGY]  if(expLen  >  0)  {  for(int  i  =  startPtr+1;  i  <  len;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  if(expLen  >  0)  {  for(int  i  =  startPtr+1;  i  <  len;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	if(expLen  >  0)  {  for(int  i  =  startPtr+1;  i  <  len;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }	  if(len    >    0)    {    for(int    i    =    startPtr;    i    <    len;    ++i)    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
99	[BUG]  [BUGGY]  if(len  <  expLen)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  _parseNumber2(len);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  if(len  <  expLen)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  _parseNumber2(len);  }  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	if(len  <  expLen)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  _parseNumber2(len);  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    return    _parseNumber2(len);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
100	[BUG]  [BUGGY]  return  reset(negative,  intLen,  inputBuffer,  fractLen,  outputPtr);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  inputBuffer,  fractLen,  outputPtr);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  inputBuffer,  fractLen,  outputPtr);	  return    reset(negative,    intLen,    inputLen,    fractLen,    outputPtr);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
101	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  expLen,  outputEnd,  outputPtr);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  fractLen,  expLen,  outputEnd,  outputPtr);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  expLen,  outputEnd,  outputPtr);	  return    reset(negative,    intLen,    fractLen,    outputEnd,    outputPtr);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
102	[BUG]  [BUGGY]  return  reset(negative,  intLen,  inputLen,  fractLen,  outputEnd,  expLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  inputLen,  fractLen,  outputEnd,  expLen);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  inputLen,  fractLen,  outputEnd,  expLen);	  return    reset(negative,    intLen,    fractLen,    outputEnd,    outputPtr);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
103	[BUG]  [BUGGY]  return  reset(negative,  intLen,  inputLen,  expLen);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  inputLen,  expLen);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  inputLen,  expLen);	  return    reset(negative,    intLen,    inputLen,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
104	[BUG]  [BUGGY]  if(expLen  >  0)  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  if(expLen  >  0)  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  }  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	if(expLen  >  0)  {  for(int  i  =  startPtr;  i  <  len;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  }	  if(len    >    0)    {    for(int    i    =    startPtr;    i    <    expLen;    ++i)    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
105	[BUG]  [BUGGY]  if(expLen  >  0)  {  for(int  i  =  startPtr;  i  <  expLen;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  if(expLen  >  0)  {  for(int  i  =  startPtr;  i  <  expLen;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  }  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	if(expLen  >  0)  {  for(int  i  =  startPtr;  i  <  expLen;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  }	  if(len    >    0)    {    for(int    i    =    startPtr;    i    <    expLen;    ++i)    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
106	[BUG]  [BUGGY]  if(expLen  >  0)  {  for(int  i  =  startPtr+1;  i  <  expLen;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  if(expLen  >  0)  {  for(int  i  =  startPtr+1;  i  <  expLen;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  }  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	if(expLen  >  0)  {  for(int  i  =  startPtr+1;  i  <  expLen;  ++i)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  }	  if(len    >    0)    {    for(int    i    =    startPtr;    i    <    expLen;    ++i)    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    len);    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
107	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  expLen  /  expLen  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  fractLen,  expLen  /  expLen  +  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  expLen  /  expLen  +  1);	  return    reset(negative,    intLen,    fractLen,    expLen    *    expLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
108	[BUG]  [BUGGY]  return  reset(negative,  intLen,  fractLen,  outputPtr,  expLen  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);      [BUGGY]  return  reset(negative,  intLen,  fractLen,  outputPtr,  expLen  +  1);  [BUGGY]      }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	954	954	2	replace	return  reset(negative,  intLen,  fractLen,  outputPtr,  expLen  +  1);	  return    reset(negative,    intLen,    fractLen,    outputPtr    +    1);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
