bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
2	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr  +  1);  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr  +  1);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
3	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
4	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr-startPtr);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr-startPtr);  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr-startPtr);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
5	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);	  if(expLen    ==    0)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
6	[BUG]  [BUGGY]  if(expLen  <  =  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  if(expLen  <  =  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  <  =  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }	  if(expLen    ==    0)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
7	[BUG]  [BUGGY]  ptr;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  ptr;  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	ptr;	  --ptr;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
8	[BUG]  [BUGGY]  ptr  =  _textBuffer.finishCurrentSegment();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  ptr  =  _textBuffer.finishCurrentSegment();  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	ptr  =  _textBuffer.finishCurrentSegment();	  --ptr;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
9	[BUG]  [BUGGY]  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);	  --ptr;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
10	[BUG]  [BUGGY]  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr+1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr+1;  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	--ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr+1;	  --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr-startPtr;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
11	[BUG]  [BUGGY]  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr-1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr-1;  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	--ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr-1;	  --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr-startPtr;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
12	[BUG]  [BUGGY]  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;	  if(expLen    >    0)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
13	[BUG]  [BUGGY]  if(ptr  >  0)  {  if(expLen  >  0)  {  --ptr;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  if(ptr  >  0)  {  if(expLen  >  0)  {  --ptr;  }  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >  0)  {  if(expLen  >  0)  {  --ptr;  }	  if(expLen    >    0)    {    --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
14	[BUG]  [BUGGY]  if(ptr  >  0)  {  if(expLen  >  0)  {  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  if(ptr  >  0)  {  if(expLen  >  0)  {  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >  0)  {  if(expLen  >  0)  {  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }	  if(expLen    >    0)    {    --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
15	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative);  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
16	[BUG]  [BUGGY]  Integer  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  Integer  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative);  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	Integer  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
17	[BUG]  [BUGGY]  if(expLen  >=  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  if(expLen  >=  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >=  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }	  if(expLen    >    0)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
18	[BUG]  [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }	  if(expLen    >    0)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
19	[BUG]  [BUGGY]  --ptr  +  1;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  --ptr  +  1;  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	--ptr  +  1;	  --ptr;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
20	[BUG]  [BUGGY]  ptr  =  0;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  ptr  =  0;  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	ptr  =  0;	  --ptr;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
21	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  ==  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  ==  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  inputLen)  {  if(expLen  ==  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }	  if(expLen    ==    0)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
22	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  ==  0)  {  ptr;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  ==  0)  {  ptr;  }  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  inputLen)  {  if(expLen  ==  0)  {  ptr;  }	  if(expLen    ==    0)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
23	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  ==  0)  {  ptr;  return  reset(negative,  intLen,  fractLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  ==  0)  {  ptr;  return  reset(negative,  intLen,  fractLen,  expLen);  }  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  inputLen)  {  if(expLen  ==  0)  {  ptr;  return  reset(negative,  intLen,  fractLen,  expLen);  }	  if(expLen    ==    0)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
24	[BUG]  [BUGGY]  if(ptr  >  0)  {  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  if(ptr  >  0)  {  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >  0)  {  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }	  if(expLen    >    0)    {    --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
25	[BUG]  [BUGGY]  if(expLen  >  0)  {  _inputPtr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  if(expLen  >  0)  {  _inputPtr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  _inputPtr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }	  if(expLen    >    0)    {    --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
26	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr-1);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr-1);  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr-1);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
27	[BUG]  [BUGGY]  if(expLen  >  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  if(expLen  >  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr;  }  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr;  }	  --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr-startPtr;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
28	[BUG]  [BUGGY]  if(expLen  >  0)  {  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  if(expLen  >  0)  {  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr;  }  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr;  }	  --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr-startPtr;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
29	[BUG]  [BUGGY]  if(expLen  ==  1)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  if(expLen  ==  1)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  ==  1)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }	  if(expLen    ==    0)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
30	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  ptr;  }  else  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  if(ptr  >=  _inputEnd)  {  ptr;  }  else  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  }  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  _inputEnd)  {  ptr;  }  else  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  }	  --ptr;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
31	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  ptr;  }  else  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ch);  return  reset(negative,  intLen,  expLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  if(ptr  >=  _inputEnd)  {  ptr;  }  else  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ch);  return  reset(negative,  intLen,  expLen,  expLen);  }  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  _inputEnd)  {  ptr;  }  else  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ch);  return  reset(negative,  intLen,  expLen,  expLen);  }	  --ptr;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
32	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  ptr;  }  else  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  if(ptr  >=  _inputEnd)  {  ptr;  }  else  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  _inputEnd)  {  ptr;  }  else  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  _textBuffer.resetWithShared(_inputBuffer,  startPtr,	  --ptr;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
33	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr+expLen);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr+expLen);  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr+expLen);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
34	[BUG]  [BUGGY]  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  }  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  }	  if(expLen    >    0)    {    --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
35	[BUG]  [BUGGY]  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  }  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  }	  if(expLen    >    0)    {    --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
36	[BUG]  [BUGGY]  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  _inputPtr  =  ptr;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  _inputPtr  =  ptr;  }  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  _inputPtr  =  ptr;  }	  if(expLen    >    0)    {    --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
37	[BUG]  [BUGGY]  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  }  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  }	  if(expLen    >    0)    {    --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
38	[BUG]  [BUGGY]  --ptr;  //  need  to  push  back  following  separator  _inputPtr-startPtr;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  --ptr;  //  need  to  push  back  following  separator  _inputPtr-startPtr;  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	--ptr;  //  need  to  push  back  following  separator  _inputPtr-startPtr;	  --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr-startPtr;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
39	[BUG]  [BUGGY]  _inputPtr  =  ptr-startPtr;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  _inputPtr  =  ptr-startPtr;  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_inputPtr  =  ptr-startPtr;	  --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr-startPtr;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
40	[BUG]  [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  }  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  }	  if(expLen    >    0)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
41	[BUG]  [BUGGY]  int  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,     "Exponent  indicator  not  followed  by  a  digit   ");  }  }      [BUGGY]  int  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative);  [BUGGY]    _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	int  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
