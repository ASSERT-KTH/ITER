bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(expLen  >  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr-1;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  >  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr-1;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr-1;  }	  --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr-startPtr-1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
2	[BUG]  [BUGGY]  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr-1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr-1;  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr-1;	  --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr-startPtr-1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
3	[BUG]  [BUGGY]  Integer  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  Integer  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	Integer  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);	  Integer    ptr    =    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    negative);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
4	[BUG]  [BUGGY]  Integer  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative,  expLen);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  Integer  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative,  expLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	Integer  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative,  expLen);	  Integer    ptr    =    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    negative);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
5	[BUG]  [BUGGY]  Integer  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  Integer  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	Integer  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);	  Integer    ptr    =    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    negative);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
6	[BUG]  [BUGGY]  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_inputBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);	  if(expLen    >    0)    {    _inputBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
7	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  _inputEnd)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  _inputEnd)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }	  if(expLen    >    0)    {    _inputBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
8	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  _inputEnd)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  _inputEnd)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  }	  if(expLen    >    0)    {    _inputBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
9	[BUG]  [BUGGY]  ||  expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  ||  expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	||  expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);	  if(expLen    >    0)    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    fractLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
10	[BUG]  [BUGGY]  _inputPtr  =  ptr;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _inputPtr  =  ptr;  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_inputPtr  =  ptr;	  if(expLen    >    0)    {    _inputPtr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
11	[BUG]  [BUGGY]  _inputPtr;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _inputPtr;  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_inputPtr;	  if(expLen    >    0)    {    _inputPtr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
12	[BUG]  [BUGGY]  ||  expLen  >  0)  {  _inputPtr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  ||  expLen  >  0)  {  _inputPtr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	||  expLen  >  0)  {  _inputPtr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }	  if(expLen    >    0)    {    _inputPtr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
13	[BUG]  [BUGGY]  _inputPtr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _inputPtr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_inputPtr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;	  if(expLen    >    0)    {    _inputPtr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
14	[BUG]  [BUGGY]  if(expLen  >  1)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  >  1)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  1)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }	  if(expLen    ==    1)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
15	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);	  if(expLen    ==    1)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
16	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  _inputEnd)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  _inputEnd)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  }	  if(expLen    >    0)    {    _inputBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    return    reset(negative,    intLen,    expLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
17	[BUG]  [BUGGY]  if(ptr  >=  0)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  0)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  0)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  }	  if(expLen    >    0)    {    _inputBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    return    reset(negative,    intLen,    expLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
18	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);	  if(expLen    >    0)    {    _inputBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    return    reset(negative,    intLen,    expLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
19	[BUG]  [BUGGY]  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);	  if(expLen    >    0)    {    _inputBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    return    reset(negative,    intLen,    expLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
20	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen  +  1);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen  +  1);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    fractLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
21	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen,  fractLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen,  fractLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen,  fractLen);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    fractLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
22	[BUG]  [BUGGY]  ptr  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  ptr  +  1;  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	ptr  +  1;	  --ptr    +    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
23	[BUG]  [BUGGY]  --ptr  +  2;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  --ptr  +  2;  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	--ptr  +  2;	  --ptr    +    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
24	[BUG]  [BUGGY]  if(expLen  >  0)  {  if(ptr  >=  inputLen)  {  ptr;  return  reset(negative,  intLen,  fractLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  >  0)  {  if(ptr  >=  inputLen)  {  ptr;  return  reset(negative,  intLen,  fractLen,  expLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  if(ptr  >=  inputLen)  {  ptr;  return  reset(negative,  intLen,  fractLen,  expLen);  }	  if(ptr    >=    inputLen)    {    if(expLen    ==    0)    {    ptr;    return    reset(negative,    intLen,    fractLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
25	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  ==  1)  {  ptr;  return  reset(negative,  intLen,  fractLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  ==  1)  {  ptr;  return  reset(negative,  intLen,  fractLen,  expLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  inputLen)  {  if(expLen  ==  1)  {  ptr;  return  reset(negative,  intLen,  fractLen,  expLen);  }	  if(ptr    >=    inputLen)    {    if(expLen    ==    0)    {    ptr;    return    reset(negative,    intLen,    fractLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
26	[BUG]  [BUGGY]  ptr  =  reset(negative,  intLen,  fractLen,  expLen);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  ptr  =  reset(negative,  intLen,  fractLen,  expLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	ptr  =  reset(negative,  intLen,  fractLen,  expLen);	  if(ptr    >=    inputLen)    {    if(expLen    ==    0)    {    ptr;    return    reset(negative,    intLen,    fractLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
27	[BUG]  [BUGGY]  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);	  if(expLen    >    0)    {    _inputBuffer.resetWithShared(_inputBuffer,    startPtr,    fractLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
28	[BUG]  [BUGGY]  ||  expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  ||  expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	||  expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);	  if(expLen    >    0)    {    _inputBuffer.resetWithShared(_inputBuffer,    startPtr,    fractLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
29	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  Integer  ptr  =  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	Integer  ptr  =  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);	  if(expLen    >    0)    {    _inputBuffer.resetWithShared(_inputBuffer,    startPtr,    fractLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
30	[BUG]  [BUGGY]  if(ptr  >=  0)  {  if(ptr  >  0)  {  ptr;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  0)  {  if(ptr  >  0)  {  ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  0)  {  if(ptr  >  0)  {  ptr;  }	  if(ptr    >    0)    {    --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
31	[BUG]  [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    expLen);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
32	[BUG]  [BUGGY]  ptr  =  _parseNumber2(ch);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  ptr  =  _parseNumber2(ch);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	ptr  =  _parseNumber2(ch);	  ptr;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
33	[BUG]  [BUGGY]  int  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  int  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	int  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);	  int    ptr    =    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    negative);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
34	[BUG]  [BUGGY]  int  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative,  expLen);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  int  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative,  expLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	int  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative,  expLen);	  int    ptr    =    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    negative);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
35	[BUG]  [BUGGY]  char  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  char  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	char  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative);	  int    ptr    =    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    negative);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
36	[BUG]  [BUGGY]  int  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  int  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	int  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);	  int    ptr    =    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    negative);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
37	[BUG]  [BUGGY]  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);	  ptr    =    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    expLen);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
38	[BUG]  [BUGGY]  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);	  ptr    =    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    expLen);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
39	[BUG]  [BUGGY]  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen  +  1);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen  +  1);	  ptr    =    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    expLen);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
40	[BUG]  [BUGGY]  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr;  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr;	  if(expLen    >    0)    {    --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr-startPtr;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
41	[BUG]  [BUGGY]  if(ptr  >  0)  {  if(expLen  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >  0)  {  if(expLen  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >  0)  {  if(expLen  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(expLen    >    0)    {    --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr-startPtr;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
42	[BUG]  [BUGGY]  ptr  =  _inputBuffer[ptr++];  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  ptr  =  _inputBuffer[ptr++];  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	ptr  =  _inputBuffer[ptr++];	  ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
43	[BUG]  [BUGGY]  if(expLen  >  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr-startPtr;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  >  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr-startPtr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr-startPtr;  }	  --ptr;    //    need    to    push    back    following    separator    _inputPtr-startPtr;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
44	[BUG]  [BUGGY]  if(ptr  >=  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr-startPtr;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr-startPtr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr-startPtr;  }	  --ptr;    //    need    to    push    back    following    separator    _inputPtr-startPtr;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
45	[BUG]  [BUGGY]  ptr;  //  need  to  push  back  following  separator  _inputPtr-startPtr;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  ptr;  //  need  to  push  back  following  separator  _inputPtr-startPtr;  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	ptr;  //  need  to  push  back  following  separator  _inputPtr-startPtr;	  --ptr;    //    need    to    push    back    following    separator    _inputPtr-startPtr;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
46	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  if(expLen  >  0)  {  ptr;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  _inputEnd)  {  if(expLen  >  0)  {  ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  _inputEnd)  {  if(expLen  >  0)  {  ptr;  }	  if(expLen    >    0)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr-startPtr;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
47	[BUG]  [BUGGY]  if(ptr  >=  0)  {  if(expLen  >  0)  {  ptr;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  0)  {  if(expLen  >  0)  {  ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  0)  {  if(expLen  >  0)  {  ptr;  }	  if(expLen    >    0)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr-startPtr;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
48	[BUG]  [BUGGY]  if(expLen  >  0)  {  if(ptr  >=  inputLen)  {  ptr;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  >  0)  {  if(ptr  >=  inputLen)  {  ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  if(ptr  >=  inputLen)  {  ptr;  }	  if(ptr    >=    inputLen)    {    if(expLen    ==    0)    {    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
49	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  ==  1)  {  ptr;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  ==  1)  {  ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  inputLen)  {  if(expLen  ==  1)  {  ptr;  }	  if(ptr    >=    inputLen)    {    if(expLen    ==    0)    {    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
50	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen+expLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen+expLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen+expLen);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr+expLen);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
51	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr+fractLen);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr+fractLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr+fractLen);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr+expLen);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
52	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr+offset);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr+offset);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr+offset);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr+expLen);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
53	[BUG]  [BUGGY]  if(expLen  >  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr+1;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  >  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr+1;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr+1;  }	  --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr-startPtr+1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
54	[BUG]  [BUGGY]  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr+1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr+1;  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr+1;	  --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr-startPtr+1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
55	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  ptr;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  _inputEnd)  {  ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  _inputEnd)  {  ptr;  }	  if(ptr    >=    _inputEnd)    {    ptr;    }    else    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ch);    return    reset(negative,    intLen,    expLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
56	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  ptr;  }  else  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ch);  return  reset(negative,  intLen,  fractLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  _inputEnd)  {  ptr;  }  else  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ch);  return  reset(negative,  intLen,  fractLen,  expLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  _inputEnd)  {  ptr;  }  else  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ch);  return  reset(negative,  intLen,  fractLen,  expLen);  }	  if(ptr    >=    _inputEnd)    {    ptr;    }    else    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ch);    return    reset(negative,    intLen,    expLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
57	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen-1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen-1);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen-1);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr-1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
58	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr-1,  expLen);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr-1,  expLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr-1,  expLen);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr-1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
59	[BUG]  [BUGGY]  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_inputBuffer.resetWithShared(_inputBuffer,  startPtr,	  if(ptr    >=    _inputEnd)    {    ptr;    }    else    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
60	[BUG]  [BUGGY]  _inputPtr  =  _inputBuffer[ptr++];  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _inputPtr  =  _inputBuffer[ptr++];  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_inputPtr  =  _inputBuffer[ptr++];	  if(ptr    >=    _inputEnd)    {    ptr;    }    else    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
61	[BUG]  [BUGGY]  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_inputBuffer.resetWithShared(_inputBuffer,  startPtr,  len);	  if(ptr    >=    _inputEnd)    {    ptr;    }    else    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
62	[BUG]  [BUGGY]  _inputPtr  =  ptr-startPtr+1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _inputPtr  =  ptr-startPtr+1;  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_inputPtr  =  ptr-startPtr+1;	  _inputPtr    =    ptr-startPtr;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
63	[BUG]  [BUGGY]  _inputPtr  =  ptr-startPtr-1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _inputPtr  =  ptr-startPtr-1;  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_inputPtr  =  ptr-startPtr-1;	  _inputPtr    =    ptr-startPtr;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
64	[BUG]  [BUGGY]  if(ptr  >=  0)  {  if(expLen  >  0)  {  --ptr;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  0)  {  if(expLen  >  0)  {  --ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  0)  {  if(expLen  >  0)  {  --ptr;  }	  if(ptr    >    0)    {    if(expLen    >    0)    {    --ptr;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
65	[BUG]  [BUGGY]  if(ptr  ==  0)  {  if(expLen  >  0)  {  --ptr;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  ==  0)  {  if(expLen  >  0)  {  --ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  ==  0)  {  if(expLen  >  0)  {  --ptr;  }	  if(ptr    >    0)    {    if(expLen    >    0)    {    --ptr;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
66	[BUG]  [BUGGY]  if(expLen  >  0)  {  --ptr;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  >  0)  {  --ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  --ptr;  }	  if(ptr    >    0)    {    if(expLen    >    0)    {    --ptr;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
67	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  _inputPtr  =  ptr;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  _inputPtr  =  ptr;  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  _inputPtr  =  ptr;	  if(expLen    >    0)    {    _inputBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
68	[BUG]  [BUGGY]  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  _inputPtr  =  ptr;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  _inputPtr  =  ptr;  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  _inputPtr  =  ptr;	  if(expLen    >    0)    {    _inputBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
69	[BUG]  [BUGGY]  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  _inputPtr  =  ptr;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  _inputPtr  =  ptr;  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_inputBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  _inputPtr  =  ptr;	  if(expLen    >    0)    {    _inputBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
70	[BUG]  [BUGGY]  ptr  =  _textBuffer.read(_inputBuffer,  startPtr,  expLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  ptr  =  _textBuffer.read(_inputBuffer,  startPtr,  expLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	ptr  =  _textBuffer.read(_inputBuffer,  startPtr,  expLen);	  ptr    =    0;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
71	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr-offset);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr-offset);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr-offset);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr-startPtr);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
72	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr-endPtr);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr-endPtr);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr-endPtr);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr-startPtr);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
73	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr-expLen);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr-expLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr-expLen);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr-startPtr);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
74	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  ptr;  }  else  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  fractLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  _inputEnd)  {  ptr;  }  else  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  fractLen,  expLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  _inputEnd)  {  ptr;  }  else  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  fractLen,  expLen);  }	  if(ptr    >=    _inputEnd)    {    ptr;    }    else    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    return    reset(negative,    intLen,    expLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
75	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen  +  1);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen  +  1);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr    +    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
76	[BUG]  [BUGGY]  if(expLen  >  0)  {  if(expLen  >  0)  {  --ptr;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  >  0)  {  if(expLen  >  0)  {  --ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  if(expLen  >  0)  {  --ptr;  }	  if(ptr    >    0)    {    if(expLen    >    0)    {    --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
77	[BUG]  [BUGGY]  if(expLen  <  =  0)  {  if(ptr  >  0)  {  --ptr;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  <  =  0)  {  if(ptr  >  0)  {  --ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  <  =  0)  {  if(ptr  >  0)  {  --ptr;  }	  if(ptr    >    0)    {    if(expLen    >    0)    {    --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
78	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative,  expLen);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative,  expLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative,  expLen);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    negative);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
79	[BUG]  [BUGGY]  if(fractLen  >  0)  {  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(fractLen  >  0)  {  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(fractLen  >  0)  {  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }	  if(expLen    >    0)    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    fractLen);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
80	[BUG]  [BUGGY]  if(fractLen  >  0)  {  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(fractLen  >  0)  {  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(fractLen  >  0)  {  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }	  if(expLen    >    0)    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    fractLen);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
81	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  _inputEnd)  {  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  _inputEnd)  {  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }	  if(expLen    >    0)    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    fractLen);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
82	[BUG]  [BUGGY]  ptr  =  _textBuffer.finishCurrentSegment()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  ptr  =  _textBuffer.finishCurrentSegment()  +  1;  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	ptr  =  _textBuffer.finishCurrentSegment()  +  1;	  ptr    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
83	[BUG]  [BUGGY]  ptr  =  _textBuffer.finishCurrentSegment(ch);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  ptr  =  _textBuffer.finishCurrentSegment(ch);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	ptr  =  _textBuffer.finishCurrentSegment(ch);	  ptr    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
84	[BUG]  [BUGGY]  if(expLen  >  0)  {  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr+1;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  >  0)  {  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr+1;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr+1;  }	  --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr-startPtr+1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
85	[BUG]  [BUGGY]  if(ptr  >=  inputEnd)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  inputEnd)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  inputEnd)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  }	  if(expLen    >    0)    {    _inputBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    return    reset(negative,    intLen,    expLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
86	[BUG]  [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  }	  if(expLen    >    0)    {    _inputBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    return    reset(negative,    intLen,    expLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
87	[BUG]  [BUGGY]  resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);	  if(expLen    >    0)    {    _inputBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    return    reset(negative,    intLen,    expLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
88	[BUG]  [BUGGY]  if(ptr  >=  inputEnd)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  return  reset(negative,  intLen,  expLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  inputEnd)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  return  reset(negative,  intLen,  expLen,  expLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  inputEnd)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  return  reset(negative,  intLen,  expLen,  expLen);  }	  if(expLen    >    0)    {    _inputBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    return    reset(negative,    intLen,    expLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
89	[BUG]  [BUGGY]  Integer  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative,  intLen);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  Integer  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative,  intLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	Integer  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative,  intLen);	  Integer    ptr    =    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    negative);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
90	[BUG]  [BUGGY]  if(expLen  ==  1)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  inputLen);  return  reset(negative,  intLen,  fractLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  ==  1)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  inputLen);  return  reset(negative,  intLen,  fractLen,  expLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  ==  1)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  inputLen);  return  reset(negative,  intLen,  fractLen,  expLen);  }	  if(expLen    ==    1)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
91	[BUG]  [BUGGY]  if(expLen  ==  1)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  inputLen);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  ==  1)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  inputLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  ==  1)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  inputLen);  }	  if(expLen    ==    1)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
92	[BUG]  [BUGGY]  int  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  inputLen);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  int  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  inputLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	int  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  inputLen);	  int    ptr    =    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    negative);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
93	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  ptr;  }  else  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  inputLen)  {  ptr;  }  else  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  inputLen)  {  ptr;  }  else  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  }	  if(ptr    >=    _inputEnd)    {    ptr;    }    else    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    return    reset(negative,    intLen,    expLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
94	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  ptr;  }  else  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  _inputEnd)  {  ptr;  }  else  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  _inputEnd)  {  ptr;  }  else  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen	  if(ptr    >=    _inputEnd)    {    ptr;    }    else    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    return    reset(negative,    intLen,    expLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
95	[BUG]  [BUGGY]  if(expLen  >=  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  >=  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >=  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr;  }	  if(expLen    >    0)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr-startPtr;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
96	[BUG]  [BUGGY]  if(ptr  >  0)  {  if(expLen  >  0)  {  ptr;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >  0)  {  if(expLen  >  0)  {  ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >  0)  {  if(expLen  >  0)  {  ptr;  }	  if(expLen    >    0)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr-startPtr;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
97	[BUG]  [BUGGY]  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative);	  ptr    =    0;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
98	[BUG]  [BUGGY]  if(ptr  >  0)  {  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >  0)  {  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >  0)  {  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr;  }	  if(expLen    >    0)    {    --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr-startPtr;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
99	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[ptr++];  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  int  ptr  =  _inputBuffer[ptr++];  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	int  ptr  =  _inputBuffer[ptr++];	  if(expLen    >    0)    {    --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr-startPtr;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
100	[BUG]  [BUGGY]  --ptr  -  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  --ptr  -  1;  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	--ptr  -  1;	  --ptr    +    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
101	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative,  intLen);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative,  intLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative,  intLen);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    negative);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
102	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  >  0)  {  --ptr;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  >  0)  {  --ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  inputLen)  {  if(expLen  >  0)  {  --ptr;  }	  if(ptr    >    0)    {    if(expLen    >    0)    {    --ptr;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
103	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  if(expLen  >  0)  {  --ptr;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  _inputEnd)  {  if(expLen  >  0)  {  --ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  _inputEnd)  {  if(expLen  >  0)  {  --ptr;  }	  if(ptr    >    0)    {    if(expLen    >    0)    {    --ptr;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
104	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  ptr;  }  else  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ch);  return  reset(negative,  intLen,  expLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  inputLen)  {  ptr;  }  else  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ch);  return  reset(negative,  intLen,  expLen,  expLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  inputLen)  {  ptr;  }  else  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ch);  return  reset(negative,  intLen,  expLen,  expLen);  }	  if(ptr    >=    _inputEnd)    {    ptr;    }    else    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ch);    return    reset(negative,    intLen,    expLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
105	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  ptr;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  inputLen)  {  ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  inputLen)  {  ptr;  }	  if(ptr    >=    _inputEnd)    {    ptr;    }    else    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ch);    return    reset(negative,    intLen,    expLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
106	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr-startPtr  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr-startPtr  +  1);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr-startPtr  +  1);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr-startPtr);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
107	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len-startPtr);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len-startPtr);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  len-startPtr);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr-startPtr);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
108	[BUG]  [BUGGY]  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  outputLen);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  outputLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  outputLen);	  ptr    =    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    expLen);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
109	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  inputLen);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  inputLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  inputLen);	  if(ptr    >=    inputLen)    {    if(expLen    ==    0)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
110	[BUG]  [BUGGY]  Integer  fractLen  =  _inputBuffer[ptr++];  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  Integer  fractLen  =  _inputBuffer[ptr++];  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	Integer  fractLen  =  _inputBuffer[ptr++];	  if(ptr    >=    inputLen)    {    if(expLen    ==    0)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
111	[BUG]  [BUGGY]  if(expLen  <  =  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  inputLen);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  <  =  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  inputLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  <  =  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  inputLen);  }	  if(expLen    <    =    0)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
112	[BUG]  [BUGGY]  if(expLen  ==  0)  {  ptr;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  ==  0)  {  ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  ==  0)  {  ptr;  }	  if(expLen    <    =    0)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
113	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr+startPtr);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr+startPtr);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr+startPtr);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr+expLen);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
114	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr+expLen  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr+expLen  +  1);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr+expLen  +  1);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr+expLen);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
115	[BUG]  [BUGGY]  if(expLen  >  0)  {  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr-1;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  >  0)  {  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr-1;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr-startPtr-1;  }	  --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr-startPtr-1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
116	[BUG]  [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  _inputPtr  =  ptr;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  _inputPtr  =  ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  _inputPtr  =  ptr;  }	  if(expLen    >    0)    {    _inputBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
117	[BUG]  [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  _inputPtr  =  ptr;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  _inputPtr  =  ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  _inputPtr  =  ptr;  }	  if(expLen    >    0)    {    _inputBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
118	[BUG]  [BUGGY]  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  _inputPtr  =  ptr;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  _inputPtr  =  ptr;  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  _inputPtr  =  ptr;	  if(expLen    >    0)    {    _inputBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
119	[BUG]  [BUGGY]  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ch);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ch);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ch);	  ptr;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
120	[BUG]  [BUGGY]  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  inputLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  inputLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  inputLen);	  ptr;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
121	[BUG]  [BUGGY]  if(expLen  ==  0)  {  if(ptr  >  0)  {  --ptr;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  ==  0)  {  if(ptr  >  0)  {  --ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  ==  0)  {  if(ptr  >  0)  {  --ptr;  }	  if(ptr    >    0)    {    if(expLen    >    0)    {    --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
122	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  >  0)  {  ptr;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  >  0)  {  ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  inputLen)  {  if(expLen  >  0)  {  ptr;  }	  if(ptr    >=    inputLen)    {    if(expLen    ==    0)    {    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
123	[BUG]  [BUGGY]  if(ptr  >=  outputEnd)  {  if(expLen  ==  0)  {  ptr;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  outputEnd)  {  if(expLen  ==  0)  {  ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  outputEnd)  {  if(expLen  ==  0)  {  ptr;  }	  if(ptr    >=    inputLen)    {    if(expLen    ==    0)    {    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
124	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,	  if(ptr    >=    _inputEnd)    {    ptr;    }    else    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
125	[BUG]  [BUGGY]  if(expLen  >  0)  {  if(ptr  >=  inputEnd)  {  ptr;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  >  0)  {  if(ptr  >=  inputEnd)  {  ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  if(ptr  >=  inputEnd)  {  ptr;  }	  if(ptr    >=    _inputEnd)    {    ptr;    }    else    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
126	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  >  0)  {  ptr;  return  reset(negative,  intLen,  fractLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  >  0)  {  ptr;  return  reset(negative,  intLen,  fractLen,  expLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  inputLen)  {  if(expLen  >  0)  {  ptr;  return  reset(negative,  intLen,  fractLen,  expLen);  }	  if(ptr    >=    inputLen)    {    if(expLen    ==    0)    {    ptr;    return    reset(negative,    intLen,    fractLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
127	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  ==  0)  {  ptr;  return  reset(negative,  intLen,  fractLen,  expLen  +  1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  ==  0)  {  ptr;  return  reset(negative,  intLen,  fractLen,  expLen  +  1);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  inputLen)  {  if(expLen  ==  0)  {  ptr;  return  reset(negative,  intLen,  fractLen,  expLen  +  1);  }	  if(ptr    >=    inputLen)    {    if(expLen    ==    0)    {    ptr;    return    reset(negative,    intLen,    fractLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
128	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen  +  1);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen  +  1);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
129	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr-startPtr;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  _inputEnd)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr-startPtr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  _inputEnd)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr-startPtr;  }	  --ptr;    //    need    to    push    back    following    separator    _inputPtr-startPtr;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
130	[BUG]  [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen  +  1);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen  +  1);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen  +  1);  }	  if(expLen    >    0)    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    fractLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
131	[BUG]  [BUGGY]  resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);	  if(expLen    >    0)    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    fractLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
132	[BUG]  [BUGGY]  if(ptr  >=  0)  {  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  0)  {  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  0)  {  --ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }	  if(ptr    >    0)    {    --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
133	[BUG]  [BUGGY]  if(ptr  >  0)  {  _inputPtr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >  0)  {  _inputPtr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >  0)  {  _inputPtr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }	  if(ptr    >    0)    {    --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
134	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  outputPtr  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  outputPtr  +  1);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  outputPtr  +  1);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr    +    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
135	[BUG]  [BUGGY]  if(expLen  >=  0)  {  _inputPtr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  >=  0)  {  _inputPtr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >=  0)  {  _inputPtr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }	  if(expLen    >    0)    {    _inputPtr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
136	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  inputLen)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  }	  if(expLen    >    0)    {    _inputBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
137	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  inputLen)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }	  if(expLen    >    0)    {    _inputBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
138	[BUG]  [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  }	  if(expLen    >    0)    {    _inputBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
139	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len,  expLen);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len,  expLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  len,  expLen);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    fractLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
140	[BUG]  [BUGGY]  if(fractLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(fractLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(fractLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }	  if(expLen    >    0)    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    fractLen);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
141	[BUG]  [BUGGY]  if(fractLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  intLen);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(fractLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  intLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(fractLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  intLen);  }	  if(expLen    >    0)    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    fractLen);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
142	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr-2);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr-2);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr-2);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr-1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
143	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  >=  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  >=  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  inputLen)  {  if(expLen  >=  0)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }	  if(expLen    >=    0)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
144	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  >=  0)  {  ptr;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  >=  0)  {  ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  inputLen)  {  if(expLen  >=  0)  {  ptr;  }	  if(expLen    >=    0)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
145	[BUG]  [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  }  else  {  return  reset(negative,  intLen,  fractLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  }  else  {  return  reset(negative,  intLen,  fractLen,  expLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  }  else  {  return  reset(negative,  intLen,  fractLen,  expLen);  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    fractLen,    expLen);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
146	[BUG]  [BUGGY]  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  return  reset(negative,  intLen,  expLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  return  reset(negative,  intLen,  expLen,  expLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  return  reset(negative,  intLen,  expLen,  expLen);  }	  if(expLen    >    0)    {    --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr-startPtr;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
147	[BUG]  [BUGGY]  if(ptr  >  0)  {  --expLen;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >  0)  {  --expLen;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >  0)  {  --expLen;  }	  if(expLen    >    0)    {    --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr-startPtr;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
148	[BUG]  [BUGGY]  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  return  reset(negative,  intLen,  fractLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  return  reset(negative,  intLen,  fractLen,  expLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  return  reset(negative,  intLen,  fractLen,  expLen);  }	  if(expLen    >    0)    {    --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr-startPtr;    }    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
149	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr-startPtr,  expLen);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr-startPtr,  expLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr-startPtr,  expLen);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr-startPtr);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
150	[BUG]  [BUGGY]  int  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative,  fractLen);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  int  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative,  fractLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	int  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  negative,  fractLen);	  int    ptr    =    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    negative);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
151	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  if(ptr  >  0)  {  --ptr;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  _inputEnd)  {  if(ptr  >  0)  {  --ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  _inputEnd)  {  if(ptr  >  0)  {  --ptr;  }	  if(ptr    >    0)    {    if(expLen    >    0)    {    --ptr;    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
152	[BUG]  [BUGGY]  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }	  if(expLen    >    0)    {    _inputPtr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
153	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  --ptr;  //  need  to  push  back  following  separator  _inputPtr-startPtr;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  _inputEnd)  {  --ptr;  //  need  to  push  back  following  separator  _inputPtr-startPtr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  _inputEnd)  {  --ptr;  //  need  to  push  back  following  separator  _inputPtr-startPtr;  }	  --ptr;    //    need    to    push    back    following    separator    _inputPtr-startPtr;    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
154	[BUG]  [BUGGY]  if(ptr  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }	  if(expLen    >    0)    {    _inputBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
155	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr	  if(ptr    >=    _inputEnd)    {    ptr;    }    else    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
156	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  inputLen)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  expLen,  expLen);  }	  if(expLen    >    0)    {    _inputBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    return    reset(negative,    intLen,    expLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
157	[BUG]  [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  fractLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  fractLen,  expLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  return  reset(negative,  intLen,  fractLen,  expLen);  }	  if(expLen    >    0)    {    _inputBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr);    return    reset(negative,    intLen,    expLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
158	[BUG]  [BUGGY]  if(ptr  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr);  }	  if(ptr    >    0)    {    --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
159	[BUG]  [BUGGY]  if(ptr  >=  0)  {  --ptr;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  0)  {  --ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  0)  {  --ptr;  }	  if(ptr    >    0)    {    --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
160	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  inputLen)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  inputLen)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    fractLen);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
161	[BUG]  [BUGGY]  ptr  =  _parseNumber2(negative);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  ptr  =  _parseNumber2(negative);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	ptr  =  _parseNumber2(negative);	  ptr    =    0;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
162	[BUG]  [BUGGY]  ptr  =  _parseNumber2(negative,  intLen);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  ptr  =  _parseNumber2(negative,  intLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	ptr  =  _parseNumber2(negative,  intLen);	  ptr    =    0;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
163	[BUG]  [BUGGY]  if(ptr  >  0)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >  0)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >  0)  {  if(expLen  >  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }	  if(expLen    >    0)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr-startPtr;    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
164	[BUG]  [BUGGY]  if(expLen  <  =  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  <  =  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  <  =  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  }	  if(expLen    <    =    0)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
165	[BUG]  [BUGGY]  if(expLen  <  =  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  <  =  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  <  =  0)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }	  if(expLen    <    =    0)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
166	[BUG]  [BUGGY]  if(expLen  <  =  1)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  <  =  1)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  <  =  1)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }	  if(expLen    <    =    0)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
167	[BUG]  [BUGGY]  if(expLen  >  0)  {  if(ptr  >  0)  {  --inputPtr;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  >  0)  {  if(ptr  >  0)  {  --inputPtr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  if(ptr  >  0)  {  --inputPtr;  }	  if(ptr    >    0)    {    if(expLen    >    0)    {    --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
168	[BUG]  [BUGGY]  if(expLen  <  2)  {  if(ptr  >  0)  {  --ptr;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  <  2)  {  if(ptr  >  0)  {  --ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  <  2)  {  if(ptr  >  0)  {  --ptr;  }	  if(ptr    >    0)    {    if(expLen    >    0)    {    --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
169	[BUG]  [BUGGY]  if(expLen  >  0)  {  if(ptr  >  0)  {  --ptr;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  >  0)  {  if(ptr  >  0)  {  --ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  if(ptr  >  0)  {  --ptr;  }	  if(ptr    >    0)    {    if(expLen    >    0)    {    --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
170	[BUG]  [BUGGY]  if(expLen  <  1)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  <  1)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  <  1)  {  ptr;  //  need  to  push  back  following  separator  _inputPtr  =  ptr;  }	  if(expLen    ==    1)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
171	[BUG]  [BUGGY]  if(expLen  ==  1)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  ==  1)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  ==  1)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen,  expLen);  }	  if(expLen    ==    1)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
172	[BUG]  [BUGGY]  if(expLen  ==  1)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  ==  1)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  ==  1)  {  _inputBuffer.resetWithShared(_inputBuffer,  startPtr,  fractLen);  }	  if(expLen    ==    1)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
173	[BUG]  [BUGGY]  if(expLen  >  0)  {  ptr;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  >  0)  {  ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  ptr;  }	  if(expLen    >=    0)    {    ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
174	[BUG]  [BUGGY]  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ch);  return  reset(negative,  intLen,  expLen,  expLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ch);  return  reset(negative,  intLen,  expLen,  expLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	ptr  =  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ch);  return  reset(negative,  intLen,  expLen,  expLen);	  if(ptr    >=    _inputEnd)    {    ptr;    }    else    {    _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ch);    return    reset(negative,    intLen,    expLen,    expLen);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
175	[BUG]  [BUGGY]  --ptr;  //  need  to  push  back  following  separator  _inputPtr-startPtr+1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  --ptr;  //  need  to  push  back  following  separator  _inputPtr-startPtr+1;  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	--ptr;  //  need  to  push  back  following  separator  _inputPtr-startPtr+1;	  --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr-startPtr+1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
176	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  ==  2)  {  ptr;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(ptr  >=  inputLen)  {  if(expLen  ==  2)  {  ptr;  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(ptr  >=  inputLen)  {  if(expLen  ==  2)  {  ptr;  }	  if(ptr    >=    inputLen)    {    if(expLen    ==    0)    {    ptr;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
177	[BUG]  [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr+expLen,  fractLen);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr+expLen,  fractLen);  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	_textBuffer.resetWithShared(_inputBuffer,  startPtr,  ptr+expLen,  fractLen);	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    ptr+expLen);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
178	[BUG]  [BUGGY]  --ptr;  //  need  to  push  back  following  separator  _inputPtr-startPtr-1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  --ptr;  //  need  to  push  back  following  separator  _inputPtr-startPtr-1;  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	--ptr;  //  need  to  push  back  following  separator  _inputPtr-startPtr-1;	  --ptr;    //    need    to    push    back    following    separator    _inputPtr    =    ptr-startPtr-1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
179	[BUG]  [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }  else  {  return  reset(negative,  intLen,  fractLen,  expLen);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }  else  {  return  reset(negative,  intLen,  fractLen,  expLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  >  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }  else  {  return  reset(negative,  intLen,  fractLen,  expLen);  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    expLen);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
180	[BUG]  [BUGGY]  if(expLen  <  =  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  }  if  (expLen  ==  0)  {  reportUnexpectedNumberChar(ch,       "Exponent  indicator  not  followed  by  a  digit     ");  }  }        [BUGGY]  if(expLen  <  =  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }  [BUGGY]      _inputPtr  =  ptr;  int  len  =  ptr-startPtr;  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  len);  return  reset(negative,  intLen,  fractLen,  expLen);  }  while  (false);  _inputPtr  =  negative  ?  (startPtr+1)  :  startPtr;  return  _parseNumber2(negative);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	949	950	2	replace	if(expLen  <  =  0)  {  _textBuffer.resetWithShared(_inputBuffer,  startPtr,  expLen);  }	  _textBuffer.resetWithShared(_inputBuffer,    startPtr,    expLen);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
