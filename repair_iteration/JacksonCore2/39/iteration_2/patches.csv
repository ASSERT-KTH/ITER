bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  _textBuffer.setCurrentLength(outBuf,  outPtr);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  _textBuffer.setCurrentLength(outBuf,  outPtr);  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	_textBuffer.setCurrentLength(outBuf,  outPtr);	  _textBuffer.setCurrentLength(outPtr);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
2	[BUG]  [BUGGY]  _textBuffer.setCurrentLength(outPtr  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  _textBuffer.setCurrentLength(outPtr  +  1);  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	_textBuffer.setCurrentLength(outPtr  +  1);	  _textBuffer.setCurrentLength(outPtr);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
3	[BUG]  [BUGGY]  _textBuffer.setCurrentLength(outBuf.length);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  _textBuffer.setCurrentLength(outBuf.length);  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	_textBuffer.setCurrentLength(outBuf.length);	  _textBuffer.setCurrentLength(outPtr);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
4	[BUG]  [BUGGY]  _textBuffer.setCurrentLength(c);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  _textBuffer.setCurrentLength(c);  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	_textBuffer.setCurrentLength(c);	  _textBuffer.setCurrentLength(outPtr);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
5	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    else    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
6	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _parseFloat(outBuf,  out  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _parseFloat(outBuf,  out  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _parseFloat(outBuf,  out	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    else    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
7	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _parseFloat(outBuf,  outPtr,  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _parseFloat(outBuf,  outPtr,  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _parseFloat(outBuf,  outPtr,	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    else    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
8	[BUG]  [BUGGY]  if(c  <  =  INT_0  ||  c  >  INT_10)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  =  INT_0  ||  c  >  INT_10)  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  =  INT_0  ||  c  >  INT_10)  {	  if(c    <    INT_0    ||    c    >    INT_10)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
9	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >=  INT_10)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  INT_0  ||  c  >=  INT_10)  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  INT_0  ||  c  >=  INT_10)  {	  if(c    <    INT_0    ||    c    >    INT_10)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
10	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(outPtr  >=  outBuf.length)  {  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(outPtr  >=  outBuf.length)  {  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(outPtr    >=    outBuf.length)    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
11	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  ==  '.')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  ==  '.')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(outPtr    >=    outBuf.length)    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
12	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(outPtr    >=    outBuf.length)    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
13	[BUG]  [BUGGY]  if(c  <  '.'  ||  c  >=  ','  ||  c  ==  '+')  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  '.'  ||  c  >=  ','  ||  c  ==  '+')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  '.'  ||  c  >=  ','  ||  c  ==  '+')  {	  if(c    <    '.'    ||    c    >    ','    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
14	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c!=  '+')  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c!=  '+')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c!=  '+')  {	  if(c!=    '.'    ||    c    ==    ','    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
15	[BUG]  [BUGGY]  if(c  <  '.'  ||  c  >  'e'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  '.'  ||  c  >  'e'  ||  c  ==  'E')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  '.'  ||  c  >  'e'  ||  c  ==  'E')  {	  if(c    <    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
16	[BUG]  [BUGGY]  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;	  if(c    <    INT_0)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
17	[BUG]  [BUGGY]  _textBuffer.finishCurrentSegment();  outPtr  =  0;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  _textBuffer.finishCurrentSegment();  outPtr  =  0;  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	_textBuffer.finishCurrentSegment();  outPtr  =  0;	  if(c    <    INT_0)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
18	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  <  INT_0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  <  INT_0)  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  <  INT_0)  {	  if(c    <    '0'    ||    c    >    '9')    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
19	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'e')  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'e')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'e')  {	  if(c    <    '0'    ||    c    >    '9')    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
20	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'A')  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'A')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'A')  {	  if(c    <    '0'    ||    c    >    '9')    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
21	[BUG]  [BUGGY]  if(c  <  '.'  ||  c  ==  ','  ||  c  ==  '-')  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  '.'  ||  c  ==  ','  ||  c  ==  '-')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  '.'  ||  c  ==  ','  ||  c  ==  '-')  {	  if(c    ==    '.'    ||    c    ==    ','    ||    c    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
22	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  ','  ||  c  ==  '-')  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c!=  '.'  ||  c  ==  ','  ||  c  ==  '-')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c!=  '.'  ||  c  ==  ','  ||  c  ==  '-')  {	  if(c    ==    '.'    ||    c    ==    ','    ||    c    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
23	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c!=  '-')  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c!=  '-')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c!=  '-')  {	  if(c    ==    '.'    ||    c    ==    ','    ||    c    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
24	[BUG]  [BUGGY]  c  =  _textBuffer.finishCurrentSegment()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  c  =  _textBuffer.finishCurrentSegment()  +  1;  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	c  =  _textBuffer.finishCurrentSegment()  +  1;	  c    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
25	[BUG]  [BUGGY]  c  =  _textBuffer.finishCurrentSegment(c);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  c  =  _textBuffer.finishCurrentSegment(c);  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	c  =  _textBuffer.finishCurrentSegment(c);	  c    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
26	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  ==  '.'  ||  c  ==  'E')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  ==  '.'  ||  c  ==  'E')  {	  if(outPtr    ==    outputEnd)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
27	[BUG]  [BUGGY]  if(c  <  0x7F  ||  c  >  0x7FF)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  0x7F  ||  c  >  0x7FF)  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  0x7F  ||  c  >  0x7FF)  {	  if(c    <    0x7F    ||    c    >    0x7F)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
28	[BUG]  [BUGGY]  if(c  <  0x7F  ||  c  >=  0x7F)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  0x7F  ||  c  >=  0x7F)  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  0x7F  ||  c  >=  0x7F)  {	  if(c    <    0x7F    ||    c    >    0x7F)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
29	[BUG]  [BUGGY]  if(c  <  0x7F  ||  c  ==  0x7F)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  0x7F  ||  c  ==  0x7F)  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  0x7F  ||  c  ==  0x7F)  {	  if(c    <    0x7F    ||    c    >    0x7F)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
30	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(outPtr  >=  end)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  ==  '.')  {  if(outPtr  >=  end)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  ==  '.')  {  if(outPtr  >=  end)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(outPtr    >=    end)    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
31	[BUG]  [BUGGY]  if(outPtr  >=  end)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(outPtr  >=  end)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(outPtr  >=  end)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(outPtr    >=    end)    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
32	[BUG]  [BUGGY]  if(c  >=  '.')  {  if(outPtr  >=  end)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  >=  '.')  {  if(outPtr  >=  end)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  >=  '.')  {  if(outPtr  >=  end)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(outPtr    >=    end)    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
33	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  ==  '.')  {  if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  ==  '.')  {  if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
34	[BUG]  [BUGGY]  if(c  >=  '.')  {  if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  >=  '.')  {  if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  >=  '.')  {  if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
35	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c!=  ')  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c!=  ')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c!=  ')  {	  if(c!=    '.'    ||    c    ==    ','    ||    c    ==    ')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
36	[BUG]  [BUGGY]  if(c  <  '.'  ||  c  >  '9'  ||  c  >=  '9')  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  '.'  ||  c  >  '9'  ||  c  >=  '9')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  '.'  ||  c  >  '9'  ||  c  >=  '9')  {	  if(c    <    '.'    ||    c    >    '9'    ||    c    <    '9')    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
37	[BUG]  [BUGGY]  if(c  <  '.'  ||  c  >  '9'  ||  c  >  '9')  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  '.'  ||  c  >  '9'  ||  c  >  '9')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  '.'  ||  c  >  '9'  ||  c  >  '9')  {	  if(c    <    '.'    ||    c    >    '9'    ||    c    <    '9')    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
38	[BUG]  [BUGGY]  if(c  <  '.'  ||  c  >=  '9'  ||  c  <  '9')  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  '.'  ||  c  >=  '9'  ||  c  <  '9')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  '.'  ||  c  >=  '9'  ||  c  <  '9')  {	  if(c    <    '.'    ||    c    >    '9'    ||    c    <    '9')    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
39	[BUG]  [BUGGY]  if(c  ==  '-'  ||  c  ==  '+')  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  ==  '-'  ||  c  ==  '+')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  ==  '-'  ||  c  ==  '+')  {	  if(c    ==    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
40	[BUG]  [BUGGY]  if(c!=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c!=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c!=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {	  if(c    ==    '.'    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
41	[BUG]  [BUGGY]  if(c  >=  INT_0  ||  c  >  INT_9)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  >=  INT_0  ||  c  >  INT_9)  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  >=  INT_0  ||  c  >  INT_9)  {	  if(c    <    =    INT_0    ||    c    >    INT_9)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
42	[BUG]  [BUGGY]  if(c  >=  '.'  ||  c  ==  '+')  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  >=  '.'  ||  c  ==  '+')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  >=  '.'  ||  c  ==  '+')  {	  if(c    <    =    INT_0    ||    c    >    INT_9)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
43	[BUG]  [BUGGY]  if(c  ==  '.')  {  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  ==  '.')  {  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  ==  '.')  {  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(c    <    INT_0    ||    c    >    INT_9)    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
44	[BUG]  [BUGGY]  if(c  >=  '.')  {  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  >=  '.')  {  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  >=  '.')  {  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(c    <    INT_0    ||    c    >    INT_9)    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
45	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  >=  INT_0)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  >=  INT_0)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  >=  INT_0)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(c    <    INT_0    ||    c    >    INT_9)    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
46	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
47	[BUG]  [BUGGY]  if(c  >=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  >=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  >=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
48	[BUG]  [BUGGY]  if(c  <  =  INT_0  ||  c  >=  INT_9)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  =  INT_0  ||  c  >=  INT_9)  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  =  INT_0  ||  c  >=  INT_9)  {	  if(c    <    INT_0    ||    c    >=    INT_9)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
49	[BUG]  [BUGGY]  if(c  >=  INT_0  ||  c  >=  INT_9)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  >=  INT_0  ||  c  >=  INT_9)  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  >=  INT_0  ||  c  >=  INT_9)  {	  if(c    <    INT_0    ||    c    >=    INT_9)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
50	[BUG]  [BUGGY]  if(c  >  INT_9  ||  c  <  INT_0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  >  INT_9  ||  c  <  INT_0)  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  >  INT_9  ||  c  <  INT_0)  {	  if(c    <    INT_0    ||    c    >=    INT_9)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
51	[BUG]  [BUGGY]  if(c  >=  '.')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  >=  '.')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  >=  '.')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(c    <    INT_0)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
52	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'a')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  'a')  {	  if(c    ==    '.'    ||    c    ==    ',')    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
53	[BUG]  [BUGGY]  if(outPtr  ==  end)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(outPtr  ==  end)  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(outPtr  ==  end)  {	  if(outPtr    ==    outputEnd)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
54	[BUG]  [BUGGY]  if(c  <  '.'  ||  c  >=  'e'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  '.'  ||  c  >=  'e'  ||  c  ==  'E')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  '.'  ||  c  >=  'e'  ||  c  ==  'E')  {	  if(c    <    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
55	[BUG]  [BUGGY]  if(c  <  '.'  ||  c  ==  'e'  ||  c  >=  'E')  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  '.'  ||  c  ==  'e'  ||  c  >=  'E')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  '.'  ||  c  ==  'e'  ||  c  >=  'E')  {	  if(c    <    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
56	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _parseFloat(outBuf,  outPtr,  negative,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    else    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
57	[BUG]  [BUGGY]  if(_inputPtr  >=  end)  {  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(_inputPtr  >=  end)  {  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(_inputPtr  >=  end)  {  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(c    <    INT_0    ||    c    >    INT_9)    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
58	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  >=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  >=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  >=  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(c    <    INT_0    ||    c    >    INT_9)    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
59	[BUG]  [BUGGY]  _textBuffer.setCurrentLength(outBuf,  outputPtr);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  _textBuffer.setCurrentLength(outBuf,  outputPtr);  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	_textBuffer.setCurrentLength(outBuf,  outputPtr);	  _textBuffer.setCurrentLength(outPtr);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
60	[BUG]  [BUGGY]  if(c  <  '.'  ||  c  >  'e'  ||  c  >=  'E')  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  '.'  ||  c  >  'e'  ||  c  >=  'E')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  '.'  ||  c  >  'e'  ||  c  >=  'E')  {	  if(c    >=    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
61	[BUG]  [BUGGY]  c  =  _textBuffer.endCurrentSegment();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  c  =  _textBuffer.endCurrentSegment();  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	c  =  _textBuffer.endCurrentSegment();	  c    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
62	[BUG]  [BUGGY]  if(c  <  '.'  ||  c  >  ','  ||  c  ==  ')  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  '.'  ||  c  >  ','  ||  c  ==  ')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  '.'  ||  c  >  ','  ||  c  ==  ')  {	  if(c    <    '.'    ||    c    ==    ','    ||    c    ==    ')    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
63	[BUG]  [BUGGY]  if(c  ==  ','  ||  c  ==  '+')  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  ==  ','  ||  c  ==  '+')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  ==  ','  ||  c  ==  '+')  {	  if(c!=    '.'    ||    c    ==    ','    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
64	[BUG]  [BUGGY]  if(c  <  INT_0)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  INT_0)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  INT_0)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(c    ==    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
65	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(outPtr    >=    outBuf.length)    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
66	[BUG]  [BUGGY]  if(c  >=  '.')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  >=  '.')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  >=  '.')  {  if(outPtr  >=  outBuf.length)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(outPtr    >=    outBuf.length)    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
67	[BUG]  [BUGGY]  if(c  <  0x7F  ||  c  >  0x10FF)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  0x7F  ||  c  >  0x10FF)  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  0x7F  ||  c  >  0x10FF)  {	  if(c    <    0x7F    ||    c    >    0x7F)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
68	[BUG]  [BUGGY]  if(c  >  0x7F  ||  c  <  0x7F)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  >  0x7F  ||  c  <  0x7F)  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  >  0x7F  ||  c  <  0x7F)  {	  if(c    <    0x7F    ||    c    >    0x7F)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
69	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  >  '9')  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  >  '9')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  >  '9')  {	  if(c    <    '0'    ||    c    >    '9')    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
70	[BUG]  [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'a')  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'a')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  '0'  ||  c  >  '9'  ||  c  >=  'a')  {	  if(c    <    '0'    ||    c    >    '9')    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
71	[BUG]  [BUGGY]  if(c  ==  '.')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  ==  '.')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  ==  '.')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
72	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '9'  ||  c  ==  '9')  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  ==  '.'  ||  c  ==  '9'  ||  c  ==  '9')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  ==  '.'  ||  c  ==  '9'  ||  c  ==  '9')  {	  if(c    <    '.'    ||    c    >    '9'    ||    c    <    '9')    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
73	[BUG]  [BUGGY]  if(c  >=  '.'  ||  c  ==  ','  ||  c  ==  '-')  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  >=  '.'  ||  c  ==  ','  ||  c  ==  '-')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  >=  '.'  ||  c  ==  ','  ||  c  ==  '-')  {	  if(c    ==    '.'    ||    c    ==    ','    ||    c    ==    '-')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
74	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _parseFloat(outBuf  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _parseFloat(outBuf  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _parseFloat(outBuf	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    else    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
75	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _parseFloat(outBuf,  out  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _parseFloat(outBuf,  out  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  else  {  return  _parseFloat(outBuf,  out	  if(c    <    INT_0    ||    c    >    INT_9)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    else    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
76	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  if(c  <  INT_0  ||  c  >  INT_9)  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(c    <    INT_0    ||    c    >    INT_9)    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
77	[BUG]  [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  INT_0  ||  c  >  INT_9)  {  if(c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }	  if(c    <    INT_0    ||    c    >    INT_9)    {    if(c    <    INT_0    ||    c    >    INT_9)    {    return    _parseFloat(outBuf,    outPtr,    c,    negative,    intLen);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
78	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  '-')  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  '-')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  ==  '.'  ||  c  ==  '+'  ||  c  ==  '-')  {	  if(c    ==    '.'    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
79	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'x'  ||  c  ==  '+')  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  ==  '.'  ||  c  ==  'x'  ||  c  ==  '+')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  ==  '.'  ||  c  ==  'x'  ||  c  ==  '+')  {	  if(c    ==    '.'    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
80	[BUG]  [BUGGY]  if(c  <  '.'  ||  c  >  ','  ||  c  <  '+')  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  '.'  ||  c  >  ','  ||  c  <  '+')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  '.'  ||  c  >  ','  ||  c  <  '+')  {	  if(c    <    '.'    ||    c    >    ','    ||    c    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
81	[BUG]  [BUGGY]  if(c  <  0x7FF  ||  c  >  0x7FF)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  0x7FF  ||  c  >  0x7FF)  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  0x7FF  ||  c  >  0x7FF)  {	  if(c    <    0x7F    ||    c    >    0x7F)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
82	[BUG]  [BUGGY]  _textBuffer.setCurrentLength(outPtr++);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  _textBuffer.setCurrentLength(outPtr++);  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	_textBuffer.setCurrentLength(outPtr++);	  _textBuffer.setCurrentLength(outPtr);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
83	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  ':')  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  ':')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  ==  '.'  ||  c  ==  ','  ||  c  ==  ':')  {	  if(c    ==    '.'    ||    c    ==    ',')    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
84	[BUG]  [BUGGY]  if(c  <  '.'  ||  c  >  'e'  ||  c  <  'E')  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  '.'  ||  c  >  'e'  ||  c  <  'E')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  '.'  ||  c  >  'e'  ||  c  <  'E')  {	  if(c    >=    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
85	[BUG]  [BUGGY]  if(c  >  INT_9  ||  c  <  =  INT_0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  >  INT_9  ||  c  <  =  INT_0)  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  >  INT_9  ||  c  <  =  INT_0)  {	  if(c    <    =    INT_0    ||    c    >    INT_9)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
86	[BUG]  [BUGGY]  if(outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(outPtr  >=  outBuf.length)  {  outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }	  if(c    <    INT_0)    {    outBuf    =    _textBuffer.finishCurrentSegment();    outPtr    =    0;    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
87	[BUG]  [BUGGY]  c  =  _textBuffer.startCurrentSegment();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  c  =  _textBuffer.startCurrentSegment();  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	c  =  _textBuffer.startCurrentSegment();	  c    =    _textBuffer.finishCurrentSegment();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
88	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'E')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'E')  {	  if(c    ==    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
89	[BUG]  [BUGGY]  if(c  <  '.'  ||  c  >  '9'  ||  c  <  'e'  ||  c  ==  'E')  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      while  (true)  {  if  (_inputPtr  >=  end)  {  return  _parserNumber2(outBuf,  outPtr,  negative,  intLen);  }  c  =  (int)  _inputBuffer[_inputPtr++]  &  0xFF;  if  (c  <  INT_0  ||  c  >  INT_9)  {  break;  }  ++intLen;      [BUGGY]  if(c  <  '.'  ||  c  >  '9'  ||  c  <  'e'  ||  c  ==  'E')  {  [BUGGY]      outBuf  =  _textBuffer.finishCurrentSegment();  outPtr  =  0;  }  outBuf[outPtr++]  =  (char)  c;  }  if  (c  ==  '.'  ||  c  ==  'e'  ||  c  ==  'E')  {  return  _parseFloat(outBuf,  outPtr,  c,  negative,  intLen);  }  --_inputPtr;  //  to  push  back  trailing  char  (comma  etc)  [CLASS]  UTF8StreamJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  c  [VARIABLES]  byte[]  _inputBuffer  b  buf  buffer  inputBuffer  nameBytes  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  match  negative  byte  BYTE_LF  InputStream  _inputStream  in  BytesToNameCanonicalizer  _symbols  sym  int[]  _icLatin1  _icUTF8  _icWS  _quadBuffer  ObjectCodec  _objectCodec  c  codec  int  _quad1  amount  bits  c  ch  count  decodedData  defaultValue  end  features  i  intLen  len  minAvailable  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  char[]  outBuf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java	0.7071067811865475	1231	1231	2	replace	if(c  <  '.'  ||  c  >  '9'  ||  c  <  'e'  ||  c  ==  'E')  {	  if(c    <    '.'    ||    c    ==    'e'    ||    c    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
