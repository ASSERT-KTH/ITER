bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(dummy_loop)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;      [BUGGY]  if(ptr  >=  inputLen)  {  if(dummy_loop)  {  break  dummy_loop;  }  [BUGGY]    fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	905	907	2	replace	if(ptr  >=  inputLen)  {  if(dummy_loop)  {  break  dummy_loop;  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
2	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_0  ||  ch  ==  INT_9)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;      [BUGGY]  if(ptr  >=  inputLen)  {  if(ch  ==  INT_0  ||  ch  ==  INT_9)  {  break  dummy_loop;  }  [BUGGY]    fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	905	907	2	replace	if(ptr  >=  inputLen)  {  if(ch  ==  INT_0  ||  ch  ==  INT_9)  {  break  dummy_loop;  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
3	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(dummy_loop)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;      [BUGGY]  if(ptr  >=  inputLen)  {  if(dummy_loop)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	905	907	2	replace	if(ptr  >=  inputLen)  {  if(dummy_loop)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
4	[BUG]  [BUGGY]  ch  =(int)_inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;      [BUGGY]  ch  =(int)_inputBuffer[ptr++];  [BUGGY]    fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	905	907	2	replace	ch  =(int)_inputBuffer[ptr++];	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
5	[BUG]  [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E')  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;      [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E')  {  [BUGGY]    fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	905	907	2	replace	if(ch  ==  'e'  ||  ch  ==  'E')  {	  if(ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
6	[BUG]  [BUGGY]  if(ch  ==  INT_0  ||  ch  >=  INT_9)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;      [BUGGY]  if(ch  ==  INT_0  ||  ch  >=  INT_9)  {  [BUGGY]    fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	905	907	2	replace	if(ch  ==  INT_0  ||  ch  >=  INT_9)  {	  if(ptr    >=    inputLen)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
7	[BUG]  [BUGGY]  if(ch  ==  INT_0  ||  ch  >  INT_9)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;      [BUGGY]  if(ch  ==  INT_0  ||  ch  >  INT_9)  {  [BUGGY]    fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	905	907	2	replace	if(ch  ==  INT_0  ||  ch  >  INT_9)  {	  if(ch    ==    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
8	[BUG]  [BUGGY]  if(ch  >=  INT_0  ||  ch  ==  INT_9)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;      [BUGGY]  if(ch  >=  INT_0  ||  ch  ==  INT_9)  {  [BUGGY]    fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	905	907	2	replace	if(ch  >=  INT_0  ||  ch  ==  INT_9)  {	  if(ch    ==    INT_0    ||    ch    ==    INT_9)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
9	[BUG]  [BUGGY]  if(ch  <  INT_len  ||  ch  >  INT_9)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;      [BUGGY]  if(ch  <  INT_len  ||  ch  >  INT_9)  {  [BUGGY]    fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	905	907	2	replace	if(ch  <  INT_len  ||  ch  >  INT_9)  {	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
10	[BUG]  [BUGGY]  if(ch  <  INT_0  ||  ch  >=  INT_9)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;      [BUGGY]  if(ch  <  INT_0  ||  ch  >=  INT_9)  {  [BUGGY]    fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	905	907	2	replace	if(ch  <  INT_0  ||  ch  >=  INT_9)  {	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
11	[BUG]  [BUGGY]  if(ch  ==  INT_dummy_loop)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;      [BUGGY]  if(ch  ==  INT_dummy_loop)  {  [BUGGY]    fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	905	907	2	replace	if(ch  ==  INT_dummy_loop)  {	  if(ch    ==    '.')    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
12	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  ':')  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  ':')  {  [BUGGY]    fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	905	907	2	replace	if(ch  ==  '.'  ||  ch  ==  ':')  {	  if(ch    ==    '.')    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
13	[BUG]  [BUGGY]  if(ch  ==  INT_DECEMBER)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;      [BUGGY]  if(ch  ==  INT_DECEMBER)  {  [BUGGY]    fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	905	907	2	replace	if(ch  ==  INT_DECEMBER)  {	  if(ch    ==    INT_0)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
14	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  int  dummy_loop  =  _inputBuffer[ptr++];  if(ch  <  INT_0  ||  ch  >  INT_9)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;      [BUGGY]  if(ptr  >=  inputLen)  {  int  dummy_loop  =  _inputBuffer[ptr++];  if(ch  <  INT_0  ||  ch  >  INT_9)  {  break  dummy_loop;  }  [BUGGY]    fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	905	907	2	replace	if(ptr  >=  inputLen)  {  int  dummy_loop  =  _inputBuffer[ptr++];  if(ch  <  INT_0  ||  ch  >  INT_9)  {  break  dummy_loop;  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
15	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  int  dummy_loop  =  _inputBuffer[ptr++];  if(ch  ==  INT_0  ||  ch  ==  INT_9)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;      [BUGGY]  if(ptr  >=  inputLen)  {  int  dummy_loop  =  _inputBuffer[ptr++];  if(ch  ==  INT_0  ||  ch  ==  INT_9)  {  break  dummy_loop;  }  [BUGGY]    fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	905	907	2	replace	if(ptr  >=  inputLen)  {  int  dummy_loop  =  _inputBuffer[ptr++];  if(ch  ==  INT_0  ||  ch  ==  INT_9)  {  break  dummy_loop;  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
16	[BUG]  [BUGGY]  if(ch  <  INT_dummy_loop)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;      [BUGGY]  if(ch  <  INT_dummy_loop)  {  [BUGGY]    fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	905	907	2	replace	if(ch  <  INT_dummy_loop)  {	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
17	[BUG]  [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++];  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;      [BUGGY]  Integer  ptr  =  _inputBuffer[ptr++];  [BUGGY]    fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	905	907	2	replace	Integer  ptr  =  _inputBuffer[ptr++];	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
18	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(_inputPtr  >=  inputLen)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;      [BUGGY]  if(ptr  >=  inputLen)  {  if(_inputPtr  >=  inputLen)  {  break  dummy_loop;  }  [BUGGY]    fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	905	907	2	replace	if(ptr  >=  inputLen)  {  if(_inputPtr  >=  inputLen)  {  break  dummy_loop;  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
19	[BUG]  [BUGGY]  if(ptr  >=  inputLen)  {  if(!_tokenIncomplete)  {  break  dummy_loop;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;      [BUGGY]  if(ptr  >=  inputLen)  {  if(!_tokenIncomplete)  {  break  dummy_loop;  }  [BUGGY]    fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	905	907	2	replace	if(ptr  >=  inputLen)  {  if(!_tokenIncomplete)  {  break  dummy_loop;  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
20	[BUG]  [BUGGY]  if(ch  ==  INT_DECIMAL_FIRST  ||  ch  ==  INT_DECIMAL_FIRST)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;      [BUGGY]  if(ch  ==  INT_DECIMAL_FIRST  ||  ch  ==  INT_DECIMAL_FIRST)  {  [BUGGY]    fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	905	907	2	replace	if(ch  ==  INT_DECIMAL_FIRST  ||  ch  ==  INT_DECIMAL_FIRST)  {	  if(ch    ==    '.')    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
21	[BUG]  [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_10)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;      [BUGGY]  if(ch  ==  INT_0  ||  ch  ==  INT_10)  {  [BUGGY]    fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	905	907	2	replace	if(ch  ==  INT_0  ||  ch  ==  INT_10)  {	  if(ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
22	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'e'  ||  ch  ==  'E')  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'e'  ||  ch  ==  'E')  {  [BUGGY]    fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	905	907	2	replace	if(ch  ==  '.'  ||  ch  ==  'e'  ||  ch  ==  'E')  {	  if(ch    ==    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
23	[BUG]  [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  int_loop;  }  ++intLen;  }  int  fractLen  =  0;      [BUGGY]  if(ch  <  =  INT_0  ||  ch  >  INT_9)  {  [BUGGY]    fract_loop:  while  (true)  {  if  (ptr  >=  inputLen)  {  break  dummy_loop;  }  ch  =  (int)  _inputBuffer[ptr++];  if  (ch  <  INT_0  ||  ch  >  INT_9)  {  break  fract_loop;  }  ++fractLen;  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseNumber  [RETURN_TYPE]  JsonToken  int  ch  [VARIABLES]  boolean  _tokenIncomplete  inObject  negative  Reader  _reader  r  int[]  _icLatin1  _icWS  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  bits  ch  count  decodedData  defaultValue  expLen  features  fractLen  i  inputLen  intLen  len  nameLen  origPtr  outputCount  outputEnd  outputPtr  ptr  startPtr  char[]  _inputBuffer  buf  	projects/JacksonCore2/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	0.7071067811865475	905	907	2	replace	if(ch  <  =  INT_0  ||  ch  >  INT_9)  {	  if(ch    <    INT_0    ||    ch    >    INT_9)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
