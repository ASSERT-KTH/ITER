bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  getName().startsWith( "/ ")||  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( "/ ")||  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( "/ ")||  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {	  return    getName().endsWith(   "/   ")||    getName().startsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	160	None	replace
2	[BUG]  [BUGGY]  return  getName().endsWith( ".js ")||  getName().startsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".js ")||  getName().startsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".js ")||  getName().startsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {	  return    getName().endsWith(   "/   ")||    getName().startsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	160	None	replace
3	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "./     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   "./       "))    {    return    true;    }    if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	28	1	add
4	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "./     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "./     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   "./       "))    {    return    true;    }    if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	28	1	add
5	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "./     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   "./       "))    {    return    true;    }    if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	28	1	add
6	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "./     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "./     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   "./       "))    {    return    true;    }    if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	28	1	add
7	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "./     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   "./       "))    {    return    true;    }    if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	28	1	add
8	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "./     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "./     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   "./       "))    {    return    true;    }    if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	28	1	add
9	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "./     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   "./       "))    {    return    true;    }    if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	28	1	add
10	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "./     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "./     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   "./       "))    {    return    true;    }    if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	28	1	add
11	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* ")||  getName().endsWith( "/* "))  {  [CE]  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* ")||  getName().endsWith( "/* "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* ")||  getName().endsWith( "/* "))  {	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/*   "))    {    	non-compiled	[CE]  	119	None	replace
12	[BUG]  [BUGGY]  return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* "))  {  [CE]  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* "))  {	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/*   "))    {    	non-compiled	[CE]  	119	None	replace
13	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* "))  {  [CE]  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* "))  {	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/*   "))    {    	non-compiled	[CE]  	119	None	replace
14	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
15	[BUG]  [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
16	[BUG]  [BUGGY]  ||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
17	[BUG]  [BUGGY]  return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
18	[BUG]  [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "./ ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "./ ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "./ ")||  getName().endsWith(	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
19	[BUG]  [BUGGY]  (linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [CE]  not  a  statement  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	129	None	replace
20	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  LF_DIR))  {  return  true;  }  [CE]  not  a  statement  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  LF_DIR))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  LF_DIR))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	129	None	replace
21	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  LF_DIR))  {  return  true;  }  [CE]  not  a  statement  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  LF_DIR))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  LF_DIR))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	129	None	replace
22	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [CE]  not  a  statement  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	129	None	replace
23	[BUG]  [BUGGY]  (linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS))  {  return  true;  }  [CE]  not  a  statement  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	129	None	replace
24	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS))  {  return  true;  }  [CE]  not  a  statement  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	129	None	replace
25	[BUG]  [BUGGY]  (linkFlag  ==  LF_DIR)||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [CE]  not  a  statement  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  LF_DIR)||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  LF_DIR)||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	129	None	replace
26	[BUG]  [BUGGY]  &&  linkFlag  ==  LF_DIR)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  &&  linkFlag  ==  LF_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	&&  linkFlag  ==  LF_DIR)  {  return  true;  }	  &&    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
27	[BUG]  [BUGGY]  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	&&  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  false;  }	  &&    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
28	[BUG]  [BUGGY]  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }	  &&    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
29	[BUG]  [BUGGY]  &&  linkFlag  ==  DEFAULT_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  &&  linkFlag  ==  DEFAULT_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	&&  linkFlag  ==  DEFAULT_TAR_ARCHIVE_EXTENDS)  {  return  true;  }	  &&    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
30	[BUG]  [BUGGY]  &&  linkFlag!=  LF_DIR)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  &&  linkFlag!=  LF_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	&&  linkFlag!=  LF_DIR)  {  return  true;  }	  &&    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
31	[BUG]  [BUGGY]  if(linkFlag  ==  LF_DIR  ||  linksFlag  ==  LF_DIR)  {  return  true;  }  [CE]  cannot  find  symbol  linksFlag  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  LF_DIR  ||  linksFlag  ==  LF_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  LF_DIR  ||  linksFlag  ==  LF_DIR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linksFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  linksFlag	156	None	replace
32	[BUG]  [BUGGY]  if(linkFlag  ==  LF_DIR  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  linksFlag  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  LF_DIR  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  LF_DIR  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linksFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  linksFlag	156	None	replace
33	[BUG]  [BUGGY]  if(linkFlag  ==  MILLIS_PER_SECOND  ||  linksFlag  ==  MILLIS_PER_SECOND)  {  return  true;  }  [CE]  cannot  find  symbol  linksFlag  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  MILLIS_PER_SECOND  ||  linksFlag  ==  MILLIS_PER_SECOND)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  MILLIS_PER_SECOND  ||  linksFlag  ==  MILLIS_PER_SECOND)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linksFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  linksFlag	156	None	replace
34	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linksFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	156	None	replace
35	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linksFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	156	None	replace
36	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS	80	None	replace
37	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	80	None	replace
38	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	80	None	replace
39	[BUG]  [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [CE]  ';'  expected  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului	  Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    GuvernuluiArchiveEntry    {    return    true;    	non-compiled	[CE]  ';'  expected	85	None	replace
40	[BUG]  [BUGGY]  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [CE]  ';'  expected  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului	  Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    GuvernuluiArchiveEntry    {    return    true;    	non-compiled	[CE]  ';'  expected	85	None	replace
41	[BUG]  [BUGGY]  Guvernul  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [CE]  ';'  expected  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Guvernul  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Guvernul  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului	  Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    GuvernuluiArchiveEntry    {    return    true;    	non-compiled	[CE]  ';'  expected	85	None	replace
42	[BUG]  [BUGGY]  Go  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [CE]  ';'  expected  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Go  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Go  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului	  Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    GuvernuluiArchiveEntry    {    return    true;    	non-compiled	[CE]  ';'  expected	85	None	replace
43	[BUG]  [BUGGY]  Government  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [CE]  ';'  expected  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Government  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Government  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului	  Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    GuvernuluiArchiveEntry    {    return    true;    	non-compiled	[CE]  ';'  expected	85	None	replace
44	[BUG]  [BUGGY]  State  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [CE]  ';'  expected  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  State  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	State  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului	  Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    GuvernuluiArchiveEntry    {    return    true;    	non-compiled	[CE]  ';'  expected	85	None	replace
45	[BUG]  [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [CE]  ';'  expected  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului	  Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    GuvernuluiArchiveEntry    {    return    true;    	non-compiled	[CE]  ';'  expected	85	None	replace
46	[BUG]  [BUGGY]  return  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
47	[BUG]  [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
48	[BUG]  [BUGGY]  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
49	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR)  {  return  false;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	19	None	replace
50	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  false;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	19	None	replace
51	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  false;  }  [CE]  not  a  statement  [FE]                                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	19	None	replace
52	[BUG]  [BUGGY]  return  getName().startsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith(	  return    getName().startsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
53	[BUG]  [BUGGY]  return  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "./ ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "./ ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "./ ")||  getName().endsWith(	  return    getName().startsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
54	[BUG]  [BUGGY]  if(linkFlag  ==  LF_NAMELEN  ||  linkFlag  ==  LF_NAMELEN)  {  return  false;  }  [CE]  cannot  find  symbol  LF_NAMELEN  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  LF_NAMELEN  ||  linkFlag  ==  LF_NAMELEN)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  LF_NAMELEN  ||  linkFlag  ==  LF_NAMELEN)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  LF_NAMELEN	142	None	replace
55	[BUG]  [BUGGY]  if(linkFlag  ==  LF_DIR  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  LF_DIR  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  LF_DIR  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	107	None	replace
56	[BUG]  [BUGGY]  [FE]  IOException  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  LF_DIR  ||  linkFlag!=  LF_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(linkFlag  ==  LF_DIR  ||  linkFlag!=  LF_DIR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	compilable	  [FE]  IOException  	107	1	replace
57	[BUG]  [BUGGY]  if(linkFlag  ==  LF_DIR  ||  linkFlag!=  LF_DIR)  {  return  true;  }  [FE]  IOException  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  LF_DIR  ||  linkFlag!=  LF_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  LF_DIR  ||  linkFlag!=  LF_DIR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	compilable	  [FE]  IOException  	107	1	replace
58	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND	107	None	replace
59	[BUG]  [BUGGY]  [FE]  IOException  [FE]                                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  MILLIS_PER_SECOND  ||  linkFlag!=  MILLIS_PER_SECOND)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(linkFlag  ==  MILLIS_PER_SECOND  ||  linkFlag!=  MILLIS_PER_SECOND)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	compilable	  [FE]  IOException  	107	1	replace
60	[BUG]  [BUGGY]  if(linkFlag  ==  MILLIS_PER_SECOND  ||  linkFlag!=  MILLIS_PER_SECOND)  {  return  true;  }  [FE]  IOException  [FE]                                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  MILLIS_PER_SECOND  ||  linkFlag!=  MILLIS_PER_SECOND)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  MILLIS_PER_SECOND  ||  linkFlag!=  MILLIS_PER_SECOND)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	compilable	  [FE]  IOException  	107	1	replace
61	[BUG]  [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [CE]  ';'  expected  [FE]          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului	  Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    GuvernuluiTarArchiveEntry    <    return    true;    	non-compiled	[CE]  ';'  expected	82	None	replace
62	[BUG]  [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [CE]  ';'  expected  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului	  Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    GuvernuluiTarArchiveEntry    <    return    true;    	non-compiled	[CE]  ';'  expected	82	None	replace
63	[BUG]  [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [CE]  ';'  expected  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului	  Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    GuvernuluiTarArchiveEntry    <    return    true;    	non-compiled	[CE]  ';'  expected	82	None	replace
64	[BUG]  [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [CE]  ';'  expected  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului	  Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    GuvernuluiTarArchiveEntry    <    return    true;    	non-compiled	[CE]  ';'  expected	82	None	replace
65	[BUG]  [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  >=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	73	None	replace
66	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	73	None	replace
67	[BUG]  [BUGGY]  return(getName().startsWith( "/ ")||  getName().startsWith( "/ ")));  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith( "/ ")||  getName().startsWith( "/ ")));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( "/ ")||  getName().startsWith( "/ ")));	  return(getName().endsWith(   "/   ")||    getName().startsWith(   "/   ")));    	non-compiled	[CE]  	60	None	replace
68	[BUG]  [BUGGY]  return(getName().endsWith( "./ ")||  getName().startsWith( "./ ")));  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "./ ")||  getName().startsWith( "./ ")));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "./ ")||  getName().startsWith( "./ ")));	  return(getName().endsWith(   "/   ")||    getName().startsWith(   "/   ")));    	non-compiled	[CE]  	60	None	replace
69	[BUG]  [BUGGY]  return(getName().endsWith( ".js ")||  getName().startsWith( ".js ")));  [CE]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( ".js ")||  getName().startsWith( ".js ")));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".js ")||  getName().startsWith( ".js ")));	  return(getName().endsWith(   "/   ")||    getName().startsWith(   "/   ")));    	non-compiled	[CE]  	60	None	replace
70	[BUG]  [BUGGY]  return(getName().endsWith( ".zip ")||  getName().startsWith( ".zip ")));  [CE]  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( ".zip ")||  getName().startsWith( ".zip ")));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".zip ")||  getName().startsWith( ".zip ")));	  return(getName().endsWith(   "/   ")||    getName().startsWith(   "/   ")));    	non-compiled	[CE]  	60	None	replace
71	[BUG]  [BUGGY]  return(getName().endsWith( "/ ")||  getName().startsWith( "./ ")));  [CE]  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/ ")||  getName().startsWith( "./ ")));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/ ")||  getName().startsWith( "./ ")));	  return(getName().endsWith(   "/   ")||    getName().startsWith(   "/   ")));    	non-compiled	[CE]  	60	None	replace
72	[BUG]  [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true;  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true;  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true;	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   "))    {    return    true;    	non-compiled	[CE]  	141	None	replace
73	[BUG]  [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true;  }  [CE]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true;  }	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   "))    {    return    true;    	non-compiled	[CE]  	141	None	replace
74	[BUG]  [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  false;  [CE]  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  false;  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  false;	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   "))    {    return    true;    	non-compiled	[CE]  	141	None	replace
75	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith  [CE]  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   "))    {    return    true;    	non-compiled	[CE]  	141	None	replace
76	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( ".js  [CE]  unclosed  string  literal  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( ".js  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( ".js	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   "))    {    return    true;    	non-compiled	[CE]  unclosed  string  literal	141	None	replace
77	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")  [CE]  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")    	non-compiled	[CE]  	42	None	replace
78	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* ")  [CE]  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* ")  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* ")	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")    	non-compiled	[CE]  	42	None	replace
79	[BUG]  [BUGGY]  ||  getName().endsWith('/'))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  getName().endsWith('/'))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  getName().endsWith('/'))  {  return  true;  }	  if(getName().endsWith(       "/       "))    {    return    true;    }    if(getName().endsWith('/       "))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
80	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getName());  [CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getName());  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Thread.currentThread().setContextClassLoader(getName());	  if(getName().endsWith(       "/       "))    {    return    true;    }    if(getName().endsWith('/       "))    {    return    true;    }    	non-compiled	[CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;	33	None	replace
81	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getName().endsWith( ".js "))  {  return  true;  }  [CE]  not  a  statement  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  parent  ==  null  &&  parent.getName().endsWith( ".js "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	parent  ==  null  &&  parent.getName().endsWith( ".js "))  {  return  true;  }	  if(getName().endsWith(       "/       "))    {    return    true;    }    if(getName().endsWith('/       "))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	33	None	replace
82	[BUG]  [BUGGY]  ||  linkFlag  ==  LF_DIR)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag  ==  LF_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  LF_DIR)  {  return  true;  }	  ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
83	[BUG]  [BUGGY]  ||  linkFlag!=  LF_DIR)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag!=  LF_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag!=  LF_DIR)  {  return  true;  }	  ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
84	[BUG]  [BUGGY]  ||  linkFlag  ==  FL_DIR)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag  ==  FL_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  FL_DIR)  {  return  true;  }	  ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
85	[BUG]  [BUGGY]  ||  linkFlag  ==  LAST_DIR_MODE)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag  ==  LAST_DIR_MODE)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  LAST_DIR_MODE)  {  return  true;  }	  ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
86	[BUG]  [BUGGY]  ||  linkFlag  ==  FILE_DIR)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag  ==  FILE_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  FILE_DIR)  {  return  true;  }	  ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
87	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  LF_DIR)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  LF_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  LF_DIR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	130	None	replace
88	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND	88	None	replace
89	[BUG]  [BUGGY]  if(linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	88	None	replace
90	[BUG]  [BUGGY]  |  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  |  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	|  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(	  |    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
91	[BUG]  [BUGGY]  |  getName().endsWith( "/   ")||  getName().endsWith( "/)||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  |  getName().endsWith( "/   ")||  getName().endsWith( "/)||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	|  getName().endsWith( "/   ")||  getName().endsWith( "/)||  getName().endsWith(	  |    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
92	[BUG]  [BUGGY]  |  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  |  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	|  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(	  |    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
93	[BUG]  [BUGGY]  |  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  |  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	|  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(	  |    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
94	[BUG]  [BUGGY]  |  getName().endsWith( "/   ")||  getName().endsWith( "/> ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  |  getName().endsWith( "/   ")||  getName().endsWith( "/> ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	|  getName().endsWith( "/   ")||  getName().endsWith( "/> ")||  getName().endsWith(	  |    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
95	[BUG]  [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().ends  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().ends  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().ends	  return    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith    	non-compiled	[CE]  	136	None	replace
96	[BUG]  [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().	  return    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith    	non-compiled	[CE]  <identifier>  expected	136	None	replace
97	[BUG]  [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName()  [CE]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName()  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName()	  return    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith    	non-compiled	[CE]  	136	None	replace
98	[BUG]  [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( ".zip   ")||  getName().ends  [CE]  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( ".zip   ")||  getName().ends  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( ".zip   ")||  getName().ends	  return    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith    	non-compiled	[CE]  	136	None	replace
99	[BUG]  [BUGGY]  return  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith(	  return    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
100	[BUG]  [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip  [CE]  unclosed  string  literal  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip	  return    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith    	non-compiled	[CE]  unclosed  string  literal	136	None	replace
101	[BUG]  [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( "/.zip   ")||  getName().ends  [CE]  [FE]                                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( "/.zip   ")||  getName().ends  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( "/.zip   ")||  getName().ends	  return    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith    	non-compiled	[CE]  	136	None	replace
102	[BUG]  [BUGGY]  return  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith(	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
103	[BUG]  [BUGGY]  ||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
104	[BUG]  [BUGGY]  return  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( ".js ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( ".js ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( ".js ")||  getName().endsWith(	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
105	[BUG]  [BUGGY]  return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/  [CE]  unclosed  string  literal  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")|    	non-compiled	[CE]  unclosed  string  literal	47	None	replace
106	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* ")||  getName().endsWith( "/* ")||  getName().endsWith  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* ")||  getName().endsWith( "/* ")||  getName().endsWith  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* ")||  getName().endsWith( "/* ")||  getName().endsWith	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/*   ")||    getName().endsWith    	non-compiled	[CE]  	104	None	replace
107	[BUG]  [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/* ")||  getName().endsWith  [CE]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/* ")||  getName().endsWith  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/* ")||  getName().endsWith	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/*   ")||    getName().endsWith    	non-compiled	[CE]  	104	None	replace
108	[BUG]  [BUGGY]  return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* ")||  getName().endsWith( "/* ")||  getName().endsWith  [CE]  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* ")||  getName().endsWith( "/* ")||  getName().endsWith  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* ")||  getName().endsWith( "/* ")||  getName().endsWith	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/*   ")||    getName().endsWith    	non-compiled	[CE]  	104	None	replace
109	[BUG]  [BUGGY]  return  getName().endsWith( "/* ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* ")||  getName().endsWith( "/* ")||  getName().endsWith  [CE]  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/* ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* ")||  getName().endsWith( "/* ")||  getName().endsWith  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/* ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* ")||  getName().endsWith( "/* ")||  getName().endsWith	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/*   ")||    getName().endsWith    	non-compiled	[CE]  	104	None	replace
110	[BUG]  [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  [CE]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	49	None	replace
111	[BUG]  [BUGGY]  return  getName().endsWith( "/ ")||  getName().startsWith( "/ ")||  getName().endsWith( "/ "))  {  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/ ")||  getName().startsWith( "/ ")||  getName().endsWith( "/ "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/ ")||  getName().startsWith( "/ ")||  getName().endsWith( "/ "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	49	None	replace
112	[BUG]  [BUGGY]  return  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	49	None	replace
113	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ")/     "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   ")/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   ")/       "))    {    return    true;    }    if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   ")/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	30	1	add
114	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ")/     "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   ")/   "))  {  return  true;  }  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ")/     "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   ")/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   ")/       "))    {    return    true;    }    if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   ")/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	30	1	add
115	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ")/     "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   ")/       "))    {    return    true;    }    if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	30	1	add
116	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ")/     "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ")/     "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   ")/       "))    {    return    true;    }    if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	30	1	add
117	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ")/     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   ")/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   ")/       "))    {    return    true;    }    if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   ")/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	30	1	add
118	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ")/     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   ")/   "))  {  return  true;  }  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ")/     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   ")/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   ")/       "))    {    return    true;    }    if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   ")/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	30	1	add
119	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ")/     "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   ")/   "))  {  return  true  [CE]  [FE]          IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ")/     "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   ")/   "))  {  return  true  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   ")/       "))    {    return    true;    }    if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   ")/   "))  {  return  true	  	non-compiled	[CE]  	30	None	add
120	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ")/     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   ")/       "))    {    return    true;    }    if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	30	1	add
121	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ")/     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  [FE]  IOException  [FE]            IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ")/     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   ")/       "))    {    return    true;    }    if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	30	1	add
122	[BUG]  [BUGGY]  ||  getName().endsWith( "/ ")||  getName().endsWith( "./ ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  getName().endsWith( "/ ")||  getName().endsWith( "./ ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  getName().endsWith( "/ ")||  getName().endsWith( "./ ")||  getName().endsWith(	  ||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
123	[BUG]  [BUGGY]  ||  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith(	  ||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
124	[BUG]  [BUGGY]  ||  getName().endsWith( "/   ")||  getName().endsWith( "/)||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  getName().endsWith( "/   ")||  getName().endsWith( "/)||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  getName().endsWith( "/   ")||  getName().endsWith( "/)||  getName().endsWith(	  ||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
125	[BUG]  [BUGGY]  ||  getName().endsWith( "/   ")||  getName().endsWith( "/> ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  getName().endsWith( "/   ")||  getName().endsWith( "/> ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  getName().endsWith( "/   ")||  getName().endsWith( "/> ")||  getName().endsWith(	  ||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
126	[BUG]  [BUGGY]  return  getName().endsWith( "/.java ")||  getName().endsWith( "/.java ")||  getName().endsWith( "/.java ")||  getName().endsWith( "/.java ")||  getName().endsWith  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.java ")||  getName().endsWith( "/.java ")||  getName().endsWith( "/.java ")||  getName().endsWith( "/.java ")||  getName().endsWith  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.java ")||  getName().endsWith( "/.java ")||  getName().endsWith( "/.java ")||  getName().endsWith( "/.java ")||  getName().endsWith	  return    getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   ")||    getName().endsWith    	non-compiled	[CE]  	137	None	replace
127	[BUG]  [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().	  return    getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   ")||    getName().endsWith    	non-compiled	[CE]  <identifier>  expected	137	None	replace
128	[BUG]  [BUGGY]  return  getName().endsWith( "/.java ")||  getName().endsWith( "/.java ")||  getName().endsWith( "/.java ")||  getName().endsWith( "/.java ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.java ")||  getName().endsWith( "/.java ")||  getName().endsWith( "/.java ")||  getName().endsWith( "/.java ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.java ")||  getName().endsWith( "/.java ")||  getName().endsWith( "/.java ")||  getName().endsWith( "/.java ")||  getName().endsWith(	  return    getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   ")||    getName().endsWith    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
129	[BUG]  [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith(	  return    getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   ")||    getName().endsWith    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
130	[BUG]  [BUGGY]  return(getName().endsWith( "/   ")||  getName().endsWith( ".js "))  {  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/   ")||  getName().endsWith( ".js "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/   ")||  getName().endsWith( ".js "))  {	  return(getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  	24	None	replace
131	[BUG]  [BUGGY]  return(getName().endsWith( ".java ")||  getName().endsWith( ".js "))  {  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( ".java ")||  getName().endsWith( ".js "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".java ")||  getName().endsWith( ".js "))  {	  return(getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  	24	None	replace
132	[BUG]  [BUGGY]  return(getName().endsWith( ".js ")||  getName().endsWith( "/.js "))  {  [CE]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( ".js ")||  getName().endsWith( "/.js "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".js ")||  getName().endsWith( "/.js "))  {	  return(getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  	24	None	replace
133	[BUG]  [BUGGY]  return(getName().endsWith( "/   ")||  getName().endsWith( ".zip "))  {  [CE]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/   ")||  getName().endsWith( ".zip "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/   ")||  getName().endsWith( ".zip "))  {	  return(getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   "))    {    	non-compiled	[CE]  	23	None	replace
134	[BUG]  [BUGGY]  return(getName().endsWith( "/.zip ")||  getName().endsWith( "/.zip "))  {  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/.zip ")||  getName().endsWith( "/.zip "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/.zip ")||  getName().endsWith( "/.zip "))  {	  return(getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   "))    {    	non-compiled	[CE]  	23	None	replace
135	[BUG]  [BUGGY]  parent  ==  null  ||  parent.getName().endsWith( "./ "))  {  return  true;  }  [CE]  not  a  statement  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  parent  ==  null  ||  parent.getName().endsWith( "./ "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	parent  ==  null  ||  parent.getName().endsWith( "./ "))  {  return  true;  }	  parent    ==    null    &&    parent.getName().endsWith(   "./   "))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	111	None	replace
136	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  LF_DIR))  {  return  true;  }  [CE]  not  a  statement  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  LF_DIR))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  LF_DIR))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
137	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [CE]  not  a  statement  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
138	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  FILE_PER_SECOND))  {  return  true;  }  [CE]  not  a  statement  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  FILE_PER_SECOND))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  FILE_PER_SECOND))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
139	[BUG]  [BUGGY]  (linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  [CE]  not  a  statement  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
140	[BUG]  [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [CE]  ';'  expected  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului	  Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    GuvernuluiTarArchiveEntry[]    EMPTY_DIR    	non-compiled	[CE]  ';'  expected	84	None	replace
141	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  LF_DIR)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  LF_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  LF_DIR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	75	None	replace
142	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	72	None	replace
143	[BUG]  [BUGGY]  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
144	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [CE]  not  a  statement  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	72	None	replace
145	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	72	None	replace
146	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_SECOND)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND	154	None	replace
147	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_SECOND)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	154	None	replace
148	[BUG]  [BUGGY]  if(linkFlag  ==  MILLIS_PER_SECOND  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  MILLIS_PER_SECOND  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  MILLIS_PER_SECOND  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_SECOND)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND	154	None	replace
149	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	18	None	replace
150	[BUG]  [BUGGY]  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
151	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [CE]  not  a  statement  [FE]                                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
152	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarArchiveEntry.class);  [CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Thread.currentThread().setContextClassLoader(TarArchiveEntry.class);  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Thread.currentThread().setContextClassLoader(TarArchiveEntry.class);	  if(getName().endsWith(       "/       "))    {    return    true;    }    if(getName().endsWith(   ")/       "))    {    return    true;    }    	non-compiled	[CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;	31	None	replace
153	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(this);  [CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;  [FE]      IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Thread.currentThread().setContextClassLoader(this);  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Thread.currentThread().setContextClassLoader(this);	  if(getName().endsWith(       "/       "))    {    return    true;    }    if(getName().endsWith(   ")/       "))    {    return    true;    }    	non-compiled	[CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;	31	None	replace
154	[BUG]  [BUGGY]  Gründen.checkSumOK(getName().endsWith( "/   "))  {  return  true;  }  [CE]  illegal  character:  [FE]        IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Gründen.checkSumOK(getName().endsWith( "/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Gründen.checkSumOK(getName().endsWith( "/   "))  {  return  true;  }	  if(getName().endsWith(       "/       "))    {    return    true;    }    if(getName().endsWith(   ")/       "))    {    return    true;    }    	non-compiled	[CE]  illegal  character:  	31	None	replace
155	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(JarArchiveEntry.class);  [CE]  cannot  find  symbol  [FE]          IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Thread.currentThread().setContextClassLoader(JarArchiveEntry.class);  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Thread.currentThread().setContextClassLoader(JarArchiveEntry.class);	  if(getName().endsWith(       "/       "))    {    return    true;    }    if(getName().endsWith(   ")/       "))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
156	[BUG]  [BUGGY]  if(linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	157	None	replace
157	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  false;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	157	None	replace
158	[BUG]  [BUGGY]  return(getName().endsWith( "/   ")||  getName().endsWith( "/.* ")));  [CE]  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/   ")||  getName().endsWith( "/.* ")));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/   ")||  getName().endsWith( "/.* ")));	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "./   ")));    	non-compiled	[CE]  	63	None	replace
159	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "/     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   "/       "))    {    return    true;    }    if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	26	1	add
160	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "/     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "/     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   "/       "))    {    return    true;    }    if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	26	1	add
161	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "/     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   "/       "))    {    return    true;    }    if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	26	1	add
162	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "/     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "/     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   "/       "))    {    return    true;    }    if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	26	1	add
163	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "/     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   "/       "))    {    return    true;    }    if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	26	1	add
164	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "/     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "/     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   "/       "))    {    return    true;    }    if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	26	1	add
165	[BUG]  [BUGGY]  [FE]  IOException  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  MILLIS_PER_SECOND  ||  linkFlag  ==  MILLIS_PER_SECOND)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(linkFlag!=  MILLIS_PER_SECOND  ||  linkFlag  ==  MILLIS_PER_SECOND)  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	compilable	  [FE]  IOException  	92	1	replace
166	[BUG]  [BUGGY]  if(linkFlag!=  MILLIS_PER_SECOND  ||  linkFlag  ==  MILLIS_PER_SECOND)  {  return  true;  }  [FE]  IOException  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  MILLIS_PER_SECOND  ||  linkFlag  ==  MILLIS_PER_SECOND)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  MILLIS_PER_SECOND  ||  linkFlag  ==  MILLIS_PER_SECOND)  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	compilable	  [FE]  IOException  	92	1	replace
167	[BUG]  [BUGGY]  if(linkFlag!=  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	92	None	replace
168	[BUG]  [BUGGY]  [FE]  IOException  [FE]                                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  MAX_NAMELEN  ||  linkFlag  ==  MAX_NAMELEN)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(linkFlag!=  MAX_NAMELEN  ||  linkFlag  ==  MAX_NAMELEN)  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	compilable	  [FE]  IOException  	92	1	replace
169	[BUG]  [BUGGY]  if(linkFlag!=  MAX_NAMELEN  ||  linkFlag  ==  MAX_NAMELEN)  {  return  true;  }  [FE]  IOException  [FE]                                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  MAX_NAMELEN  ||  linkFlag  ==  MAX_NAMELEN)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  MAX_NAMELEN  ||  linkFlag  ==  MAX_NAMELEN)  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	compilable	  [FE]  IOException  	92	1	replace
170	[BUG]  [BUGGY]  [FE]  IOException  [FE]                                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  LF_DIR  ||  linkFlag  ==  LF_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(linkFlag!=  LF_DIR  ||  linkFlag  ==  LF_DIR)  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	compilable	  [FE]  IOException  	92	1	replace
171	[BUG]  [BUGGY]  if(linkFlag!=  LF_DIR  ||  linkFlag  ==  LF_DIR)  {  return  true;  }  [FE]  IOException  [FE]                                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  LF_DIR  ||  linkFlag  ==  LF_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  LF_DIR  ||  linkFlag  ==  LF_DIR)  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	compilable	  [FE]  IOException  	92	1	replace
172	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  LF_DIR))  {  return  true;  }  [CE]  not  a  statement  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  LF_DIR))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  LF_DIR))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
173	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [CE]  not  a  statement  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
174	[BUG]  [BUGGY]  (linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR))  {  return  true;  }  [CE]  not  a  statement  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
175	[BUG]  [BUGGY]  (linkFlag  ==  LF_DIR)||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  not  a  statement  [FE]                                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  LF_DIR)||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  LF_DIR)||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
176	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR	77	None	replace
177	[BUG]  [BUGGY]  if(linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS	77	None	replace
178	[BUG]  [BUGGY]  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	&&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  &&    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
179	[BUG]  [BUGGY]  &&  linkFlag  ==  DEFAULT_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  &&  linkFlag  ==  DEFAULT_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	&&  linkFlag  ==  DEFAULT_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  &&    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
180	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarArchiveEntry.class.getSimpleName());  [CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;  [FE]      IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Thread.currentThread().setContextClassLoader(TarArchiveEntry.class.getSimpleName());  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Thread.currentThread().setContextClassLoader(TarArchiveEntry.class.getSimpleName());	  if(getName().endsWith(       "/       "))    {    return    true;    }    if(getName().endsWith(   "/       "))    {    return    true;    }    	non-compiled	[CE]  method  setContextClassLoader  in  class  Thread  cannot  be  applied  to  given  types;	27	None	replace
181	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(JarArchiveEntry.class.getClassLoader());  [CE]  cannot  find  symbol  [FE]        IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Thread.currentThread().setContextClassLoader(JarArchiveEntry.class.getClassLoader());  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Thread.currentThread().setContextClassLoader(JarArchiveEntry.class.getClassLoader());	  if(getName().endsWith(       "/       "))    {    return    true;    }    if(getName().endsWith(   "/       "))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
182	[BUG]  [BUGGY]  return(getName().endsWith( "/   ")||  getName().endsWith( ".zip ")));  [CE]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/   ")||  getName().endsWith( ".zip ")));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/   ")||  getName().endsWith( ".zip ")));	  return(getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")));    	non-compiled	[CE]  	62	None	replace
183	[BUG]  [BUGGY]  return(getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")));  [CE]  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")));	  return(getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")));    	non-compiled	[CE]  	62	None	replace
184	[BUG]  [BUGGY]  return  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   "))  {  [CE]  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   "))  {	  return    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   "))    {    	non-compiled	[CE]  	158	None	replace
185	[BUG]  [BUGGY]  return  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg  [CE]  unclosed  string  literal  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg	  return    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   "))    {    	non-compiled	[CE]  unclosed  string  literal	158	None	replace
186	[BUG]  [BUGGY]  return  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( ".jpg   "))  {  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( ".jpg   "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( ".jpg   "))  {	  return    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   "))    {    	non-compiled	[CE]  	158	None	replace
187	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/  [CE]  unclosed  string  literal  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/    	non-compiled	[CE]  unclosed  string  literal	1	None	replace
188	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* ")||  getName().endsWith( "/  [CE]  unclosed  string  literal  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* ")||  getName().endsWith( "/  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* ")||  getName().endsWith( "/	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/    	non-compiled	[CE]  unclosed  string  literal	1	None	replace
189	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/etc ")||  getName().endsWith( "/  [CE]  unclosed  string  literal  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/etc ")||  getName().endsWith( "/  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/etc ")||  getName().endsWith( "/	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/    	non-compiled	[CE]  unclosed  string  literal	1	None	replace
190	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/  [CE]  unclosed  string  literal  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/    	non-compiled	[CE]  unclosed  string  literal	1	None	replace
191	[BUG]  [BUGGY]  tate  =  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true;  }  [CE]  [FE]          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  tate  =  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	tate  =  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true;  }	  tate    =    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  	133	None	replace
192	[BUG]  [BUGGY]  tate  =  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  return  false;  }  [CE]  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  tate  =  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	tate  =  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  return  false;  }	  tate    =    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  	133	None	replace
193	[BUG]  [BUGGY]  tate  =  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ "))  {  return  true;  }  [CE]  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  tate  =  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	tate  =  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ "))  {  return  true;  }	  tate    =    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  	133	None	replace
194	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_BACKSLASH    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	99	None	replace
195	[BUG]  [BUGGY]  parent!=  null  &&  parent.getName().endsWith( "/   "))  {  return  true;  [CE]  not  a  statement  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  parent!=  null  &&  parent.getName().endsWith( "/   "))  {  return  true;  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	parent!=  null  &&  parent.getName().endsWith( "/   "))  {  return  true;	  if(getName().endsWith(       "/       "))    {    return    true;    }    if(getName().endsWith(?   "/       "))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	32	None	replace
196	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getName().endsWith( "/   "))  {  return  true;  [CE]  not  a  statement  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  parent  ==  null  &&  parent.getName().endsWith( "/   "))  {  return  true;  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	parent  ==  null  &&  parent.getName().endsWith( "/   "))  {  return  true;	  if(getName().endsWith(       "/       "))    {    return    true;    }    if(getName().endsWith(?   "/       "))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	32	None	replace
197	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_SIZE    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST	96	None	replace
198	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SIZE)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SIZE)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SIZE)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_SIZE    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST	96	None	replace
199	[BUG]  [BUGGY]  If(linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  ';'  expected  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  If(linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	If(linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  If(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
200	[BUG]  [BUGGY]  If(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  ';'  expected  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  If(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	If(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  If(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
201	[BUG]  [BUGGY]  If(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  LF_DIR)  {  return  true;  }  [CE]  ';'  expected  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  If(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  LF_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	If(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  LF_DIR)  {  return  true;  }	  If(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
202	[BUG]  [BUGGY]  If(fileName  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  ';'  expected  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  If(fileName  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	If(fileName  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  If(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
203	[BUG]  [BUGGY]  If(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  ';'  expected  [FE]                                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  If(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	If(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  If(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
204	[BUG]  [BUGGY]  return  getName().startsWith( "/ ")||  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( "/ ")||  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( "/ ")||  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith(	  return    getName().endsWith(   "/       ")||    getName().startsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
205	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith(	  return    getName().endsWith(   "/       ")||    getName().startsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
206	[BUG]  [BUGGY]  parent  ==  null  &&  getName().endsWith( "/   "))  {  return  true;  }  [CE]  not  a  statement  [FE]          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  parent  ==  null  &&  getName().endsWith( "/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	parent  ==  null  &&  getName().endsWith( "/   "))  {  return  true;  }	  parent    ==    null    ||    getName().endsWith(   "/       "))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	109	None	replace
207	[BUG]  [BUGGY]  parent  ==  null  ||  getName().startsWith( "/ "))  {  return  true;  }  [CE]  not  a  statement  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  parent  ==  null  ||  getName().startsWith( "/ "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	parent  ==  null  ||  getName().startsWith( "/ "))  {  return  true;  }	  parent    ==    null    ||    getName().endsWith(   "/       "))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	109	None	replace
208	[BUG]  [BUGGY]  parent  ==  null  ||  getName().endsWith( "./ "))  {  return  true;  }  [CE]  not  a  statement  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  parent  ==  null  ||  getName().endsWith( "./ "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	parent  ==  null  ||  getName().endsWith( "./ "))  {  return  true;  }	  parent    ==    null    ||    getName().endsWith(   "/       "))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	109	None	replace
209	[BUG]  [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   "))  {  [CE]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   "))  {	  return    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   "))    {    	non-compiled	[CE]  	159	None	replace
210	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   "))  {  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   "))  {	  return    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   "))    {    	non-compiled	[CE]  	159	None	replace
211	[BUG]  [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( "/.zip   "))  {  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( "/.zip   "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( "/.zip   "))  {	  return    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   "))    {    	non-compiled	[CE]  	159	None	replace
212	[BUG]  [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( ".zip   "))  {  [CE]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( ".zip   "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( ".zip   "))  {	  return    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   "))    {    	non-compiled	[CE]  	159	None	replace
213	[BUG]  [BUGGY]  return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().ends  [CE]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().ends  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().ends	  return    getName().endsWith(   "./   ")||    getName().endsWith(   "./   ")||    getName().endsWith(   "./   ")||    getName().endsWith(   "./   ")||    getName().endsWith(   "./   ")||    getName().endsWith    	non-compiled	[CE]  	112	None	replace
214	[BUG]  [BUGGY]  return  getName().endsWith( "./   ")||  getName().endsWith( "./   ")||  getName().endsWith( "./   ")||  getName().endsWith( "./   ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "./   ")||  getName().endsWith( "./   ")||  getName().endsWith( "./   ")||  getName().endsWith( "./   ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "./   ")||  getName().endsWith( "./   ")||  getName().endsWith( "./   ")||  getName().endsWith( "./   ")||  getName().endsWith(	  return    getName().endsWith(   "./   ")||    getName().endsWith(   "./   ")||    getName().endsWith(   "./   ")||    getName().endsWith(   "./   ")||    getName().endsWith(   "./   ")||    getName().endsWith    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
215	[BUG]  [BUGGY]  return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith(	  return    getName().endsWith(   "./   ")||    getName().endsWith(   "./   ")||    getName().endsWith(   "./   ")||    getName().endsWith(   "./   ")||    getName().endsWith(   "./   ")||    getName().endsWith    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
216	[BUG]  [BUGGY]  return(getName().endsWith( "/.java   ")||  getName().endsWith( "/.java   ")))  {  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/.java   ")||  getName().endsWith( "/.java   ")))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/.java   ")||  getName().endsWith( "/.java   ")))  {	  return(getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   ")))    {    	non-compiled	[CE]  	148	None	replace
217	[BUG]  [BUGGY]  return(getName().endsWith( "/   ")||  getName().endsWith( ".java ")))  {  [CE]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/   ")||  getName().endsWith( ".java ")))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/   ")||  getName().endsWith( ".java ")))  {	  return(getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   ")))    {    	non-compiled	[CE]  	148	None	replace
218	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR    ||    linksFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	143	None	replace
219	[BUG]  [BUGGY]  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  false;  }	  ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
220	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  LF_DIR))  {  return  true;  }  [CE]  not  a  statement  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  LF_DIR))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  LF_DIR))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	101	None	replace
221	[BUG]  [BUGGY]  (linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH))  {  return  true;  }  [CE]  not  a  statement  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	101	None	replace
222	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [CE]  not  a  statement  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	101	None	replace
223	[BUG]  [BUGGY]  (linkFlag  ==  LF_DIR)||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [CE]  not  a  statement  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  LF_DIR)||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  LF_DIR)||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	101	None	replace
224	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [CE]  not  a  statement  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	70	None	replace
225	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  MILLIS_PER_SECOND))  {  return  true;  }  [CE]  not  a  statement  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  MILLIS_PER_SECOND))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  MILLIS_PER_SECOND))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	70	None	replace
226	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  NUM_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [CE]  not  a  statement  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  NUM_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  NUM_TAR_ARCHIVE_ENTRIES))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	70	None	replace
227	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "  }  [CE]  unclosed  string  literal  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "  }	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "    	non-compiled	[CE]  unclosed  string  literal	43	None	replace
228	[BUG]  [BUGGY]  return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "  [CE]  unclosed  string  literal  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "    	non-compiled	[CE]  unclosed  string  literal	43	None	replace
229	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/> ")||  getName().endsWith( "  [CE]  unclosed  string  literal  [FE]                                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/> ")||  getName().endsWith( "  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/> ")||  getName().endsWith( "	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "    	non-compiled	[CE]  unclosed  string  literal	43	None	replace
230	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "  [CE]  unclosed  string  literal  [FE]                                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "    	non-compiled	[CE]  unclosed  string  literal	43	None	replace
231	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* ")||  getName().endsWith( "  [CE]  unclosed  string  literal  [FE]                                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* ")||  getName().endsWith( "  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* ")||  getName().endsWith( "	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "    	non-compiled	[CE]  unclosed  string  literal	43	None	replace
232	[BUG]  [BUGGY]  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
233	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS	79	None	replace
234	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  false;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	79	None	replace
235	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  false;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS	79	None	replace
236	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  false;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	79	None	replace
237	[BUG]  [BUGGY]  return(getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")))  {  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")))  {	  return(getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")))    {    	non-compiled	[CE]  	147	None	replace
238	[BUG]  [BUGGY]  tate  =  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true;  }  [CE]  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  tate  =  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	tate  =  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true;  }	  tate    =    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  	134	None	replace
239	[BUG]  [BUGGY]  tate  =  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {  return  true;  }  [CE]  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  tate  =  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	tate  =  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {  return  true;  }	  tate    =    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  	134	None	replace
240	[BUG]  [BUGGY]  tate  =  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/> "))  {  return  true;  }  [CE]  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  tate  =  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/> "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	tate  =  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/> "))  {  return  true;  }	  tate    =    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  	134	None	replace
241	[BUG]  [BUGGY]  return(getName().startsWith(   "/   ")||  getName().endsWith(   "/   "));  return(getName().startsWith( "/   ")||  getName().endsWith( "/   "));  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith(   "/   ")||  getName().endsWith(   "/   "));  return(getName().startsWith( "/   ")||  getName().endsWith( "/   "));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith(   "/   ")||    getName().endsWith(   "/   "));    return(getName().startsWith( "/   ")||  getName().endsWith( "/   "));	  	non-compiled	[CE]  unreachable  statement	117	None	add
242	[BUG]  [BUGGY]  return(getName().startsWith(   "/   ")||  getName().endsWith(   "/   "));  return(getName().startsWith( "./   ")||  getName().endsWith( "/   "));  [CE]  unreachable  statement  [FE]      IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith(   "/   ")||  getName().endsWith(   "/   "));  return(getName().startsWith( "./   ")||  getName().endsWith( "/   "));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith(   "/   ")||    getName().endsWith(   "/   "));    return(getName().startsWith( "./   ")||  getName().endsWith( "/   "));	  	non-compiled	[CE]  unreachable  statement	117	None	add
243	[BUG]  [BUGGY]  return(getName().startsWith(   "/   ")||  getName().endsWith(   "/   "));  return(getName().startsWith( "/   ")||  getName().endsWith( "./   "));  [CE]  unreachable  statement  [FE]        IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith(   "/   ")||  getName().endsWith(   "/   "));  return(getName().startsWith( "/   ")||  getName().endsWith( "./   "));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith(   "/   ")||    getName().endsWith(   "/   "));    return(getName().startsWith( "/   ")||  getName().endsWith( "./   "));	  	non-compiled	[CE]  unreachable  statement	117	None	add
244	[BUG]  [BUGGY]  ||  linkFlag  ==  DEFAULT_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag  ==  DEFAULT_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  DEFAULT_TAR_ARCHIVE_EXTENDS)  {  return  true;  }	  ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
245	[BUG]  [BUGGY]  ||  linkFlag  ==  DEFAULT_TAR_ARCHIVE_EXTENDS)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag  ==  DEFAULT_TAR_ARCHIVE_EXTENDS)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  DEFAULT_TAR_ARCHIVE_EXTENDS)  {  return  false;  }	  ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
246	[BUG]  [BUGGY]  return(getName().endsWith( "/   ")||  getName().endsWith( ".java "))  {  [CE]  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/   ")||  getName().endsWith( ".java "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/   ")||  getName().endsWith( ".java "))  {	  return(getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   "))    {    	non-compiled	[CE]  	139	None	replace
247	[BUG]  [BUGGY]  return(getName().startsWith( ".java ")||  getName().endsWith( ".java "))  {  [CE]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith( ".java ")||  getName().endsWith( ".java "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( ".java ")||  getName().endsWith( ".java "))  {	  return(getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   "))    {    	non-compiled	[CE]  	139	None	replace
248	[BUG]  [BUGGY]  parent  ==  null  ||  parent.getName().endsWith( "/   "))  {  return  true;  }  [CE]  not  a  statement  [FE]        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  parent  ==  null  ||  parent.getName().endsWith( "/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	parent  ==  null  ||  parent.getName().endsWith( "/   "))  {  return  true;  }	  parent    ==    null    &&    parent.getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	108	None	replace
249	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR	100	None	replace
250	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND	100	None	replace
251	[BUG]  [BUGGY]  parent!=  null  &&  parent.getName().endsWith( ".js "))  {  return  true;  }  [CE]  not  a  statement  [FE]        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  parent!=  null  &&  parent.getName().endsWith( ".js "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	parent!=  null  &&  parent.getName().endsWith( ".js "))  {  return  true;  }	  if(getName().endsWith(       "/       "))    {    return    true;    }    if(getName().endsWith(.   "/       "))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	126	None	replace
252	[BUG]  [BUGGY]  parent!=  null  &&  parent.getName().endsWith( ".js "))  {  return  true;  [CE]  not  a  statement  [FE]          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  parent!=  null  &&  parent.getName().endsWith( ".js "))  {  return  true;  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	parent!=  null  &&  parent.getName().endsWith( ".js "))  {  return  true;	  if(getName().endsWith(       "/       "))    {    return    true;    }    if(getName().endsWith(.   "/       "))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	126	None	replace
253	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getName().endsWith( ".zip "))  {  return  true;  }  [CE]  not  a  statement  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  parent  ==  null  &&  parent.getName().endsWith( ".zip "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	parent  ==  null  &&  parent.getName().endsWith( ".zip "))  {  return  true;  }	  if(getName().endsWith(       "/       "))    {    return    true;    }    if(getName().endsWith(.   "/       "))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	126	None	replace
254	[BUG]  [BUGGY]  return(getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")));  [CE]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")));	  return(getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")));    	non-compiled	[CE]  	145	None	replace
255	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH	39	None	replace
256	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH	39	None	replace
257	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	39	None	replace
258	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH  [FE]                                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH	39	None	replace
259	[BUG]  [BUGGY]  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
260	[BUG]  [BUGGY]  parent!=  null  ||  parent.getName().endsWith( "/   "))  {  return  true;  }  [CE]  not  a  statement  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  parent!=  null  ||  parent.getName().endsWith( "/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	parent!=  null  ||  parent.getName().endsWith( "/   "))  {  return  true;  }	  parent!=    null    &&    parent.getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	110	None	replace
261	[BUG]  [BUGGY]  parent!=  null  &&  parent.getName().endsWith( "./ "))  {  return  true;  }  [CE]  not  a  statement  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  parent!=  null  &&  parent.getName().endsWith( "./ "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	parent!=  null  &&  parent.getName().endsWith( "./ "))  {  return  true;  }	  parent!=    null    &&    parent.getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	110	None	replace
262	[BUG]  [BUGGY]  parent!=  null  &&  parent.getName().startsWith( "/ "))  {  return  true;  }  [CE]  not  a  statement  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  parent!=  null  &&  parent.getName().startsWith( "/ "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	parent!=  null  &&  parent.getName().startsWith( "/ "))  {  return  true;  }	  parent!=    null    &&    parent.getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	110	None	replace
263	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR	163	None	replace
264	[BUG]  [BUGGY]  if(linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR	163	None	replace
265	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR	163	None	replace
266	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  LF_DIR))  {  return  true;  }  [CE]  not  a  statement  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  LF_DIR))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  LF_DIR))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	89	None	replace
267	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [CE]  not  a  statement  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	89	None	replace
268	[BUG]  [BUGGY]  (linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST))  {  return  true;  }  [CE]  not  a  statement  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	89	None	replace
269	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  MILLIS_PER_SECOND))  {  return  true;  }  [CE]  not  a  statement  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  MILLIS_PER_SECOND))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  MILLIS_PER_SECOND))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	89	None	replace
270	[BUG]  [BUGGY]  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	&&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  false;  }	  &&    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
271	[BUG]  [BUGGY]  &&  linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  &&  linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	&&  linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR)  {  return  false;  }	  &&    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
272	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_SECOND)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR	144	None	replace
273	[BUG]  [BUGGY]  return(getName().endsWith( "/   ")||  getName().endsWith( "./ ")))  {  [CE]  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/   ")||  getName().endsWith( "./ ")))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/   ")||  getName().endsWith( "./ ")))  {	  return(getName().endsWith(   "./   ")||    getName().endsWith(   "./   ")))    {    	non-compiled	[CE]  	67	None	replace
274	[BUG]  [BUGGY]  return(getName().endsWith(   "/   ")||  getName().endsWith(   "./   "));  return(getName().endsWith(   "/   ")||  getName().endsWith(   "./   "));  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith(   "/   ")||  getName().endsWith(   "./   "));  return(getName().endsWith(   "/   ")||  getName().endsWith(   "./   "));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith(   "/   ")||    getName().endsWith(   "./   "));    return(getName().endsWith(   "/   ")||  getName().endsWith(   "./   "));	  	non-compiled	[CE]  unreachable  statement	57	None	add
275	[BUG]  [BUGGY]  return(getName().endsWith(   "/   ")||  getName().endsWith(   "./   "));  return(getName().endsWith( "./   ")||  getName().endsWith(   "./   "));  [CE]  unreachable  statement  [FE]      IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith(   "/   ")||  getName().endsWith(   "./   "));  return(getName().endsWith( "./   ")||  getName().endsWith(   "./   "));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith(   "/   ")||    getName().endsWith(   "./   "));    return(getName().endsWith( "./   ")||  getName().endsWith(   "./   "));	  	non-compiled	[CE]  unreachable  statement	57	None	add
276	[BUG]  [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  [CE]  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".java ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  	48	None	replace
277	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( ".js "))  {  [CE]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( ".js "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( ".js "))  {	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  	48	None	replace
278	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  	48	None	replace
279	[BUG]  [BUGGY]  return  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js "))  {  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js "))  {	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  	48	None	replace
280	[BUG]  [BUGGY]  if(linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST	94	None	replace
281	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH))  {  return  true;  }  [CE]  not  a  statement  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	38	None	replace
282	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  F_TAR_ARCHIVE_BACKSLASH))  {  return  true;  }  [CE]  not  a  statement  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  F_TAR_ARCHIVE_BACKSLASH))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  F_TAR_ARCHIVE_BACKSLASH))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	38	None	replace
283	[BUG]  [BUGGY]  (linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH))  {  return  true;  [CE]  not  a  statement  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH))  {  return  true;  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH))  {  return  true;	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	38	None	replace
284	[BUG]  [BUGGY]  return(getName().startsWith( "/ ")||  getName().startsWith( "/ ")))  {  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith( "/ ")||  getName().startsWith( "/ ")))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( "/ ")||  getName().startsWith( "/ ")))  {	  return(getName().endsWith(   "/   ")||    getName().startsWith(   "/   ")))    {    	non-compiled	[CE]  	64	None	replace
285	[BUG]  [BUGGY]  return(getName().endsWith( "./ ")||  getName().startsWith( "./ ")))  {  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "./ ")||  getName().startsWith( "./ ")))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "./ ")||  getName().startsWith( "./ ")))  {	  return(getName().endsWith(   "/   ")||    getName().startsWith(   "/   ")))    {    	non-compiled	[CE]  	64	None	replace
286	[BUG]  [BUGGY]  return(getName().endsWith( ".zip ")||  getName().startsWith( ".zip ")))  {  [CE]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( ".zip ")||  getName().startsWith( ".zip ")))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".zip ")||  getName().startsWith( ".zip ")))  {	  return(getName().endsWith(   "/   ")||    getName().startsWith(   "/   ")))    {    	non-compiled	[CE]  	64	None	replace
287	[BUG]  [BUGGY]  return(getName().endsWith( ".js ")||  getName().startsWith( ".js ")))  {  [CE]  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( ".js ")||  getName().startsWith( ".js ")))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".js ")||  getName().startsWith( ".js ")))  {	  return(getName().endsWith(   "/   ")||    getName().startsWith(   "/   ")))    {    	non-compiled	[CE]  	64	None	replace
288	[BUG]  [BUGGY]  return(getName().endsWith( "/ ")||  getName().startsWith( "/ "))  &&  file.isDirectory())  {  [CE]  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/ ")||  getName().startsWith( "/ "))  &&  file.isDirectory())  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/ ")||  getName().startsWith( "/ "))  &&  file.isDirectory())  {	  return(getName().endsWith(   "/   ")||    getName().startsWith(   "/   ")))    {    	non-compiled	[CE]  	64	None	replace
289	[BUG]  [BUGGY]  return(getName().endsWith(   "/   ")||  getName().startsWith(   "/   "));  return(getName().endsWith(   "/   ")||  getName().startsWith( "/   "));  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith(   "/   ")||  getName().startsWith(   "/   "));  return(getName().endsWith(   "/   ")||  getName().startsWith( "/   "));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith(   "/   ")||    getName().startsWith(   "/   "));    return(getName().endsWith(   "/   ")||  getName().startsWith( "/   "));	  	non-compiled	[CE]  unreachable  statement	55	None	add
290	[BUG]  [BUGGY]  return(getName().endsWith(   "/   ")||  getName().startsWith(   "/   "));  return(getName().endsWith( "./   ")||  getName().startsWith( "/   "));  [CE]  unreachable  statement  [FE]      IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith(   "/   ")||  getName().startsWith(   "/   "));  return(getName().endsWith( "./   ")||  getName().startsWith( "/   "));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith(   "/   ")||    getName().startsWith(   "/   "));    return(getName().endsWith( "./   ")||  getName().startsWith( "/   "));	  	non-compiled	[CE]  unreachable  statement	55	None	add
291	[BUG]  [BUGGY]  return(getName().endsWith(   "/   ")||  getName().startsWith(   "/   "));  return(getName().endsWith(   "/   ")||  getName().startsWith( "./   "));  [CE]  unreachable  statement  [FE]        IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith(   "/   ")||  getName().startsWith(   "/   "));  return(getName().endsWith(   "/   ")||  getName().startsWith( "./   "));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith(   "/   ")||    getName().startsWith(   "/   "));    return(getName().endsWith(   "/   ")||  getName().startsWith( "./   "));	  	non-compiled	[CE]  unreachable  statement	55	None	add
292	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  LF_DIR)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  LF_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  LF_DIR)  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	78	None	replace
293	[BUG]  [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  false;  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  false;  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  false;	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       "))    {    return    false;    	non-compiled	[CE]  	40	None	replace
294	[BUG]  [BUGGY]  return(getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   "))  {  [CE]  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   "))  {	  return(getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   "))    {    	non-compiled	[CE]  	138	None	replace
295	[BUG]  [BUGGY]  return  getName().endsWith( "/ ")||  getName().startsWith( "/ ")||  getName().startsWith( "/ ")||  getName().endsWith( "/ "))  {  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/ ")||  getName().startsWith( "/ ")||  getName().startsWith( "/ ")||  getName().endsWith( "/ "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/ ")||  getName().startsWith( "/ ")||  getName().startsWith( "/ ")||  getName().endsWith( "/ "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().startsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	122	None	replace
296	[BUG]  [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().startsWith( ".js ")||  getName().endsWith( ".js "))  {  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().startsWith( ".js ")||  getName().endsWith( ".js "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().startsWith( ".js ")||  getName().endsWith( ".js "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().startsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	122	None	replace
297	[BUG]  [BUGGY]  return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   "))  {  [CE]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().startsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	122	None	replace
298	[BUG]  [BUGGY]  return(getName().endsWith( ".java ")||  getName().endsWith( "./ "))  {  [CE]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( ".java ")||  getName().endsWith( "./ "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".java ")||  getName().endsWith( "./ "))  {	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "./   "))    {    	non-compiled	[CE]  	140	None	replace
299	[BUG]  [BUGGY]  return(getName().startsWith( "./ ")||  getName().endsWith( "./ ")));  [CE]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith( "./ ")||  getName().endsWith( "./ ")));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( "./ ")||  getName().endsWith( "./ ")));	  return(getName().startsWith(   "/   ")||    getName().endsWith(   "/   ")));    	non-compiled	[CE]  	123	None	replace
300	[BUG]  [BUGGY]  return(getName().startsWith( "/ ")||  getName().endsWith( "./ ")));  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith( "/ ")||  getName().endsWith( "./ ")));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( "/ ")||  getName().endsWith( "./ ")));	  return(getName().startsWith(   "/   ")||    getName().endsWith(   "/   ")));    	non-compiled	[CE]  	123	None	replace
301	[BUG]  [BUGGY]  return(getName().startsWith( ".js ")||  getName().endsWith( ".js ")));  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith( ".js ")||  getName().endsWith( ".js ")));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( ".js ")||  getName().endsWith( ".js ")));	  return(getName().startsWith(   "/   ")||    getName().endsWith(   "/   ")));    	non-compiled	[CE]  	123	None	replace
302	[BUG]  [BUGGY]  return(getName().startsWith( ".zip ")||  getName().endsWith( ".zip ")));  [CE]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith( ".zip ")||  getName().endsWith( ".zip ")));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( ".zip ")||  getName().endsWith( ".zip ")));	  return(getName().startsWith(   "/   ")||    getName().endsWith(   "/   ")));    	non-compiled	[CE]  	123	None	replace
303	[BUG]  [BUGGY]  if(linkFlag  ==  NAME_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  NAME_TAR_ARCHIVE_ENTRIES  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  NAME_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  NAME_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    NAME_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  NAME_TAR_ARCHIVE_ENTRIES	97	None	replace
304	[BUG]  [BUGGY]  ||  linkFlag  ==  NAME_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag  ==  NAME_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  NAME_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    NAME_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
305	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  NAME_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [CE]  not  a  statement  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  NAME_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  NAME_TAR_ARCHIVE_ENTRIES))  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    NAME_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	97	None	replace
306	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  NAME_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  NAME_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  NAME_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    NAME_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	97	None	replace
307	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  NAME_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  NAME_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  NAME_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    NAME_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	97	None	replace
308	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  NAME_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  NAME_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  NAME_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    NAME_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	97	None	replace
309	[BUG]  [BUGGY]  ||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith(	  return    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
310	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST	90	None	replace
311	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST	90	None	replace
312	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	90	None	replace
313	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [CE]  not  a  statement  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	90	None	replace
314	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ",/     "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   ",/       "))    {    return    true;    }    if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	127	1	add
315	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ",/     "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ",/     "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   ",/       "))    {    return    true;    }    if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	127	1	add
316	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ",/     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   ",/       "))    {    return    true;    }    if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	127	1	add
317	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ",/     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ",/     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   ",/       "))    {    return    true;    }    if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	127	1	add
318	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ",/     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   ",/       "))    {    return    true;    }    if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	127	1	add
319	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ",/     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ",/     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   ",/       "))    {    return    true;    }    if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	127	1	add
320	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ",/     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   ",/       "))    {    return    true;    }    if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	127	1	add
321	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ",/     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ",/     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   ",/       "))    {    return    true;    }    if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	127	1	add
322	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ",/     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   ",/       "))    {    return    true;    }    if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	127	1	add
323	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ",/     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  [FE]  IOException  [FE]            IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ",/     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   ",/       "))    {    return    true;    }    if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	127	1	add
324	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LITERAL)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LITERAL)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LITERAL)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_LITERAL    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST	149	None	replace
325	[BUG]  [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  [CE]  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".java ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  	2	None	replace
326	[BUG]  [BUGGY]  return  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js "))  {  [CE]  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js "))  {	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  	2	None	replace
327	[BUG]  [BUGGY]  if(linkFlag  ==  ARRAY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  ARRAY_TAR_ARCHIVE_LIST  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  ARRAY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  ARRAY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    ARRAY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  ARRAY_TAR_ARCHIVE_LIST	95	None	replace
328	[BUG]  [BUGGY]  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  ARRAY_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    ARRAY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
329	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  ARRAY_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  ARRAY_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  ARRAY_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    ARRAY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	95	None	replace
330	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    ARRAY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST	95	None	replace
331	[BUG]  [BUGGY]  tate  =  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  return  false;  }  [CE]  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  tate  =  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	tate  =  getName().endsWith( "/ ")||  getName().endsWith( "/ "))  {  return  false;  }	  tate    =    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  	135	None	replace
332	[BUG]  [BUGGY]  tate  =  getName().endsWith( "./ ")||  getName().endsWith( "./ "))  {  return  true;  }  [CE]  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  tate  =  getName().endsWith( "./ ")||  getName().endsWith( "./ "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	tate  =  getName().endsWith( "./ ")||  getName().endsWith( "./ "))  {  return  true;  }	  tate    =    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  	135	None	replace
333	[BUG]  [BUGGY]  tate  =  getName().endsWith( "/ ")||  getName().endsWith( "./ "))  {  return  true;  }  [CE]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  tate  =  getName().endsWith( "/ ")||  getName().endsWith( "./ "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	tate  =  getName().endsWith( "/ ")||  getName().endsWith( "./ "))  {  return  true;  }	  tate    =    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  	135	None	replace
334	[BUG]  [BUGGY]  tate  =  getName().endsWith( "/ ")||  getName().startsWith( "/ "))  {  return  true;  }  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  tate  =  getName().endsWith( "/ ")||  getName().startsWith( "/ "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	tate  =  getName().endsWith( "/ ")||  getName().startsWith( "/ "))  {  return  true;  }	  tate    =    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  	135	None	replace
335	[BUG]  [BUGGY]  if(linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  ARRAY_TAR_ARCHIVE_ENTRIES  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    ARRAY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  ARRAY_TAR_ARCHIVE_ENTRIES	74	None	replace
336	[BUG]  [BUGGY]  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    ARRAY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
337	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  ARRAY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  ARRAY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  ARRAY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    ARRAY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	74	None	replace
338	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  READ_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  READ_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  READ_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    ARRAY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	74	None	replace
339	[BUG]  [BUGGY]  return(getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")))  {  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")))  {	  return(getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")))    {    	non-compiled	[CE]  	65	None	replace
340	[BUG]  [BUGGY]  return(getName().endsWith( "/   ")||  getName().endsWith( ".zip ")))  {  [CE]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/   ")||  getName().endsWith( ".zip ")))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/   ")||  getName().endsWith( ".zip ")))  {	  return(getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")))    {    	non-compiled	[CE]  	65	None	replace
341	[BUG]  [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java "))  {  [CE]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java "))  {	  return    getName().endsWith(   "./   ")||    getName().endsWith(   "./   ")||    getName().endsWith(   "./   ")||    getName().endsWith(   "./   "))    {    	non-compiled	[CE]  	121	None	replace
342	[BUG]  [BUGGY]  return(getName().endsWith( "/   ")||  getName().endsWith( ".js ")));  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/   ")||  getName().endsWith( ".js ")));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/   ")||  getName().endsWith( ".js ")));	  return(getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")));    	non-compiled	[CE]  	61	None	replace
343	[BUG]  [BUGGY]  return(getName().endsWith( ".java ")||  getName().endsWith( ".js ")));  [CE]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( ".java ")||  getName().endsWith( ".js ")));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".java ")||  getName().endsWith( ".js ")));	  return(getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")));    	non-compiled	[CE]  	61	None	replace
344	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_SECOND)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND	151	None	replace
345	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  false;  [CE]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  false;  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  false;	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       "))    {    return    false;    	non-compiled	[CE]  	41	None	replace
346	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  false;  }  [CE]  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  false;  }	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       "))    {    return    false;    	non-compiled	[CE]  	41	None	replace
347	[BUG]  [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  false;  }  [CE]  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  false;  }	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       "))    {    return    false;    	non-compiled	[CE]  	41	None	replace
348	[BUG]  [BUGGY]  return  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().ends  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().ends  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().ends	  return    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith    	non-compiled	[CE]  	103	None	replace
349	[BUG]  [BUGGY]  return  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().	  return    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith    	non-compiled	[CE]  <identifier>  expected	103	None	replace
350	[BUG]  [BUGGY]  return  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName()  [CE]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName()  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName()	  return    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith    	non-compiled	[CE]  	103	None	replace
351	[BUG]  [BUGGY]  return  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().end  [CE]  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().end  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().end	  return    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith    	non-compiled	[CE]  	103	None	replace
352	[BUG]  [BUGGY]  return  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||	  return    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
353	[BUG]  [BUGGY]  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
354	[BUG]  [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")  [CE]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")    	non-compiled	[CE]  	4	None	replace
355	[BUG]  [BUGGY]  return  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")    	non-compiled	[CE]  	4	None	replace
356	[BUG]  [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".java ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")    	non-compiled	[CE]  	4	None	replace
357	[BUG]  [BUGGY]  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  false;  }	  ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
358	[BUG]  [BUGGY]  ||  linkFlag  ==  DEFAULT_DIR_MODE)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag  ==  DEFAULT_DIR_MODE)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  DEFAULT_DIR_MODE)  {  return  true;  }	  ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
359	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  false;  }  [CE]  not  a  statement  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	71	None	replace
360	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	71	None	replace
361	[BUG]  [BUGGY]  if(linkFlag  ==  ARRAY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  ARRAY_TAR_ARCHIVE_BACKSLASH  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  ARRAY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  ARRAY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    ARRAY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  ARRAY_TAR_ARCHIVE_BACKSLASH	102	None	replace
362	[BUG]  [BUGGY]  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  ARRAY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    ARRAY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
363	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  ARRAY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  ARRAY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  ARRAY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    ARRAY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	102	None	replace
364	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    ARRAY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH	102	None	replace
365	[BUG]  [BUGGY]  return  getName().startsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {	  return    getName().startsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       "))    {    	non-compiled	[CE]  	50	None	replace
366	[BUG]  [BUGGY]  return(getName().startsWith( "./ ")||  getName().endsWith( "./ ")))  {  [CE]  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith( "./ ")||  getName().endsWith( "./ ")))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( "./ ")||  getName().endsWith( "./ ")))  {	  return(getName().startsWith(   "/   ")||    getName().endsWith(   "/   ")))    {    	non-compiled	[CE]  	68	None	replace
367	[BUG]  [BUGGY]  return(getName().startsWith( "/ ")||  getName().endsWith( "./ ")))  {  [CE]  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith( "/ ")||  getName().endsWith( "./ ")))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( "/ ")||  getName().endsWith( "./ ")))  {	  return(getName().startsWith(   "/   ")||    getName().endsWith(   "/   ")))    {    	non-compiled	[CE]  	68	None	replace
368	[BUG]  [BUGGY]  return(getName().startsWith( ".zip ")||  getName().endsWith( ".zip ")))  {  [CE]  [FE]                                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith( ".zip ")||  getName().endsWith( ".zip ")))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( ".zip ")||  getName().endsWith( ".zip ")))  {	  return(getName().startsWith(   "/   ")||    getName().endsWith(   "/   ")))    {    	non-compiled	[CE]  	68	None	replace
369	[BUG]  [BUGGY]  return(getName().startsWith( "/ ")||  getName().endsWith( "/ "))  &&  file.isDirectory())  {  [CE]  [FE]                                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith( "/ ")||  getName().endsWith( "/ "))  &&  file.isDirectory())  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( "/ ")||  getName().endsWith( "/ "))  &&  file.isDirectory())  {	  return(getName().startsWith(   "/   ")||    getName().endsWith(   "/   ")))    {    	non-compiled	[CE]  	68	None	replace
370	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* "))  {  [CE]  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/*   "))    {    	non-compiled	[CE]  	120	None	replace
371	[BUG]  [BUGGY]  return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* "))  {  [CE]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/*   "))    {    	non-compiled	[CE]  	120	None	replace
372	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/* "))  {  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/* "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/* "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/*   "))    {    	non-compiled	[CE]  	120	None	replace
373	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  false;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH	37	None	replace
374	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  false;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	37	None	replace
375	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  false;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	37	None	replace
376	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH))  {  return  false;  }  [CE]  not  a  statement  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH))  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH))  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	37	None	replace
377	[BUG]  [BUGGY]  ||  getName().endsWith( "/   "))  {  return  true;  [CE]  illegal  start  of  expression  [FE]        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  getName().endsWith( "/   "))  {  return  true;  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  getName().endsWith( "/   "))  {  return  true;	  [Delete]    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
378	[BUG]  [BUGGY]  ||  getName().endsWith( "/   "))  {  return  false;  [CE]  illegal  start  of  expression  [FE]          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  getName().endsWith( "/   "))  {  return  false;  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  getName().endsWith( "/   "))  {  return  false;	  [Delete]    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
379	[BUG]  [BUGGY]  getName().endsWith( "/   "))  {  return  true;  [CE]  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  getName().endsWith( "/   "))  {  return  true;  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	getName().endsWith( "/   "))  {  return  true;	  [Delete]    	non-compiled	[CE]  	132	None	replace
380	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND	164	None	replace
381	[BUG]  [BUGGY]  return(getName().startsWith( "./ ")||  getName().endsWith( "./ "))  {  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith( "./ ")||  getName().endsWith( "./ "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( "./ ")||  getName().endsWith( "./ "))  {	  return(getName().startsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	25	None	replace
382	[BUG]  [BUGGY]  return(getName().startsWith( "/ ")||  getName().endsWith( "./ "))  {  [CE]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith( "/ ")||  getName().endsWith( "./ "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( "/ ")||  getName().endsWith( "./ "))  {	  return(getName().startsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	25	None	replace
383	[BUG]  [BUGGY]  return(getName().startsWith( ".zip ")||  getName().endsWith( ".zip "))  {  [CE]  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith( ".zip ")||  getName().endsWith( ".zip "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( ".zip ")||  getName().endsWith( ".zip "))  {	  return(getName().startsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	25	None	replace
384	[BUG]  [BUGGY]  return(getName().startsWith( ".dir ")||  getName().endsWith( ".dir "))  {  [CE]  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith( ".dir ")||  getName().endsWith( ".dir "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( ".dir ")||  getName().endsWith( ".dir "))  {	  return(getName().startsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	25	None	replace
385	[BUG]  [BUGGY]  return(getName().startsWith( "/ ")||  getName().startsWith( "/ "))  {  [CE]  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith( "/ ")||  getName().startsWith( "/ "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( "/ ")||  getName().startsWith( "/ "))  {	  return(getName().endsWith(   "/   ")||    getName().startsWith(   "/   "))    {    	non-compiled	[CE]  	21	None	replace
386	[BUG]  [BUGGY]  return(getName().endsWith( "./ ")||  getName().startsWith( "./ "))  {  [CE]  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "./ ")||  getName().startsWith( "./ "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "./ ")||  getName().startsWith( "./ "))  {	  return(getName().endsWith(   "/   ")||    getName().startsWith(   "/   "))    {    	non-compiled	[CE]  	21	None	replace
387	[BUG]  [BUGGY]  return(getName().endsWith( ".zip ")||  getName().startsWith( ".zip "))  {  [CE]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( ".zip ")||  getName().startsWith( ".zip "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".zip ")||  getName().startsWith( ".zip "))  {	  return(getName().endsWith(   "/   ")||    getName().startsWith(   "/   "))    {    	non-compiled	[CE]  	21	None	replace
388	[BUG]  [BUGGY]  return(getName().endsWith( ".js ")||  getName().startsWith( ".js "))  {  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( ".js ")||  getName().startsWith( ".js "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".js ")||  getName().startsWith( ".js "))  {	  return(getName().endsWith(   "/   ")||    getName().startsWith(   "/   "))    {    	non-compiled	[CE]  	21	None	replace
389	[BUG]  [BUGGY]  return(getName().endsWith( "/ ")||  getName().startsWith( "./ "))  {  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/ ")||  getName().startsWith( "./ "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/ ")||  getName().startsWith( "./ "))  {	  return(getName().endsWith(   "/   ")||    getName().startsWith(   "/   "))    {    	non-compiled	[CE]  	21	None	replace
390	[BUG]  [BUGGY]  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  false;  }	  ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
391	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  true  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  true  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  true	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       "))    {    return    true;    }    	non-compiled	[CE]  	114	None	replace
392	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  false;  }  [CE]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  false;  }	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       "))    {    return    true;    }    	non-compiled	[CE]  	114	None	replace
393	[BUG]  [BUGGY]  if(linkFlag  >=  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  >=  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  >=  LF_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    >=    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	125	None	replace
394	[BUG]  [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  >=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }	  if(linkFlag    >=    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	125	None	replace
395	[BUG]  [BUGGY]  return(getName().endsWith( "/   ")||  getName().endsWith( ".js ")))  {  [CE]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/   ")||  getName().endsWith( ".js ")))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/   ")||  getName().endsWith( ".js ")))  {	  return(getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")))    {    	non-compiled	[CE]  	66	None	replace
396	[BUG]  [BUGGY]  return(getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")))  {  [CE]  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")))  {	  return(getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")))    {    	non-compiled	[CE]  	66	None	replace
397	[BUG]  [BUGGY]  return(getName().endsWith( ".java ")||  getName().endsWith( ".js ")))  {  [CE]  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( ".java ")||  getName().endsWith( ".js ")))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".java ")||  getName().endsWith( ".js ")))  {	  return(getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")))    {    	non-compiled	[CE]  	66	None	replace
398	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	10	None	replace
399	[BUG]  [BUGGY]  if(linkFlag  ==  DEFAULT_DIR_MODE  ||  linkFlag!=  DEFAULT_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  DEFAULT_TAR_ARCHIVE_ENTRIES  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  DEFAULT_DIR_MODE  ||  linkFlag!=  DEFAULT_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  DEFAULT_DIR_MODE  ||  linkFlag!=  DEFAULT_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_TAR_ARCHIVE_ENTRIES	10	None	replace
400	[BUG]  [BUGGY]  return  getName().startsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")	  return    getName().startsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    	non-compiled	[CE]  	113	None	replace
401	[BUG]  [BUGGY]  return(getName().endsWith( "/ ")||  getName().startsWith( "/)))  {  [CE]  unclosed  string  literal  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/ ")||  getName().startsWith( "/)))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/ ")||  getName().startsWith( "/)))  {	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/)))    {    	non-compiled	[CE]  unclosed  string  literal	115	None	replace
402	[BUG]  [BUGGY]  return(getName().startsWith( "/ ")||  getName().endsWith( "/)))  {  [CE]  unclosed  string  literal  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith( "/ ")||  getName().endsWith( "/)))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( "/ ")||  getName().endsWith( "/)))  {	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/)))    {    	non-compiled	[CE]  unclosed  string  literal	115	None	replace
403	[BUG]  [BUGGY]  return(getName().endsWith( "/)||  getName().endsWith( "/)))  {  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/)||  getName().endsWith( "/)))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/)||  getName().endsWith( "/)))  {	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/)))    {    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
404	[BUG]  [BUGGY]  if(linkFlag  ==  DEFAULT_DIR_MODE  ||  linkFlag  ==  DEFAULT_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  DEFAULT_TAR_ARCHIVE_ENTRIES  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  DEFAULT_DIR_MODE  ||  linkFlag  ==  DEFAULT_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  DEFAULT_DIR_MODE  ||  linkFlag  ==  DEFAULT_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_TAR_ARCHIVE_ENTRIES	6	None	replace
405	[BUG]  [BUGGY]  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/ ")||  getName().startsWith( "./ "));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	return(getName().endsWith( "/ ")||  getName().startsWith( "./ "));	  return(getName().endsWith(   "/   ")||    getName().startsWith(   "/   "));    	compilable	  [FE]  IOException  	56	1	replace
406	[BUG]  [BUGGY]  return(getName().endsWith( "/ ")||  getName().startsWith( "./ "));  [FE]  IOException  [FE]          IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/ ")||  getName().startsWith( "./ "));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/ ")||  getName().startsWith( "./ "));	  return(getName().endsWith(   "/   ")||    getName().startsWith(   "/   "));    	compilable	  [FE]  IOException  	56	1	replace
407	[BUG]  [BUGGY]  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	&&  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  false;  }	  &&    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
408	[BUG]  [BUGGY]  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag!=  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }	  &&    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
409	[BUG]  [BUGGY]  &&  linkFlag  ==  DEFAULT_DIR_MODE)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  &&  linkFlag  ==  DEFAULT_DIR_MODE)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	&&  linkFlag  ==  DEFAULT_DIR_MODE)  {  return  true;  }	  &&    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
410	[BUG]  [BUGGY]  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;	  &&    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
411	[BUG]  [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")  [CE]  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")	  return    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   "))    {    	non-compiled	[CE]  	161	None	replace
412	[BUG]  [BUGGY]  return(getName().endsWith( "/   ")||  getName().endsWith( ".java ")));  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/   ")||  getName().endsWith( ".java ")));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/   ")||  getName().endsWith( ".java ")));	  return(getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   ")));    	non-compiled	[CE]  	146	None	replace
413	[BUG]  [BUGGY]  return(getName().endsWith( ".java ")||  getName().startsWith( ".java ")));  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( ".java ")||  getName().startsWith( ".java ")));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".java ")||  getName().startsWith( ".java ")));	  return(getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   ")));    	non-compiled	[CE]  	146	None	replace
414	[BUG]  [BUGGY]  return(getName().endsWith( ".jar ")||  getName().endsWith( ".js ")))  {  [CE]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( ".jar ")||  getName().endsWith( ".js ")))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".jar ")||  getName().endsWith( ".js ")))  {	  return(getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")))    {    	non-compiled	[CE]  	66	None	replace
415	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_TAR_DIR)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_TAR_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_TAR_DIR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR	155	None	replace
416	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_TAR_DIR)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ENTRIES  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_TAR_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_TAR_DIR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ENTRIES	155	None	replace
417	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_DIR)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ENTRIES  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_DIR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ENTRIES	155	None	replace
418	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* ")||  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* ")||  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* ")||	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
419	[BUG]  [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")  [CE]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".java ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")    	non-compiled	[CE]  	4	None	replace
420	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")    	non-compiled	[CE]  	4	None	replace
421	[BUG]  [BUGGY]  return  getName().endsWith( ".jar ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".jar ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".jar ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")    	non-compiled	[CE]  	4	None	replace
422	[BUG]  [BUGGY]  return(getName().endsWith( ".jar ")||  getName().endsWith( ".js ")));  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( ".jar ")||  getName().endsWith( ".js ")));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".jar ")||  getName().endsWith( ".js ")));	  return(getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")));    	non-compiled	[CE]  	61	None	replace
423	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  MILLIS_PER_SECOND))  {  return  true;  }  [CE]  not  a  statement  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  MILLIS_PER_SECOND))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  MILLIS_PER_SECOND))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
424	[BUG]  [BUGGY]  (linkFlag  ==  LF_DIR)||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }  [CE]  not  a  statement  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  LF_DIR)||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  LF_DIR)||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
425	[BUG]  [BUGGY]  BeidenArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES,  getName().endsWith( "/   "))  {  return  true;  }  [CE]  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  BeidenArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES,  getName().endsWith( "/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	BeidenArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES,  getName().endsWith( "/   "))  {  return  true;  }	  if(getName().endsWith(       "/       "))    {    return    true;    }    if(getName().endsWith(   "/       "))    {    return    true;    }    	non-compiled	[CE]  	27	None	replace
426	[BUG]  [BUGGY]  BeidenArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES,  getName().toArray(new  String[getName().size()  ]));  [CE]  ';'  expected  [FE]      IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  BeidenArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES,  getName().toArray(new  String[getName().size()  ]));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	BeidenArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES,  getName().toArray(new  String[getName().size()  ]));	  if(getName().endsWith(       "/       "))    {    return    true;    }    if(getName().endsWith(   "/       "))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
427	[BUG]  [BUGGY]  BeidenArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES,  getName().split( "/ "))  {  return  true;  }  [CE]  [FE]        IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  BeidenArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES,  getName().split( "/ "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	BeidenArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES,  getName().split( "/ "))  {  return  true;  }	  if(getName().endsWith(       "/       "))    {    return    true;    }    if(getName().endsWith(   "/       "))    {    return    true;    }    	non-compiled	[CE]  	27	None	replace
428	[BUG]  [BUGGY]  BeidenArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  =  new  LinkedHashSet  <  String>();  [CE]  cannot  find  symbol  [FE]          IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  BeidenArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  =  new  LinkedHashSet  <  String>();  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	BeidenArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  =  new  LinkedHashSet  <  String>();	  if(getName().endsWith(       "/       "))    {    return    true;    }    if(getName().endsWith(   "/       "))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
429	[BUG]  [BUGGY]  BeidenArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  =  new  LinkedList  <  String>();  [CE]  cannot  find  symbol  [FE]            IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  BeidenArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  =  new  LinkedList  <  String>();  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	BeidenArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  =  new  LinkedList  <  String>();	  if(getName().endsWith(       "/       "))    {    return    true;    }    if(getName().endsWith(   "/       "))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
430	[BUG]  [BUGGY]  BeidenArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES,  getName());  [CE]  ';'  expected  [FE]        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  BeidenArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES,  getName());  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	BeidenArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES,  getName());	  if(getName().endsWith(       "/       "))    {    return    true;    }    if(getName().endsWith(.   "/       "))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	126	None	replace
431	[BUG]  [BUGGY]  return(getName().endsWith( ".jar ")||  getName().endsWith( ".js "))  {  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( ".jar ")||  getName().endsWith( ".js "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".jar ")||  getName().endsWith( ".js "))  {	  return(getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  	24	None	replace
432	[BUG]  [BUGGY]  wireFlag  |=  getName().endsWith( "/   "))  {  return  true;  }  [CE]  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  wireFlag  |=  getName().endsWith( "/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	wireFlag  |=  getName().endsWith( "/   "))  {  return  true;  }	  if(getName().endsWith(       "/       "))    {    return    true;    }    if(getName().endsWith('/       "))    {    return    true;    }    	non-compiled	[CE]  	33	None	replace
433	[BUG]  [BUGGY]  BeidenArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  =  getNames();  [CE]  cannot  find  symbol  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  BeidenArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  =  getNames();  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	BeidenArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  =  getNames();	  if(getName().endsWith(       "/       "))    {    return    true;    }    if(getName().endsWith('/       "))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
434	[BUG]  [BUGGY]  Governance  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [CE]  ';'  expected  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Governance  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Governance  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului	  Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    GuvernuluiTarArchiveEntry[]    EMPTY_TAR_    	non-compiled	[CE]  ';'  expected	87	None	replace
435	[BUG]  [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [CE]  ';'  expected  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului	  Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    GuvernuluiTarArchiveEntry[]    EMPTY_TAR_    	non-compiled	[CE]  ';'  expected	87	None	replace
436	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* ")  [CE]  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* ")  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/* ")	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")    	non-compiled	[CE]  	42	None	replace
437	[BUG]  [BUGGY]  return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")  [CE]  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")    	non-compiled	[CE]  	42	None	replace
438	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")  [CE]  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")    	non-compiled	[CE]  	42	None	replace
439	[BUG]  [BUGGY]  return  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")  [CE]  [FE]                                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")    	non-compiled	[CE]  	42	None	replace
440	[BUG]  [BUGGY]  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [CE]  ';'  expected  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului	  Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    GuvernuluiArchiveEntry    <    return    true;    	non-compiled	[CE]  ';'  expected	86	None	replace
441	[BUG]  [BUGGY]  return  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||	  return    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
442	[BUG]  [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith	  return    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith    	non-compiled	[CE]  	136	None	replace
443	[BUG]  [BUGGY]  return  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName  [CE]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName	  return    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith    	non-compiled	[CE]  	136	None	replace
444	[BUG]  [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith  [CE]  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith	  return    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith    	non-compiled	[CE]  	136	None	replace
445	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||	  return    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
446	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_DIR_MODE  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR_MODE  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_DIR_MODE  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_DIR_MODE  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_ERROR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR_MODE	105	None	replace
447	[BUG]  [BUGGY]  &&  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  &&  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	&&  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  &&    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
448	[BUG]  [BUGGY]  &&  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  &&  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	&&  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  &&    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
449	[BUG]  [BUGGY]  return(getName().endsWith(   "/   ")||  getName().startsWith(   "/   "));  return(getName().startsWith(   "/   ")||  getName().startsWith( "/   "));  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith(   "/   ")||  getName().startsWith(   "/   "));  return(getName().startsWith(   "/   ")||  getName().startsWith( "/   "));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith(   "/   ")||    getName().startsWith(   "/   "));    return(getName().startsWith(   "/   ")||  getName().startsWith( "/   "));	  	non-compiled	[CE]  unreachable  statement	55	None	add
450	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getName().startsWith( "/ "))  {  return  true;  }  [CE]  not  a  statement  [FE]        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  parent  ==  null  &&  parent.getName().startsWith( "/ "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	parent  ==  null  &&  parent.getName().startsWith( "/ "))  {  return  true;  }	  parent    ==    null    &&    parent.getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	108	None	replace
451	[BUG]  [BUGGY]  Goog  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [CE]  ';'  expected  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Goog  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Goog  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului	  Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    GuvernuluiArchiveEntry    {    return    true;    	non-compiled	[CE]  ';'  expected	85	None	replace
452	[BUG]  [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [CE]  ';'  expected  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului	  Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    GuvernuluiArchiveEntry    {    return    true;    	non-compiled	[CE]  ';'  expected	85	None	replace
453	[BUG]  [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [CE]  ';'  expected  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului	  Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    GuvernuluiArchiveEntry    {    return    true;    	non-compiled	[CE]  ';'  expected	85	None	replace
454	[BUG]  [BUGGY]  parent!=  null  &&  file.getName().endsWith( "/   "))  {  return  true;  }  [CE]  not  a  statement  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  parent!=  null  &&  file.getName().endsWith( "/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	parent!=  null  &&  file.getName().endsWith( "/   "))  {  return  true;  }	  parent!=    null    &&    parent.getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	110	None	replace
455	[BUG]  [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  >=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	72	None	replace
456	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH))  {  return  true;  }  [CE]  not  a  statement  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	101	None	replace
457	[BUG]  [BUGGY]  (linkFlag  ==  0  ||  linkFlag  ==  0))  {  return  true;  }  [CE]  not  a  statement  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  0  ||  linkFlag  ==  0))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  0  ||  linkFlag  ==  0))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	101	None	replace
458	[BUG]  [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".java ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
459	[BUG]  [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")|  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")|  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")|	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
460	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_ERROR  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_ERROR	19	None	replace
461	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND	92	None	replace
462	[BUG]  [BUGGY]  [FE]  IOException  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  MILLIS_PER_SECOND  ||  linkFlag  ==  MAX_NAMELEN)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(linkFlag!=  MILLIS_PER_SECOND  ||  linkFlag  ==  MAX_NAMELEN)  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	compilable	  [FE]  IOException  	92	1	replace
463	[BUG]  [BUGGY]  if(linkFlag!=  MILLIS_PER_SECOND  ||  linkFlag  ==  MAX_NAMELEN)  {  return  true;  }  [FE]  IOException  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  MILLIS_PER_SECOND  ||  linkFlag  ==  MAX_NAMELEN)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  MILLIS_PER_SECOND  ||  linkFlag  ==  MAX_NAMELEN)  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	compilable	  [FE]  IOException  	92	1	replace
464	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR_MODE  ||  linkFlag  ==  EMPTY_TAR_TAR_SECOND)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR_MODE  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR_MODE  ||  linkFlag  ==  EMPTY_TAR_TAR_SECOND)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_DIR_MODE  ||  linkFlag  ==  EMPTY_TAR_TAR_SECOND)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_SECOND)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR_MODE	151	None	replace
465	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/  [CE]  unclosed  string  literal  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/    	non-compiled	[CE]  unclosed  string  literal	1	None	replace
466	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/*  [CE]  unclosed  string  literal  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/*  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/*	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/    	non-compiled	[CE]  unclosed  string  literal	1	None	replace
467	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/  [CE]  unclosed  string  literal  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/    	non-compiled	[CE]  unclosed  string  literal	1	None	replace
468	[BUG]  [BUGGY]  return  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/   ")||  getName().endsWith  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/   ")||  getName().endsWith  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/   ")||  getName().endsWith	  return    getName().startsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    	non-compiled	[CE]  	113	None	replace
469	[BUG]  [BUGGY]  return  getName().startsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith	  return    getName().startsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    	non-compiled	[CE]  	113	None	replace
470	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "./     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   "./       "))    {    return    true;    }    if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	28	1	add
471	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "./     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "./     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   "./       "))    {    return    true;    }    if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	28	1	add
472	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "./     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   "./       "))    {    return    true;    }    if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	28	1	add
473	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "./     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "./     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   "./       "))    {    return    true;    }    if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	28	1	add
474	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "./     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   "./       "))    {    return    true;    }    if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	28	1	add
475	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "./     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  [FE]  IOException  [FE]        IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "./     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   "./       "))    {    return    true;    }    if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	28	1	add
476	[BUG]  [BUGGY]  &&  linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  &&  linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	&&  linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }	  &&    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
477	[BUG]  [BUGGY]  &&  linkFlag  ==  DEFAULT_TAR_ARCHIVE_ERROR)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  &&  linkFlag  ==  DEFAULT_TAR_ARCHIVE_ERROR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	&&  linkFlag  ==  DEFAULT_TAR_ARCHIVE_ERROR)  {  return  true;  }	  &&    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
478	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR	93	None	replace
479	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_SIZE  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SIZE  [FE]                                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_SIZE  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_SIZE  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SIZE	93	None	replace
480	[BUG]  [BUGGY]  return(getName().endsWith( "./ ")||  getName().endsWith( "./)))  {  [CE]  unclosed  string  literal  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "./ ")||  getName().endsWith( "./)))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "./ ")||  getName().endsWith( "./)))  {	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/)))    {    	non-compiled	[CE]  unclosed  string  literal	115	None	replace
481	[BUG]  [BUGGY]  return(getName().endsWith( "/) ")||  getName().endsWith( "/)))  {  [CE]  unclosed  string  literal  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/) ")||  getName().endsWith( "/)))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/) ")||  getName().endsWith( "/)))  {	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "/)))    {    	non-compiled	[CE]  unclosed  string  literal	115	None	replace
482	[BUG]  [BUGGY]  return  getName().endsWith( ".jar ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  [CE]  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".jar ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".jar ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  	48	None	replace
483	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( ".js ")||  getName().endsWith( "/   "))  {  [CE]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( ".js ")||  getName().endsWith( "/   "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( ".js ")||  getName().endsWith( "/   "))  {	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  	48	None	replace
484	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag!=  EMPTY_TAR_DIR)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag!=  EMPTY_TAR_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag!=  EMPTY_TAR_DIR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR	10	None	replace
485	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR	10	None	replace
486	[BUG]  [BUGGY]  [FE]  IOException  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  MAX_NAMELEN  ||  linkFlag!=  MAX_NAMELEN)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(linkFlag  ==  MAX_NAMELEN  ||  linkFlag!=  MAX_NAMELEN)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	compilable	  [FE]  IOException  	10	1	replace
487	[BUG]  [BUGGY]  if(linkFlag  ==  MAX_NAMELEN  ||  linkFlag!=  MAX_NAMELEN)  {  return  true;  }  [FE]  IOException  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  MAX_NAMELEN  ||  linkFlag!=  MAX_NAMELEN)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  MAX_NAMELEN  ||  linkFlag!=  MAX_NAMELEN)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	compilable	  [FE]  IOException  	10	1	replace
488	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR_MODE  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR_MODE  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR_MODE  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_DIR_MODE  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR_MODE	88	None	replace
489	[BUG]  [BUGGY]  ||  linkFlag  ==  LF_EXTENDS)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag  ==  LF_EXTENDS)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  LF_EXTENDS)  {  return  true;  }	  ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
490	[BUG]  [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   "))  {  [CE]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   "))  {	  return    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   "))    {    	non-compiled	[CE]  	159	None	replace
491	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   "))  {  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   "))  {	  return    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   "))    {    	non-compiled	[CE]  	159	None	replace
492	[BUG]  [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith(	  return    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
493	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_DIR)  {  return  false;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_DIR)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_DIR)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR	157	None	replace
494	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ENTRIES)  {  return  false;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ENTRIES)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ENTRIES)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR	157	None	replace
495	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR_MODE  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR_MODE  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR_MODE  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_DIR_MODE  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR_MODE	77	None	replace
496	[BUG]  [BUGGY]  return(getName().startsWith( "./ ")||  getName().startsWith( "./ "))  {  [CE]  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith( "./ ")||  getName().startsWith( "./ "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( "./ ")||  getName().startsWith( "./ "))  {	  return(getName().endsWith(   "/   ")||    getName().startsWith(   "/   "))    {    	non-compiled	[CE]  	21	None	replace
497	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  DEFAULT_FILE_MODE))  {  return  true;  }  [CE]  not  a  statement  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  DEFAULT_FILE_MODE))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  DEFAULT_FILE_MODE))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	70	None	replace
498	[BUG]  [BUGGY]  (linkFlag  ==  LF_DIR  ||  linkFlag  ==  LF_DIR))  {  return  true;  }  [CE]  not  a  statement  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  LF_DIR  ||  linkFlag  ==  LF_DIR))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  LF_DIR  ||  linkFlag  ==  LF_DIR))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	70	None	replace
499	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  NUMBER_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  NUMBER_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  NUMBER_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	71	None	replace
500	[BUG]  [BUGGY]  return(getName().endsWith( ".js ")||  getName().endsWith( "./ "))  {  [CE]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( ".js ")||  getName().endsWith( "./ "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".js ")||  getName().endsWith( "./ "))  {	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "./   "))    {    	non-compiled	[CE]  	140	None	replace
501	[BUG]  [BUGGY]  return(getName().endsWith( "/   ")||  getName().endsWith( "/.* "))  {  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/   ")||  getName().endsWith( "/.* "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/   ")||  getName().endsWith( "/.* "))  {	  return(getName().endsWith(   "/   ")||    getName().endsWith(   "./   "))    {    	non-compiled	[CE]  	140	None	replace
502	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH	39	None	replace
503	[BUG]  [BUGGY]  ||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith(	  ||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
504	[BUG]  [BUGGY]  return  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip  [CE]  unclosed  string  literal  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip	  return    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(    	non-compiled	[CE]  unclosed  string  literal	152	None	replace
505	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_BACKSLASH  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_BACKSLASH	100	None	replace
506	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR_MODE  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR_MODE  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR_MODE  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_DIR_MODE  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR_MODE	100	None	replace
507	[BUG]  [BUGGY]  return  getName().startsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith(	  return    getName().startsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
508	[BUG]  [BUGGY]  return  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/)||  getName().endsWith(  [CE]  unclosed  string  literal  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/)||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/)||  getName().endsWith(	  return    getName().startsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  unclosed  string  literal	52	None	replace
509	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR_MODE  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR_MODE  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR_MODE  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_DIR_MODE  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR_MODE	130	None	replace
510	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS	79	None	replace
511	[BUG]  [BUGGY]  [FE]  IOException  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "./ "));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	return(getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "./ "));	  return(getName().endsWith(       "/       ")||    getName().endsWith(       "/       "));    return(getName().endsWith(       "/       ")||    getName().endsWith(   "./       "));    	compilable	  [FE]  IOException  	14	1	replace
512	[BUG]  [BUGGY]  return(getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "./ "));  [FE]  IOException  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "./ "));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "./ "));	  return(getName().endsWith(       "/       ")||    getName().endsWith(       "/       "));    return(getName().endsWith(       "/       ")||    getName().endsWith(   "./       "));    	compilable	  [FE]  IOException  	14	1	replace
513	[BUG]  [BUGGY]  return(getName().endsWith( "./ ")||  getName().endsWith( "./ "))  ||  getName().endsWith( "./ "));  [CE]  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "./ ")||  getName().endsWith( "./ "))  ||  getName().endsWith( "./ "));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "./ ")||  getName().endsWith( "./ "))  ||  getName().endsWith( "./ "));	  return(getName().endsWith(       "/       ")||    getName().endsWith(       "/       "));    return(getName().endsWith(       "/       ")||    getName().endsWith(   "./       "));    	non-compiled	[CE]  	14	None	replace
514	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( ".jpg   ")||  getName().endsWith( ".jpg   ")||  getName().endsWith( ".jpg   "))  {  [CE]  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( ".jpg   ")||  getName().endsWith( ".jpg   ")||  getName().endsWith( ".jpg   "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( ".jpg   ")||  getName().endsWith( ".jpg   ")||  getName().endsWith( ".jpg   "))  {	  return    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   "))    {    	non-compiled	[CE]  	158	None	replace
515	[BUG]  [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  [CE]  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  	2	None	replace
516	[BUG]  [BUGGY]  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  NAME_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  NAME_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	&&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  NAME_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    NAME_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
517	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  MILLIS_PER_SECOND)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  MILLIS_PER_SECOND)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  MILLIS_PER_SECOND)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    NAME_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	97	None	replace
518	[BUG]  [BUGGY]  file.getName().endsWith( "/ ")||  file.getName().endsWith( "/ "))  {  return  true;  [CE]  not  a  statement  [FE]        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  file.getName().endsWith( "/ ")||  file.getName().endsWith( "/ "))  {  return  true;  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	file.getName().endsWith( "/ ")||  file.getName().endsWith( "/ "))  {  return  true;	  [Delete]    	non-compiled	[CE]  not  a  statement	132	None	replace
519	[BUG]  [BUGGY]  file.getName().endsWith( "/   "))  {  return  true;  [CE]  [FE]          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  file.getName().endsWith( "/   "))  {  return  true;  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	file.getName().endsWith( "/   "))  {  return  true;	  [Delete]    	non-compiled	[CE]  	132	None	replace
520	[BUG]  [BUGGY]  file.getName().endsWith( "/ ")||  file.getName().endsWith( "./ "))  {  return  true;  [CE]  not  a  statement  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  file.getName().endsWith( "/ ")||  file.getName().endsWith( "./ "))  {  return  true;  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	file.getName().endsWith( "/ ")||  file.getName().endsWith( "./ "))  {  return  true;	  [Delete]    	non-compiled	[CE]  not  a  statement	132	None	replace
521	[BUG]  [BUGGY]  file.getName().endsWith( "/   ")||  file.getName().endsWith( ".js "))  {  return  true;  [CE]  not  a  statement  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  file.getName().endsWith( "/   ")||  file.getName().endsWith( ".js "))  {  return  true;  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	file.getName().endsWith( "/   ")||  file.getName().endsWith( ".js "))  {  return  true;	  [Delete]    	non-compiled	[CE]  not  a  statement	132	None	replace
522	[BUG]  [BUGGY]  file.getName().endsWith( "/ ")||  file.getName().endsWith( "/ "))  {  return  false;  [CE]  not  a  statement  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  file.getName().endsWith( "/ ")||  file.getName().endsWith( "/ "))  {  return  false;  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	file.getName().endsWith( "/ ")||  file.getName().endsWith( "/ "))  {  return  false;	  [Delete]    	non-compiled	[CE]  not  a  statement	132	None	replace
523	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reset();  [CE]  cannot  find  symbol  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Thread.currentThread().getContextClassLoader().reset();  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Thread.currentThread().getContextClassLoader().reset();	  if(getName().endsWith(       "/       "))    {    return    true;    }    if(getName().endsWith(   ")/       "))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
524	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().setCurrentDirectory(null);  [CE]  cannot  find  symbol  [FE]      IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Thread.currentThread().getContextClassLoader().setCurrentDirectory(null);  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Thread.currentThread().getContextClassLoader().setCurrentDirectory(null);	  if(getName().endsWith(       "/       "))    {    return    true;    }    if(getName().endsWith(   ")/       "))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
525	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linksFlag  ==  EMPTY_TAR_DIR)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linksFlag  ==  EMPTY_TAR_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_DIR  ||  linksFlag  ==  EMPTY_TAR_DIR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linksFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR	156	None	replace
526	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linksFlag  ==  EMPTY_TAR_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linksFlag  ==  EMPTY_TAR_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_DIR  ||  linksFlag  ==  EMPTY_TAR_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linksFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR	156	None	replace
527	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_DIR)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_DIR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linksFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR	156	None	replace
528	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_DIR  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linksFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR	156	None	replace
529	[BUG]  [BUGGY]  return(getName().startsWith( ".java ")||  getName().endsWith( ".java ")));  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith( ".java ")||  getName().endsWith( ".java ")));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( ".java ")||  getName().endsWith( ".java ")));	  return(getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   ")));    	non-compiled	[CE]  	146	None	replace
530	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_DIR)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_DIR)  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR	7	None	replace
531	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR	7	None	replace
532	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ENTRIES)  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR	7	None	replace
533	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ENTRIES  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ENTRIES	7	None	replace
534	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  true;  [CE]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  true;  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  true;	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       "))    {    return    false;    	non-compiled	[CE]  	41	None	replace
535	[BUG]  [BUGGY]  return  getName().endsWith( "./ ")||  getName().startsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "./ ")||  getName().startsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "./ ")||  getName().startsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith(	  return    getName().endsWith(   "/       ")||    getName().startsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
536	[BUG]  [BUGGY]  return  getName().endsWith( ".jpg ")||  getName().startsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".jpg ")||  getName().startsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".jpg ")||  getName().startsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith(	  return    getName().endsWith(   "/       ")||    getName().startsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
537	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH	37	None	replace
538	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  false;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST	37	None	replace
539	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR_MODE  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR_MODE  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR_MODE  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_DIR_MODE  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR    ||    linksFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR_MODE	143	None	replace
540	[BUG]  [BUGGY]  &&  linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  &&  linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	&&  linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }	  &&    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
541	[BUG]  [BUGGY]  &&  linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  &&  linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	&&  linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  false;  }	  &&    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
542	[BUG]  [BUGGY]  return(getName().endsWith( "/.zip ")||  getName().endsWith( ".zip "))  {  [CE]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/.zip ")||  getName().endsWith( ".zip "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/.zip ")||  getName().endsWith( ".zip "))  {	  return(getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   "))    {    	non-compiled	[CE]  	23	None	replace
543	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_SECOND)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND	154	None	replace
544	[BUG]  [BUGGY]  return(getName().endsWith( "/ ")||  getName().endsWith( "/ "))  ||  getName().endsWith( "/ "));  [CE]  [FE]          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/ ")||  getName().endsWith( "/ "))  ||  getName().endsWith( "/ "));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/ ")||  getName().endsWith( "/ "))  ||  getName().endsWith( "/ "));	  return(getName().endsWith(       "/       ")||    getName().endsWith(       "/       "));    return(getName().endsWith(       "/       ")||    getName().endsWith(   "/       "));    	non-compiled	[CE]  	12	None	replace
545	[BUG]  [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".java ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
546	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
547	[BUG]  [BUGGY]  return  getName().endsWith( ".jar ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".jar ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".jar ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
548	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( ".js ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( ".js ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( ".js ")||  getName().endsWith(	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
549	[BUG]  [BUGGY]  return(getName().endsWith( ".java ")||  getName().startsWith( ".java "))  {  [CE]  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( ".java ")||  getName().startsWith( ".java "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".java ")||  getName().startsWith( ".java "))  {	  return(getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   "))    {    	non-compiled	[CE]  	139	None	replace
550	[BUG]  [BUGGY]  ||  linkFlag  ==  DEFAULT_TAR_ARCHIVE_ERROR)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag  ==  DEFAULT_TAR_ARCHIVE_ERROR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  DEFAULT_TAR_ARCHIVE_ERROR)  {  return  true;  }	  ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
551	[BUG]  [BUGGY]  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR)  {  return  false;  }	  ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
552	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  READ_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  READ_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  READ_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    ARRAY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	95	None	replace
553	[BUG]  [BUGGY]  If(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  ';'  expected  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  If(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	If(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  If(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
554	[BUG]  [BUGGY]  |  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  |  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	|  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith(	  |    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
555	[BUG]  [BUGGY]  |  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().startsWith(  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  |  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().startsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	|  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().startsWith(	  |    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
556	[BUG]  [BUGGY]  return  getName().endsWith( "/ ")||  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/) "))  {  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/ ")||  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/) "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/ ")||  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/) "))  {	  return    getName().endsWith(   "/   ")||    getName().startsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	160	None	replace
557	[BUG]  [BUGGY]  return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {  [CE]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {	  return    getName().endsWith(   "./   ")||    getName().endsWith(   "./   ")||    getName().endsWith(   "./   ")||    getName().endsWith(   "./   "))    {    	non-compiled	[CE]  	121	None	replace
558	[BUG]  [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( "./   ")||  getName().endsWith( "./   ")||  getName().endsWith( "./   "))  {  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( "./   ")||  getName().endsWith( "./   ")||  getName().endsWith( "./   "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".js ")||  getName().endsWith( "./   ")||  getName().endsWith( "./   ")||  getName().endsWith( "./   "))  {	  return    getName().endsWith(   "./   ")||    getName().endsWith(   "./   ")||    getName().endsWith(   "./   ")||    getName().endsWith(   "./   "))    {    	non-compiled	[CE]  	121	None	replace
559	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [CE]  not  a  statement  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	89	None	replace
560	[BUG]  [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().startsWith( "/ ")||  getName().endsWith( "/* "))  {  [CE]  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().startsWith( "/ ")||  getName().endsWith( "/* "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().startsWith( "/ ")||  getName().endsWith( "/* "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/*   "))    {    	non-compiled	[CE]  	120	None	replace
561	[BUG]  [BUGGY]  return  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( ".* "))  {  [CE]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( ".* "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( ".* "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/*   "))    {    	non-compiled	[CE]  	120	None	replace
562	[BUG]  [BUGGY]  return  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./* "))  {  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./* "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./* "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/*   "))    {    	non-compiled	[CE]  	120	None	replace
563	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_SECOND)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_SECOND)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_SECOND)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_SECOND)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	162	None	replace
564	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ")/     "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ")/     "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   ")/       "))    {    return    true;    }    if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
565	[BUG]  [BUGGY]  return  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith( "/.jpg   ")||  getName().endsWith	  return    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith    	non-compiled	[CE]  	103	None	replace
566	[BUG]  [BUGGY]  return  getName().endsWith( ".jpg   ")||  getName().endsWith( ".jpg   ")||  getName().endsWith( ".jpg   ")||  getName().endsWith( ".jpg   ")||  getName().endsWith( ".jpg   ")||  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".jpg   ")||  getName().endsWith( ".jpg   ")||  getName().endsWith( ".jpg   ")||  getName().endsWith( ".jpg   ")||  getName().endsWith( ".jpg   ")||  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".jpg   ")||  getName().endsWith( ".jpg   ")||  getName().endsWith( ".jpg   ")||  getName().endsWith( ".jpg   ")||  getName().endsWith( ".jpg   ")||	  return    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
567	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "/     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   "/       "))    {    return    true;    }    if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	26	1	add
568	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "/     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "/     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   "/       "))    {    return    true;    }    if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	26	1	add
569	[BUG]  [BUGGY]  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  &&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	&&  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    ARRAY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
570	[BUG]  [BUGGY]  tate  =  getName().endsWith( "/ ")||  getName().startsWith( "/ ")||  getName().endsWith( "/ "))  {  return  true;  }  [CE]  [FE]          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  tate  =  getName().endsWith( "/ ")||  getName().startsWith( "/ ")||  getName().endsWith( "/ "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	tate  =  getName().endsWith( "/ ")||  getName().startsWith( "/ ")||  getName().endsWith( "/ "))  {  return  true;  }	  tate    =    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  	133	None	replace
571	[BUG]  [BUGGY]  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  false;  }	  ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
572	[BUG]  [BUGGY]  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LAST)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LAST)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LAST)  {  return  true;  }	  ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
573	[BUG]  [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().ends  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().ends  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().ends	  return    getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   ")||    getName().endsWith    	non-compiled	[CE]  	137	None	replace
574	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR	6	None	replace
575	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ENTRIES  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ENTRIES	6	None	replace
576	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getName().endsWith( "/. "))  {  return  true;  }  [CE]  not  a  statement  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  parent  ==  null  &&  parent.getName().endsWith( "/. "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	parent  ==  null  &&  parent.getName().endsWith( "/. "))  {  return  true;  }	  parent    ==    null    &&    parent.getName().endsWith(   "./   "))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	111	None	replace
577	[BUG]  [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/* ")||  getName().endsWith( "/* "))  {  [CE]  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/* ")||  getName().endsWith( "/* "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/* ")||  getName().endsWith( "/* "))  {	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/*   "))    {    	non-compiled	[CE]  	119	None	replace
578	[BUG]  [BUGGY]  return  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./* "))  {  [CE]  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./* "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./* "))  {	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/*   "))    {    	non-compiled	[CE]  	119	None	replace
579	[BUG]  [BUGGY]  return(getName().endsWith( ".java ")||  getName().startsWith( ".java ")))  {  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( ".java ")||  getName().startsWith( ".java ")))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".java ")||  getName().startsWith( ".java ")))  {	  return(getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   ")))    {    	non-compiled	[CE]  	148	None	replace
580	[BUG]  [BUGGY]  return(getName().startsWith( ".java ")||  getName().endsWith( ".java ")))  {  [CE]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith( ".java ")||  getName().endsWith( ".java ")))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( ".java ")||  getName().endsWith( ".java ")))  {	  return(getName().endsWith(   ".java   ")||    getName().endsWith(   ".java   ")))    {    	non-compiled	[CE]  	148	None	replace
581	[BUG]  [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   "))    {    return    true;    	non-compiled	[CE]  	141	None	replace
582	[BUG]  [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true;  [CE]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true;  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".java ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true;	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   "))    {    return    true;    	non-compiled	[CE]  	141	None	replace
583	[BUG]  [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true;  }  [CE]  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true;  }	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   "))    {    return    true;    	non-compiled	[CE]  	141	None	replace
584	[BUG]  [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [CE]  ';'  expected  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului	  Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    GuvernuluiTarArchiveEntry[]    EMPTY_DIR    	non-compiled	[CE]  ';'  expected	84	None	replace
585	[BUG]  [BUGGY]  return(getName().endsWith( "/.zip ")||  getName().endsWith( ".zip ")))  {  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/.zip ")||  getName().endsWith( ".zip ")))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/.zip ")||  getName().endsWith( ".zip ")))  {	  return(getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")))    {    	non-compiled	[CE]  	65	None	replace
586	[BUG]  [BUGGY]  if(linkFlag  ==  DEFAULT_DIR  ||  linkFlag  ==  DEFAULT_FILE_MODE)  {  return  true;  }  [CE]  cannot  find  symbol  DEFAULT_DIR  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  DEFAULT_DIR  ||  linkFlag  ==  DEFAULT_FILE_MODE)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  DEFAULT_DIR  ||  linkFlag  ==  DEFAULT_FILE_MODE)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_DIR	94	None	replace
587	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ENTRIES  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ENTRIES	94	None	replace
588	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	94	None	replace
589	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	34	None	replace
590	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND	34	None	replace
591	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [CE]  not  a  statement  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
592	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  DEFAULT_FILE_MODE))  {  return  true;  }  [CE]  not  a  statement  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  DEFAULT_FILE_MODE))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  DEFAULT_FILE_MODE))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
593	[BUG]  [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_ERROR  [FE]                                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  >=  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_ERROR	20	None	replace
594	[BUG]  [BUGGY]  (linkFlag  >>  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [CE]  not  a  statement  [FE]                                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  >>  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  >>  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	20	None	replace
595	[BUG]  [BUGGY]  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag!=  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }	  ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
596	[BUG]  [BUGGY]  return(getName().startsWith( "./ ")||  getName().startsWith( "./ ")))  {  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith( "./ ")||  getName().startsWith( "./ ")))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( "./ ")||  getName().startsWith( "./ ")))  {	  return(getName().endsWith(   "/   ")||    getName().startsWith(   "/   ")))    {    	non-compiled	[CE]  	64	None	replace
597	[BUG]  [BUGGY]  if(linkFlag  >=  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_DIR)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  >=  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  >=  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_DIR)  {  return  true;  }	  if(linkFlag    >=    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR	125	None	replace
598	[BUG]  [BUGGY]  [FE]  IOException  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  >=  MAX_NAMELEN  ||  linkFlag  ==  MAX_NAMELEN)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(linkFlag  >=  MAX_NAMELEN  ||  linkFlag  ==  MAX_NAMELEN)  {  return  true;  }	  if(linkFlag    >=    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	compilable	  [FE]  IOException  	125	1	replace
599	[BUG]  [BUGGY]  if(linkFlag  >=  MAX_NAMELEN  ||  linkFlag  ==  MAX_NAMELEN)  {  return  true;  }  [FE]  IOException  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  >=  MAX_NAMELEN  ||  linkFlag  ==  MAX_NAMELEN)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  >=  MAX_NAMELEN  ||  linkFlag  ==  MAX_NAMELEN)  {  return  true;  }	  if(linkFlag    >=    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	compilable	  [FE]  IOException  	125	1	replace
600	[BUG]  [BUGGY]  if(linkFlag  >=  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  >=  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  >=  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    >=    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR	125	None	replace
601	[BUG]  [BUGGY]  if(linkFlag  >=  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  >=  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  >=  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ENTRIES)  {  return  true;  }	  if(linkFlag    >=    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR	125	None	replace
602	[BUG]  [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ENTRIES  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  >=  EMPTY_TAR_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    >=    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ENTRIES	125	None	replace
603	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       "))    {    return    false;    	non-compiled	[CE]  	40	None	replace
604	[BUG]  [BUGGY]  &&  linkFlag!=  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  &&  linkFlag!=  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	&&  linkFlag!=  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }	  &&    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
605	[BUG]  [BUGGY]  &&  linkFlag!=  EMPTY_TAR_ARCHIVE_DIR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  &&  linkFlag!=  EMPTY_TAR_ARCHIVE_DIR)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	&&  linkFlag!=  EMPTY_TAR_ARCHIVE_DIR)  {  return  false;  }	  &&    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
606	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ",/     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(  [CE]  illegal  start  of  expression  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ",/     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   ",/       "))    {    return    true;    }    if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(	  	non-compiled	[CE]  illegal  start  of  expression	127	None	add
607	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ",/     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(  [CE]  illegal  start  of  expression  [FE]      IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ",/     "))  {  return  true;  }  if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   ",/       "))    {    return    true;    }    if(getName().endsWith( "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(	  	non-compiled	[CE]  illegal  start  of  expression	127	None	add
608	[BUG]  [BUGGY]  return(getName().startsWith( "./ ")||  getName().startsWith( "./ ")));  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith( "./ ")||  getName().startsWith( "./ ")));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( "./ ")||  getName().startsWith( "./ ")));	  return(getName().endsWith(   "/   ")||    getName().startsWith(   "/   ")));    	non-compiled	[CE]  	60	None	replace
609	[BUG]  [BUGGY]  tate  =  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  false;  }  [CE]  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  tate  =  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	tate  =  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  false;  }	  tate    =    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  	134	None	replace
610	[BUG]  [BUGGY]  tate  =  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ "))  {  return  true;  }  [CE]  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  tate  =  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	tate  =  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ "))  {  return  true;  }	  tate    =    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  	134	None	replace
611	[BUG]  [BUGGY]  tate  =  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   "))  {  return  true;  }  [CE]  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  tate  =  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	tate  =  getName().endsWith( "/   ")||  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   "))  {  return  true;  }	  tate    =    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  	134	None	replace
612	[BUG]  [BUGGY]  tate  =  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  true;  }  [CE]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  tate  =  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	tate  =  getName().endsWith( "/   ")||  getName().startsWith( "/   ")||  getName().endsWith( "/   ")||  getName().endsWith( "/   "))  {  return  true;  }	  tate    =    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  	134	None	replace
613	[BUG]  [BUGGY]  return  getName().startsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ "))  {  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ "))  {	  return    getName().startsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       "))    {    	non-compiled	[CE]  	50	None	replace
614	[BUG]  [BUGGY]  return  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/) "))  {  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/) "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/) "))  {	  return    getName().startsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       "))    {    	non-compiled	[CE]  	50	None	replace
615	[BUG]  [BUGGY]  return  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/))  {  [CE]  unclosed  string  literal  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/))  {	  return    getName().startsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       "))    {    	non-compiled	[CE]  unclosed  string  literal	50	None	replace
616	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  READ_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  READ_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  READ_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    ARRAY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	102	None	replace
617	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_DIR)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_DIR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	163	None	replace
618	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_DIR)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_DIR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR	163	None	replace
619	[BUG]  [BUGGY]  return  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ "))  {  [CE]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "./ ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	49	None	replace
620	[BUG]  [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().startsWith( "/ "))  {  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().startsWith( "/ "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().startsWith( "/ "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	49	None	replace
621	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH))  {  return  true;  }  [CE]  not  a  statement  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	38	None	replace
622	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_ERROR  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_ERROR	18	None	replace
623	[BUG]  [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/* ")||  getName().endsWith( "/* ")||  getName().endsWith  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/* ")||  getName().endsWith( "/* ")||  getName().endsWith  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/* ")||  getName().endsWith( "/* ")||  getName().endsWith	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/*   ")||    getName().endsWith    	non-compiled	[CE]  	104	None	replace
624	[BUG]  [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/* ")||  getName().endsWith( "/* ")||  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/* ")||  getName().endsWith( "/* ")||  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/* ")||  getName().endsWith( "/* ")||	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/*   ")||    getName().endsWith    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
625	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_NAMELEN  ||  linkFlag  ==  EMPTY_TAR_NAMELEN)  {  return  false;  }  [CE]  cannot  find  symbol  EMPTY_TAR_NAMELEN  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_NAMELEN  ||  linkFlag  ==  EMPTY_TAR_NAMELEN)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_NAMELEN  ||  linkFlag  ==  EMPTY_TAR_NAMELEN)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_NAMELEN	142	None	replace
626	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR_MODE  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR_MODE  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR_MODE  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_DIR_MODE  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR_MODE	142	None	replace
627	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	73	None	replace
628	[BUG]  [BUGGY]  (linkFlag  >>  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [CE]  not  a  statement  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  >>  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  >>  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	73	None	replace
629	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true;  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true;  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true;	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   "))    {    return    true;    	non-compiled	[CE]  	141	None	replace
630	[BUG]  [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  >=  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH	37	None	replace
631	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  false;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH	37	None	replace
632	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH	37	None	replace
633	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_DIR)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_DIR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR	155	None	replace
634	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_TAR_DIR)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_TAR_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_TAR_DIR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	155	None	replace
635	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_EXTENDS)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR	155	None	replace
636	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_SIZE    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR	96	None	replace
637	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_SIZE    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST	96	None	replace
638	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_TAR_ARRAY)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_TAR_ARRAY)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_TAR_ARRAY)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_SIZE    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	96	None	replace
639	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  [CE]  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   "))    {    	non-compiled	[CE]  	2	None	replace
640	[BUG]  [BUGGY]  parent  ==  null  ||  getName().endsWith( ".js "))  {  return  true;  }  [CE]  not  a  statement  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  parent  ==  null  ||  getName().endsWith( ".js "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	parent  ==  null  ||  getName().endsWith( ".js "))  {  return  true;  }	  if(getName().endsWith(       "/       "))    {    return    true;    }    if(getName().endsWith(   "/       "))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	27	None	replace
641	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    ARRAY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH	102	None	replace
642	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR    ||    linksFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST	143	None	replace
643	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR    ||    linksFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	143	None	replace
644	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	78	None	replace
645	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  NAME_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  NAME_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  NAME_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    NAME_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	97	None	replace
646	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "./     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   "./       "))    {    return    true;    }    if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	28	1	add
647	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "./     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "./     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   "./       "))    {    return    true;    }    if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	28	1	add
648	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "./     "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   "./       "))    {    return    true;    }    if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	28	1	add
649	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "./     "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "./     "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   "./       "))    {    return    true;    }    if(getName().endsWith(   "/   "))  {  return  true;  }  if(getName().endsWith(   "./   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	28	1	add
650	[BUG]  [BUGGY]  return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")  [CE]  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")    	non-compiled	[CE]  	42	None	replace
651	[BUG]  [BUGGY]  return  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")  [CE]  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")    	non-compiled	[CE]  	42	None	replace
652	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR	6	None	replace
653	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_TAR_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_TAR_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_TAR_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND	6	None	replace
654	[BUG]  [BUGGY]  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag!=  EMPTY_TAR_ARCHIVE_EXTENDS)  {  return  false;  }	  ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
655	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(file.getName().endsWith( ".js ")||  file.getName().endsWith( ".js "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(file.getName().endsWith( ".js ")||  file.getName().endsWith( ".js "))  {  return  true;  }	  [Delete]    	compilable	  [FE]  NullPointerException  	132	1	replace
656	[BUG]  [BUGGY]  if(file.getName().endsWith( ".js ")||  file.getName().endsWith( ".js "))  {  return  true;  }  [FE]  NullPointerException  [FE]        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(file.getName().endsWith( ".js ")||  file.getName().endsWith( ".js "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(file.getName().endsWith( ".js ")||  file.getName().endsWith( ".js "))  {  return  true;  }	  [Delete]    	compilable	  [FE]  NullPointerException  	132	1	replace
657	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(file.getName().endsWith( ".js ")||  file.getName().endsWith( ".js "))  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(file.getName().endsWith( ".js ")||  file.getName().endsWith( ".js "))  {  return  false;  }	  [Delete]    	compilable	  [FE]  NullPointerException  	132	1	replace
658	[BUG]  [BUGGY]  if(file.getName().endsWith( ".js ")||  file.getName().endsWith( ".js "))  {  return  false;  }  [FE]  NullPointerException  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(file.getName().endsWith( ".js ")||  file.getName().endsWith( ".js "))  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(file.getName().endsWith( ".js ")||  file.getName().endsWith( ".js "))  {  return  false;  }	  [Delete]    	compilable	  [FE]  NullPointerException  	132	1	replace
659	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(file.getName().endsWith( ".js ")||  file.getName().endsWith( ".js "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(file.getName().endsWith( ".js ")||  file.getName().endsWith( ".js "))  {  throw  new  IllegalArgumentException( " ");  }	  [Delete]    	compilable	  [FE]  NullPointerException  	132	1	replace
660	[BUG]  [BUGGY]  if(file.getName().endsWith( ".js ")||  file.getName().endsWith( ".js "))  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NullPointerException  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(file.getName().endsWith( ".js ")||  file.getName().endsWith( ".js "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(file.getName().endsWith( ".js ")||  file.getName().endsWith( ".js "))  {  throw  new  IllegalArgumentException( " ");  }	  [Delete]    	compilable	  [FE]  NullPointerException  	132	1	replace
661	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST	90	None	replace
662	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST	90	None	replace
663	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LITERAL  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LITERAL  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LITERAL  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LITERAL  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LITERAL	90	None	replace
664	[BUG]  [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  >=  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS	80	None	replace
665	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  fileName!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  fileName!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  fileName!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS	80	None	replace
666	[BUG]  [BUGGY]  tate  =  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip "))  {  return  true;  }  [CE]  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  tate  =  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	tate  =  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip "))  {  return  true;  }	  tate    =    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  	134	None	replace
667	[BUG]  [BUGGY]  ||  linkFlag  ==  DEFAULT_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag  ==  DEFAULT_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  DEFAULT_TAR_ARCHIVE_LIST)  {  return  true;  }	  ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
668	[BUG]  [BUGGY]  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_LIST)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_LIST)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag!=  EMPTY_TAR_ARCHIVE_LIST)  {  return  false;  }	  ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
669	[BUG]  [BUGGY]  ||  linkFlag  ==  LF_LIST)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag  ==  LF_LIST)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  LF_LIST)  {  return  true;  }	  ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
670	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ELEMENTS))  {  return  true;  }  [CE]  not  a  statement  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ELEMENTS))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ELEMENTS))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	129	None	replace
671	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getName().endsWith( ".prototype "))  {  return  true;  }  [CE]  not  a  statement  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  parent  ==  null  &&  parent.getName().endsWith( ".prototype "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	parent  ==  null  &&  parent.getName().endsWith( ".prototype "))  {  return  true;  }	  if(getName().endsWith(       "/       "))    {    return    true;    }    if(getName().endsWith('/       "))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	33	None	replace
672	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_SECOND)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_SECOND)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_SECOND)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_SECOND)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND	151	None	replace
673	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST	142	None	replace
674	[BUG]  [BUGGY]  If(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [CE]  ';'  expected  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  If(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	If(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }	  If(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
675	[BUG]  [BUGGY]  If(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  LF_DIR)  {  return  true;  }  [CE]  ';'  expected  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  If(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  LF_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	If(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  LF_DIR)  {  return  true;  }	  If(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	11	None	replace
676	[BUG]  [BUGGY]  return(getName().endsWith(   "/   ")||  getName().endsWith(   "./   "));  return(getName().startsWith(   "/   ")||  getName().endsWith(   "./   "));  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith(   "/   ")||  getName().endsWith(   "./   "));  return(getName().startsWith(   "/   ")||  getName().endsWith(   "./   "));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith(   "/   ")||    getName().endsWith(   "./   "));    return(getName().startsWith(   "/   ")||  getName().endsWith(   "./   "));	  	non-compiled	[CE]  unreachable  statement	57	None	add
677	[BUG]  [BUGGY]  Googl  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [CE]  ';'  expected  [FE]        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Googl  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Googl  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului	  Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    GuvernuluiTarArchiveEntry    {    return    true;    	non-compiled	[CE]  ';'  expected	81	None	replace
678	[BUG]  [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [CE]  ';'  expected  [FE]          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului	  Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    GuvernuluiTarArchiveEntry    {    return    true;    	non-compiled	[CE]  ';'  expected	81	None	replace
679	[BUG]  [BUGGY]  return(getName().endsWith( "/   ")||  getName().endsWith( ".jpg ")));  [CE]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( "/   ")||  getName().endsWith( ".jpg ")));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( "/   ")||  getName().endsWith( ".jpg ")));	  return(getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")));    	non-compiled	[CE]  	145	None	replace
680	[BUG]  [BUGGY]  return(getName().startsWith( ".jpg ")||  getName().endsWith( ".jpg ")));  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith( ".jpg ")||  getName().endsWith( ".jpg ")));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( ".jpg ")||  getName().endsWith( ".jpg ")));	  return(getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")));    	non-compiled	[CE]  	145	None	replace
681	[BUG]  [BUGGY]  return  getName().endsWith( ".zip ")||  getName().startsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip "))  {  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".zip ")||  getName().startsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".zip ")||  getName().startsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip "))  {	  return    getName().endsWith(   "/   ")||    getName().startsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	160	None	replace
682	[BUG]  [BUGGY]  return  getName().endsWith( ".jpg ")||  getName().startsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".jpg ")||  getName().startsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".jpg ")||  getName().startsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {	  return    getName().endsWith(   "/   ")||    getName().startsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	160	None	replace
683	[BUG]  [BUGGY]  return  getName().endsWith( ".java ")||  getName().startsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java "))  {  [CE]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".java ")||  getName().startsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".java ")||  getName().startsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java "))  {	  return    getName().endsWith(   "/   ")||    getName().startsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	160	None	replace
684	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR	94	None	replace
685	[BUG]  [BUGGY]  return  getName().startsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||	  return    getName().startsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
686	[BUG]  [BUGGY]  return  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/   ")||  getName().  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/   ")||  getName().  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/   ")||  getName().	  return    getName().startsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    	non-compiled	[CE]  <identifier>  expected	113	None	replace
687	[BUG]  [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ "))  {  [CE]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( "./ ")||  getName().endsWith( "./ "))  {	  return    getName().endsWith(   "./   ")||    getName().endsWith(   "./   ")||    getName().endsWith(   "./   ")||    getName().endsWith(   "./   "))    {    	non-compiled	[CE]  	121	None	replace
688	[BUG]  [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( "./ "))  {  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( "./ "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( "./ "))  {	  return    getName().endsWith(   "./   ")||    getName().endsWith(   "./   ")||    getName().endsWith(   "./   ")||    getName().endsWith(   "./   "))    {    	non-compiled	[CE]  	121	None	replace
689	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ",/     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   ",/       "))    {    return    true;    }    if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	127	1	add
690	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ",/     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ",/     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   ",/       "))    {    return    true;    }    if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	127	1	add
691	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ",/     "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   ",/       "))    {    return    true;    }    if(getName().endsWith(   ",/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	127	1	add
692	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ",/     "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  [FE]  IOException  [FE]      IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   ",/     "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   ",/       "))    {    return    true;    }    if(getName().endsWith(   ",/   "))  {  return  true;  }  if(getName().endsWith(   ",/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	127	1	add
693	[BUG]  [BUGGY]  tate  =  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true;  }  [CE]  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  tate  =  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	tate  =  getName().endsWith( ".js ")||  getName().endsWith( ".js "))  {  return  true;  }	  tate    =    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  	135	None	replace
694	[BUG]  [BUGGY]  tate  =  getName().endsWith( ".zip ")||  getName().endsWith( ".zip "))  {  return  true;  }  [CE]  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  tate  =  getName().endsWith( ".zip ")||  getName().endsWith( ".zip "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	tate  =  getName().endsWith( ".zip ")||  getName().endsWith( ".zip "))  {  return  true;  }	  tate    =    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  	135	None	replace
695	[BUG]  [BUGGY]  tate  =  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {  return  true;  }  [CE]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  tate  =  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	tate  =  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {  return  true;  }	  tate    =    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  	135	None	replace
696	[BUG]  [BUGGY]  return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {  [CE]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	49	None	replace
697	[BUG]  [BUGGY]  return  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip "))  {  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	49	None	replace
698	[BUG]  [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  >=  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH	39	None	replace
699	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LITERAL  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LITERAL  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LITERAL  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LITERAL  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_LITERAL    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LITERAL	149	None	replace
700	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag!=  EMPTY_TAR_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag!=  EMPTY_TAR_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag!=  EMPTY_TAR_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND	130	None	replace
701	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag!=  EMPTY_TAR_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag!=  EMPTY_TAR_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag!=  EMPTY_TAR_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR	130	None	replace
702	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  MILLIS_PER_SECOND)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  MILLIS_PER_SECOND)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  MILLIS_PER_SECOND)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	130	None	replace
703	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag!=  EMPTY_TAR_TAR_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag!=  EMPTY_TAR_TAR_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag!=  EMPTY_TAR_TAR_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND	10	None	replace
704	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARRAY  ||  linkFlag!=  EMPTY_TAR_ARRAY)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARRAY  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARRAY  ||  linkFlag!=  EMPTY_TAR_ARRAY)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARRAY  ||  linkFlag!=  EMPTY_TAR_ARRAY)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARRAY	10	None	replace
705	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR  ||  fileName  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_ERROR  [FE]                                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR  ||  fileName  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_ERROR  ||  fileName  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_ERROR	20	None	replace
706	[BUG]  [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [CE]  ';'  expected  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului	  Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    GuvernuluiArchiveEntry    <    return    true;    	non-compiled	[CE]  ';'  expected	86	None	replace
707	[BUG]  [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [CE]  ';'  expected  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului	  Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    GuvernuluiArchiveEntry    <    return    true;    	non-compiled	[CE]  ';'  expected	86	None	replace
708	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	72	None	replace
709	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LAST)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LAST)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LAST)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	35	None	replace
710	[BUG]  [BUGGY]  Goto  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [CE]  ';'  expected  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Goto  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Goto  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului	  Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    GuvernuluiTarArchiveEntry[]    EMPTY_DIR    	non-compiled	[CE]  ';'  expected	84	None	replace
711	[BUG]  [BUGGY]  return  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith  [CE]  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    	non-compiled	[CE]  	116	None	replace
712	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
713	[BUG]  [BUGGY]  return  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith( "/.js ")||  getName().endsWith(	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
714	[BUG]  [BUGGY]  &&  linkFlag  ==  DEFAULT_TAR_ARCHIVE_DIR)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  &&  linkFlag  ==  DEFAULT_TAR_ARCHIVE_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	&&  linkFlag  ==  DEFAULT_TAR_ARCHIVE_DIR)  {  return  true;  }	  &&    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
715	[BUG]  [BUGGY]  ||  linkFlag  ==  LF_BACKSLASH)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag  ==  LF_BACKSLASH)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  LF_BACKSLASH)  {  return  true;  }	  ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
716	[BUG]  [BUGGY]  ||  linkFlag  ==  ARRAY)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag  ==  ARRAY)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  ARRAY)  {  return  true;  }	  ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
717	[BUG]  [BUGGY]  parent  ==  null  ||  getName().endsWith( ".prototype. "))  {  return  true;  }  [CE]  not  a  statement  [FE]          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  parent  ==  null  ||  getName().endsWith( ".prototype. "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	parent  ==  null  ||  getName().endsWith( ".prototype. "))  {  return  true;  }	  parent    ==    null    ||    getName().endsWith(   "/       "))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	109	None	replace
718	[BUG]  [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [CE]  ';'  expected  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului	  Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    GuvernuluiTarArchiveEntry    <    return    return    true;    	non-compiled	[CE]  ';'  expected	83	None	replace
719	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR))  {  return  true;  }  [CE]  not  a  statement  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
720	[BUG]  [BUGGY]  ||  linkFlag  ==  DEFAULT_TAR_ARCHIVE_DIR)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag  ==  DEFAULT_TAR_ARCHIVE_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  DEFAULT_TAR_ARCHIVE_DIR)  {  return  true;  }	  ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
721	[BUG]  [BUGGY]  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_DIR)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_DIR)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag!=  EMPTY_TAR_ARCHIVE_DIR)  {  return  false;  }	  ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
722	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_LITERAL  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LITERAL  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_LITERAL  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_LITERAL  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LITERAL	92	None	replace
723	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  fileName!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_ERROR  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  fileName!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  fileName!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_ERROR	18	None	replace
724	[BUG]  [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_ERROR  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  >=  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag!=    EMPTY_TAR_ARCHIVE_ERROR)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_ERROR	18	None	replace
725	[BUG]  [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   "))  {  [CE]  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   "))  {	  return    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   "))    {    	non-compiled	[CE]  	161	None	replace
726	[BUG]  [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith(	  return    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
727	[BUG]  [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith(	  return    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
728	[BUG]  [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( "/.zip   ")||  getName().endsWith( ".zip   ")||  getName().endsWith(	  return    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   "))    {    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
729	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [CE]  not  a  statement  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_ENTRIES))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	70	None	replace
730	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  NUMBER_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [CE]  not  a  statement  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  NUMBER_TAR_ARCHIVE_ENTRIES))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  NUMBER_TAR_ARCHIVE_ENTRIES))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	70	None	replace
731	[BUG]  [BUGGY]  return(getName().startsWith( ".js ")||  getName().endsWith( ".js ")))  {  [CE]  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith( ".js ")||  getName().endsWith( ".js ")))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( ".js ")||  getName().endsWith( ".js ")))  {	  return(getName().startsWith(   "/   ")||    getName().endsWith(   "/   ")))    {    	non-compiled	[CE]  	68	None	replace
732	[BUG]  [BUGGY]  return(getName().startsWith( ".jpg ")||  getName().endsWith( ".jpg ")))  {  [CE]  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith( ".jpg ")||  getName().endsWith( ".jpg ")))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( ".jpg ")||  getName().endsWith( ".jpg ")))  {	  return(getName().startsWith(   "/   ")||    getName().endsWith(   "/   ")))    {    	non-compiled	[CE]  	68	None	replace
733	[BUG]  [BUGGY]  return(getName().endsWith( ".jpg ")||  getName().startsWith( ".jpg "))  {  [CE]  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( ".jpg ")||  getName().startsWith( ".jpg "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".jpg ")||  getName().startsWith( ".jpg "))  {	  return(getName().endsWith(   "/   ")||    getName().startsWith(   "/   "))    {    	non-compiled	[CE]  	21	None	replace
734	[BUG]  [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  >=  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS	79	None	replace
735	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  false;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_EXTENDS  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_EXTENDS	79	None	replace
736	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND	153	None	replace
737	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  MILLIS_PER_SECOND)  {  return  false;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  MILLIS_PER_SECOND)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  MILLIS_PER_SECOND)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	153	None	replace
738	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARRAY)  {  return  false;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARRAY)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARRAY)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	153	None	replace
739	[BUG]  [BUGGY]  |  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  |  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	|  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith(	  |    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
740	[BUG]  [BUGGY]  |  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  |  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	|  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith(	  |    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
741	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND	88	None	replace
742	[BUG]  [BUGGY]  parent!=  null  &&  parent.getName().endsWith( ".zip "))  {  return  true;  }  [CE]  not  a  statement  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  parent!=  null  &&  parent.getName().endsWith( ".zip "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	parent!=  null  &&  parent.getName().endsWith( ".zip "))  {  return  true;  }	  parent!=    null    &&    parent.getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	110	None	replace
743	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "/     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	add	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   "/       "))    {    return    true;    }    if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	26	1	add
744	[BUG]  [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "/     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  [FE]  IOException  [FE]    IOException    [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(getName().endsWith(     "/     "))    {    return    true;    }    if(getName().endsWith(   "/     "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(getName().endsWith(       "/       "))        {        return        true;        }        if(getName().endsWith(   "/       "))    {    return    true;    }    if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith( "./   "))  {  return  true;  }  if(getName().endsWith(   "/   "))  {  return  true;  }	  	compilable	  [FE]  IOException  	26	1	add
745	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    ARRAY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST	95	None	replace
746	[BUG]  [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( "./ ")||  getName().endsWith  [CE]  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( "./ ")||  getName().endsWith  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( "./ ")||  getName().endsWith	  return    getName().endsWith(   "./   ")||    getName().endsWith(   "./   ")||    getName().endsWith(   "./   ")||    getName().endsWith(   "./   ")||    getName().endsWith(   "./   ")||    getName().endsWith    	non-compiled	[CE]  	112	None	replace
747	[BUG]  [BUGGY]  return  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/* ")||  getName().endsWith( "/* ")||  getName().endsWith  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/* ")||  getName().endsWith( "/* ")||  getName().endsWith  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/ ")||  getName().endsWith( "/* ")||  getName().endsWith( "/* ")||  getName().endsWith	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/*   ")||    getName().endsWith    	non-compiled	[CE]  	104	None	replace
748	[BUG]  [BUGGY]  return(getName().endsWith( ".jpg ")||  getName().startsWith( ".jpg ")))  {  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( ".jpg ")||  getName().startsWith( ".jpg ")))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".jpg ")||  getName().startsWith( ".jpg ")))  {	  return(getName().endsWith(   "/   ")||    getName().startsWith(   "/   ")))    {    	non-compiled	[CE]  	64	None	replace
749	[BUG]  [BUGGY]  return  getName().endsWith( ".js ")||  getName().startsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".js ")||  getName().startsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".js ")||  getName().startsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(	  return    getName().endsWith(   "/       ")||    getName().startsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
750	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR))  {  return  true;  }  [CE]  not  a  statement  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
751	[BUG]  [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_ERROR  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  >=  EMPTY_TAR_ARCHIVE_ERROR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_ERROR	19	None	replace
752	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_ERROR  [FE]                                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR  ||  linksFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_ERROR	19	None	replace
753	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  false;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	164	None	replace
754	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LAST)  {  return  false;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LAST)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LAST)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    false;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	164	None	replace
755	[BUG]  [BUGGY]  ||  linkFlag  ==  DEFAULT_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag  ==  DEFAULT_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag  ==  DEFAULT_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
756	[BUG]  [BUGGY]  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  linkFlag!=  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
757	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR	34	None	replace
758	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST	93	None	replace
759	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST  [FE]                                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST	93	None	replace
760	[BUG]  [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST  [FE]                                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag!=  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag!=  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR)  {  return  true;  }	  if(linkFlag!=    EMPTY_TAR_ARCHIVE_ENTRIES    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST	93	None	replace
761	[BUG]  [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  >=  EMPTY_TAR_ARCHIVE_LIST  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  true;  }	  if(linkFlag    >=    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_LIST	125	None	replace
762	[BUG]  [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  >=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag    >=    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	125	None	replace
763	[BUG]  [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  >=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  >=  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH)  {  return  true;  }	  if(linkFlag    >=    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    true;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	125	None	replace
764	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_SECOND)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_SECOND)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_DIR  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_SECOND)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_SECOND)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_DIR	162	None	replace
765	[BUG]  [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [CE]  ';'  expected  [FE]          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului	  Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    GuvernuluiTarArchiveEntry    <    return    true;    	non-compiled	[CE]  ';'  expected	82	None	replace
766	[BUG]  [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [CE]  ';'  expected  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvern  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului  Guvernului	  Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    Guvernului    GuvernuluiTarArchiveEntry    <    return    true;    	non-compiled	[CE]  ';'  expected	82	None	replace
767	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_EXTENDS)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	77	None	replace
768	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_EXTENDS)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_TAR_ARCHIVE_EXTENDS)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND	77	None	replace
769	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARRAY_EXTENDS)  {  return  true;  }  [CE]  incomparable  types:  byte  and  TarArchiveEntry[]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARRAY_EXTENDS)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARRAY_EXTENDS)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_EXTENDS)    {    return    true;    }    	non-compiled	[CE]  incomparable  types:  byte  and  TarArchiveEntry[]	77	None	replace
770	[BUG]  [BUGGY]  return(getName().endsWith( ".js ")||  getName().endsWith( "/.js ")));  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( ".js ")||  getName().endsWith( "/.js ")));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".js ")||  getName().endsWith( "/.js ")));	  return(getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")));    	non-compiled	[CE]  	61	None	replace
771	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ERROR)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_ERROR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_SECOND)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND	144	None	replace
772	[BUG]  [BUGGY]  return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {  return  false;  [CE]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {  return  false;  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {  return  false;	  return    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       "))    {    return    false;    	non-compiled	[CE]  	41	None	replace
773	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [CE]  cannot  find  symbol  EMPTY_TAR_DIR  [FE]                IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_DIR  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_DIR	157	None	replace
774	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_TAR_ENTRIES)  {  return  false;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_TAR_ENTRIES)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_SECOND  ||  linkFlag  ==  EMPTY_TAR_TAR_ENTRIES)  {  return  false;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_DIR    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES)    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_SECOND	157	None	replace
775	[BUG]  [BUGGY]  return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().	  return    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith(   ".jpg   ")||    getName().endsWith    	non-compiled	[CE]  <identifier>  expected	103	None	replace
776	[BUG]  [BUGGY]  return  getName().endsWith( "/.js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( "/.js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( "/.js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(	  return    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(   ".js   ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
777	[BUG]  [BUGGY]  ||  getName().endsWith( ".prototype. ")||  getName().endsWith( ".prototype. ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  getName().endsWith( ".prototype. ")||  getName().endsWith( ".prototype. ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  getName().endsWith( ".prototype. ")||  getName().endsWith( ".prototype. ")||  getName().endsWith(	  ||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
778	[BUG]  [BUGGY]  ||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith(	  ||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
779	[BUG]  [BUGGY]  ||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  ||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith(	  ||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
780	[BUG]  [BUGGY]  return  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().ends  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().ends  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().ends	  return    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith(   ".zip   ")||    getName().endsWith    	non-compiled	[CE]  	136	None	replace
781	[BUG]  [BUGGY]  return  getName().startsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {	  return    getName().startsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       "))    {    	non-compiled	[CE]  	50	None	replace
782	[BUG]  [BUGGY]  return  getName().startsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java "))  {  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java "))  {	  return    getName().startsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       "))    {    	non-compiled	[CE]  	50	None	replace
783	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST))  {  return  true;  }  [CE]  not  a  statement  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_ENTRIES  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_ENTRIES))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	89	None	replace
784	[BUG]  [BUGGY]  return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().startsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().startsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().startsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().startsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	122	None	replace
785	[BUG]  [BUGGY]  return  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().startsWith( ".zip ")||  getName().endsWith( ".zip "))  {  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().startsWith( ".zip ")||  getName().endsWith( ".zip "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().startsWith( ".zip ")||  getName().endsWith( ".zip "))  {	  return    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().startsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	122	None	replace
786	[BUG]  [BUGGY]  return(getName().startsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {  [CE]  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {	  return(getName().startsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	25	None	replace
787	[BUG]  [BUGGY]  return(getName().startsWith( ".js ")||  getName().endsWith( ".js "))  {  [CE]  [FE]                        IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().startsWith( ".js ")||  getName().endsWith( ".js "))  {  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().startsWith( ".js ")||  getName().endsWith( ".js "))  {	  return(getName().startsWith(   "/   ")||    getName().endsWith(   "/   "))    {    	non-compiled	[CE]  	25	None	replace
788	[BUG]  [BUGGY]  return  getName().startsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith( ".js ")||  getName().endsWith(	  return    getName().startsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
789	[BUG]  [BUGGY]  return  getName().startsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith(  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return  getName().startsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith(  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return  getName().startsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith( ".java ")||  getName().endsWith(	  return    getName().startsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(   "/       ")||    getName().endsWith(    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
790	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_BACKSLASH))  {  return  true;  }  [CE]  not  a  statement  [FE]                          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_BACKSLASH))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  ARRAY_TAR_ARCHIVE_BACKSLASH))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	38	None	replace
791	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  DEFAULT_TAR_ARCHIVE_BACKSLASH))  {  return  true;  }  [CE]  not  a  statement  [FE]                            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  DEFAULT_TAR_ARCHIVE_BACKSLASH))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  DEFAULT_TAR_ARCHIVE_BACKSLASH))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	38	None	replace
792	[BUG]  [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  DELETE_TAR_ARCHIVE_BACKSLASH))  {  return  true;  }  [CE]  not  a  statement  [FE]                              IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  (linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  DELETE_TAR_ARCHIVE_BACKSLASH))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  DELETE_TAR_ARCHIVE_BACKSLASH))  {  return  true;  }	  (linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	38	None	replace
793	[BUG]  [BUGGY]  tate  =  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {  return  true;  }  [CE]  [FE]          IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  tate  =  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	tate  =  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg ")||  getName().endsWith( ".jpg "))  {  return  true;  }	  tate    =    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  	133	None	replace
794	[BUG]  [BUGGY]  tate  =  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip "))  {  return  true;  }  [CE]  [FE]            IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  tate  =  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip "))  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	tate  =  getName().endsWith( ".zip ")||  getName().endsWith( ".zip ")||  getName().endsWith( ".zip "))  {  return  true;  }	  tate    =    getName().endsWith(   "/   ")||    getName().endsWith(   "/   ")||    getName().endsWith(   "/   "))    {    return    true;    }    	non-compiled	[CE]  	133	None	replace
795	[BUG]  [BUGGY]  return(getName().endsWith( ".jpg ")||  getName().startsWith( ".jpg ")));  [CE]  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  return(getName().endsWith( ".jpg ")||  getName().startsWith( ".jpg ")));  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	return(getName().endsWith( ".jpg ")||  getName().startsWith( ".jpg ")));	  return(getName().endsWith(   "/   ")||    getName().startsWith(   "/   ")));    	non-compiled	[CE]  	60	None	replace
796	[BUG]  [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH  [FE]                    IOException      [CONTEXT]      public  boolean  isDirectory()  {  if  (file  !=  null)  {  return  file.isDirectory();  }  if  (linkFlag  ==  LF_DIR)  {  return  true;  }  if  (getName().endsWith(     "/     "))  {      [BUGGY]  if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  TarArchiveEntry  [METHOD]  isDirectory  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  checkSumOK  isDir  isExtended  paxGNUSparse  preserveLeadingSlashes  starSparse  byte  linkFlag  String  fileName  groupName  link  linkName  magic  name  normalizedName  user  userName  version  File  file  int  DEFAULT_DIR_MODE  DEFAULT_FILE_MODE  MAX_NAMELEN  MILLIS_PER_SECOND  devMajor  devMinor  devNo  groupId  mode  nameLength  userId  long  groupId  modTime  realSize  size  time  userId  TarArchiveEntry[]  EMPTY_TAR_ARCHIVE_ENTRIES  	projects/Compress38/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java	1.0	860	860	1	replace	if(linkFlag  ==  EMPTY_TAR_ARCHIVE_BACKSLASH  ||  linkFlag  ==  EMPTY_TAR_ARCHIVE_LIST)  {  return  true;  }	  if(linkFlag    ==    EMPTY_TAR_ARCHIVE_LIST    ||    linkFlag    ==    EMPTY_TAR_ARCHIVE_BACKSLASH)    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  EMPTY_TAR_ARCHIVE_BACKSLASH	100	None	replace
