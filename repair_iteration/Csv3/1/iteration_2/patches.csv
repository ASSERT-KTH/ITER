bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  default:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  [CE]  duplicate  default  label  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  default:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	default:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    break    BACKSPACE;    	non-compiled	[CE]  duplicate  default  label	346	None	replace
2	[BUG]  [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  break  BACKSPACE;  [CE]  duplicate  case  label  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  break  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  break  BACKSPACE;	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    break    BACKSPACE;    	non-compiled	[CE]  duplicate  case  label	346	None	replace
3	[BUG]  [BUGGY]  default:  return  BACKSPACE;  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  break  BACKSPACE;  [CE]  duplicate  default  label  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  default:  return  BACKSPACE;  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  break  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	default:  return  BACKSPACE;  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  break  BACKSPACE;	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    break    BACKSPACE;    	non-compiled	[CE]  duplicate  default  label	346	None	replace
4	[BUG]  [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  break  BACKSPACE;  [CE]  duplicate  case  label  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  break  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  break  BACKSPACE;	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    break    BACKSPACE;    	non-compiled	[CE]  duplicate  case  label	346	None	replace
5	[BUG]  [BUGGY]  result:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  break  BACKSPACE;  [CE]  undefined  label:  BACKSPACE  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  break  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  break  BACKSPACE;	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    break    BACKSPACE;    	non-compiled	[CE]  undefined  label:  BACKSPACE	346	None	replace
6	[BUG]  [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  while  processing  escape  sequence ");  break  BACKSPACE;  [CE]  duplicate  case  label  [FE]                            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  while  processing  escape  sequence ");  break  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  throw  new  IOException( "EOF  while  processing  escape  sequence ");  break  BACKSPACE;	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    break    BACKSPACE;    	non-compiled	[CE]  duplicate  case  label	346	None	replace
7	[BUG]  [BUGGY]  return  c?  -1  :  END_OF_STREAM;  [CE]  incompatible  types  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c?  -1  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c?  -1  :  END_OF_STREAM;	  return    this.encodeEscapeSurroundingSpaces?    -1    :    END_OF_STREAM;    	non-compiled	[CE]  incompatible  types	122	None	replace
8	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreEmptyLines?  -1  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  this.ignoreEmptyLines?  -1  :  END_OF_STREAM;	  return    this.encodeEscapeSurroundingSpaces?    -1    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	122	3	replace
9	[BUG]  [BUGGY]  return  this.ignoreEmptyLines?  -1  :  END_OF_STREAM;  [FE]  (entry  2)  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreEmptyLines?  -1  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoreEmptyLines?  -1  :  END_OF_STREAM;	  return    this.encodeEscapeSurroundingSpaces?    -1    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	122	3	replace
10	[BUG]  [BUGGY]  return  this.ignoredEmptyLines?  -1  :  END_OF_STREAM;  [CE]  cannot  find  symbol  ignoredEmptyLines  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoredEmptyLines?  -1  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoredEmptyLines?  -1  :  END_OF_STREAM;	  return    this.encodeEscapeSurroundingSpaces?    -1    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  ignoredEmptyLines	122	None	replace
11	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  ignoreEmptyLines?  -1  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  ignoreEmptyLines?  -1  :  END_OF_STREAM;	  return    this.encodeEscapeSurroundingSpaces?    -1    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	122	3	replace
12	[BUG]  [BUGGY]  return  ignoreEmptyLines?  -1  :  END_OF_STREAM;  [FE]  (entry  2)  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  ignoreEmptyLines?  -1  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  ignoreEmptyLines?  -1  :  END_OF_STREAM;	  return    this.encodeEscapeSurroundingSpaces?    -1    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	122	3	replace
13	[BUG]  [BUGGY]  return  END_OF_STREAM?  -1  :  this.ignoreEmptyLines;  [CE]  incompatible  types  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM?  -1  :  this.ignoreEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM?  -1  :  this.ignoreEmptyLines;	  return    this.encodeEscapeSurroundingSpaces?    -1    :    END_OF_STREAM;    	non-compiled	[CE]  incompatible  types	122	None	replace
14	[BUG]  [BUGGY]  return  END_OF_SURroundingSpaces.equals(c)?  END_OF_SURroundingSpaces  :  END_OF_STREAM;  [CE]  cannot  find  symbol  END_OF_SURroundingSpaces  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_SURroundingSpaces.equals(c)?  END_OF_SURroundingSpaces  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_SURroundingSpaces.equals(c)?  END_OF_SURroundingSpaces  :  END_OF_STREAM;	  return    END_OF_STREAM.equals(c)?    END_OF_SURroundingSpaces    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_SURroundingSpaces	365	None	replace
15	[BUG]  [BUGGY]  return  c.equals(END_OF_SURroundingSpaces)?  END_OF_SURroundingSpaces  :  END_OF_STREAM;  [CE]  cannot  find  symbol  END_OF_SURroundingSpaces  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c.equals(END_OF_SURroundingSpaces)?  END_OF_SURroundingSpaces  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c.equals(END_OF_SURroundingSpaces)?  END_OF_SURroundingSpaces  :  END_OF_STREAM;	  return    END_OF_STREAM.equals(c)?    END_OF_SURroundingSpaces    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_SURroundingSpaces	365	None	replace
16	[BUG]  [BUGGY]  int  c  =  END_OF_SURroundingSpaces.equals(c)?  END_OF_SURroundingSpaces  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  END_OF_SURroundingSpaces.equals(c)?  END_OF_SURroundingSpaces  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  END_OF_SURroundingSpaces.equals(c)?  END_OF_SURroundingSpaces  :  END_OF_STREAM;	  return    END_OF_STREAM.equals(c)?    END_OF_SURroundingSpaces    :    END_OF_STREAM;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	365	None	replace
17	[BUG]  [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_SURroundingSpaces  :  END_OF_SPACE;  [CE]  int  cannot  be  dereferenced  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_SURroundingSpaces  :  END_OF_SPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.equals(c)?  END_OF_SURroundingSpaces  :  END_OF_SPACE;	  return    END_OF_STREAM.equals(c)?    END_OF_SURroundingSpaces    :    END_OF_STREAM;    	non-compiled	[CE]  int  cannot  be  dereferenced	365	None	replace
18	[BUG]  [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_SURroundingSpaces  :  END_OF_REACHABLE;  [CE]  int  cannot  be  dereferenced  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_SURroundingSpaces  :  END_OF_REACHABLE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.equals(c)?  END_OF_SURroundingSpaces  :  END_OF_REACHABLE;	  return    END_OF_STREAM.equals(c)?    END_OF_SURroundingSpaces    :    END_OF_STREAM;    	non-compiled	[CE]  int  cannot  be  dereferenced	365	None	replace
19	[BUG]  [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_SURroundingSpaces  :  END_OF_STREAM  +  1;  [CE]  int  cannot  be  dereferenced  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_SURroundingSpaces  :  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.equals(c)?  END_OF_SURroundingSpaces  :  END_OF_STREAM  +  1;	  return    END_OF_STREAM.equals(c)?    END_OF_SURroundingSpaces    :    END_OF_STREAM;    	non-compiled	[CE]  int  cannot  be  dereferenced	365	None	replace
20	[BUG]  [BUGGY]  return  this.ignoredSurroundingSpaces?  -1  :  END_OF_STREAM;  [CE]  cannot  find  symbol  ignoredSurroundingSpaces  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoredSurroundingSpaces?  -1  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoredSurroundingSpaces?  -1  :  END_OF_STREAM;	  return    this.escapeSurroundingSpaces?    -1    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  ignoredSurroundingSpaces	210	None	replace
21	[BUG]  [BUGGY]  c  +=  END_OF_STREAM;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  +=  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  +=  END_OF_STREAM;	  return    END_OF_STREAM    +    c;    c    +=    END_OF_STREAM;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	9	None	replace
22	[BUG]  [BUGGY]  return  END_OF_STREAM  +  commmentStart;  c  +=  END_OF_STREAM;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  commmentStart;  c  +=  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  commmentStart;  c  +=  END_OF_STREAM;	  return    END_OF_STREAM    +    c;    c    +=    END_OF_STREAM;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	9	None	replace
23	[BUG]  [BUGGY]  return  END_OF_STREAM  +  1;  c  +=  1;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  1;  c  +=  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  1;  c  +=  1;	  return    END_OF_STREAM    +    c;    c    +=    END_OF_STREAM;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	9	None	replace
24	[BUG]  [BUGGY]  return  END_OF_STREAM  +  1;  c  +=  2;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  1;  c  +=  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  1;  c  +=  2;	  return    END_OF_STREAM    +    c;    c    +=    END_OF_STREAM;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	9	None	replace
25	[BUG]  [BUGGY]  return  END_OF_STREAM  +  2;  c  +=  2;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  2;  c  +=  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  2;  c  +=  2;	  return    END_OF_STREAM    +    c;    c    +=    END_OF_STREAM;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	9	None	replace
26	[BUG]  [BUGGY]  int  c  =  END_OF_STREAM.length();  c  +=  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  END_OF_STREAM.length();  c  +=  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  END_OF_STREAM.length();  c  +=  END_OF_STREAM;	  return    END_OF_STREAM    +    c;    c    +=    END_OF_STREAM;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	9	None	replace
27	[BUG]  [BUGGY]  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpaces().length;	  return    c    +    2;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	61	None	replace
28	[BUG]  [BUGGY]  c  =  getSurroundingSpaces().length;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getSurroundingSpaces().length;	  return    c    +    2;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	61	None	replace
29	[BUG]  [BUGGY]  Integer  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  getSurroundingSpaces().length;	  return    c    +    2;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	61	None	replace
30	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  commmentStart;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  +  commmentStart;	  return    END_OF_STREAM    +    commmentStart;    	compilable	  [FE]  (entry  2)  	81	5	replace
31	[BUG]  [BUGGY]  return  c  +  commmentStart;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  commmentStart;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  commmentStart;	  return    END_OF_STREAM    +    commmentStart;    	compilable	  [FE]  (entry  2)  	81	5	replace
32	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  commmentStart  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  commmentStart  +  END_OF_STREAM;	  return    END_OF_STREAM    +    commmentStart;    	compilable	  [FE]  (entry  2)  	81	5	replace
33	[BUG]  [BUGGY]  return  commmentStart  +  END_OF_STREAM;  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  commmentStart  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  commmentStart  +  END_OF_STREAM;	  return    END_OF_STREAM    +    commmentStart;    	compilable	  [FE]  (entry  2)  	81	5	replace
34	[BUG]  [BUGGY]  return  END_OF_STREAM  +  escapeStart;  [CE]  cannot  find  symbol  escapeStart  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  escapeStart;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  escapeStart;	  return    END_OF_STREAM    +    commmentStart;    	non-compiled	[CE]  cannot  find  symbol  escapeStart	81	None	replace
35	[BUG]  [BUGGY]  return  c.equals(END_OF_STREAM)?  END_OF_EOF  :  END_OF_EOF;  [CE]  int  cannot  be  dereferenced  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c.equals(END_OF_STREAM)?  END_OF_EOF  :  END_OF_EOF;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c.equals(END_OF_STREAM)?  END_OF_EOF  :  END_OF_EOF;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_EOF;    	non-compiled	[CE]  int  cannot  be  dereferenced	366	None	replace
36	[BUG]  [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_EOF  :  END_OF_EOF;  [CE]  int  cannot  be  dereferenced  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_EOF  :  END_OF_EOF;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.equals(c)?  END_OF_EOF  :  END_OF_EOF;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_EOF;    	non-compiled	[CE]  int  cannot  be  dereferenced	366	None	replace
37	[BUG]  [BUGGY]  return  END_OF_EOF.equals(c)?  END_OF_STREAM  :  END_OF_EOF;  [CE]  cannot  find  symbol  END_OF_EOF  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_EOF.equals(c)?  END_OF_STREAM  :  END_OF_EOF;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_EOF.equals(c)?  END_OF_STREAM  :  END_OF_EOF;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_EOF;    	non-compiled	[CE]  cannot  find  symbol  END_OF_EOF	366	None	replace
38	[BUG]  [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_EOF  :  END_OF_STREAM;  [CE]  int  cannot  be  dereferenced  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_EOF  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.equals(c)?  END_OF_EOF  :  END_OF_STREAM;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_EOF;    	non-compiled	[CE]  int  cannot  be  dereferenced	366	None	replace
39	[BUG]  [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_EOF  :  END_OF_WRITE;  [CE]  int  cannot  be  dereferenced  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_EOF  :  END_OF_WRITE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.equals(c)?  END_OF_EOF  :  END_OF_WRITE;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_EOF;    	non-compiled	[CE]  int  cannot  be  dereferenced	366	None	replace
40	[BUG]  [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_EOF  :  END_OF_StrEAM;  [CE]  int  cannot  be  dereferenced  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_EOF  :  END_OF_StrEAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.equals(c)?  END_OF_EOF  :  END_OF_StrEAM;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_EOF;    	non-compiled	[CE]  int  cannot  be  dereferenced	366	None	replace
41	[BUG]  [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_EOF  :  END_OF_SURroundingSpaces;  [CE]  int  cannot  be  dereferenced  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_EOF  :  END_OF_SURroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.equals(c)?  END_OF_EOF  :  END_OF_SURroundingSpaces;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_EOF;    	non-compiled	[CE]  int  cannot  be  dereferenced	366	None	replace
42	[BUG]  [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  }  [CE]  illegal  start  of  expression  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
43	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  }  [CE]  illegal  start  of  expression  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
44	[BUG]  [BUGGY]  if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  }  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
45	[BUG]  [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
46	[BUG]  [BUGGY]  escapeSurroundingSpaces  =  false;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  escapeSurroundingSpaces  =  false;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	escapeSurroundingSpaces  =  false;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
47	[BUG]  [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  c;  }  }  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  c;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  c;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
48	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  'n';  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  +  'n';	  return    END_OF_STREAM    +    'n';    	compilable	  [FE]  (entry  2)  	282	5	replace
49	[BUG]  [BUGGY]  return  c  +  'n';  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  'n';  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  'n';	  return    END_OF_STREAM    +    'n';    	compilable	  [FE]  (entry  2)  	282	5	replace
50	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  'n'  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  END_OF_STREAM  +  'n'  +  1;	  return    END_OF_STREAM    +    'n';    	compilable	  [FE]  (entry  2)  	282	5	replace
51	[BUG]  [BUGGY]  return  END_OF_STREAM  +  'n'  +  1;  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  'n'  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  'n'  +  1;	  return    END_OF_STREAM    +    'n';    	compilable	  [FE]  (entry  2)  	282	5	replace
52	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  'n'  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  'n'  +  END_OF_STREAM;	  return    END_OF_STREAM    +    'n';    	compilable	  [FE]  (entry  2)  	282	5	replace
53	[BUG]  [BUGGY]  return  'n'  +  END_OF_STREAM;  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  'n'  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  'n'  +  END_OF_STREAM;	  return    END_OF_STREAM    +    'n';    	compilable	  [FE]  (entry  2)  	282	5	replace
54	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  'n'  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  END_OF_STREAM  +  'n'  +  2;	  return    END_OF_STREAM    +    'n';    	compilable	  [FE]  (entry  2)  	282	5	replace
55	[BUG]  [BUGGY]  return  END_OF_STREAM  +  'n'  +  2;  [FE]  (entry  2)  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  'n'  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  'n'  +  2;	  return    END_OF_STREAM    +    'n';    	compilable	  [FE]  (entry  2)  	282	5	replace
56	[BUG]  [BUGGY]  return  n  +  'n';  [CE]  cannot  find  symbol  n  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  n  +  'n';  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  n  +  'n';	  return    END_OF_STREAM    +    'n';    	non-compiled	[CE]  cannot  find  symbol  n	282	None	replace
57	[BUG]  [BUGGY]  return  END_OF_STREAM  +  'n',  c;  [CE]  ';'  expected  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  'n',  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  'n',  c;	  return    END_OF_STREAM    +    'n';    	non-compiled	[CE]  ';'  expected	282	None	replace
58	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  /  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  /  2;	  return    c    -    2;    	compilable	  [FE]  (entry  2)  	113	5	replace
59	[BUG]  [BUGGY]  return  c  /  2;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  /  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  /  2;	  return    c    -    2;    	compilable	  [FE]  (entry  2)  	113	5	replace
60	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  2  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  -  2  +  1;	  return    c    -    2;    	compilable	  [FE]  (entry  2)  	113	5	replace
61	[BUG]  [BUGGY]  return  c  -  2  +  1;  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  2  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  2  +  1;	  return    c    -    2;    	compilable	  [FE]  (entry  2)  	113	5	replace
62	[BUG]  [BUGGY]  return  this.ignoreEmptyLines?  END_OF_STREAM  :  END_EOF;  [CE]  cannot  find  symbol  END_EOF  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreEmptyLines?  END_OF_STREAM  :  END_EOF;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoreEmptyLines?  END_OF_STREAM  :  END_EOF;	  return    this.escapeSurroundingSpaces?    END_OF_STREAM    :    END_EOF;    	non-compiled	[CE]  cannot  find  symbol  END_EOF	208	None	replace
63	[BUG]  [BUGGY]  return  this.ignoredEmptyLines?  END_OF_STREAM  :  END_EOF;  [CE]  cannot  find  symbol  ignoredEmptyLines  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoredEmptyLines?  END_OF_STREAM  :  END_EOF;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoredEmptyLines?  END_OF_STREAM  :  END_EOF;	  return    this.escapeSurroundingSpaces?    END_OF_STREAM    :    END_EOF;    	non-compiled	[CE]  cannot  find  symbol  ignoredEmptyLines	208	None	replace
64	[BUG]  [BUGGY]  return  this.ignoredSurroundingSpaces?  END_OF_STREAM  :  END_EOF;  [CE]  cannot  find  symbol  ignoredSurroundingSpaces  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoredSurroundingSpaces?  END_OF_STREAM  :  END_EOF;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoredSurroundingSpaces?  END_OF_STREAM  :  END_EOF;	  return    this.escapeSurroundingSpaces?    END_OF_STREAM    :    END_EOF;    	non-compiled	[CE]  cannot  find  symbol  ignoredSurroundingSpaces	208	None	replace
65	[BUG]  [BUGGY]  return  c?  END_OF_STREAM  :  END_EOF;  [CE]  incompatible  types  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c?  END_OF_STREAM  :  END_EOF;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c?  END_OF_STREAM  :  END_EOF;	  return    this.escapeSurroundingSpaces?    END_OF_STREAM    :    END_EOF;    	non-compiled	[CE]  incompatible  types	208	None	replace
66	[BUG]  [BUGGY]  return  END_OF_STREAM  +  default;  [CE]  illegal  start  of  expression  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  default;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  default;	  return    END_OF_STREAM    +    c;    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
67	[BUG]  [BUGGY]  int  c  =  getSurroundingSpaces();  return  c  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpaces();  return  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpaces();  return  c  +  1;	  return    c    +    1;    int    c    =    getSurroundingSpaces();    return    c    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	359	None	replace
68	[BUG]  [BUGGY]  c  =  getSurroundingSpaces();  return  c  +  1;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getSurroundingSpaces();  return  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getSurroundingSpaces();  return  c  +  1;	  return    c    +    1;    int    c    =    getSurroundingSpaces();    return    c    +    1;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	359	None	replace
69	[BUG]  [BUGGY]  int  c  =  getSurroundingSpaces();  return  c  +  2;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpaces();  return  c  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpaces();  return  c  +  2;	  return    c    +    1;    int    c    =    getSurroundingSpaces();    return    c    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	359	None	replace
70	[BUG]  [BUGGY]  c  +=  getSurroundingSpaces();  return  c  +  1;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  +=  getSurroundingSpaces();  return  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  +=  getSurroundingSpaces();  return  c  +  1;	  return    c    +    1;    int    c    =    getSurroundingSpaces();    return    c    +    1;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	359	None	replace
71	[BUG]  [BUGGY]  int  c  =  getSurroundingSpaces();  return  c  +  3;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpaces();  return  c  +  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpaces();  return  c  +  3;	  return    c    +    1;    int    c    =    getSurroundingSpaces();    return    c    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	359	None	replace
72	[BUG]  [BUGGY]  c  =  getSurroundingSpaces();  return  c  +  2;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getSurroundingSpaces();  return  c  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getSurroundingSpaces();  return  c  +  2;	  return    c    +    1;    int    c    =    getSurroundingSpaces();    return    c    +    1;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	359	None	replace
73	[BUG]  [BUGGY]  while(c  ==  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence.   ");  }  [CE]  missing  return  statement  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  ==  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence.   ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  ==  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence.   ");  }	  if(c    ==    END_OF_STREAM)    {    throw    new    IOException(   "EOF    whilst    processing    escape    sequence.   ");    }    	non-compiled	[CE]  missing  return  statement	21	None	replace
74	[BUG]  [BUGGY]  while(c  <  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence.   ");  }  [CE]  missing  return  statement  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence.   ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence.   ");  }	  if(c    ==    END_OF_STREAM)    {    throw    new    IOException(   "EOF    whilst    processing    escape    sequence.   ");    }    	non-compiled	[CE]  missing  return  statement	21	None	replace
75	[BUG]  [BUGGY]  while(c  >=  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence.   ");  }  [CE]  missing  return  statement  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  >=  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence.   ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  >=  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence.   ");  }	  if(c    ==    END_OF_STREAM)    {    throw    new    IOException(   "EOF    whilst    processing    escape    sequence.   ");    }    	non-compiled	[CE]  missing  return  statement	21	None	replace
76	[BUG]  [BUGGY]  while(c  <  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence.   ");  [CE]  illegal  start  of  expression  [FE]                                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence.   ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence.   ");	  if(c    ==    END_OF_STREAM)    {    throw    new    IOException(   "EOF    whilst    processing    escape    sequence.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
77	[BUG]  [BUGGY]  return  c  >  0?  1  :  ignoreEmptyLines;  [CE]  incompatible  types  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  ignoreEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  ignoreEmptyLines;	  return    c    >    0?    1    :    escapeSurroundingSpaces;    	non-compiled	[CE]  incompatible  types	66	None	replace
78	[BUG]  [BUGGY]  return  c  >  0?  1  :  avoidEmptyLines;  [CE]  cannot  find  symbol  avoidEmptyLines  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  avoidEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  avoidEmptyLines;	  return    c    >    0?    1    :    escapeSurroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  avoidEmptyLines	66	None	replace
79	[BUG]  [BUGGY]  return  c  >  0?  1  :  escapeEmptyLines;  [CE]  cannot  find  symbol  escapeEmptyLines  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  escapeEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  escapeEmptyLines;	  return    c    >    0?    1    :    escapeSurroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  escapeEmptyLines	66	None	replace
80	[BUG]  [BUGGY]  return  c  >  0?  1  :  skipEmptyLines;  [CE]  cannot  find  symbol  skipEmptyLines  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  skipEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  skipEmptyLines;	  return    c    >    0?    1    :    escapeSurroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  skipEmptyLines	66	None	replace
81	[BUG]  [BUGGY]  return  c  >  0?  1  :  default;  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  default;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  default;	  return    c    >    0?    1    :    escapeSurroundingSpaces;    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
82	[BUG]  [BUGGY]  return  default:  END_OF_STREAM  +  2;  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  default:  END_OF_STREAM  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  default:  END_OF_STREAM  +  2;	  return    default:    END_OF_STREAM    +    1;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
83	[BUG]  [BUGGY]  return  default:  END_OF_STREAM;  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  default:  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  default:  END_OF_STREAM;	  return    default:    END_OF_STREAM    +    1;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
84	[BUG]  [BUGGY]  return  default:  END_OF_STREAM  +  1L;  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  default:  END_OF_STREAM  +  1L;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  default:  END_OF_STREAM  +  1L;	  return    default:    END_OF_STREAM    +    1;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
85	[BUG]  [BUGGY]  return  default:  END_OF_STREAM  +  4;  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  default:  END_OF_STREAM  +  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  default:  END_OF_STREAM  +  4;	  return    default:    END_OF_STREAM    +    1;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
86	[BUG]  [BUGGY]  return  default:  END_OF_STREAM  +  3;  [CE]  illegal  start  of  expression  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  default:  END_OF_STREAM  +  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  default:  END_OF_STREAM  +  3;	  return    default:    END_OF_STREAM    +    1;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
87	[BUG]  [BUGGY]  return  default:  END_OF_STREAM  |  1;  [CE]  illegal  start  of  expression  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  default:  END_OF_STREAM  |  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  default:  END_OF_STREAM  |  1;	  return    default:    END_OF_STREAM    +    1;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
88	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces  ||!ignoreEmptyLines)  {  return  c;  }  [CE]  illegal  start  of  expression  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces  ||!ignoreEmptyLines)  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces  ||!ignoreEmptyLines)  {  return  c;  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
89	[BUG]  [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  [CE]  >  expected  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    c;    }    	non-compiled	[CE]  >  expected	15	None	replace
90	[BUG]  [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces  ||!ignoreEmptyLines)  {  return  c;  }  [CE]  >  expected  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces  ||!ignoreEmptyLines)  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces  ||!ignoreEmptyLines)  {  return  c;  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    c;    }    	non-compiled	[CE]  >  expected	15	None	replace
91	[BUG]  [BUGGY]  int  len  =  0;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  [CE]  illegal  start  of  expression  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  len  =  0;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  len  =  0;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
92	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreSurroundingSpaces)  {  return  c;  }  [CE]  illegal  start  of  expression  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreSurroundingSpaces)  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreSurroundingSpaces)  {  return  c;  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
93	[BUG]  [BUGGY]  int  len  =  0;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces  ||!ignoreEmptyLines)  {  return  c;  }  [CE]  illegal  start  of  expression  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  len  =  0;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces  ||!ignoreEmptyLines)  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  len  =  0;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces  ||!ignoreEmptyLines)  {  return  c;  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
94	[BUG]  [BUGGY]  int  delimiter  =  getSurroundingSpaces().length  -  1;  [CE]  cannot  find  symbol  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getSurroundingSpaces().length  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getSurroundingSpaces().length  -  1;	  int    delimiter    =    getSurroundingSpaces().length;    	non-compiled	[CE]  cannot  find  symbol	287	None	replace
95	[BUG]  [BUGGY]  int  delimiter  =  getSurroundingSpaces().length  +  1;  [CE]  cannot  find  symbol  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getSurroundingSpaces().length  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getSurroundingSpaces().length  +  1;	  int    delimiter    =    getSurroundingSpaces().length;    	non-compiled	[CE]  cannot  find  symbol	287	None	replace
96	[BUG]  [BUGGY]  int  delimiter  =  getSurroundingSpaces().length  -  2;  [CE]  cannot  find  symbol  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getSurroundingSpaces().length  -  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getSurroundingSpaces().length  -  2;	  int    delimiter    =    getSurroundingSpaces().length;    	non-compiled	[CE]  cannot  find  symbol	287	None	replace
97	[BUG]  [BUGGY]  int  delimiter  =  getSurroundingSpaces().length  -  4;  [CE]  cannot  find  symbol  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getSurroundingSpaces().length  -  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getSurroundingSpaces().length  -  4;	  int    delimiter    =    getSurroundingSpaces().length;    	non-compiled	[CE]  cannot  find  symbol	287	None	replace
98	[BUG]  [BUGGY]  int  delimiter  =  getSurroundingSpaces().length  +  2;  [CE]  cannot  find  symbol  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getSurroundingSpaces().length  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getSurroundingSpaces().length  +  2;	  int    delimiter    =    getSurroundingSpaces().length;    	non-compiled	[CE]  cannot  find  symbol	287	None	replace
99	[BUG]  [BUGGY]  int  delimiter  =  getSurroundingSpaces().length  -  3;  [CE]  cannot  find  symbol  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getSurroundingSpaces().length  -  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getSurroundingSpaces().length  -  3;	  int    delimiter    =    getSurroundingSpaces().length;    	non-compiled	[CE]  cannot  find  symbol	287	None	replace
100	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces();  return  END_OF_STREAM  +  c;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces();  return  END_OF_STREAM  +  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces();  return  END_OF_STREAM  +  c;	  return    END_OF_STREAM    +    c;    int    c    =    getEscapeSurroundingSpaces();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	187	None	replace
101	[BUG]  [BUGGY]  c  =  getEscapeSurroundingSpaces();  return  END_OF_STREAM  +  c;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getEscapeSurroundingSpaces();  return  END_OF_STREAM  +  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getEscapeSurroundingSpaces();  return  END_OF_STREAM  +  c;	  return    END_OF_STREAM    +    c;    int    c    =    getEscapeSurroundingSpaces();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	187	None	replace
102	[BUG]  [BUGGY]  null  c  =  getEscapeSurroundingSpaces();  return  END_OF_STREAM  +  c;  [CE]  not  a  statement  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  null  c  =  getEscapeSurroundingSpaces();  return  END_OF_STREAM  +  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	null  c  =  getEscapeSurroundingSpaces();  return  END_OF_STREAM  +  c;	  return    END_OF_STREAM    +    c;    int    c    =    getEscapeSurroundingSpaces();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  not  a  statement	187	None	replace
103	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces();  return  END_OF_STREAM  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces();  return  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces();  return  END_OF_STREAM  +  1;	  return    END_OF_STREAM    +    c;    int    c    =    getEscapeSurroundingSpaces();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	187	None	replace
104	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces();  return  END_OF_STREAM  +  d;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces();  return  END_OF_STREAM  +  d;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces();  return  END_OF_STREAM  +  d;	  return    END_OF_STREAM    +    c;    int    c    =    getEscapeSurroundingSpaces();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	187	None	replace
105	[BUG]  [BUGGY]  int  escape  =  getEscapeChar();  if(escape!=  0)  {  return  escape;  }  [CE]  cannot  find  symbol  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escape  =  getEscapeChar();  if(escape!=  0)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escape  =  getEscapeChar();  if(escape!=  0)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeChar();    if(escape!=    0)    {    return    escape;    }    	non-compiled	[CE]  cannot  find  symbol	236	None	replace
106	[BUG]  [BUGGY]  escape  =  getEscapeChar();  if(escape!=  0)  {  return  escape;  }  [CE]  cannot  assign  a  value  to  final  variable  escape  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  escape  =  getEscapeChar();  if(escape!=  0)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	escape  =  getEscapeChar();  if(escape!=  0)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeChar();    if(escape!=    0)    {    return    escape;    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  escape	236	None	replace
107	[BUG]  [BUGGY]  int  escape  =  getEscapeChar();  if(escape  >=  0)  {  return  escape;  }  [CE]  cannot  find  symbol  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escape  =  getEscapeChar();  if(escape  >=  0)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escape  =  getEscapeChar();  if(escape  >=  0)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeChar();    if(escape!=    0)    {    return    escape;    }    	non-compiled	[CE]  cannot  find  symbol	236	None	replace
108	[BUG]  [BUGGY]  int  escape  =  getEscapeChar();  if(escape  ==  0)  {  return  escape;  }  [CE]  cannot  find  symbol  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escape  =  getEscapeChar();  if(escape  ==  0)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escape  =  getEscapeChar();  if(escape  ==  0)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeChar();    if(escape!=    0)    {    return    escape;    }    	non-compiled	[CE]  cannot  find  symbol	236	None	replace
109	[BUG]  [BUGGY]  escape  =  getEscapeChar();  if(escape  ==  0)  {  return  escape;  }  [CE]  cannot  assign  a  value  to  final  variable  escape  [FE]                            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  escape  =  getEscapeChar();  if(escape  ==  0)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	escape  =  getEscapeChar();  if(escape  ==  0)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeChar();    if(escape!=    0)    {    return    escape;    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  escape	236	None	replace
110	[BUG]  [BUGGY]  escape  =  getEscapeChar();  if(escape  >=  0)  {  return  escape;  }  [CE]  cannot  assign  a  value  to  final  variable  escape  [FE]                              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  escape  =  getEscapeChar();  if(escape  >=  0)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	escape  =  getEscapeChar();  if(escape  >=  0)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeChar();    if(escape!=    0)    {    return    escape;    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  escape	236	None	replace
111	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  }  [CE]  missing  return  statement  [FE]                                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeChar();    if(escape!=    0)    {    return    escape;    }    	non-compiled	[CE]  missing  return  statement	236	None	replace
112	[BUG]  [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  return  BACKSPACE;  [CE]  duplicate  case  label  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  return  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  return  BACKSPACE;	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    return    BACKSPACE;    	non-compiled	[CE]  duplicate  case  label	345	None	replace
113	[BUG]  [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  [CE]  duplicate  case  label  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    return    BACKSPACE;    	non-compiled	[CE]  duplicate  case  label	345	None	replace
114	[BUG]  [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  return  c;  [CE]  duplicate  case  label  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  return  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  return  c;	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    return    BACKSPACE;    	non-compiled	[CE]  duplicate  case  label	345	None	replace
115	[BUG]  [BUGGY]  [FE]  IOException  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	result:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    return    BACKSPACE;    	compilable	  [FE]  IOException  	345	5	replace
116	[BUG]  [BUGGY]  result:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  [FE]  IOException  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    return    BACKSPACE;    	compilable	  [FE]  IOException  	345	5	replace
117	[BUG]  [BUGGY]  default:  return  BACKSPACE;  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  [CE]  duplicate  default  label  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  default:  return  BACKSPACE;  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	default:  return  BACKSPACE;  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    return    BACKSPACE;    	non-compiled	[CE]  duplicate  default  label	345	None	replace
118	[BUG]  [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  return  default;  [CE]  illegal  start  of  expression  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  return  default;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  return  default;	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    return    BACKSPACE;    	non-compiled	[CE]  illegal  start  of  expression	345	None	replace
119	[BUG]  [BUGGY]  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpaces().size();	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	179	None	replace
120	[BUG]  [BUGGY]  Integer  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  getSurroundingSpaces().size();	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	179	None	replace
121	[BUG]  [BUGGY]  c  =  getSurroundingSpaces().size();  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getSurroundingSpaces().size();	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	179	None	replace
122	[BUG]  [BUGGY]  while(c  <  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  [CE]  illegal  start  of  expression  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
123	[BUG]  [BUGGY]  while(c  <  END_OF_STREAM)  {  c  =  getSurroundingSpaces().size();  [CE]  illegal  start  of  expression  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  END_OF_STREAM)  {  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  END_OF_STREAM)  {  c  =  getSurroundingSpaces().size();	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  illegal  start  of  expression	179	None	replace
124	[BUG]  [BUGGY]  return  c  *  2;  c  *  2;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  *  2;  c  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    *    2;    c  *  2;	  	non-compiled	[CE]  not  a  statement	325	None	add
125	[BUG]  [BUGGY]  return  c  *  2;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  *  2;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    *    2;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	325	None	add
126	[BUG]  [BUGGY]  return  c  *  2;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  *  2;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    *    2;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	325	None	add
127	[BUG]  [BUGGY]  return  c  *  2;  int  c  *  2;  [CE]  ';'  expected  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  *  2;  int  c  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    *    2;    int  c  *  2;	  	non-compiled	[CE]  ';'  expected	325	None	add
128	[BUG]  [BUGGY]  return  c  *  2;  int  c  =  Integer.parseInt(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  *  2;  int  c  =  Integer.parseInt(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    *    2;    int  c  =  Integer.parseInt(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	325	None	add
129	[BUG]  [BUGGY]  return  c  *  2;  int  c  =  getSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  *  2;  int  c  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    *    2;    int  c  =  getSurroundingSpace(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	325	None	add
130	[BUG]  [BUGGY]  return  c  *  2;  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  *  2;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    *    2;    int  c  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	325	None	add
131	[BUG]  [BUGGY]  return  c  *  2;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  *  2;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    *    2;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	325	None	add
132	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace(end);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace(end);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace(end);	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	180	None	replace
133	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace(END_OF_STREAM);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace(END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace(END_OF_STREAM);	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	180	None	replace
134	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace(escape);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace(escape);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace(escape);	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	180	None	replace
135	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace(null);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace(null);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace(null);	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	180	None	replace
136	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace(entry);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace(entry);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace(entry);	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	180	None	replace
137	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace(end_of_STREAM);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace(end_of_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace(end_of_STREAM);	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	180	None	replace
138	[BUG]  [BUGGY]  return  CSVFormat.EXPR_STREAM;  [CE]  cannot  find  symbol  EXPR_STREAM  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.EXPR_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.EXPR_STREAM;	  return    CSVFormat.EXPR_RESULT;    	non-compiled	[CE]  cannot  find  symbol  EXPR_STREAM	133	None	replace
139	[BUG]  [BUGGY]  return  CSVFormat.EscapeSURroundingSpaces;  [CE]  cannot  find  symbol  EscapeSURroundingSpaces  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.EscapeSURroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.EscapeSURroundingSpaces;	  return    CSVFormat.EXPR_RESULT;    	non-compiled	[CE]  cannot  find  symbol  EscapeSURroundingSpaces	133	None	replace
140	[BUG]  [BUGGY]  return  CSVFormat.EMPTY;  [CE]  cannot  find  symbol  EMPTY  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.EMPTY;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.EMPTY;	  return    CSVFormat.EXPR_RESULT;    	non-compiled	[CE]  cannot  find  symbol  EMPTY	133	None	replace
141	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  2;  c  &  END_OF_STREAM  +  2;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  2;  c  &  END_OF_STREAM  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    +    2;    c  &  END_OF_STREAM  +  2;	  	non-compiled	[CE]  not  a  statement	271	None	add
142	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  2;  c  &  END_OF_STREAM  +  1;  [CE]  not  a  statement  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  2;  c  &  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    +    2;    c  &  END_OF_STREAM  +  1;	  	non-compiled	[CE]  not  a  statement	271	None	add
143	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  2;  return  c  &  END_OF_STREAM  +  2;  [CE]  unreachable  statement  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  2;  return  c  &  END_OF_STREAM  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    +    2;    return  c  &  END_OF_STREAM  +  2;	  	non-compiled	[CE]  unreachable  statement	271	None	add
144	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  2;  (c  &  END_OF_STREAM  +  2);  [CE]  not  a  statement  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  2;  (c  &  END_OF_STREAM  +  2);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    +    2;    (c  &  END_OF_STREAM  +  2);	  	non-compiled	[CE]  not  a  statement	271	None	add
145	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  2;  result  &  END_OF_STREAM  +  2;  [CE]  not  a  statement  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  2;  result  &  END_OF_STREAM  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    +    2;    result  &  END_OF_STREAM  +  2;	  	non-compiled	[CE]  not  a  statement	271	None	add
146	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  2;  (c  &  END_OF_STREAM  +  1);  [CE]  not  a  statement  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  2;  (c  &  END_OF_STREAM  +  1);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    +    2;    (c  &  END_OF_STREAM  +  1);	  	non-compiled	[CE]  not  a  statement	271	None	add
147	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  2;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  2;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    +    2;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	271	None	add
148	[BUG]  [BUGGY]  return  c  >>  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  incompatible  types  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >>  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >>  0?  END_OF_STREAM  :  END_OF_STREAM;	  return    c    >=    0?    c    :    END_OF_STREAM;    	non-compiled	[CE]  incompatible  types	142	None	replace
149	[BUG]  [BUGGY]  int  escape  =  readEscape(c,  END_OF_STREAM,  commmentStart);  [CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escape  =  readEscape(c,  END_OF_STREAM,  commmentStart);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escape  =  readEscape(c,  END_OF_STREAM,  commmentStart);	  return    escape;    int    escape    =    readEscape(c,    END_OF_STREAM);    	non-compiled	[CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;	235	None	replace
150	[BUG]  [BUGGY]  int  escape  =  readEscape(c,  END_OF_STREAM,  delimiter);  [CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escape  =  readEscape(c,  END_OF_STREAM,  delimiter);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escape  =  readEscape(c,  END_OF_STREAM,  delimiter);	  return    escape;    int    escape    =    readEscape(c,    END_OF_STREAM);    	non-compiled	[CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;	235	None	replace
151	[BUG]  [BUGGY]  int  escape  =  readEscape(c,  END_OF_STREAM,  DElimiter);  [CE]  cannot  find  symbol  DElimiter  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escape  =  readEscape(c,  END_OF_STREAM,  DElimiter);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escape  =  readEscape(c,  END_OF_STREAM,  DElimiter);	  return    escape;    int    escape    =    readEscape(c,    END_OF_STREAM);    	non-compiled	[CE]  cannot  find  symbol  DElimiter	235	None	replace
152	[BUG]  [BUGGY]  int  escape  =  readEscape(c,  END_OF_STREAM,  escapeChar);  [CE]  cannot  find  symbol  escapeChar  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escape  =  readEscape(c,  END_OF_STREAM,  escapeChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escape  =  readEscape(c,  END_OF_STREAM,  escapeChar);	  return    escape;    int    escape    =    readEscape(c,    END_OF_STREAM);    	non-compiled	[CE]  cannot  find  symbol  escapeChar	235	None	replace
153	[BUG]  [BUGGY]  escape  =  readEscape(c,  END_OF_STREAM,  commmentStart);  [CE]  cannot  assign  a  value  to  final  variable  escape  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  escape  =  readEscape(c,  END_OF_STREAM,  commmentStart);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	escape  =  readEscape(c,  END_OF_STREAM,  commmentStart);	  return    escape;    int    escape    =    readEscape(c,    END_OF_STREAM);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  escape	235	None	replace
154	[BUG]  [BUGGY]  int  escape  =  readEscape(c,  END_OF_STREAM,  false);  [CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;  [FE]                            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escape  =  readEscape(c,  END_OF_STREAM,  false);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escape  =  readEscape(c,  END_OF_STREAM,  false);	  return    escape;    int    escape    =    readEscape(c,    END_OF_STREAM);    	non-compiled	[CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;	235	None	replace
155	[BUG]  [BUGGY]  int  c  =  getEscapeChar();  return  c  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeChar();  return  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeChar();  return  c  +  1;	  return    c    +    2;    int    c    =    getEscapeChar();    return    c    +    2;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	353	None	replace
156	[BUG]  [BUGGY]  c  =  getEscapeChar();  return  c  +  1;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getEscapeChar();  return  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getEscapeChar();  return  c  +  1;	  return    c    +    2;    int    c    =    getEscapeChar();    return    c    +    2;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	353	None	replace
157	[BUG]  [BUGGY]  int  c  =  getEscapeChar();  return  c  +  2;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeChar();  return  c  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeChar();  return  c  +  2;	  return    c    +    2;    int    c    =    getEscapeChar();    return    c    +    2;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	353	None	replace
158	[BUG]  [BUGGY]  c  =  getEscapeChar();  return  c  +  2;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getEscapeChar();  return  c  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getEscapeChar();  return  c  +  2;	  return    c    +    2;    int    c    =    getEscapeChar();    return    c    +    2;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	353	None	replace
159	[BUG]  [BUGGY]  int  c  =  getEscapeChar();  return  c  +  3;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeChar();  return  c  +  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeChar();  return  c  +  3;	  return    c    +    2;    int    c    =    getEscapeChar();    return    c    +    2;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	353	None	replace
160	[BUG]  [BUGGY]  default:  return  BACKSPACE;  [CE]  duplicate  default  label  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  default:  return  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	default:  return  BACKSPACE;	  return    BACKSPACE;    case    END_OF_STREAM:    return    BACKSPACE;    	non-compiled	[CE]  duplicate  default  label	341	None	replace
161	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  }  [CE]  missing  return  statement  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  }	  return    BACKSPACE;    case    END_OF_STREAM:    return    BACKSPACE;    	non-compiled	[CE]  missing  return  statement	341	None	replace
162	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces(c);	  return    c    -    1;    int    c    =    getEscapeSurroundingSpaces(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	155	None	replace
163	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces(escape);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces(escape);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces(escape);	  return    c    -    1;    int    c    =    getEscapeSurroundingSpaces(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	155	None	replace
164	[BUG]  [BUGGY]  c  =  getEscapeSurroundingSpaces(c);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getEscapeSurroundingSpaces(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getEscapeSurroundingSpaces(c);	  return    c    -    1;    int    c    =    getEscapeSurroundingSpaces(c);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	155	None	replace
165	[BUG]  [BUGGY]  Integer  c  =  getEscapeSurroundingSpaces(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  getEscapeSurroundingSpaces(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  getEscapeSurroundingSpaces(c);	  return    c    -    1;    int    c    =    getEscapeSurroundingSpaces(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	155	None	replace
166	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces(null);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces(null);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces(null);	  return    c    -    1;    int    c    =    getEscapeSurroundingSpaces(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	155	None	replace
167	[BUG]  [BUGGY]  int  c  =  getSurroundingSpaces(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpaces(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpaces(c);	  return    c    -    1;    int    c    =    getEscapeSurroundingSpaces(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	155	None	replace
168	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces();	  return    c    >    0?    1    :    c;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	162	None	replace
169	[BUG]  [BUGGY]  Integer  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  getEscapeSurroundingSpaces();	  return    c    >    0?    1    :    c;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	162	None	replace
170	[BUG]  [BUGGY]  c  >  0?  1  :  c;  [CE]  not  a  statement  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  >  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  >  0?  1  :  c;	  return    c    >    0?    1    :    c;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  not  a  statement	162	None	replace
171	[BUG]  [BUGGY]  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpaces();	  return    c    >    0?    1    :    c;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	162	None	replace
172	[BUG]  [BUGGY]  (c  >  0?  1  :  END_OF_STREAM);  [CE]  not  a  statement  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  (c  >  0?  1  :  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	(c  >  0?  1  :  END_OF_STREAM);	  return    c    >    0?    1    :    c;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  not  a  statement	162	None	replace
173	[BUG]  [BUGGY]  return  c.floatValue();  [CE]  int  cannot  be  dereferenced  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c.floatValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c.floatValue();	  return    END_OF_STREAM.floatValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	110	None	replace
174	[BUG]  [BUGGY]  return  END_OF_STREAM.floatValue()  +  1;  [CE]  int  cannot  be  dereferenced  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.floatValue()  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.floatValue()  +  1;	  return    END_OF_STREAM.floatValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	110	None	replace
175	[BUG]  [BUGGY]  return  c,  END_OF_STREAM.floatValue();  [CE]  ';'  expected  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c,  END_OF_STREAM.floatValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c,  END_OF_STREAM.floatValue();	  return    END_OF_STREAM.floatValue();    	non-compiled	[CE]  ';'  expected	110	None	replace
176	[BUG]  [BUGGY]  return  END_OF_STREAM.floatValue()  *  2;  [CE]  int  cannot  be  dereferenced  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.floatValue()  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.floatValue()  *  2;	  return    END_OF_STREAM.floatValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	110	None	replace
177	[BUG]  [BUGGY]  return  END_OF_STREAM.floatValue()  +  2;  [CE]  int  cannot  be  dereferenced  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.floatValue()  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.floatValue()  +  2;	  return    END_OF_STREAM.floatValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	110	None	replace
178	[BUG]  [BUGGY]  return  c.length;  [CE]  int  cannot  be  dereferenced  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c.length;	  return    END_OF_STREAM.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	228	None	replace
179	[BUG]  [BUGGY]  return  c,  END_OF_STREAM.length;  [CE]  ';'  expected  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c,  END_OF_STREAM.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c,  END_OF_STREAM.length;	  return    END_OF_STREAM.length;    	non-compiled	[CE]  ';'  expected	228	None	replace
180	[BUG]  [BUGGY]  return  END_OF_STREAM.length  +  1;  [CE]  int  cannot  be  dereferenced  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.length  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.length  +  1;	  return    END_OF_STREAM.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	228	None	replace
181	[BUG]  [BUGGY]  return  END_OF_STREAM.length  -  1;  [CE]  int  cannot  be  dereferenced  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.length  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.length  -  1;	  return    END_OF_STREAM.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	228	None	replace
182	[BUG]  [BUGGY]  return  END_OF_STREAM.length();  [CE]  int  cannot  be  dereferenced  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.length();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.length();	  return    END_OF_STREAM.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	228	None	replace
183	[BUG]  [BUGGY]  null  c  =  getEscapeSurroundingSpaces();  [CE]  not  a  statement  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  null  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	null  c  =  getEscapeSurroundingSpaces();	  return    END_OF_STREAM;    Integer    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  not  a  statement	259	None	replace
184	[BUG]  [BUGGY]  default:  return  END_OF_STREAM;  Integer  c  =  getEscapeSurroundingSpaces();  [CE]  duplicate  default  label  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  default:  return  END_OF_STREAM;  Integer  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	default:  return  END_OF_STREAM;  Integer  c  =  getEscapeSurroundingSpaces();	  return    END_OF_STREAM;    Integer    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  duplicate  default  label	259	None	replace
185	[BUG]  [BUGGY]  c  =  getEscapeSurroundingSpaces();  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getEscapeSurroundingSpaces();	  return    END_OF_STREAM;    Integer    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	259	None	replace
186	[BUG]  [BUGGY]  default:  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [CE]  duplicate  default  label  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  default:  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	default:  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();	  return    END_OF_STREAM;    Integer    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  duplicate  default  label	259	None	replace
187	[BUG]  [BUGGY]  default:  return  END_OF_STREAM;  [CE]  duplicate  default  label  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  default:  return  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	default:  return  END_OF_STREAM;	  return    END_OF_STREAM;    Integer    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  duplicate  default  label	259	None	replace
188	[BUG]  [BUGGY]  int  c  =  Integer.parseInt(quoteChar);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  Integer.parseInt(quoteChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  Integer.parseInt(quoteChar);	  return    c    >    0?    c    :    END_OF_STREAM;    int    c    =    Integer.parseInt(quoteChar);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	314	None	replace
189	[BUG]  [BUGGY]  (char)c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  Integer.parseInt(quoteChar);  [CE]  not  a  statement  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  (char)c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  Integer.parseInt(quoteChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	(char)c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  Integer.parseInt(quoteChar);	  return    c    >    0?    c    :    END_OF_STREAM;    int    c    =    Integer.parseInt(quoteChar);    	non-compiled	[CE]  not  a  statement	314	None	replace
190	[BUG]  [BUGGY]  Integer  c  =  Integer.parseInt(quoteChar);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  Integer.parseInt(quoteChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  Integer.parseInt(quoteChar);	  return    c    >    0?    c    :    END_OF_STREAM;    int    c    =    Integer.parseInt(quoteChar);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	314	None	replace
191	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  DISABLED;  int  c  =  Integer.parseInt(quoteChar);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  DISABLED;  int  c  =  Integer.parseInt(quoteChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  END_OF_STREAM  :  DISABLED;  int  c  =  Integer.parseInt(quoteChar);	  return    c    >    0?    c    :    END_OF_STREAM;    int    c    =    Integer.parseInt(quoteChar);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	314	None	replace
192	[BUG]  [BUGGY]  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  Integer.parseInt(quoteChar);  [CE]  not  a  statement  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  Integer.parseInt(quoteChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  Integer.parseInt(quoteChar);	  return    c    >    0?    c    :    END_OF_STREAM;    int    c    =    Integer.parseInt(quoteChar);    	non-compiled	[CE]  not  a  statement	314	None	replace
193	[BUG]  [BUGGY]  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  not  a  statement  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  >  0?  END_OF_STREAM  :  END_OF_STREAM;	  return    c    >    0?    c    :    END_OF_STREAM;    int    c    =    Integer.parseInt(quoteChar);    	non-compiled	[CE]  not  a  statement	314	None	replace
194	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  /  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  /  3;	  return    c    -    3;    	compilable	  [FE]  (entry  2)  	119	5	replace
195	[BUG]  [BUGGY]  return  c  /  3;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  /  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  /  3;	  return    c    -    3;    	compilable	  [FE]  (entry  2)  	119	5	replace
196	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  5;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  -  5;	  return    c    -    3;    	compilable	  [FE]  (entry  2)  	119	5	replace
197	[BUG]  [BUGGY]  return  c  -  5;  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  5;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  5;	  return    c    -    3;    	compilable	  [FE]  (entry  2)  	119	5	replace
198	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException(   "   ");  }  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " ");  }  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException(   "   ");  }  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    else    {    throw    new    IOException(   "   ");    }    if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " ");  }	  	non-compiled	[CE]  unreachable  statement	203	None	add
199	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException(   "   ");  }  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " ");  }  }  [CE]  class,  interface,  or  enum  expected  [FE]      IOException    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException(   "   ");  }  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " ");  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    else    {    throw    new    IOException(   "   ");    }    if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " ");  }  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	203	None	add
200	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException(   "   ");  }  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( "  [CE]  unclosed  string  literal  [FE]        IOException    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException(   "   ");  }  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( "  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    else    {    throw    new    IOException(   "   ");    }    if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( "	  	non-compiled	[CE]  unclosed  string  literal	203	None	add
201	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException(   "   ");  }  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " ".);  }  }  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException(   "   ");  }  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " ".);  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    else    {    throw    new    IOException(   "   ");    }    if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " ".);  }  }	  	non-compiled	[CE]  <identifier>  expected	203	None	add
202	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException(   "   ");  }  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }  [CE]  unreachable  statement  [FE]            IOException    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException(   "   ");  }  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    else    {    throw    new    IOException(   "   ");    }    if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }	  	non-compiled	[CE]  unreachable  statement	203	None	add
203	[BUG]  [BUGGY]  return  c  <  0?  1  :  c;  c  >  0?  1  :  c;  [CE]  not  a  statement  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  c;  c  >  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  0?  1  :  c;  c  >  0?  1  :  c;	  return    c    >    0?    1    :    c;    c    >    0?    1    :    c;    	non-compiled	[CE]  not  a  statement	158	None	replace
204	[BUG]  [BUGGY]  return  c  >  0?  1;  c  >  0?  1  :  c;  [CE]  :  expected  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1;  c  >  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1;  c  >  0?  1  :  c;	  return    c    >    0?    1    :    c;    c    >    0?    1    :    c;    	non-compiled	[CE]  :  expected	158	None	replace
205	[BUG]  [BUGGY]  return  c  >  0?  1  :  c  +  1;  c  >  0?  1  :  c;  [CE]  not  a  statement  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c  +  1;  c  >  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  c  +  1;  c  >  0?  1  :  c;	  return    c    >    0?    1    :    c;    c    >    0?    1    :    c;    	non-compiled	[CE]  not  a  statement	158	None	replace
206	[BUG]  [BUGGY]  return  c  >  0?  1  :  c;  c  <  0?  1  :  c;  [CE]  illegal  start  of  type  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c;  c  <  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  c;  c  <  0?  1  :  c;	  return    c    >    0?    1    :    c;    c    >    0?    1    :    c;    	non-compiled	[CE]  illegal  start  of  type	158	None	replace
207	[BUG]  [BUGGY]  c  =  0;  c  >  0?  1  :  c;  [CE]  not  a  statement  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  0;  c  >  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  0;  c  >  0?  1  :  c;	  return    c    >    0?    1    :    c;    c    >    0?    1    :    c;    	non-compiled	[CE]  not  a  statement	158	None	replace
208	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  len;  ++c)  {  if(c  >  0?  1  :  c;  }  [CE]  ')'  expected  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  len;  ++c)  {  if(c  >  0?  1  :  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  len;  ++c)  {  if(c  >  0?  1  :  c;  }	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    len;    ++c)    {    if(c    >    0?    1    :    c;    }    	non-compiled	[CE]  ')'  expected	295	None	replace
209	[BUG]  [BUGGY]  if(c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(c  >  0?  1  :  c;  }  [CE]  ')'  expected  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(c  >  0?  1  :  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(c  >  0?  1  :  c;  }	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    len;    ++c)    {    if(c    >    0?    1    :    c;    }    	non-compiled	[CE]  ')'  expected	295	None	replace
210	[BUG]  [BUGGY]  if(len  <  2)  {  return  c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(c  >  0?  1  :  c;  }  [CE]  ')'  expected  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(len  <  2)  {  return  c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(c  >  0?  1  :  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(len  <  2)  {  return  c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(c  >  0?  1  :  c;  }	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    len;    ++c)    {    if(c    >    0?    1    :    c;    }    	non-compiled	[CE]  ')'  expected	295	None	replace
211	[BUG]  [BUGGY]  return  c  >  0?  1  :  c  +  1;  for(int  c  =  0;  c  <  len;  ++c)  {  if(c  >  0?  1  :  c;  }  [CE]  ')'  expected  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c  +  1;  for(int  c  =  0;  c  <  len;  ++c)  {  if(c  >  0?  1  :  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  c  +  1;  for(int  c  =  0;  c  <  len;  ++c)  {  if(c  >  0?  1  :  c;  }	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    len;    ++c)    {    if(c    >    0?    1    :    c;    }    	non-compiled	[CE]  ')'  expected	295	None	replace
212	[BUG]  [BUGGY]  if(len  >  0)  {  return  c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(c  >  0?  1  :  c;  }  }  [CE]  ')'  expected  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(len  >  0)  {  return  c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(c  >  0?  1  :  c;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(len  >  0)  {  return  c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(c  >  0?  1  :  c;  }  }	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    len;    ++c)    {    if(c    >    0?    1    :    c;    }    	non-compiled	[CE]  ')'  expected	295	None	replace
213	[BUG]  [BUGGY]  if(len  >  0)  {  return  c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(c  >  0?  1  :  c;  }  [CE]  ')'  expected  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(len  >  0)  {  return  c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(c  >  0?  1  :  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(len  >  0)  {  return  c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(c  >  0?  1  :  c;  }	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    len;    ++c)    {    if(c    >    0?    1    :    c;    }    	non-compiled	[CE]  ')'  expected	295	None	replace
214	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces();  return  c  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces();  return  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces();  return  c  +  1;	  return    c    +    1;    int    c    =    getEscapeSurroundingSpaces();    return    c    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	360	None	replace
215	[BUG]  [BUGGY]  c  =  getEscapeSurroundingSpaces();  return  c  +  1;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getEscapeSurroundingSpaces();  return  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getEscapeSurroundingSpaces();  return  c  +  1;	  return    c    +    1;    int    c    =    getEscapeSurroundingSpaces();    return    c    +    1;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	360	None	replace
216	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces();  return  c  +  2;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces();  return  c  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces();  return  c  +  2;	  return    c    +    1;    int    c    =    getEscapeSurroundingSpaces();    return    c    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	360	None	replace
217	[BUG]  [BUGGY]  c  +=  getEscapeSurroundingSpaces();  return  c  +  1;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  +=  getEscapeSurroundingSpaces();  return  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  +=  getEscapeSurroundingSpaces();  return  c  +  1;	  return    c    +    1;    int    c    =    getEscapeSurroundingSpaces();    return    c    +    1;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	360	None	replace
218	[BUG]  [BUGGY]  c  =  getEscapeSurroundingSpaces();  return  c  +  2;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getEscapeSurroundingSpaces();  return  c  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getEscapeSurroundingSpaces();  return  c  +  2;	  return    c    +    1;    int    c    =    getEscapeSurroundingSpaces();    return    c    +    1;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	360	None	replace
219	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces();  return  c  +  3;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces();  return  c  +  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces();  return  c  +  3;	  return    c    +    1;    int    c    =    getEscapeSurroundingSpaces();    return    c    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	360	None	replace
220	[BUG]  [BUGGY]  return  CSVFormat.START_OF_STREAM  ||  END_OF_STREAM;  [CE]  cannot  find  symbol  START_OF_STREAM  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.START_OF_STREAM  ||  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.START_OF_STREAM  ||  END_OF_STREAM;	  return    CSVFormat.START_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  START_OF_STREAM	5	None	replace
221	[BUG]  [BUGGY]  return  CSVFormat.START_OF_STREAM  +  1;  [CE]  cannot  find  symbol  START_OF_STREAM  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.START_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.START_OF_STREAM  +  1;	  return    CSVFormat.START_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  START_OF_STREAM	5	None	replace
222	[BUG]  [BUGGY]  return  CSVFormat.START_OF_STREAM  +  END_OF_STREAM;  [CE]  cannot  find  symbol  START_OF_STREAM  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.START_OF_STREAM  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.START_OF_STREAM  +  END_OF_STREAM;	  return    CSVFormat.START_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  START_OF_STREAM	5	None	replace
223	[BUG]  [BUGGY]  return  c.equals(END_OF_STREAM)?  END_OF_STREAM  :  END_OF_EscapeSequence;  [CE]  int  cannot  be  dereferenced  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c.equals(END_OF_STREAM)?  END_OF_STREAM  :  END_OF_EscapeSequence;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c.equals(END_OF_STREAM)?  END_OF_STREAM  :  END_OF_EscapeSequence;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_EscapeSequence;    	non-compiled	[CE]  int  cannot  be  dereferenced	368	None	replace
224	[BUG]  [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_EscapeSequence  :  END_OF_EscapeSequence;  [CE]  int  cannot  be  dereferenced  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_EscapeSequence  :  END_OF_EscapeSequence;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.equals(c)?  END_OF_EscapeSequence  :  END_OF_EscapeSequence;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_EscapeSequence;    	non-compiled	[CE]  int  cannot  be  dereferenced	368	None	replace
225	[BUG]  [BUGGY]  return  c.equals(END_OF_STREAM)?  END_OF_EscapeSequence  :  END_OF_EscapeSequence;  [CE]  int  cannot  be  dereferenced  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c.equals(END_OF_STREAM)?  END_OF_EscapeSequence  :  END_OF_EscapeSequence;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c.equals(END_OF_STREAM)?  END_OF_EscapeSequence  :  END_OF_EscapeSequence;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_EscapeSequence;    	non-compiled	[CE]  int  cannot  be  dereferenced	368	None	replace
226	[BUG]  [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_RECORD  :  END_OF_EscapeSequence;  [CE]  int  cannot  be  dereferenced  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_RECORD  :  END_OF_EscapeSequence;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.equals(c)?  END_OF_RECORD  :  END_OF_EscapeSequence;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_EscapeSequence;    	non-compiled	[CE]  int  cannot  be  dereferenced	368	None	replace
227	[BUG]  [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_SECTION  :  END_OF_EscapeSequence;  [CE]  int  cannot  be  dereferenced  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_SECTION  :  END_OF_EscapeSequence;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.equals(c)?  END_OF_SECTION  :  END_OF_EscapeSequence;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_EscapeSequence;    	non-compiled	[CE]  int  cannot  be  dereferenced	368	None	replace
228	[BUG]  [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_SECOND  :  END_OF_EscapeSequence;  [CE]  int  cannot  be  dereferenced  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_SECOND  :  END_OF_EscapeSequence;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.equals(c)?  END_OF_SECOND  :  END_OF_EscapeSequence;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_EscapeSequence;    	non-compiled	[CE]  int  cannot  be  dereferenced	368	None	replace
229	[BUG]  [BUGGY]  default:  return  BACKSPACE;  int  c  =  getEscapeSurroundingSpaces();  [CE]  duplicate  default  label  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  default:  return  BACKSPACE;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	default:  return  BACKSPACE;  int  c  =  getEscapeSurroundingSpaces();	  return    BACKSPACE;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  duplicate  default  label	167	None	replace
230	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces().length;	  return    BACKSPACE;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	167	None	replace
231	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces()  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces()  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces()  +  1;	  return    BACKSPACE;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	167	None	replace
232	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreEmptyLines?  0  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  this.ignoreEmptyLines?  0  :  END_OF_STREAM;	  return    this.encodeEscapeSurroundingSpaces?    0    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	121	5	replace
233	[BUG]  [BUGGY]  return  this.ignoreEmptyLines?  0  :  END_OF_STREAM;  [FE]  (entry  2)  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreEmptyLines?  0  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoreEmptyLines?  0  :  END_OF_STREAM;	  return    this.encodeEscapeSurroundingSpaces?    0    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	121	5	replace
234	[BUG]  [BUGGY]  return  c?  0  :  END_OF_STREAM;  [CE]  incompatible  types  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c?  0  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c?  0  :  END_OF_STREAM;	  return    this.encodeEscapeSurroundingSpaces?    0    :    END_OF_STREAM;    	non-compiled	[CE]  incompatible  types	121	None	replace
235	[BUG]  [BUGGY]  return  this.ignoredEmptyLines?  0  :  END_OF_STREAM;  [CE]  cannot  find  symbol  ignoredEmptyLines  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoredEmptyLines?  0  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoredEmptyLines?  0  :  END_OF_STREAM;	  return    this.encodeEscapeSurroundingSpaces?    0    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  ignoredEmptyLines	121	None	replace
236	[BUG]  [BUGGY]  return  END_OF_STREAM?  0  :  END_OF_STREAM;  [CE]  incompatible  types  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM?  0  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM?  0  :  END_OF_STREAM;	  return    this.encodeEscapeSurroundingSpaces?    0    :    END_OF_STREAM;    	non-compiled	[CE]  incompatible  types	121	None	replace
237	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  ignoreEmptyLines?  0  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  ignoreEmptyLines?  0  :  END_OF_STREAM;	  return    this.encodeEscapeSurroundingSpaces?    0    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	121	5	replace
238	[BUG]  [BUGGY]  return  ignoreEmptyLines?  0  :  END_OF_STREAM;  [FE]  (entry  2)  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  ignoreEmptyLines?  0  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  ignoreEmptyLines?  0  :  END_OF_STREAM;	  return    this.encodeEscapeSurroundingSpaces?    0    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	121	5	replace
239	[BUG]  [BUGGY]  default:  throw  new  EOFException( "EOF  whilst  processing  escape  sequence ");  [CE]  duplicate  default  label  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  default:  throw  new  EOFException( "EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	default:  throw  new  EOFException( "EOF  whilst  processing  escape  sequence ");	  return    END_OF_STREAM;    case    END_OF_STREAM:    throw    new    EOFException(   "EOF    whilst    processing    escape    sequence       ");    	non-compiled	[CE]  duplicate  default  label	298	None	replace
240	[BUG]  [BUGGY]  case  END_OF_STREAM:  throw  new  EOFException( "EOF  whilst  processing  escape  sequence ");  [CE]  duplicate  case  label  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  throw  new  EOFException( "EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  throw  new  EOFException( "EOF  whilst  processing  escape  sequence ");	  return    END_OF_STREAM;    case    END_OF_STREAM:    throw    new    EOFException(   "EOF    whilst    processing    escape    sequence       ");    	non-compiled	[CE]  duplicate  case  label	298	None	replace
241	[BUG]  [BUGGY]  result:  throw  new  EOFException( "EOF  whilst  processing  escape  sequence ");  [CE]  cannot  find  symbol  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result:  throw  new  EOFException( "EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result:  throw  new  EOFException( "EOF  whilst  processing  escape  sequence ");	  return    END_OF_STREAM;    case    END_OF_STREAM:    throw    new    EOFException(   "EOF    whilst    processing    escape    sequence       ");    	non-compiled	[CE]  cannot  find  symbol	298	None	replace
242	[BUG]  [BUGGY]  case  EOF:  throw  new  EOFException( "EOF  whilst  processing  escape  sequence ");  [CE]  cannot  find  symbol  EOF  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  EOF:  throw  new  EOFException( "EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  EOF:  throw  new  EOFException( "EOF  whilst  processing  escape  sequence ");	  return    END_OF_STREAM;    case    END_OF_STREAM:    throw    new    EOFException(   "EOF    whilst    processing    escape    sequence       ");    	non-compiled	[CE]  cannot  find  symbol  EOF	298	None	replace
243	[BUG]  [BUGGY]  case  END_OF_STREAM:  throw  new  EOFException( "EOF  whilst  processing  escape  sequence. ");  [CE]  duplicate  case  label  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  throw  new  EOFException( "EOF  whilst  processing  escape  sequence. ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  throw  new  EOFException( "EOF  whilst  processing  escape  sequence. ");	  return    END_OF_STREAM;    case    END_OF_STREAM:    throw    new    EOFException(   "EOF    whilst    processing    escape    sequence       ");    	non-compiled	[CE]  duplicate  case  label	298	None	replace
244	[BUG]  [BUGGY]  case  END_OF_STREAM:  throw  new  EOFException( "EOF  while  processing  escape  sequence ");  [CE]  duplicate  case  label  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  throw  new  EOFException( "EOF  while  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  throw  new  EOFException( "EOF  while  processing  escape  sequence ");	  return    END_OF_STREAM;    case    END_OF_STREAM:    throw    new    EOFException(   "EOF    whilst    processing    escape    sequence       ");    	non-compiled	[CE]  duplicate  case  label	298	None	replace
245	[BUG]  [BUGGY]  return  escapeSurroundingSpaces.intValue();  [CE]  cannot  find  symbol  escapeSurroundingSpaces  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  escapeSurroundingSpaces.intValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  escapeSurroundingSpaces.intValue();	  return    escape.intValue();    	non-compiled	[CE]  cannot  find  symbol  escapeSurroundingSpaces	242	None	replace
246	[BUG]  [BUGGY]  return  escape.intValue()  +  1;  [CE]  char  cannot  be  dereferenced  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  escape.intValue()  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  escape.intValue()  +  1;	  return    escape.intValue();    	non-compiled	[CE]  char  cannot  be  dereferenced	242	None	replace
247	[BUG]  [BUGGY]  return  delimiter.intValue();  [CE]  char  cannot  be  dereferenced  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  delimiter.intValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  delimiter.intValue();	  return    escape.intValue();    	non-compiled	[CE]  char  cannot  be  dereferenced	242	None	replace
248	[BUG]  [BUGGY]  return  this.escape.intValue();  [CE]  char  cannot  be  dereferenced  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.escape.intValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.escape.intValue();	  return    escape.intValue();    	non-compiled	[CE]  char  cannot  be  dereferenced	242	None	replace
249	[BUG]  [BUGGY]  return  c  &  BACKSPACE;  Record  do  not  match  expected  result(c)  [CE]  not  a  statement  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE;  Record  do  not  match  expected  result(c)  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  BACKSPACE;  Record  do  not  match  expected  result(c)	  return    c    &    END_OF_STREAM;    Record    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	196	None	replace
250	[BUG]  [BUGGY]  return  expected  result(c)&  END_OF_STREAM;  [CE]  ';'  expected  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  expected  result(c)&  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  expected  result(c)&  END_OF_STREAM;	  return    c    &    END_OF_STREAM;    Record    do    not    match    expected    result(c)    	non-compiled	[CE]  ';'  expected	196	None	replace
251	[BUG]  [BUGGY]  return  c  -  END_OF_STREAM;  Record  do  not  match  expected  result(c)  [CE]  not  a  statement  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM;  Record  do  not  match  expected  result(c)  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  END_OF_STREAM;  Record  do  not  match  expected  result(c)	  return    c    &    END_OF_STREAM;    Record    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	196	None	replace
252	[BUG]  [BUGGY]  Record  do  not  match  expected  result(c)  [CE]  not  a  statement  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Record  do  not  match  expected  result(c)  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Record  do  not  match  expected  result(c)	  return    c    &    END_OF_STREAM;    Record    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	196	None	replace
253	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  END_OF_STREAM  +  c;  [CE]  duplicate  case  label  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  END_OF_STREAM  +  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  END_OF_STREAM  +  c;	  return    END_OF_STREAM    +    c;    case    END_OF_STREAM:    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  duplicate  case  label	338	None	replace
254	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  END_OF_STREAM  +  1;  [CE]  duplicate  case  label  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  END_OF_STREAM  +  1;	  return    END_OF_STREAM    +    c;    case    END_OF_STREAM:    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  duplicate  case  label	338	None	replace
255	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result:  return  END_OF_STREAM  +  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	result:  return  END_OF_STREAM  +  c;	  return    END_OF_STREAM    +    c;    case    END_OF_STREAM:    return    END_OF_STREAM    +    c;    	compilable	  [FE]  (entry  2)  	338	5	replace
256	[BUG]  [BUGGY]  result:  return  END_OF_STREAM  +  c;  [FE]  (entry  2)  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result:  return  END_OF_STREAM  +  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result:  return  END_OF_STREAM  +  c;	  return    END_OF_STREAM    +    c;    case    END_OF_STREAM:    return    END_OF_STREAM    +    c;    	compilable	  [FE]  (entry  2)  	338	5	replace
257	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  c  +  END_OF_STREAM;  [CE]  duplicate  case  label  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  c  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  c  +  END_OF_STREAM;	  return    END_OF_STREAM    +    c;    case    END_OF_STREAM:    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  duplicate  case  label	338	None	replace
258	[BUG]  [BUGGY]  return  this.ignoreEmptyLines  &&  this.ignoreSurroundingSpaces;  [CE]  incompatible  types  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreEmptyLines  &&  this.ignoreSurroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoreEmptyLines  &&  this.ignoreSurroundingSpaces;	  return    this.ignoreEmptyLines;    	non-compiled	[CE]  incompatible  types	145	None	replace
259	[BUG]  [BUGGY]  return  this.ignoreEmptyLines?  0  :  this.ignoreEmptyLines;  [CE]  incompatible  types  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreEmptyLines?  0  :  this.ignoreEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoreEmptyLines?  0  :  this.ignoreEmptyLines;	  return    this.ignoreEmptyLines;    	non-compiled	[CE]  incompatible  types	145	None	replace
260	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreEmptyLines?  1  :  0;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  this.ignoreEmptyLines?  1  :  0;	  return    this.ignoreEmptyLines;    	compilable	  [FE]  (entry  2)  	145	5	replace
261	[BUG]  [BUGGY]  return  this.ignoreEmptyLines?  1  :  0;  [FE]  (entry  2)  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreEmptyLines?  1  :  0;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoreEmptyLines?  1  :  0;	  return    this.ignoreEmptyLines;    	compilable	  [FE]  (entry  2)  	145	5	replace
262	[BUG]  [BUGGY]  return  this.ignoreEmptyLines  ||  this.ignoreSurroundingSpaces;  [CE]  incompatible  types  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreEmptyLines  ||  this.ignoreSurroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoreEmptyLines  ||  this.ignoreSurroundingSpaces;	  return    this.ignoreEmptyLines;    	non-compiled	[CE]  incompatible  types	145	None	replace
263	[BUG]  [BUGGY]  return  ignoreEmptyLines;  [CE]  incompatible  types  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  ignoreEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  ignoreEmptyLines;	  return    this.ignoreEmptyLines;    	non-compiled	[CE]  incompatible  types	145	None	replace
264	[BUG]  [BUGGY]  return  c  ==  0?  1  :  c;  c  ==  0?  1  :  c;  [CE]  not  a  statement  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  c;  c  ==  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    1    :    c;    c  ==  0?  1  :  c;	  	non-compiled	[CE]  not  a  statement	254	None	add
265	[BUG]  [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    1    :    c;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	254	None	add
266	[BUG]  [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    1    :    c;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	254	None	add
267	[BUG]  [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    1    :    c;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	254	None	add
268	[BUG]  [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  getCurrentSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    1    :    c;    int  c  =  getCurrentSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	254	None	add
269	[BUG]  [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    1    :    c;    int  c  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	254	None	add
270	[BUG]  [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  getSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    1    :    c;    int  c  =  getSurroundingSpace(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	254	None	add
271	[BUG]  [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  getCurrentSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  getCurrentSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    1    :    c;    int  c  =  getCurrentSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	254	None	add
272	[BUG]  [BUGGY]  return  c  ||  END_OF_STREAM.equals(END_OF_STREAM);  [CE]  int  cannot  be  dereferenced  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ||  END_OF_STREAM.equals(END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ||  END_OF_STREAM.equals(END_OF_STREAM);	  return    END_OF_STREAM    ||    END_OF_STREAM.equals(c);    	non-compiled	[CE]  int  cannot  be  dereferenced	356	None	replace
273	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_SCRIPT.equals(c);  [CE]  cannot  find  symbol  END_OF_SCRIPT  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_SCRIPT.equals(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_SCRIPT.equals(c);	  return    END_OF_STREAM    ||    END_OF_STREAM.equals(c);    	non-compiled	[CE]  cannot  find  symbol  END_OF_SCRIPT	356	None	replace
274	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  c.equals(END_OF_STREAM);  [CE]  int  cannot  be  dereferenced  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  c.equals(END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  c.equals(END_OF_STREAM);	  return    END_OF_STREAM    ||    END_OF_STREAM.equals(c);    	non-compiled	[CE]  int  cannot  be  dereferenced	356	None	replace
275	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM.equals(c));  [CE]  ';'  expected  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM.equals(c));  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_STREAM.equals(c));	  return    END_OF_STREAM    ||    END_OF_STREAM.equals(c);    	non-compiled	[CE]  ';'  expected	356	None	replace
276	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_SPACE.equals(c);  [CE]  cannot  find  symbol  END_OF_SPACE  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_SPACE.equals(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_SPACE.equals(c);	  return    END_OF_STREAM    ||    END_OF_STREAM.equals(c);    	non-compiled	[CE]  cannot  find  symbol  END_OF_SPACE	356	None	replace
277	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_LINE.equals(c);  [CE]  cannot  find  symbol  END_OF_LINE  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_LINE.equals(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_LINE.equals(c);	  return    END_OF_STREAM    ||    END_OF_STREAM.equals(c);    	non-compiled	[CE]  cannot  find  symbol  END_OF_LINE	356	None	replace
278	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpace();	  return    c    &    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpace();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	197	None	replace
279	[BUG]  [BUGGY]  Integer  c  =  getEscapeSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  getEscapeSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  getEscapeSurroundingSpace();	  return    c    &    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpace();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	197	None	replace
280	[BUG]  [BUGGY]  c  =  getEscapeSurroundingSpace();  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getEscapeSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getEscapeSurroundingSpace();	  return    c    &    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpace();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	197	None	replace
281	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace();	  return    c    &    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpace();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	197	None	replace
282	[BUG]  [BUGGY]  return  c  +  12;  c  +  12;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  12;  c  +  12;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    12;    c  +  12;	  	non-compiled	[CE]  not  a  statement	248	None	add
283	[BUG]  [BUGGY]  return  c  +  12;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  12;  int  c  =  in.read();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    12;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	248	None	add
284	[BUG]  [BUGGY]  return  c  +  12;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  12;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    12;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	248	None	add
285	[BUG]  [BUGGY]  return  c  +  12;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  12;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    12;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	248	None	add
286	[BUG]  [BUGGY]  return  c  +  12;  int  c  +  12;  [CE]  ';'  expected  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  12;  int  c  +  12;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    12;    int  c  +  12;	  	non-compiled	[CE]  ';'  expected	248	None	add
287	[BUG]  [BUGGY]  return  c  +  12;  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  12;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    12;    int  c  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	248	None	add
288	[BUG]  [BUGGY]  return  c  +  12;  int  c  =  getSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  12;  int  c  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    12;    int  c  =  getSurroundingSpace(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	248	None	add
289	[BUG]  [BUGGY]  return  c  +  12;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  12;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    12;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	248	None	add
290	[BUG]  [BUGGY]  return  this.ignoreEmptyLines?  END_OF_STREAM  :  END_BACKSPACE;  [CE]  cannot  find  symbol  END_BACKSPACE  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreEmptyLines?  END_OF_STREAM  :  END_BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoreEmptyLines?  END_OF_STREAM  :  END_BACKSPACE;	  return    this.encodeEscapeSurroundingSpaces?    END_OF_STREAM    :    END_BACKSPACE;    	non-compiled	[CE]  cannot  find  symbol  END_BACKSPACE	123	None	replace
291	[BUG]  [BUGGY]  return  this.ignoredEmptyLines?  END_OF_STREAM  :  END_BACKSPACE;  [CE]  cannot  find  symbol  ignoredEmptyLines  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoredEmptyLines?  END_OF_STREAM  :  END_BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoredEmptyLines?  END_OF_STREAM  :  END_BACKSPACE;	  return    this.encodeEscapeSurroundingSpaces?    END_OF_STREAM    :    END_BACKSPACE;    	non-compiled	[CE]  cannot  find  symbol  ignoredEmptyLines	123	None	replace
292	[BUG]  [BUGGY]  return  c?  END_OF_STREAM  :  END_BACKSPACE;  [CE]  incompatible  types  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c?  END_OF_STREAM  :  END_BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c?  END_OF_STREAM  :  END_BACKSPACE;	  return    this.encodeEscapeSurroundingSpaces?    END_OF_STREAM    :    END_BACKSPACE;    	non-compiled	[CE]  incompatible  types	123	None	replace
293	[BUG]  [BUGGY]  return  this.ignoredSurroundingSpaces?  END_OF_STREAM  :  END_BACKSPACE;  [CE]  cannot  find  symbol  ignoredSurroundingSpaces  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoredSurroundingSpaces?  END_OF_STREAM  :  END_BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoredSurroundingSpaces?  END_OF_STREAM  :  END_BACKSPACE;	  return    this.encodeEscapeSurroundingSpaces?    END_OF_STREAM    :    END_BACKSPACE;    	non-compiled	[CE]  cannot  find  symbol  ignoredSurroundingSpaces	123	None	replace
294	[BUG]  [BUGGY]  result  =  END_OF_STREAM  +  1;  [CE]  cannot  find  symbol  result  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result  =  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result  =  END_OF_STREAM  +  1;	  return    END_OF_STREAM    +    1;    return    END_OF_STREAM    +    1;    	non-compiled	[CE]  cannot  find  symbol  result	174	None	replace
295	[BUG]  [BUGGY]  while(c  <  =  END_OF_STREAM)  {  return  c  +  2;  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  =  END_OF_STREAM)  {  return  c  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  =  END_OF_STREAM)  {  return  c  +  2;	  return    c    +    2;    int    c    =    getEscapeChar();    return    c    +    1;    	non-compiled	[CE]  illegal  start  of  expression	354	None	replace
296	[BUG]  [BUGGY]  while(c  <  =  END_OF_STREAM)  {  return  c  +  1;  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  =  END_OF_STREAM)  {  return  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  =  END_OF_STREAM)  {  return  c  +  1;	  return    c    +    1;    int    c    =    getEscapeChar();    return    c    +    1;    	non-compiled	[CE]  illegal  start  of  expression	361	None	replace
297	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace();  return  c  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace();  return  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace();  return  c  +  1;	  return    c    +    1;    int    c    =    getEscapeChar();    return    c    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	361	None	replace
298	[BUG]  [BUGGY]  int  c  =  getCurrentSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getCurrentSurroundingSpace();	  return    BACKSPACE;    int    c    =    getCurrentSurroundingSpace();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	173	None	replace
299	[BUG]  [BUGGY]  c  =  getCurrentSurroundingSpace();  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getCurrentSurroundingSpace();	  return    BACKSPACE;    int    c    =    getCurrentSurroundingSpace();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	173	None	replace
300	[BUG]  [BUGGY]  null  c  =  getCurrentSurroundingSpace();  [CE]  not  a  statement  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  null  c  =  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	null  c  =  getCurrentSurroundingSpace();	  return    BACKSPACE;    int    c    =    getCurrentSurroundingSpace();    	non-compiled	[CE]  not  a  statement	173	None	replace
301	[BUG]  [BUGGY]  while(c  <  getCurrentSurroundingSpace())  {  c  =  getCurrentSurroundingSpace();  [CE]  illegal  start  of  expression  [FE]                            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  getCurrentSurroundingSpace())  {  c  =  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  getCurrentSurroundingSpace())  {  c  =  getCurrentSurroundingSpace();	  return    BACKSPACE;    int    c    =    getCurrentSurroundingSpace();    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
302	[BUG]  [BUGGY]  int  c  =  getCurrentSurroundingSpace()  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getCurrentSurroundingSpace()  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getCurrentSurroundingSpace()  +  1;	  return    BACKSPACE;    int    c    =    getCurrentSurroundingSpace();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	173	None	replace
303	[BUG]  [BUGGY]  int  c  =  getCurrentSurroundingSpace().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getCurrentSurroundingSpace().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getCurrentSurroundingSpace().length;	  return    BACKSPACE;    int    c    =    getCurrentSurroundingSpace();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	173	None	replace
304	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  commmentStart);  [CE]  cannot  find  symbol  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  commmentStart);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(c,  commmentStart);	  int    delimiter    =    readEscapeSurroundingSpaces(c);    	non-compiled	[CE]  cannot  find  symbol	286	None	replace
305	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(commmentStart,  c);  [CE]  cannot  find  symbol  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(commmentStart,  c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(commmentStart,  c);	  int    delimiter    =    readEscapeSurroundingSpaces(c);    	non-compiled	[CE]  cannot  find  symbol	286	None	replace
306	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(escape);  [CE]  cannot  find  symbol  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(escape);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(escape);	  int    delimiter    =    readEscapeSurroundingSpaces(c);    	non-compiled	[CE]  cannot  find  symbol	286	None	replace
307	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  quoteChar);  [CE]  cannot  find  symbol  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  quoteChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(c,  quoteChar);	  int    delimiter    =    readEscapeSurroundingSpaces(c);    	non-compiled	[CE]  cannot  find  symbol	286	None	replace
308	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(in,  c);  [CE]  cannot  find  symbol  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(in,  c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(in,  c);	  int    delimiter    =    readEscapeSurroundingSpaces(c);    	non-compiled	[CE]  cannot  find  symbol	286	None	replace
309	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(escapeChar,  c);  [CE]  cannot  find  symbol  escapeChar  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(escapeChar,  c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(escapeChar,  c);	  int    delimiter    =    readEscapeSurroundingSpaces(c);    	non-compiled	[CE]  cannot  find  symbol  escapeChar	286	None	replace
310	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  END_OF_STREAM);  [CE]  cannot  find  symbol  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(c,  END_OF_STREAM);	  int    delimiter    =    readEscapeSurroundingSpaces(c);    	non-compiled	[CE]  cannot  find  symbol	286	None	replace
311	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  /  8;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  /  8;	  return    c    -    8;    	compilable	  [FE]  (entry  2)  	218	5	replace
312	[BUG]  [BUGGY]  return  c  /  8;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  /  8;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  /  8;	  return    c    -    8;    	compilable	  [FE]  (entry  2)  	218	5	replace
313	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  com  [CE]  ';'  expected  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  com  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  com	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
314	[BUG]  [BUGGY]  if(in.readLine())  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in.readLine())  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in.readLine())  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
315	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
316	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  in;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  com  [CE]  ';'  expected  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  in;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  com  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  in;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  com	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
317	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  comenceStart;  }  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  comenceStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  comenceStart;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
318	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
319	[BUG]  [BUGGY]  if(in.readLine())  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  com  [CE]  ';'  expected  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in.readLine())  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  com  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in.readLine())  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  com	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
320	[BUG]  [BUGGY]  return  c  &  BACKSPACE;  Collections.sort(c);  [CE]  cannot  find  symbol  Collections  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE;  Collections.sort(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  BACKSPACE;  Collections.sort(c);	  return    c    &    END_OF_STREAM;    Collections.sort(c);    	non-compiled	[CE]  cannot  find  symbol  Collections	322	None	replace
321	[BUG]  [BUGGY]  return  c  -  END_OF_STREAM;  Collections.sort(c);  [CE]  cannot  find  symbol  Collections  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM;  Collections.sort(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  END_OF_STREAM;  Collections.sort(c);	  return    c    &    END_OF_STREAM;    Collections.sort(c);    	non-compiled	[CE]  cannot  find  symbol  Collections	322	None	replace
322	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  1;  Collections.sort(c);  [CE]  cannot  find  symbol  Collections  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  1;  Collections.sort(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  END_OF_STREAM  +  1;  Collections.sort(c);	  return    c    &    END_OF_STREAM;    Collections.sort(c);    	non-compiled	[CE]  cannot  find  symbol  Collections	322	None	replace
323	[BUG]  [BUGGY]  return  END_OF_STREAM  +  'n';  return  END_OF_STREAM  +  'n';  [CE]  unreachable  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  'n';  return  END_OF_STREAM  +  'n';  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    'n';    return  END_OF_STREAM  +  'n';	  	non-compiled	[CE]  unreachable  statement	281	None	add
324	[BUG]  [BUGGY]  return  END_OF_STREAM  +  'n';  int  n  =  Integer.parseInt(c);  [CE]  no  suitable  method  found  for  parseInt(int)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  'n';  int  n  =  Integer.parseInt(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    'n';    int  n  =  Integer.parseInt(c);	  	non-compiled	[CE]  no  suitable  method  found  for  parseInt(int)	281	None	add
325	[BUG]  [BUGGY]  return  END_OF_STREAM  +  'n';  int  n  =  getSurroundingSpaces();  [CE]  cannot  find  symbol  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  'n';  int  n  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    'n';    int  n  =  getSurroundingSpaces();	  	non-compiled	[CE]  cannot  find  symbol	281	None	add
326	[BUG]  [BUGGY]  return  END_OF_STREAM  +  'n';  int  n  =  getEscapeSurroundingSpaces();  [CE]  cannot  find  symbol  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  'n';  int  n  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    'n';    int  n  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  cannot  find  symbol	281	None	add
327	[BUG]  [BUGGY]  return  END_OF_STREAM  +  'n';  int  n  =  getSurroundingSpaces().length;  [CE]  cannot  find  symbol  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  'n';  int  n  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    'n';    int  n  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  cannot  find  symbol	281	None	add
328	[BUG]  [BUGGY]  return  END_OF_STREAM  +  'n';  int  n  =  getSurroundingSpaces().size();  [CE]  cannot  find  symbol  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  'n';  int  n  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    'n';    int  n  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  cannot  find  symbol	281	None	add
329	[BUG]  [BUGGY]  return  END_OF_STREAM  +  'n';  int  n  =  getEscapeSurroundingSpaces().length;  [CE]  cannot  find  symbol  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  'n';  int  n  =  getEscapeSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    'n';    int  n  =  getEscapeSurroundingSpaces().length;	  	non-compiled	[CE]  cannot  find  symbol	281	None	add
330	[BUG]  [BUGGY]  return  END_OF_STREAM  +  'n';  int  n  =  getSurroundingSpace(c);  [CE]  cannot  find  symbol  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  'n';  int  n  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    'n';    int  n  =  getSurroundingSpace(c);	  	non-compiled	[CE]  cannot  find  symbol	281	None	add
331	[BUG]  [BUGGY]  Integer  c  =  getCurrentSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  getCurrentSurroundingSpace();	  return    END_OF_STREAM    +    1;    int    c    =    getCurrentSurroundingSpace();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	192	None	replace
332	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  int  c  =  getCurrentSurroundingSpace();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  int  c  =  getCurrentSurroundingSpace();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  int  c  =  getCurrentSurroundingSpace();  }	  return    END_OF_STREAM    +    1;    int    c    =    getCurrentSurroundingSpace();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	192	None	replace
333	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  int  c  =  getCurrentSurroundingSpace();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  int  c  =  getCurrentSurroundingSpace();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  int  c  =  getCurrentSurroundingSpace();  }	  return    END_OF_STREAM    +    1;    int    c    =    getCurrentSurroundingSpace();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	192	None	replace
334	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  return  getCurrentSurroundingSpace();  }  [CE]  cannot  find  symbol  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  return  getCurrentSurroundingSpace();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  return  getCurrentSurroundingSpace();  }	  return    END_OF_STREAM    +    1;    int    c    =    getCurrentSurroundingSpace();    	non-compiled	[CE]  cannot  find  symbol	192	None	replace
335	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace(c);	  return    c    +    1;    int    c    =    getSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	33	None	replace
336	[BUG]  [BUGGY]  c  =  getSurroundingSpace(c);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getSurroundingSpace(c);	  return    c    +    1;    int    c    =    getSurroundingSpace(c);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	33	None	replace
337	[BUG]  [BUGGY]  Integer  c  =  getSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  getSurroundingSpace(c);	  return    c    +    1;    int    c    =    getSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	33	None	replace
338	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace(separator);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace(separator);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace(separator);	  return    c    +    1;    int    c    =    getSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	33	None	replace
339	[BUG]  [BUGGY]  c  +=  1;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  +=  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  +=  1;	  return    c    +    1;    c    +    1;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	30	None	replace
340	[BUG]  [BUGGY]  return  c  +  1;  c  +  2;  [CE]  not  a  statement  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  1;  c  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  1;  c  +  2;	  return    c    +    1;    c    +    1;    	non-compiled	[CE]  not  a  statement	30	None	replace
341	[BUG]  [BUGGY]  return  c  +  1;  c  +=  2;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  1;  c  +=  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  1;  c  +=  2;	  return    c    +    1;    c    +    1;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	30	None	replace
342	[BUG]  [BUGGY]  return  c  +  2;  c  +  1;  [CE]  not  a  statement  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  2;  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  2;  c  +  1;	  return    c    +    1;    c    +    1;    	non-compiled	[CE]  not  a  statement	30	None	replace
343	[BUG]  [BUGGY]  return  this.ignoreSurroundingSpaces  &&  this.ignoreEmptyLines;  [CE]  incompatible  types  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreSurroundingSpaces  &&  this.ignoreEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoreSurroundingSpaces  &&  this.ignoreEmptyLines;	  return    this.ignoreSurroundingSpaces;    	non-compiled	[CE]  incompatible  types	149	None	replace
344	[BUG]  [BUGGY]  return  this.ignoreSurroundingSpaces  ||  this.ignoreEmptyLines;  [CE]  incompatible  types  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreSurroundingSpaces  ||  this.ignoreEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoreSurroundingSpaces  ||  this.ignoreEmptyLines;	  return    this.ignoreSurroundingSpaces;    	non-compiled	[CE]  incompatible  types	149	None	replace
345	[BUG]  [BUGGY]  [FE]  Records  do  not  match  expected  result  (entry  8)  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreSurroundingSpaces?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  this.ignoreSurroundingSpaces?  1  :  c;	  return    this.ignoreSurroundingSpaces;    	compilable	  [FE]  Records  do  not  match  expected  result  (entry  8)  	149	3	replace
346	[BUG]  [BUGGY]  return  this.ignoreSurroundingSpaces?  1  :  c;  [FE]  Records  do  not  match  expected  result  (entry  8)  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreSurroundingSpaces?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoreSurroundingSpaces?  1  :  c;	  return    this.ignoreSurroundingSpaces;    	compilable	  [FE]  Records  do  not  match  expected  result  (entry  8)  	149	3	replace
347	[BUG]  [BUGGY]  return  this.ignoreSurroundingSpaces?  0  :  this.ignoreEmptyLines;  [CE]  incompatible  types  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreSurroundingSpaces?  0  :  this.ignoreEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoreSurroundingSpaces?  0  :  this.ignoreEmptyLines;	  return    this.ignoreSurroundingSpaces;    	non-compiled	[CE]  incompatible  types	149	None	replace
348	[BUG]  [BUGGY]  return  in.ignoreSurroundingSpaces;  [CE]  cannot  find  symbol  ignoreSurroundingSpaces  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  in.ignoreSurroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  in.ignoreSurroundingSpaces;	  return    this.ignoreSurroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  ignoreSurroundingSpaces	149	None	replace
349	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }  }  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	336	None	replace
350	[BUG]  [BUGGY]  if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	336	None	replace
351	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  in.read();  }  }  [CE]  illegal  start  of  expression  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  in.read();  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  in.read();  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	336	None	replace
352	[BUG]  [BUGGY]  if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  in.read();  }  }  [CE]  illegal  start  of  expression  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  in.read();  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  in.read();  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	336	None	replace
353	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }  [CE]  illegal  start  of  expression  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	336	None	replace
354	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  in.read();  }  }  [CE]  illegal  start  of  expression  [FE]                            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  in.read();  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  in.read();  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	336	None	replace
355	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read  [CE]  ';'  expected  [FE]                              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    in.read();    }    	non-compiled	[CE]  ';'  expected	336	None	replace
356	[BUG]  [BUGGY]  return  c  -  8;  c  -  8;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  8;  c  -  8;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    8;    c  -  8;	  	non-compiled	[CE]  not  a  statement	217	None	add
357	[BUG]  [BUGGY]  return  c  -  8;  int  c  -  8;  [CE]  ';'  expected  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  8;  int  c  -  8;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    8;    int  c  -  8;	  	non-compiled	[CE]  ';'  expected	217	None	add
358	[BUG]  [BUGGY]  return  c  -  8;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  8;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    8;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	217	None	add
359	[BUG]  [BUGGY]  return  c  -  8;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  8;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    8;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	217	None	add
360	[BUG]  [BUGGY]  return  c  -  8;  int  c  =  Integer.parseInt(quoteChar);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  8;  int  c  =  Integer.parseInt(quoteChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    8;    int  c  =  Integer.parseInt(quoteChar);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	217	None	add
361	[BUG]  [BUGGY]  return  c  -  8;  int  c  =  Integer.parseInt(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  8;  int  c  =  Integer.parseInt(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    8;    int  c  =  Integer.parseInt(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	217	None	add
362	[BUG]  [BUGGY]  return  c  -  8;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  8;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    8;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	217	None	add
363	[BUG]  [BUGGY]  return  c  -  8;  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  8;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    8;    int  c  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	217	None	add
364	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace(end_OF_STREAM);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace(end_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace(end_OF_STREAM);	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	14	None	replace
365	[BUG]  [BUGGY]  char  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  char  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	char  c  =  getSurroundingSpaces().size();	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	13	None	replace
366	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(END_OF_STREAM!=  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(END_OF_STREAM!=  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }	  return    END_OF_STREAM;    result    =    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	126	3	replace
367	[BUG]  [BUGGY]  if(END_OF_STREAM!=  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }  [FE]  (entry  2)  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(END_OF_STREAM!=  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(END_OF_STREAM!=  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }	  return    END_OF_STREAM;    result    =    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	126	3	replace
368	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(END_OF_STREAM  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(END_OF_STREAM  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }	  return    END_OF_STREAM;    result    =    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	126	3	replace
369	[BUG]  [BUGGY]  if(END_OF_STREAM  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }  [FE]  (entry  2)  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(END_OF_STREAM  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(END_OF_STREAM  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }	  return    END_OF_STREAM;    result    =    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	126	3	replace
370	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }	  return    END_OF_STREAM;    result    =    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	126	3	replace
371	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }  [FE]  (entry  2)  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }	  return    END_OF_STREAM;    result    =    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	126	3	replace
372	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  result  =  END_OF_STREAM;  }  [CE]  cannot  find  symbol  result  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  result  =  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  result  =  END_OF_STREAM;  }	  return    END_OF_STREAM;    result    =    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  result	126	None	replace
373	[BUG]  [BUGGY]  if(END_OF_STREAM!=  END_OF_STREAM)return  END_OF_STREAM;  else  return  END_OF_STREAM;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(END_OF_STREAM!=  END_OF_STREAM)return  END_OF_STREAM;  else  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(END_OF_STREAM!=  END_OF_STREAM)return  END_OF_STREAM;  else  return  END_OF_STREAM;  }	  return    END_OF_STREAM;    result    =    END_OF_STREAM;    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
374	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(END_OF_STREAM!=  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(END_OF_STREAM!=  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    END_OF_STREAM;    result    =    END_OF_STREAM;    	compilable	  [FE]  IllegalArgumentException  	126	5	replace
375	[BUG]  [BUGGY]  if(END_OF_STREAM!=  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(END_OF_STREAM!=  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(END_OF_STREAM!=  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    END_OF_STREAM;    result    =    END_OF_STREAM;    	compilable	  [FE]  IllegalArgumentException  	126	5	replace
376	[BUG]  [BUGGY]  return  c  +  3;  c  +  3;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  3;  c  +  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    3;    c  +  3;	  	non-compiled	[CE]  not  a  statement	86	None	add
377	[BUG]  [BUGGY]  return  c  +  3;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  3;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    3;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	86	None	add
378	[BUG]  [BUGGY]  return  c  +  3;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  3;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    3;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	86	None	add
379	[BUG]  [BUGGY]  return  c  +  3;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  3;  int  c  =  in.read();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    3;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	86	None	add
380	[BUG]  [BUGGY]  return  c  +  3;  int  c  =  getSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  3;  int  c  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    3;    int  c  =  getSurroundingSpace(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	86	None	add
381	[BUG]  [BUGGY]  return  c  +  3;  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  3;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    3;    int  c  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	86	None	add
382	[BUG]  [BUGGY]  return  c  +  3;  int  c  +  3;  [CE]  ';'  expected  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  3;  int  c  +  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    3;    int  c  +  3;	  	non-compiled	[CE]  ';'  expected	86	None	add
383	[BUG]  [BUGGY]  return  c  +  3;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  3;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    3;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	86	None	add
384	[BUG]  [BUGGY]  c  =  getSurroundingSpaces();  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getSurroundingSpaces();	  return    BACKSPACE;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	166	None	replace
385	[BUG]  [BUGGY]  null  c  =  getSurroundingSpaces();  [CE]  not  a  statement  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  null  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	null  c  =  getSurroundingSpaces();	  return    BACKSPACE;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  not  a  statement	166	None	replace
386	[BUG]  [BUGGY]  while(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getSurroundingSpaces();  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getSurroundingSpaces();	  return    BACKSPACE;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
387	[BUG]  [BUGGY]  default:  return  BACKSPACE;  int  c  =  getSurroundingSpaces();  [CE]  duplicate  default  label  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  default:  return  BACKSPACE;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	default:  return  BACKSPACE;  int  c  =  getSurroundingSpaces();	  return    BACKSPACE;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  duplicate  default  label	166	None	replace
388	[BUG]  [BUGGY]  while(c  <  =  END_OF_STREAM)  {  c  =  getSurroundingSpaces();  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  =  END_OF_STREAM)  {  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  =  END_OF_STREAM)  {  c  =  getSurroundingSpaces();	  return    BACKSPACE;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
389	[BUG]  [BUGGY]  while(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;	  return    BACKSPACE;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
390	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  |  1;  c  &  END_OF_STREAM  |  1;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  |  1;  c  &  END_OF_STREAM  |  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    |    1;    c  &  END_OF_STREAM  |  1;	  	non-compiled	[CE]  not  a  statement	104	None	add
391	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  |  1;  (c  &  END_OF_STREAM  |  1);  [CE]  not  a  statement  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  |  1;  (c  &  END_OF_STREAM  |  1);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    |    1;    (c  &  END_OF_STREAM  |  1);	  	non-compiled	[CE]  not  a  statement	104	None	add
392	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  |  1;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  |  1;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    |    1;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	104	None	add
393	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  |  1;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  |  1;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    |    1;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	104	None	add
394	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  |  1;  int  c  =  getCurrentSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  |  1;  int  c  =  getCurrentSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    |    1;    int  c  =  getCurrentSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	104	None	add
395	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  |  1;  int  c  =  getCurrentSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  |  1;  int  c  =  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    |    1;    int  c  =  getCurrentSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	104	None	add
396	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  |  1;  int  c  =  getEscapeSurroundingSpaces(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  |  1;  int  c  =  getEscapeSurroundingSpaces(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    |    1;    int  c  =  getEscapeSurroundingSpaces(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	104	None	add
397	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  |  1;  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  |  1;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    |    1;    int  c  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	104	None	add
398	[BUG]  [BUGGY]  int  escape  =  getEscapeChar();  if(escape!=  null)  {  return  escape;  }  [CE]  cannot  find  symbol  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escape  =  getEscapeChar();  if(escape!=  null)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escape  =  getEscapeChar();  if(escape!=  null)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeChar();    if(escape!=    null)    {    return    escape;    }    	non-compiled	[CE]  cannot  find  symbol	232	None	replace
399	[BUG]  [BUGGY]  escape  =  getEscapeChar();  if(escape!=  null)  {  return  escape;  }  [CE]  cannot  assign  a  value  to  final  variable  escape  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  escape  =  getEscapeChar();  if(escape!=  null)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	escape  =  getEscapeChar();  if(escape!=  null)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeChar();    if(escape!=    null)    {    return    escape;    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  escape	232	None	replace
400	[BUG]  [BUGGY]  int  escape  =  getEscapeChar();  if(escape  ==  null)  {  return  escape;  }  [CE]  cannot  find  symbol  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escape  =  getEscapeChar();  if(escape  ==  null)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escape  =  getEscapeChar();  if(escape  ==  null)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeChar();    if(escape!=    null)    {    return    escape;    }    	non-compiled	[CE]  cannot  find  symbol	232	None	replace
401	[BUG]  [BUGGY]  escape  =  getEscapeChar();  if(escape  ==  null)  {  return  escape;  }  [CE]  cannot  assign  a  value  to  final  variable  escape  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  escape  =  getEscapeChar();  if(escape  ==  null)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	escape  =  getEscapeChar();  if(escape  ==  null)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeChar();    if(escape!=    null)    {    return    escape;    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  escape	232	None	replace
402	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeChar();    if(escape!=    null)    {    return    escape;    }    	non-compiled	[CE]  missing  return  statement	232	None	replace
403	[BUG]  [BUGGY]  if(c!=  END_OF_STREAM)  {  return  escape;  }  [CE]  missing  return  statement  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c!=  END_OF_STREAM)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c!=  END_OF_STREAM)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeChar();    if(escape!=    null)    {    return    escape;    }    	non-compiled	[CE]  missing  return  statement	232	None	replace
404	[BUG]  [BUGGY]  int  delimiter  =  getEscapeSurroundingSpaces()  -  1;  [CE]  cannot  find  symbol  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getEscapeSurroundingSpaces()  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getEscapeSurroundingSpaces()  -  1;	  int    delimiter    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  cannot  find  symbol	290	None	replace
405	[BUG]  [BUGGY]  int  delimiter  =  getEscapeSurroundingSpaces(c);  [CE]  cannot  find  symbol  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getEscapeSurroundingSpaces(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getEscapeSurroundingSpaces(c);	  int    delimiter    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  cannot  find  symbol	290	None	replace
406	[BUG]  [BUGGY]  int  delimiter  =  getEscapeSurroundingSpaces(commmentStart);  [CE]  cannot  find  symbol  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getEscapeSurroundingSpaces(commmentStart);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getEscapeSurroundingSpaces(commmentStart);	  int    delimiter    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  cannot  find  symbol	290	None	replace
407	[BUG]  [BUGGY]  int  delimiter  =  getSurroundingSpaces();  [CE]  cannot  find  symbol  [FE]                                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getSurroundingSpaces();	  int    delimiter    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  cannot  find  symbol	290	None	replace
408	[BUG]  [BUGGY]  int  delimiter  =  getEscapeSurroundingSpaces().length;  [CE]  cannot  find  symbol  [FE]                                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getEscapeSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getEscapeSurroundingSpaces().length;	  int    delimiter    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  cannot  find  symbol	290	None	replace
409	[BUG]  [BUGGY]  int  delimiter  =  getEscapeSurroundingSpaces()  +  1;  [CE]  cannot  find  symbol  [FE]                                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getEscapeSurroundingSpaces()  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getEscapeSurroundingSpaces()  +  1;	  int    delimiter    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  cannot  find  symbol	290	None	replace
410	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_EmptyLines;  [CE]  cannot  find  symbol  END_EmptyLines  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_EmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  END_OF_STREAM  :  END_EmptyLines;	  return    c    >    0?    c    :    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  cannot  find  symbol  END_EmptyLines	48	None	replace
411	[BUG]  [BUGGY]  c  >  0?  END_OF_STREAM  :  END_EmptyLines;  [CE]  not  a  statement  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  >  0?  END_OF_STREAM  :  END_EmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  >  0?  END_OF_STREAM  :  END_EmptyLines;	  return    c    >    0?    c    :    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  not  a  statement	48	None	replace
412	[BUG]  [BUGGY]  return  c  +  this.ignoreEmptyLines;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  this.ignoreEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  this.ignoreEmptyLines;	  return    c    +    END_OF_SURroundingSpaces;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	269	None	replace
413	[BUG]  [BUGGY]  return  c  +  escapeEmptyLines;  [CE]  cannot  find  symbol  escapeEmptyLines  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  escapeEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  escapeEmptyLines;	  return    c    +    END_OF_SURroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  escapeEmptyLines	269	None	replace
414	[BUG]  [BUGGY]  return  c  +  escapeChar;  [CE]  cannot  find  symbol  escapeChar  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  escapeChar;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  escapeChar;	  return    c    +    END_OF_SURroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  escapeChar	269	None	replace
415	[BUG]  [BUGGY]  return  c  +  this.ignoredEmptyLines;  [CE]  cannot  find  symbol  ignoredEmptyLines  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  this.ignoredEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  this.ignoredEmptyLines;	  return    c    +    END_OF_SURroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  ignoredEmptyLines	269	None	replace
416	[BUG]  [BUGGY]  return  c  >=  0?  c  :  END_OF_STREAM;  c  >=  0?  c  :  END_OF_STREAM;  [CE]  not  a  statement  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  c  :  END_OF_STREAM;  c  >=  0?  c  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    c    :    END_OF_STREAM;    c  >=  0?  c  :  END_OF_STREAM;	  	non-compiled	[CE]  not  a  statement	141	None	add
417	[BUG]  [BUGGY]  return  c  >=  0?  c  :  END_OF_STREAM;  c  >>  0?  c  :  END_OF_STREAM;  [CE]  not  a  statement  [FE]      Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  c  :  END_OF_STREAM;  c  >>  0?  c  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    c    :    END_OF_STREAM;    c  >>  0?  c  :  END_OF_STREAM;	  	non-compiled	[CE]  not  a  statement	141	None	add
418	[BUG]  [BUGGY]  return  c  >=  0?  c  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  c  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    c    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	141	None	add
419	[BUG]  [BUGGY]  return  c  >=  0?  c  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  c  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    c    :    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	141	None	add
420	[BUG]  [BUGGY]  return  c  >=  0?  c  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  c  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    c    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	141	None	add
421	[BUG]  [BUGGY]  return  c  >=  0?  c  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  c  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    c    :    END_OF_STREAM;    int  c  =  getCurrentSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	141	None	add
422	[BUG]  [BUGGY]  return  c  >=  0?  c  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  c  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    c    :    END_OF_STREAM;    int  c  =  getCurrentSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	141	None	add
423	[BUG]  [BUGGY]  return  c  >=  0?  c  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  c  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    c    :    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	141	None	add
424	[BUG]  [BUGGY]  int  c  >  0?  1  :  c;  [CE]  ';'  expected  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  >  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  >  0?  1  :  c;	  return    c    >    0?    1    :    c;    int    c    >    0?    1    :    c;    	non-compiled	[CE]  ';'  expected	159	None	replace
425	[BUG]  [BUGGY]  char  c  >  0?  1  :  c;  [CE]  ';'  expected  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  char  c  >  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	char  c  >  0?  1  :  c;	  return    c    >    0?    1    :    c;    int    c    >    0?    1    :    c;    	non-compiled	[CE]  ';'  expected	159	None	replace
426	[BUG]  [BUGGY]  int  c  =  0?  1  :  c;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  0?  1  :  c;	  return    c    >    0?    1    :    c;    int    c    >    0?    1    :    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	159	None	replace
427	[BUG]  [BUGGY]  Integer  c  >  0?  1  :  c;  [CE]  ';'  expected  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  >  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  >  0?  1  :  c;	  return    c    >    0?    1    :    c;    int    c    >    0?    1    :    c;    	non-compiled	[CE]  ';'  expected	159	None	replace
428	[BUG]  [BUGGY]  return  in.intValue()  -  1;  [CE]  cannot  find  symbol  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  in.intValue()  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  in.intValue()  -  1;	  return    in.intValue();    	non-compiled	[CE]  cannot  find  symbol	243	None	replace
429	[BUG]  [BUGGY]  return  in.intValue()  +  1;  [CE]  cannot  find  symbol  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  in.intValue()  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  in.intValue()  +  1;	  return    in.intValue();    	non-compiled	[CE]  cannot  find  symbol	243	None	replace
430	[BUG]  [BUGGY]  return  in.intValue()  &  END_OF_STREAM;  [CE]  cannot  find  symbol  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  in.intValue()  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  in.intValue()  &  END_OF_STREAM;	  return    in.intValue();    	non-compiled	[CE]  cannot  find  symbol	243	None	replace
431	[BUG]  [BUGGY]  return  this.intValue();  [CE]  cannot  find  symbol  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.intValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.intValue();	  return    in.intValue();    	non-compiled	[CE]  cannot  find  symbol	243	None	replace
432	[BUG]  [BUGGY]  return  in.intValue()  -  2;  [CE]  cannot  find  symbol  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  in.intValue()  -  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  in.intValue()  -  2;	  return    in.intValue();    	non-compiled	[CE]  cannot  find  symbol	243	None	replace
433	[BUG]  [BUGGY]  return  in.readLine();  [CE]  incompatible  types  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  in.readLine();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  in.readLine();	  return    END_OF_STREAM    +    in.readLine();    	non-compiled	[CE]  incompatible  types	283	None	replace
434	[BUG]  [BUGGY]  return  in.readLine()  +  END_OF_STREAM;  [CE]  incompatible  types  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  in.readLine()  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  in.readLine()  +  END_OF_STREAM;	  return    END_OF_STREAM    +    in.readLine();    	non-compiled	[CE]  incompatible  types	283	None	replace
435	[BUG]  [BUGGY]  return  c  +  in.readLine();  [CE]  incompatible  types  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  in.readLine();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  in.readLine();	  return    END_OF_STREAM    +    in.readLine();    	non-compiled	[CE]  incompatible  types	283	None	replace
436	[BUG]  [BUGGY]  return  in.readLine()  &  END_OF_STREAM;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  in.readLine()  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  in.readLine()  &  END_OF_STREAM;	  return    END_OF_STREAM    +    in.readLine();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	283	None	replace
437	[BUG]  [BUGGY]  return  END_OF_STREAM  +  this.in.readLine();  [CE]  incompatible  types  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  this.in.readLine();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  this.in.readLine();	  return    END_OF_STREAM    +    in.readLine();    	non-compiled	[CE]  incompatible  types	283	None	replace
438	[BUG]  [BUGGY]  return  in.readLine()  -  END_OF_STREAM;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  in.readLine()  -  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  in.readLine()  -  END_OF_STREAM;	  return    END_OF_STREAM    +    in.readLine();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	283	None	replace
439	[BUG]  [BUGGY]  return  END_OF_STREAM?  0  :  this.ignoreEmptyLines;  [CE]  incompatible  types  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM?  0  :  this.ignoreEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM?  0  :  this.ignoreEmptyLines;	  return    this.escapeSurroundingSpaces?    0    :    END_OF_STREAM;    	non-compiled	[CE]  incompatible  types	207	None	replace
440	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces();  return  c;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces();  return  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces();  return  c;	  return    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces();    return    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	262	None	replace
441	[BUG]  [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(ignoreEmptyLines)  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c;  }	  return    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces();    return    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	262	None	replace
442	[BUG]  [BUGGY]  if(ignoredEmptyLines)  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c;  }  [CE]  cannot  find  symbol  ignoredEmptyLines  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(ignoredEmptyLines)  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(ignoredEmptyLines)  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c;  }	  return    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces();    return    c;    	non-compiled	[CE]  cannot  find  symbol  ignoredEmptyLines	262	None	replace
443	[BUG]  [BUGGY]  c  =  getEscapeSurroundingSpaces();  return  END_OF_STREAM;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getEscapeSurroundingSpaces();  return  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getEscapeSurroundingSpaces();  return  END_OF_STREAM;	  return    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces();    return    c;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	262	None	replace
444	[BUG]  [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getEscapeSurroundingSpaces();  return  c;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getEscapeSurroundingSpaces();  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(ignoreEmptyLines)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getEscapeSurroundingSpaces();  return  c;  }	  return    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces();    return    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	262	None	replace
445	[BUG]  [BUGGY]  if(ignoredEmptyLines)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getEscapeSurroundingSpaces();  return  c;  }  [CE]  cannot  find  symbol  ignoredEmptyLines  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(ignoredEmptyLines)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getEscapeSurroundingSpaces();  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(ignoredEmptyLines)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getEscapeSurroundingSpaces();  return  c;  }	  return    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces();    return    c;    	non-compiled	[CE]  cannot  find  symbol  ignoredEmptyLines	262	None	replace
446	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_CREAM;  [CE]  cannot  find  symbol  END_OF_CREAM  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_CREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  END_OF_STREAM  :  END_OF_CREAM;	  return    c!=    0?    c    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_CREAM	144	None	replace
447	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_RUNNING;  [CE]  cannot  find  symbol  END_OF_RUNNING  [FE]      Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_RUNNING;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  END_OF_STREAM  :  END_OF_RUNNING;	  return    c!=    0?    c    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_RUNNING	144	None	replace
448	[BUG]  [BUGGY]  return  END_OF_STREAM.length  +  2;  [CE]  int  cannot  be  dereferenced  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.length  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.length  +  2;	  return    END_OF_STREAM    +    2;    	non-compiled	[CE]  int  cannot  be  dereferenced	72	None	replace
449	[BUG]  [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  [CE]  duplicate  case  label  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    	non-compiled	[CE]  duplicate  case  label	342	None	replace
450	[BUG]  [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  while  processing  escape  sequence ");  [CE]  duplicate  case  label  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  while  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  throw  new  IOException( "EOF  while  processing  escape  sequence ");	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    	non-compiled	[CE]  duplicate  case  label	342	None	replace
451	[BUG]  [BUGGY]  int  c  =  getChar();  return  c  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getChar();  return  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getChar();  return  c  +  1;	  return    c    +    1;    int    c    =    getChar();    return    c    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	363	None	replace
452	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  c  +  1;  }  else  {  int  c  =  getChar();  return  c  +  1;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  c  +  1;  }  else  {  int  c  =  getChar();  return  c  +  1;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  c  +  1;  }  else  {  int  c  =  getChar();  return  c  +  1;  }	  return    c    +    1;    int    c    =    getChar();    return    c    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	363	None	replace
453	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  c  +  1;  int  c  =  getChar();  return  c  +  1;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  c  +  1;  int  c  =  getChar();  return  c  +  1;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  c  +  1;  int  c  =  getChar();  return  c  +  1;  }	  return    c    +    1;    int    c    =    getChar();    return    c    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	363	None	replace
454	[BUG]  [BUGGY]  c  =  getChar();  return  c  +  1;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getChar();  return  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getChar();  return  c  +  1;	  return    c    +    1;    int    c    =    getChar();    return    c    +    1;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	363	None	replace
455	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  c  +  1;  int  c  =  getChar();  return  c  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  c  +  1;  int  c  =  getChar();  return  c  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  c  +  1;  int  c  =  getChar();  return  c  +  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    +    1;    int    c    =    getChar();    return    c    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	363	None	replace
456	[BUG]  [BUGGY]  int  c  =  getChar();  return  c  +  2;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getChar();  return  c  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getChar();  return  c  +  2;	  return    c    +    1;    int    c    =    getChar();    return    c    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	363	None	replace
457	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  quoteChar;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  +  quoteChar;	  return    END_OF_STREAM    +    quoteChar;    	compilable	  [FE]  (entry  2)  	85	5	replace
458	[BUG]  [BUGGY]  return  c  +  quoteChar;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  quoteChar;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  quoteChar;	  return    END_OF_STREAM    +    quoteChar;    	compilable	  [FE]  (entry  2)  	85	5	replace
459	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  quoteChar  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  quoteChar  +  END_OF_STREAM;	  return    END_OF_STREAM    +    quoteChar;    	compilable	  [FE]  (entry  2)  	85	5	replace
460	[BUG]  [BUGGY]  return  quoteChar  +  END_OF_STREAM;  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  quoteChar  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  quoteChar  +  END_OF_STREAM;	  return    END_OF_STREAM    +    quoteChar;    	compilable	  [FE]  (entry  2)  	85	5	replace
461	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  quoteChar  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  END_OF_STREAM  +  quoteChar  +  1;	  return    END_OF_STREAM    +    quoteChar;    	compilable	  [FE]  (entry  2)  	85	5	replace
462	[BUG]  [BUGGY]  return  END_OF_STREAM  +  quoteChar  +  1;  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  quoteChar  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  quoteChar  +  1;	  return    END_OF_STREAM    +    quoteChar;    	compilable	  [FE]  (entry  2)  	85	5	replace
463	[BUG]  [BUGGY]  return  END_OF_STREAM  +  quoteChar.charAt(c);  [CE]  char  cannot  be  dereferenced  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  quoteChar.charAt(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  quoteChar.charAt(c);	  return    END_OF_STREAM    +    quoteChar;    	non-compiled	[CE]  char  cannot  be  dereferenced	85	None	replace
464	[BUG]  [BUGGY]  return  END_OF_STREAM  +  quoteChar.charAt(0);  [CE]  char  cannot  be  dereferenced  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  quoteChar.charAt(0);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  quoteChar.charAt(0);	  return    END_OF_STREAM    +    quoteChar;    	non-compiled	[CE]  char  cannot  be  dereferenced	85	None	replace
465	[BUG]  [BUGGY]  return  END_OF_STREAM  +  quoteChar.toLowerCase();  [CE]  char  cannot  be  dereferenced  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  quoteChar.toLowerCase();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  quoteChar.toLowerCase();	  return    END_OF_STREAM    +    quoteChar;    	non-compiled	[CE]  char  cannot  be  dereferenced	85	None	replace
466	[BUG]  [BUGGY]  int  c  =  getCurrentIndex();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getCurrentIndex();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getCurrentIndex();	  return    c    +    1;    int    c    =    getCurrentIndex();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	220	None	replace
467	[BUG]  [BUGGY]  Integer  c  =  getCurrentIndex();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  getCurrentIndex();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  getCurrentIndex();	  return    c    +    1;    int    c    =    getCurrentIndex();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	220	None	replace
468	[BUG]  [BUGGY]  c  =  getCurrentIndex();  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getCurrentIndex();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getCurrentIndex();	  return    c    +    1;    int    c    =    getCurrentIndex();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	220	None	replace
469	[BUG]  [BUGGY]  c  +=  getCurrentIndex();  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  +=  getCurrentIndex();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  +=  getCurrentIndex();	  return    c    +    1;    int    c    =    getCurrentIndex();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	220	None	replace
470	[BUG]  [BUGGY]  return  c  +  2;  int  c  =  getCurrentIndex();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  2;  int  c  =  getCurrentIndex();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  2;  int  c  =  getCurrentIndex();	  return    c    +    1;    int    c    =    getCurrentIndex();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	220	None	replace
471	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  delimiter;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  END_OF_STREAM  +  delimiter;	  return    END_OF_STREAM    +    escapeChar;    	compilable	  [FE]  (entry  2)  	82	5	replace
472	[BUG]  [BUGGY]  return  END_OF_STREAM  +  delimiter;  [FE]  (entry  2)  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  delimiter;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  delimiter;	  return    END_OF_STREAM    +    escapeChar;    	compilable	  [FE]  (entry  2)  	82	5	replace
473	[BUG]  [BUGGY]  return  END_OF_STREAM  +  DElimiter;  [CE]  cannot  find  symbol  DElimiter  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  DElimiter;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  DElimiter;	  return    END_OF_STREAM    +    escapeChar;    	non-compiled	[CE]  cannot  find  symbol  DElimiter	82	None	replace
474	[BUG]  [BUGGY]  return  END_OF_STREAM  +  quoteLine;  [CE]  cannot  find  symbol  quoteLine  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  quoteLine;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  quoteLine;	  return    END_OF_STREAM    +    escapeChar;    	non-compiled	[CE]  cannot  find  symbol  quoteLine	82	None	replace
475	[BUG]  [BUGGY]  default:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  [CE]  duplicate  default  label  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  default:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	default:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");	  return    END_OF_STREAM;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence.   ");    	non-compiled	[CE]  duplicate  default  label	300	None	replace
476	[BUG]  [BUGGY]  case  EOF:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  [CE]  cannot  find  symbol  EOF  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  EOF:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  EOF:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");	  return    END_OF_STREAM;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence.   ");    	non-compiled	[CE]  cannot  find  symbol  EOF	300	None	replace
477	[BUG]  [BUGGY]  [FE]  IOException  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	result:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");	  return    END_OF_STREAM;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence.   ");    	compilable	  [FE]  IOException  	300	5	replace
478	[BUG]  [BUGGY]  result:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  [FE]  IOException  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");	  return    END_OF_STREAM;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence.   ");    	compilable	  [FE]  IOException  	300	5	replace
479	[BUG]  [BUGGY]  return  c  ||  END_OF_EscapeSequences.indexOf(c)  >=  -1;  [CE]  cannot  find  symbol  END_OF_EscapeSequences  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ||  END_OF_EscapeSequences.indexOf(c)  >=  -1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ||  END_OF_EscapeSequences.indexOf(c)  >=  -1;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences.indexOf(c)    >=    -1;    	non-compiled	[CE]  cannot  find  symbol  END_OF_EscapeSequences	350	None	replace
480	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_EscapeSequences.indexOf(c)  >>  -1;  [CE]  cannot  find  symbol  END_OF_EscapeSequences  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_EscapeSequences.indexOf(c)  >>  -1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_EscapeSequences.indexOf(c)  >>  -1;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences.indexOf(c)    >=    -1;    	non-compiled	[CE]  cannot  find  symbol  END_OF_EscapeSequences	350	None	replace
481	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_SURroundingSpaces.indexOf(c)  >=  -1;  [CE]  cannot  find  symbol  END_OF_SURroundingSpaces  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_SURroundingSpaces.indexOf(c)  >=  -1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_SURroundingSpaces.indexOf(c)  >=  -1;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences.indexOf(c)    >=    -1;    	non-compiled	[CE]  cannot  find  symbol  END_OF_SURroundingSpaces	350	None	replace
482	[BUG]  [BUGGY]  return  c  ||  END_OF_EscapeSequences.indexOf(c)  >>  -1;  [CE]  cannot  find  symbol  END_OF_EscapeSequences  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ||  END_OF_EscapeSequences.indexOf(c)  >>  -1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ||  END_OF_EscapeSequences.indexOf(c)  >>  -1;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences.indexOf(c)    >=    -1;    	non-compiled	[CE]  cannot  find  symbol  END_OF_EscapeSequences	350	None	replace
483	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_EscapeSequences.indexOf(c)  ==  -1;  [CE]  cannot  find  symbol  END_OF_EscapeSequences  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_EscapeSequences.indexOf(c)  ==  -1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_EscapeSequences.indexOf(c)  ==  -1;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences.indexOf(c)    >=    -1;    	non-compiled	[CE]  cannot  find  symbol  END_OF_EscapeSequences	350	None	replace
484	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_EscapeSequences.indexOf(c)  >=  -1;  [CE]  cannot  find  symbol  END_EscapeSequences  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_EscapeSequences.indexOf(c)  >=  -1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_EscapeSequences.indexOf(c)  >=  -1;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences.indexOf(c)    >=    -1;    	non-compiled	[CE]  cannot  find  symbol  END_EscapeSequences	350	None	replace
485	[BUG]  [BUGGY]  c  =  END_OF_STREAM;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  END_OF_STREAM;	  return    END_OF_STREAM    +    c;    c    +    END_OF_STREAM;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	8	None	replace
486	[BUG]  [BUGGY]  while(c  <  END_OF_STREAM)  {  return  END_OF_STREAM  +  END_SURroundingSpaces;  c  +=  END_OF_STREAM;  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  END_OF_STREAM)  {  return  END_OF_STREAM  +  END_SURroundingSpaces;  c  +=  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  END_OF_STREAM)  {  return  END_OF_STREAM  +  END_SURroundingSpaces;  c  +=  END_OF_STREAM;	  return    END_OF_STREAM    +    c;    c    +    END_OF_STREAM;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
487	[BUG]  [BUGGY]  while(c  <  END_OF_STREAM)  {  return  END_OF_STREAM  +  END_SURroundingSpaces;  c  +=  END_OF_STREAM;  }  [CE]  cannot  find  symbol  END_SURroundingSpaces  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  END_OF_STREAM)  {  return  END_OF_STREAM  +  END_SURroundingSpaces;  c  +=  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  END_OF_STREAM)  {  return  END_OF_STREAM  +  END_SURroundingSpaces;  c  +=  END_OF_STREAM;  }	  return    END_OF_STREAM    +    c;    c    +    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_SURroundingSpaces	8	None	replace
488	[BUG]  [BUGGY]  while(c  <  END_OF_STREAM)  {  return  END_OF_STREAM  +  END_OF_STREAM;  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  END_OF_STREAM)  {  return  END_OF_STREAM  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  END_OF_STREAM)  {  return  END_OF_STREAM  +  END_OF_STREAM;	  return    END_OF_STREAM    +    c;    c    +    END_OF_STREAM;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
489	[BUG]  [BUGGY]  while(c  <  END_OF_STREAM)  {  return  END_OF_STREAM  +  c;  c  +=  END_OF_STREAM;  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  END_OF_STREAM)  {  return  END_OF_STREAM  +  c;  c  +=  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  END_OF_STREAM)  {  return  END_OF_STREAM  +  c;  c  +=  END_OF_STREAM;	  return    END_OF_STREAM    +    c;    c    +    END_OF_STREAM;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
490	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_BACKSPACE;  [CE]  cannot  find  symbol  END_BACKSPACE  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  END_OF_STREAM  :  END_BACKSPACE;	  return    c    >    0?    END_OF_STREAM    :    END_SPACE;    	non-compiled	[CE]  cannot  find  symbol  END_BACKSPACE	216	None	replace
491	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_SURroundingSpaces;  [CE]  cannot  find  symbol  END_SURroundingSpaces  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_SURroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  END_OF_STREAM  :  END_SURroundingSpaces;	  return    c    >    0?    END_OF_STREAM    :    END_SPACE;    	non-compiled	[CE]  cannot  find  symbol  END_SURroundingSpaces	216	None	replace
492	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_QUOTE;  [CE]  cannot  find  symbol  END_QUOTE  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_QUOTE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  END_OF_STREAM  :  END_QUOTE;	  return    c    >    0?    END_OF_STREAM    :    END_SPACE;    	non-compiled	[CE]  cannot  find  symbol  END_QUOTE	216	None	replace
493	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  >  0?  END_OF_STREAM  :  BACKSPACE;	  return    c    >    0?    END_OF_STREAM    :    END_SPACE;    	compilable	  [FE]  (entry  2)  	216	3	replace
494	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  BACKSPACE;  [FE]  (entry  2)  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  END_OF_STREAM  :  BACKSPACE;	  return    c    >    0?    END_OF_STREAM    :    END_SPACE;    	compilable	  [FE]  (entry  2)  	216	3	replace
495	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_SCRIPT;  [CE]  cannot  find  symbol  END_SCRIPT  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_SCRIPT;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  END_OF_STREAM  :  END_SCRIPT;	  return    c    >    0?    END_OF_STREAM    :    END_SPACE;    	non-compiled	[CE]  cannot  find  symbol  END_SCRIPT	216	None	replace
496	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_SURFACE;  [CE]  cannot  find  symbol  END_SURFACE  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_SURFACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  END_OF_STREAM  :  END_SURFACE;	  return    c    >    0?    END_OF_STREAM    :    END_SPACE;    	non-compiled	[CE]  cannot  find  symbol  END_SURFACE	216	None	replace
497	[BUG]  [BUGGY]  return  END_OF_STREAM  +  escape;  int  escape  =  getEscapeSurroundingSpaces();  [CE]  cannot  find  symbol  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  escape;  int  escape  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    escape;    int  escape  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  cannot  find  symbol	279	None	add
498	[BUG]  [BUGGY]  return  END_OF_STREAM  +  escape;  int  escape  =  getEscapeSurroundingSpaces().size();  [CE]  cannot  find  symbol  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  escape;  int  escape  =  getEscapeSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    escape;    int  escape  =  getEscapeSurroundingSpaces().size();	  	non-compiled	[CE]  cannot  find  symbol	279	None	add
499	[BUG]  [BUGGY]  return  END_OF_STREAM  +  escape;  int  escape  =  getEscapeSurroundingSpaces().length;  [CE]  cannot  find  symbol  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  escape;  int  escape  =  getEscapeSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    escape;    int  escape  =  getEscapeSurroundingSpaces().length;	  	non-compiled	[CE]  cannot  find  symbol	279	None	add
500	[BUG]  [BUGGY]  return  END_OF_STREAM  +  escape;  int  escape  =  getSurroundingSpaces().size();  [CE]  cannot  find  symbol  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  escape;  int  escape  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    escape;    int  escape  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  cannot  find  symbol	279	None	add
501	[BUG]  [BUGGY]  return  END_OF_STREAM  +  escape;  int  escape  =  in.read();  [CE]  unreachable  statement  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  escape;  int  escape  =  in.read();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    escape;    int  escape  =  in.read();	  	non-compiled	[CE]  unreachable  statement	279	None	add
502	[BUG]  [BUGGY]  return  END_OF_STREAM  +  escape;  int  escape  =  getSurroundingSpaces().length;  [CE]  cannot  find  symbol  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  escape;  int  escape  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    escape;    int  escape  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  cannot  find  symbol	279	None	add
503	[BUG]  [BUGGY]  return  END_OF_STREAM  +  escape;  int  escape  =  getEscapeSurroundingSpace(c);  [CE]  cannot  find  symbol  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  escape;  int  escape  =  getEscapeSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    escape;    int  escape  =  getEscapeSurroundingSpace(c);	  	non-compiled	[CE]  cannot  find  symbol	279	None	add
504	[BUG]  [BUGGY]  return  END_OF_STREAM  +  escape;  int  escape  =  getSurroundingSpace(c);  [CE]  cannot  find  symbol  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  escape;  int  escape  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    escape;    int  escape  =  getSurroundingSpace(c);	  	non-compiled	[CE]  cannot  find  symbol	279	None	add
505	[BUG]  [BUGGY]  Integer  c  =  getEscapeSurroundingSpaces();  return  c;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  getEscapeSurroundingSpaces();  return  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  getEscapeSurroundingSpaces();  return  c;	  return    END_OF_STREAM;    Integer    c    =    getEscapeSurroundingSpaces();    return    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	260	None	replace
506	[BUG]  [BUGGY]  null  c  =  getEscapeSurroundingSpaces();  return  c;  [CE]  not  a  statement  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  null  c  =  getEscapeSurroundingSpaces();  return  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	null  c  =  getEscapeSurroundingSpaces();  return  c;	  return    END_OF_STREAM;    Integer    c    =    getEscapeSurroundingSpaces();    return    c;    	non-compiled	[CE]  not  a  statement	260	None	replace
507	[BUG]  [BUGGY]  c  =  getEscapeSurroundingSpaces();  return  c;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getEscapeSurroundingSpaces();  return  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getEscapeSurroundingSpaces();  return  c;	  return    END_OF_STREAM;    Integer    c    =    getEscapeSurroundingSpaces();    return    c;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	260	None	replace
508	[BUG]  [BUGGY]  Integer  c  =  getEscapeSurroundingSpaces();  return  c.intValue();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  getEscapeSurroundingSpaces();  return  c.intValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  getEscapeSurroundingSpaces();  return  c.intValue();	  return    END_OF_STREAM;    Integer    c    =    getEscapeSurroundingSpaces();    return    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	260	None	replace
509	[BUG]  [BUGGY]  Integer  c  =  getSurroundingSpaces();  return  c;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  getSurroundingSpaces();  return  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  getSurroundingSpaces();  return  c;	  return    END_OF_STREAM;    Integer    c    =    getEscapeSurroundingSpaces();    return    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	260	None	replace
510	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  1  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  >=  0?  1  :  END_OF_STREAM;	  return    c    >=    0?    1    :    c;    	compilable	  [FE]  (entry  2)  	251	5	replace
511	[BUG]  [BUGGY]  return  c  >=  0?  1  :  END_OF_STREAM;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  1  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >=  0?  1  :  END_OF_STREAM;	  return    c    >=    0?    1    :    c;    	compilable	  [FE]  (entry  2)  	251	5	replace
512	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  <  0?  1  :  END_OF_STREAM;	  return    c    >=    0?    1    :    c;    	compilable	  [FE]  (entry  2)  	251	3	replace
513	[BUG]  [BUGGY]  return  c  <  0?  1  :  END_OF_STREAM;  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  0?  1  :  END_OF_STREAM;	  return    c    >=    0?    1    :    c;    	compilable	  [FE]  (entry  2)  	251	3	replace
514	[BUG]  [BUGGY]  return  c  >>  0?  1  :  END_OF_STREAM;  [CE]  incompatible  types  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >>  0?  1  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >>  0?  1  :  END_OF_STREAM;	  return    c    >=    0?    1    :    c;    	non-compiled	[CE]  incompatible  types	251	None	replace
515	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  ==  0?  1  :  END_OF_STREAM;	  return    c    >=    0?    1    :    c;    	compilable	  [FE]  (entry  2)  	251	3	replace
516	[BUG]  [BUGGY]  return  c  ==  0?  1  :  END_OF_STREAM;  [FE]  (entry  2)  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  1  :  END_OF_STREAM;	  return    c    >=    0?    1    :    c;    	compilable	  [FE]  (entry  2)  	251	3	replace
517	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  1  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c!=  0?  1  :  END_OF_STREAM;	  return    c    >=    0?    1    :    c;    	compilable	  [FE]  (entry  2)  	251	5	replace
518	[BUG]  [BUGGY]  return  c!=  0?  1  :  END_OF_STREAM;  [FE]  (entry  2)  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  1  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c!=  0?  1  :  END_OF_STREAM;	  return    c    >=    0?    1    :    c;    	compilable	  [FE]  (entry  2)  	251	5	replace
519	[BUG]  [BUGGY]  return  CSVFormat.END_EOF;  [CE]  cannot  find  symbol  END_EOF  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.END_EOF;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.END_EOF;	  return    CSVFormat.START_EOF;    	non-compiled	[CE]  cannot  find  symbol  END_EOF	136	None	replace
520	[BUG]  [BUGGY]  return  CSVFormat.START_EOF  -  1;  [CE]  cannot  find  symbol  START_EOF  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.START_EOF  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.START_EOF  -  1;	  return    CSVFormat.START_EOF;    	non-compiled	[CE]  cannot  find  symbol  START_EOF	136	None	replace
521	[BUG]  [BUGGY]  return  Integer.parseInt(c);  [CE]  no  suitable  method  found  for  parseInt(int)  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  Integer.parseInt(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  Integer.parseInt(c);	  return    CSVFormat.START_EOF;    	non-compiled	[CE]  no  suitable  method  found  for  parseInt(int)	136	None	replace
522	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(c  ==  END_OF_STREAM)  {  return  escape;  }  else  {  return  END_OF_STREAM;  }	  return    escape;    escape;    	compilable	  [FE]  (entry  2)  	230	3	replace
523	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  }  else  {  return  END_OF_STREAM;  }  [FE]  (entry  2)  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  }  else  {  return  END_OF_STREAM;  }	  return    escape;    escape;    	compilable	  [FE]  (entry  2)  	230	3	replace
524	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(c  ==  END_OF_STREAM)  {  return  escape;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    escape;    escape;    	compilable	  [FE]  IllegalArgumentException  	230	5	replace
525	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    escape;    escape;    	compilable	  [FE]  IllegalArgumentException  	230	5	replace
526	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c!=  END_OF_STREAM)  {  return  escape;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(c!=  END_OF_STREAM)  {  return  escape;  }  else  {  return  END_OF_STREAM;  }	  return    escape;    escape;    	compilable	  [FE]  (entry  2)  	230	5	replace
527	[BUG]  [BUGGY]  if(c!=  END_OF_STREAM)  {  return  escape;  }  else  {  return  END_OF_STREAM;  }  [FE]  (entry  2)  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c!=  END_OF_STREAM)  {  return  escape;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c!=  END_OF_STREAM)  {  return  escape;  }  else  {  return  END_OF_STREAM;  }	  return    escape;    escape;    	compilable	  [FE]  (entry  2)  	230	5	replace
528	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(escape  ==  END_OF_STREAM)  {  return  c;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(escape  ==  END_OF_STREAM)  {  return  c;  }  else  {  return  END_OF_STREAM;  }	  return    escape;    escape;    	compilable	  [FE]  (entry  2)  	230	3	replace
529	[BUG]  [BUGGY]  if(escape  ==  END_OF_STREAM)  {  return  c;  }  else  {  return  END_OF_STREAM;  }  [FE]  (entry  2)  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(escape  ==  END_OF_STREAM)  {  return  c;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(escape  ==  END_OF_STREAM)  {  return  c;  }  else  {  return  END_OF_STREAM;  }	  return    escape;    escape;    	compilable	  [FE]  (entry  2)  	230	3	replace
530	[BUG]  [BUGGY]  return  c;  escape;  [CE]  not  a  statement  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c;  escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c;  escape;	  return    escape;    escape;    	non-compiled	[CE]  not  a  statement	230	None	replace
531	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(c  ==  END_OF_STREAM)  {  return  escape;  }  else  {  throw  new  IllegalStateException( " ");  }	  return    escape;    escape;    	compilable	  [FE]  IllegalStateException  	230	5	replace
532	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  }  else  {  throw  new  IllegalStateException( " ");  }	  return    escape;    escape;    	compilable	  [FE]  IllegalStateException  	230	5	replace
533	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  }  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
534	[BUG]  [BUGGY]  int  c  =  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
535	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  return  c;  }  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  return  c;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  return  c;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
536	[BUG]  [BUGGY]  while(c  <  len)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  [CE]  illegal  start  of  expression  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  len)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  len)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
537	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  [CE]  illegal  start  of  expression  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
538	[BUG]  [BUGGY]  int  c  =  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces.contains(c))  {  return  c;  }  [CE]  illegal  start  of  expression  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces.contains(c))  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces.contains(c))  {  return  c;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
539	[BUG]  [BUGGY]  while(c  <  len)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  return  c;  }  [CE]  illegal  start  of  expression  [FE]                            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  len)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  len)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  return  c;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
540	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  1;  c  &  END_OF_STREAM  +  1;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  1;  c  &  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    +    1;    c  &  END_OF_STREAM  +  1;	  	non-compiled	[CE]  not  a  statement	100	None	add
541	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  1;  (c  &  END_OF_STREAM  +  1);  [CE]  not  a  statement  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  1;  (c  &  END_OF_STREAM  +  1);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    +    1;    (c  &  END_OF_STREAM  +  1);	  	non-compiled	[CE]  not  a  statement	100	None	add
542	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  1;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  1;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    +    1;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	100	None	add
543	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    +    1;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	100	None	add
544	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  1;  int  c  =  Integer.parseInt(quoteChar);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  1;  int  c  =  Integer.parseInt(quoteChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    +    1;    int  c  =  Integer.parseInt(quoteChar);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	100	None	add
545	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  1;  int  c  =  getCurrentSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  1;  int  c  =  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    +    1;    int  c  =  getCurrentSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	100	None	add
546	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    +    1;    int  c  =  getSurroundingSpace(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	100	None	add
547	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  Integer.MAX_VALUE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  >  0?  1  :  Integer.MAX_VALUE;	  return    c    >    0?    1    :    d;    	compilable	  [FE]  (entry  2)  	70	5	replace
548	[BUG]  [BUGGY]  return  c  >  0?  1  :  Integer.MAX_VALUE;  [FE]  (entry  2)  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  Integer.MAX_VALUE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  Integer.MAX_VALUE;	  return    c    >    0?    1    :    d;    	compilable	  [FE]  (entry  2)  	70	5	replace
549	[BUG]  [BUGGY]  return  c  >  0?  1  :  ENDSPACE;  [CE]  cannot  find  symbol  ENDSPACE  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  ENDSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  ENDSPACE;	  return    c    >    0?    1    :    d;    	non-compiled	[CE]  cannot  find  symbol  ENDSPACE	70	None	replace
550	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  >  0?  1  :  BACKSPACE;	  return    c    >    0?    1    :    d;    	compilable	  [FE]  (entry  2)  	70	5	replace
551	[BUG]  [BUGGY]  return  c  >  0?  1  :  BACKSPACE;  [FE]  (entry  2)  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  BACKSPACE;	  return    c    >    0?    1    :    d;    	compilable	  [FE]  (entry  2)  	70	5	replace
552	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  Integer.MIN_VALUE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  >  0?  1  :  Integer.MIN_VALUE;	  return    c    >    0?    1    :    d;    	compilable	  [FE]  (entry  2)  	70	5	replace
553	[BUG]  [BUGGY]  return  c  >  0?  1  :  Integer.MIN_VALUE;  [FE]  (entry  2)  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  Integer.MIN_VALUE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  Integer.MIN_VALUE;	  return    c    >    0?    1    :    d;    	compilable	  [FE]  (entry  2)  	70	5	replace
554	[BUG]  [BUGGY]  Integer  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  getSurroundingSpaces();	  return    c    -    1;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	153	None	replace
555	[BUG]  [BUGGY]  return  c  -  1;  int  c  =  getSurroundingSpaces()  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1;  int  c  =  getSurroundingSpaces()  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  1;  int  c  =  getSurroundingSpaces()  +  1;	  return    c    -    1;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	153	None	replace
556	[BUG]  [BUGGY]  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence ");  [CE]  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence ");	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    EOF    whilst    processing    escape    sequence       ");    	non-compiled	[CE]  	344	None	replace
557	[BUG]  [BUGGY]  default:  throw  new  EOF  whilst  processing  escape  sequence ");  [CE]  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  default:  throw  new  EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	default:  throw  new  EOF  whilst  processing  escape  sequence ");	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    EOF    whilst    processing    escape    sequence       ");    	non-compiled	[CE]  	344	None	replace
558	[BUG]  [BUGGY]  default:  return  BACKSPACE;  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence ");  [CE]  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  default:  return  BACKSPACE;  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	default:  return  BACKSPACE;  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence ");	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    EOF    whilst    processing    escape    sequence       ");    	non-compiled	[CE]  	344	None	replace
559	[BUG]  [BUGGY]  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence. ");  [CE]  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence. ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence. ");	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    EOF    whilst    processing    escape    sequence       ");    	non-compiled	[CE]  	344	None	replace
560	[BUG]  [BUGGY]  int  delimiter  =  getDelimiter()  -  1;  [CE]  cannot  find  symbol  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getDelimiter()  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getDelimiter()  -  1;	  int    delimiter    =    getDelimiter();    	non-compiled	[CE]  cannot  find  symbol	284	None	replace
561	[BUG]  [BUGGY]  int  delimiter  =  getDelimiter(c);  [CE]  cannot  find  symbol  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getDelimiter(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getDelimiter(c);	  int    delimiter    =    getDelimiter();    	non-compiled	[CE]  cannot  find  symbol	284	None	replace
562	[BUG]  [BUGGY]  int  delimiter  =  getDelimiter()  +  1;  [CE]  cannot  find  symbol  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getDelimiter()  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getDelimiter()  +  1;	  int    delimiter    =    getDelimiter();    	non-compiled	[CE]  cannot  find  symbol	284	None	replace
563	[BUG]  [BUGGY]  int  delimiter  =  getDelimiterChar();  [CE]  cannot  find  symbol  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getDelimiterChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getDelimiterChar();	  int    delimiter    =    getDelimiter();    	non-compiled	[CE]  cannot  find  symbol	284	None	replace
564	[BUG]  [BUGGY]  int  delimiter  =  getDelimiter()  -  2;  [CE]  cannot  find  symbol  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getDelimiter()  -  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getDelimiter()  -  2;	  int    delimiter    =    getDelimiter();    	non-compiled	[CE]  cannot  find  symbol	284	None	replace
565	[BUG]  [BUGGY]  int  delimiter  =  getDelimiterIndex();  [CE]  cannot  find  symbol  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getDelimiterIndex();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getDelimiterIndex();	  int    delimiter    =    getDelimiter();    	non-compiled	[CE]  cannot  find  symbol	284	None	replace
566	[BUG]  [BUGGY]  return  c  >  0?  1  :  escape;  c  >  0?  1  :  escape;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  escape;  c  >  0?  1  :  escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    escape;    c  >  0?  1  :  escape;	  	non-compiled	[CE]  not  a  statement	303	None	add
567	[BUG]  [BUGGY]  return  c  >  0?  1  :  escape;  int  c  >  0?  1  :  escape;  [CE]  ';'  expected  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  escape;  int  c  >  0?  1  :  escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    escape;    int  c  >  0?  1  :  escape;	  	non-compiled	[CE]  ';'  expected	303	None	add
568	[BUG]  [BUGGY]  return  c  >  0?  1  :  escape;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  escape;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    escape;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	303	None	add
569	[BUG]  [BUGGY]  return  c  >  0?  1  :  escape;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  escape;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    escape;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	303	None	add
570	[BUG]  [BUGGY]  return  c  >  0?  1  :  escape;  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  escape;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    escape;    int  c  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	303	None	add
571	[BUG]  [BUGGY]  return  c  >  0?  1  :  escape;  int  c  =  escape.length();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  escape;  int  c  =  escape.length();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    escape;    int  c  =  escape.length();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	303	None	add
572	[BUG]  [BUGGY]  return  c  >  0?  1  :  escape;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  escape;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    escape;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	303	None	add
573	[BUG]  [BUGGY]  return  c  >  0?  1  :  escape;  int  c  =  getSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  escape;  int  c  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    escape;    int  c  =  getSurroundingSpace(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	303	None	add
574	[BUG]  [BUGGY]  c  +=  getEscapeSurroundingSpaces();  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  +=  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  +=  getEscapeSurroundingSpaces();	  return    c    +    1;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	31	None	replace
575	[BUG]  [BUGGY]  return  END_OF_STREAM  +  4;  return  END_OF_STREAM  +  4;  [CE]  unreachable  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  4;  return  END_OF_STREAM  +  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    4;    return  END_OF_STREAM  +  4;	  	non-compiled	[CE]  unreachable  statement	74	None	add
576	[BUG]  [BUGGY]  return  END_OF_STREAM  +  4;  END_OF_STREAM  +  4;  [CE]  not  a  statement  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  4;  END_OF_STREAM  +  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    4;    END_OF_STREAM  +  4;	  	non-compiled	[CE]  not  a  statement	74	None	add
577	[BUG]  [BUGGY]  return  END_OF_STREAM  +  4;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  4;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    4;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	74	None	add
578	[BUG]  [BUGGY]  return  END_OF_STREAM  +  4;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  4;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    4;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	74	None	add
579	[BUG]  [BUGGY]  return  END_OF_STREAM  +  4;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  4;  int  c  =  in.read();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    4;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	74	None	add
580	[BUG]  [BUGGY]  return  END_OF_STREAM  +  4;  Integer  c  =  in.readInt();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  4;  Integer  c  =  in.readInt();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    4;    Integer  c  =  in.readInt();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	74	None	add
581	[BUG]  [BUGGY]  return  END_OF_STREAM  +  4;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  4;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    4;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	74	None	add
582	[BUG]  [BUGGY]  return  END_OF_STREAM  +  4;  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  4;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    4;    int  c  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	74	None	add
583	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  >  0?  1  :  END_OF_STREAM  +  1;	  return    c    >    0?    1    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	63	5	replace
584	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM  +  1;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  END_OF_STREAM  +  1;	  return    c    >    0?    1    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	63	5	replace
585	[BUG]  [BUGGY]  while(c  <  END_OF_STREAM  ||  c  >  getSurroundingSpaces())  {  return  c  &  END_OF_STREAM;  [CE]  illegal  start  of  expression  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  END_OF_STREAM  ||  c  >  getSurroundingSpaces())  {  return  c  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  END_OF_STREAM  ||  c  >  getSurroundingSpaces())  {  return  c  &  END_OF_STREAM;	  return    c    &    END_OF_STREAM;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
586	[BUG]  [BUGGY]  while(c  <  END_OF_STREAM)  {  return  c  &  END_OF_STREAM;  [CE]  illegal  start  of  expression  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  END_OF_STREAM)  {  return  c  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  END_OF_STREAM)  {  return  c  &  END_OF_STREAM;	  return    c    &    END_OF_STREAM;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
587	[BUG]  [BUGGY]  while(c  <  END_OF_STREAM  ||  c  >  END_OF_STREAM)  {  return  c  &  END_OF_STREAM;  [CE]  illegal  start  of  expression  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  END_OF_STREAM  ||  c  >  END_OF_STREAM)  {  return  c  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  END_OF_STREAM  ||  c  >  END_OF_STREAM)  {  return  c  &  END_OF_STREAM;	  return    c    &    END_OF_STREAM;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
588	[BUG]  [BUGGY]  while(c  <  END_OF_STREAM  ||  c  >  getSurroundingSpaces())  {  return  c  -  END_OF_STREAM;  [CE]  illegal  start  of  expression  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  END_OF_STREAM  ||  c  >  getSurroundingSpaces())  {  return  c  -  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  END_OF_STREAM  ||  c  >  getSurroundingSpaces())  {  return  c  -  END_OF_STREAM;	  return    c    &    END_OF_STREAM;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
589	[BUG]  [BUGGY]  c  +=  getSurroundingSpaces().size();  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  +=  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  +=  getSurroundingSpaces().size();	  return    c    +    1;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	37	None	replace
590	[BUG]  [BUGGY]  null  c  =  getSurroundingSpaces().size();  [CE]  not  a  statement  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  null  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	null  c  =  getSurroundingSpaces().size();	  return    c    +    1;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  not  a  statement	37	None	replace
591	[BUG]  [BUGGY]  int  c  =  getSurroundingSpaces().size()  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpaces().size()  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpaces().size()  +  1;	  return    c    +    1;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	37	None	replace
592	[BUG]  [BUGGY]  return  c  +  4;  c  +  4;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  4;  c  +  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    4;    c  +  4;	  	non-compiled	[CE]  not  a  statement	88	None	add
593	[BUG]  [BUGGY]  return  c  +  4;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  4;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    4;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	88	None	add
594	[BUG]  [BUGGY]  return  c  +  4;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  4;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    4;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	88	None	add
595	[BUG]  [BUGGY]  return  c  +  4;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  4;  int  c  =  in.read();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    4;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	88	None	add
596	[BUG]  [BUGGY]  return  c  +  4;  int  c  =  getSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  4;  int  c  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    4;    int  c  =  getSurroundingSpace(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	88	None	add
597	[BUG]  [BUGGY]  return  c  +  4;  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  4;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    4;    int  c  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	88	None	add
598	[BUG]  [BUGGY]  return  c  +  4;  int  c  +  4;  [CE]  ';'  expected  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  4;  int  c  +  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    4;    int  c  +  4;	  	non-compiled	[CE]  ';'  expected	88	None	add
599	[BUG]  [BUGGY]  return  c  +  4;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  4;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    4;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	88	None	add
600	[BUG]  [BUGGY]  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeChar();	  return    END_OF_STREAM    +    1;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	190	None	replace
601	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  int  c  =  getEscapeChar();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  int  c  =  getEscapeChar();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  int  c  =  getEscapeChar();  }	  return    END_OF_STREAM    +    1;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	190	None	replace
602	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  return  getEscapeChar();  }  [CE]  cannot  find  symbol  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  return  getEscapeChar();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  return  getEscapeChar();  }	  return    END_OF_STREAM    +    1;    int    c    =    getEscapeChar();    	non-compiled	[CE]  cannot  find  symbol	190	None	replace
603	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  int  c  =  getEscapeChar();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  int  c  =  getEscapeChar();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  int  c  =  getEscapeChar();  }	  return    END_OF_STREAM    +    1;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	190	None	replace
604	[BUG]  [BUGGY]  [FE]  IOException  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  throw  new  IOException( " ");  }	  return    END_OF_STREAM    +    1;    int    c    =    getEscapeChar();    	compilable	  [FE]  IOException  	190	5	replace
605	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  throw  new  IOException( " ");  }  [FE]  IOException  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  throw  new  IOException( " ");  }	  return    END_OF_STREAM    +    1;    int    c    =    getEscapeChar();    	compilable	  [FE]  IOException  	190	5	replace
606	[BUG]  [BUGGY]  int  c  =  getSurroundingSpaces().size();  return  END_OF_STREAM  +  c;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpaces().size();  return  END_OF_STREAM  +  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpaces().size();  return  END_OF_STREAM  +  c;	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpaces().size();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	189	None	replace
607	[BUG]  [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM  +  c;  }  else  {  int  c  =  getSurroundingSpaces().size();  return  END_OF_STREAM  +  c;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM  +  c;  }  else  {  int  c  =  getSurroundingSpaces().size();  return  END_OF_STREAM  +  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(ignoreEmptyLines)  {  return  END_OF_STREAM  +  c;  }  else  {  int  c  =  getSurroundingSpaces().size();  return  END_OF_STREAM  +  c;  }	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpaces().size();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	189	None	replace
608	[BUG]  [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM  +  c;  int  c  =  getSurroundingSpaces().size();  return  END_OF_STREAM  +  c;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM  +  c;  int  c  =  getSurroundingSpaces().size();  return  END_OF_STREAM  +  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(ignoreEmptyLines)  {  return  END_OF_STREAM  +  c;  int  c  =  getSurroundingSpaces().size();  return  END_OF_STREAM  +  c;  }	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpaces().size();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	189	None	replace
609	[BUG]  [BUGGY]  c  =  getSurroundingSpaces().size();  return  END_OF_STREAM  +  c;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getSurroundingSpaces().size();  return  END_OF_STREAM  +  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getSurroundingSpaces().size();  return  END_OF_STREAM  +  c;	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpaces().size();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	189	None	replace
610	[BUG]  [BUGGY]  null  c  =  getSurroundingSpaces().size();  return  END_OF_STREAM  +  c;  [CE]  not  a  statement  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  null  c  =  getSurroundingSpaces().size();  return  END_OF_STREAM  +  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	null  c  =  getSurroundingSpaces().size();  return  END_OF_STREAM  +  c;	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpaces().size();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  not  a  statement	189	None	replace
611	[BUG]  [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM  +  c;  }  else  {  return  getSurroundingSpaces().size();  }  [CE]  cannot  find  symbol  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM  +  c;  }  else  {  return  getSurroundingSpaces().size();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(ignoreEmptyLines)  {  return  END_OF_STREAM  +  c;  }  else  {  return  getSurroundingSpaces().size();  }	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpaces().size();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
612	[BUG]  [BUGGY]  return  CSVFormat.END_OF_STREAM  +  END_OF_STREAM;  [CE]  cannot  find  symbol  END_OF_STREAM  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.END_OF_STREAM  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.END_OF_STREAM  +  END_OF_STREAM;	  return    ch    +    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_STREAM	184	None	replace
613	[BUG]  [BUGGY]  return  CSVFormat.DEFAULT_SURroundingSpaces  +  END_OF_STREAM;  [CE]  cannot  find  symbol  DEFAULT_SURroundingSpaces  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.DEFAULT_SURroundingSpaces  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.DEFAULT_SURroundingSpaces  +  END_OF_STREAM;	  return    ch    +    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_SURroundingSpaces	184	None	replace
614	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.escape  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  this.escape  +  END_OF_STREAM;	  return    ch    +    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	184	5	replace
615	[BUG]  [BUGGY]  return  this.escape  +  END_OF_STREAM;  [FE]  (entry  2)  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.escape  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.escape  +  END_OF_STREAM;	  return    ch    +    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	184	5	replace
616	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  escape  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  escape  +  END_OF_STREAM;	  return    ch    +    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	184	5	replace
617	[BUG]  [BUGGY]  return  escape  +  END_OF_STREAM;  [FE]  (entry  2)  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  escape  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  escape  +  END_OF_STREAM;	  return    ch    +    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	184	5	replace
618	[BUG]  [BUGGY]  return  CSVFormat.DEFAULT_SURroundINGSpaces  +  END_OF_STREAM;  [CE]  cannot  find  symbol  DEFAULT_SURroundINGSpaces  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.DEFAULT_SURroundINGSpaces  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.DEFAULT_SURroundINGSpaces  +  END_OF_STREAM;	  return    ch    +    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_SURroundINGSpaces	184	None	replace
619	[BUG]  [BUGGY]  return  b  +  END_OF_STREAM;  [CE]  cannot  find  symbol  b  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  b  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  b  +  END_OF_STREAM;	  return    ch    +    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  b	184	None	replace
620	[BUG]  [BUGGY]  return  c  &  BACKSPACE;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  BACKSPACE;  int  c  =  getSurroundingSpaces().size();	  return    c    &    END_OF_STREAM;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	41	None	replace
621	[BUG]  [BUGGY]  return  c  -  3;  c  -  3;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  3;  c  -  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    3;    c  -  3;	  	non-compiled	[CE]  not  a  statement	118	None	add
622	[BUG]  [BUGGY]  return  c  -  3;  int  c  -  3;  [CE]  ';'  expected  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  3;  int  c  -  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    3;    int  c  -  3;	  	non-compiled	[CE]  ';'  expected	118	None	add
623	[BUG]  [BUGGY]  return  c  -  3;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  3;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    3;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	118	None	add
624	[BUG]  [BUGGY]  return  c  -  3;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  3;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    3;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	118	None	add
625	[BUG]  [BUGGY]  return  c  -  3;  int  c  =  Integer.parseInt(quoteChar);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  3;  int  c  =  Integer.parseInt(quoteChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    3;    int  c  =  Integer.parseInt(quoteChar);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	118	None	add
626	[BUG]  [BUGGY]  return  c  -  3;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  3;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    3;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	118	None	add
627	[BUG]  [BUGGY]  return  c  -  3;  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  3;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    3;    int  c  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	118	None	add
628	[BUG]  [BUGGY]  return  c  -  3;  int  c  =  getSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  3;  int  c  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    3;    int  c  =  getSurroundingSpace(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	118	None	add
629	[BUG]  [BUGGY]  return  c  <  =  0?  1  :  c;  [CE]  illegal  start  of  expression  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  =  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  =  0?  1  :  c;	  return    c    <    0?    1    :    c;    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
630	[BUG]  [BUGGY]  return  c  <  0?  1  :  END_OBJECT;  [CE]  cannot  find  symbol  END_OBJECT  [FE]      Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  END_OBJECT;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  0?  1  :  END_OBJECT;	  return    c    <    0?    1    :    c;    	non-compiled	[CE]  cannot  find  symbol  END_OBJECT	65	None	replace
631	[BUG]  [BUGGY]  return  c  <  0?  1  :  END_SURroundingSpaces;  [CE]  cannot  find  symbol  END_SURroundingSpaces  [FE]        Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  END_SURroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  0?  1  :  END_SURroundingSpaces;	  return    c    <    0?    1    :    c;    	non-compiled	[CE]  cannot  find  symbol  END_SURroundingSpaces	65	None	replace
632	[BUG]  [BUGGY]  return  c  <  0?  1  :  ENDSPACE;  [CE]  cannot  find  symbol  ENDSPACE  [FE]          Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  ENDSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  0?  1  :  ENDSPACE;	  return    c    <    0?    1    :    c;    	non-compiled	[CE]  cannot  find  symbol  ENDSPACE	65	None	replace
633	[BUG]  [BUGGY]  return  c  <  0?  1  :  d;  [CE]  cannot  find  symbol  d  [FE]            Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  d;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  0?  1  :  d;	  return    c    <    0?    1    :    c;    	non-compiled	[CE]  cannot  find  symbol  d	65	None	replace
634	[BUG]  [BUGGY]  return  c  <  0?  1  :  b;  [CE]  cannot  find  symbol  b  [FE]              Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  b;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  0?  1  :  b;	  return    c    <    0?    1    :    c;    	non-compiled	[CE]  cannot  find  symbol  b	65	None	replace
635	[BUG]  [BUGGY]  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence   "  +  1;  [CE]  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence   "  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence   "  +  1;	  return    END_OF_STREAM    +    1;    case    END_OF_STREAM:    throw    new    EOF    whilst    processing    escape    sequence       "    +    1;    	non-compiled	[CE]  	319	None	replace
636	[BUG]  [BUGGY]  default:  throw  new  EOF  whilst  processing  escape  sequence "  +  1;  [CE]  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  default:  throw  new  EOF  whilst  processing  escape  sequence "  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	default:  throw  new  EOF  whilst  processing  escape  sequence "  +  1;	  return    END_OF_STREAM    +    1;    case    END_OF_STREAM:    throw    new    EOF    whilst    processing    escape    sequence       "    +    1;    	non-compiled	[CE]  	319	None	replace
637	[BUG]  [BUGGY]  result:  throw  new  EOF  whilst  processing  escape  sequence "  +  1;  [CE]  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result:  throw  new  EOF  whilst  processing  escape  sequence "  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result:  throw  new  EOF  whilst  processing  escape  sequence "  +  1;	  return    END_OF_STREAM    +    1;    case    END_OF_STREAM:    throw    new    EOF    whilst    processing    escape    sequence       "    +    1;    	non-compiled	[CE]  	319	None	replace
638	[BUG]  [BUGGY]  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence. "  +  1;  [CE]  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence. "  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence. "  +  1;	  return    END_OF_STREAM    +    1;    case    END_OF_STREAM:    throw    new    EOF    whilst    processing    escape    sequence       "    +    1;    	non-compiled	[CE]  	319	None	replace
639	[BUG]  [BUGGY]  return  c.intValue()  +  1;  [CE]  int  cannot  be  dereferenced  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c.intValue()  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c.intValue()  +  1;	  return    END_OF_STREAM.intValue()    +    1;    	non-compiled	[CE]  int  cannot  be  dereferenced	107	None	replace
640	[BUG]  [BUGGY]  return  c,  END_OF_STREAM.intValue()  +  1;  [CE]  ';'  expected  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c,  END_OF_STREAM.intValue()  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c,  END_OF_STREAM.intValue()  +  1;	  return    END_OF_STREAM.intValue()    +    1;    	non-compiled	[CE]  ';'  expected	107	None	replace
641	[BUG]  [BUGGY]  return  END_OF_STREAM.intValue()  *  1;  [CE]  int  cannot  be  dereferenced  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.intValue()  *  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.intValue()  *  1;	  return    END_OF_STREAM.intValue()    +    1;    	non-compiled	[CE]  int  cannot  be  dereferenced	107	None	replace
642	[BUG]  [BUGGY]  return  END_OF_STREAM.intValue()  +  2;  [CE]  int  cannot  be  dereferenced  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.intValue()  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.intValue()  +  2;	  return    END_OF_STREAM.intValue()    +    1;    	non-compiled	[CE]  int  cannot  be  dereferenced	107	None	replace
643	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  't')  {  return  delimiter;  }  [CE]  missing  return  statement  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  't')  {  return  delimiter;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  't')  {  return  delimiter;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    return    delimiter;    }    	non-compiled	[CE]  missing  return  statement	205	None	replace
644	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  delimiter;  }  [CE]  missing  return  statement  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  delimiter;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  delimiter;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    return    delimiter;    }    	non-compiled	[CE]  missing  return  statement	205	None	replace
645	[BUG]  [BUGGY]  if(c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  delimiter;  }  [CE]  missing  return  statement  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  delimiter;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  delimiter;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    return    delimiter;    }    	non-compiled	[CE]  missing  return  statement	205	None	replace
646	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r')  {  return  delimiter;  }  [CE]  missing  return  statement  [FE]                                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r')  {  return  delimiter;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r')  {  return  delimiter;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    return    delimiter;    }    	non-compiled	[CE]  missing  return  statement	205	None	replace
647	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'p'  ||  c  ==  't')  {  return  delimiter;  }  [CE]  missing  return  statement  [FE]                                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'p'  ||  c  ==  't')  {  return  delimiter;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'p'  ||  c  ==  't')  {  return  delimiter;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    return    delimiter;    }    	non-compiled	[CE]  missing  return  statement	205	None	replace
648	[BUG]  [BUGGY]  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  delimiter;  }  [CE]  illegal  start  of  expression  [FE]                                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  delimiter;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  delimiter;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    return    delimiter;    }    	non-compiled	[CE]  illegal  start  of  expression	205	None	replace
649	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  't')  {  return  DElimiter;  }  [CE]  cannot  find  symbol  DElimiter  [FE]                                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  't')  {  return  DElimiter;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  't')  {  return  DElimiter;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    return    delimiter;    }    	non-compiled	[CE]  cannot  find  symbol  DElimiter	205	None	replace
650	[BUG]  [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(ignoreEmptyLines)  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  }	  return    END_OF_STREAM;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	127	None	replace
651	[BUG]  [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getSurroundingSpaces();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getSurroundingSpaces();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(ignoreEmptyLines)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getSurroundingSpaces();  }	  return    END_OF_STREAM;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	127	None	replace
652	[BUG]  [BUGGY]  while(c  <  getSurroundingSpaces())  {  c  =  getSurroundingSpaces();  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  getSurroundingSpaces())  {  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  getSurroundingSpaces())  {  c  =  getSurroundingSpaces();	  return    END_OF_STREAM;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
653	[BUG]  [BUGGY]  while(c  ==  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }  [CE]  missing  return  statement  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  ==  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  ==  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }	  if(c    ==    END_OF_STREAM)    {    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    }    	non-compiled	[CE]  missing  return  statement	18	None	replace
654	[BUG]  [BUGGY]  while(c  <  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }  [CE]  missing  return  statement  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }	  if(c    ==    END_OF_STREAM)    {    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    }    	non-compiled	[CE]  missing  return  statement	18	None	replace
655	[BUG]  [BUGGY]  while(c  >=  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }  [CE]  missing  return  statement  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  >=  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  >=  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }	  if(c    ==    END_OF_STREAM)    {    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    }    	non-compiled	[CE]  missing  return  statement	18	None	replace
656	[BUG]  [BUGGY]  result  |=  c  ==  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }  [CE]  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result  |=  c  ==  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result  |=  c  ==  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }	  if(c    ==    END_OF_STREAM)    {    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    }    	non-compiled	[CE]  	18	None	replace
657	[BUG]  [BUGGY]  return  c  +  'ufffd';  [CE]  unclosed  character  literal  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  'ufffd';  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  'ufffd';	  return    END_OF_STREAM    +    'ufffd';    	non-compiled	[CE]  unclosed  character  literal	185	None	replace
658	[BUG]  [BUGGY]  return  'ufffd'  +  END_OF_STREAM;  [CE]  unclosed  character  literal  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  'ufffd'  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  'ufffd'  +  END_OF_STREAM;	  return    END_OF_STREAM    +    'ufffd';    	non-compiled	[CE]  unclosed  character  literal	185	None	replace
659	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  'f';  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  +  'f';	  return    END_OF_STREAM    +    'ufffd';    	compilable	  [FE]  (entry  2)  	185	5	replace
660	[BUG]  [BUGGY]  return  c  +  'f';  [FE]  (entry  2)  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  'f';  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  'f';	  return    END_OF_STREAM    +    'ufffd';    	compilable	  [FE]  (entry  2)  	185	5	replace
661	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  '.';  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  END_OF_STREAM  +  '.';	  return    END_OF_STREAM    +    'ufffd';    	compilable	  [FE]  (entry  2)  	185	5	replace
662	[BUG]  [BUGGY]  return  END_OF_STREAM  +  '.';  [FE]  (entry  2)  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  '.';  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  '.';	  return    END_OF_STREAM    +    'ufffd';    	compilable	  [FE]  (entry  2)  	185	5	replace
663	[BUG]  [BUGGY]  return  END_OF_STREAM  +  'escape';  [CE]  unclosed  character  literal  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  'escape';  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  'escape';	  return    END_OF_STREAM    +    'ufffd';    	non-compiled	[CE]  unclosed  character  literal	185	None	replace
664	[BUG]  [BUGGY]  return  c  +  1;  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence ");  [CE]  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  1;  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  1;  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence ");	  return    END_OF_STREAM    +    1;    case    END_OF_STREAM:    throw    new    EOF    whilst    processing    escape    sequence       ");    	non-compiled	[CE]  	317	None	replace
665	[BUG]  [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( "  [CE]  unclosed  string  literal  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( "  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( "	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	25	None	replace
666	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( "  [CE]  unclosed  string  literal  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( "  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( "	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	25	None	replace
667	[BUG]  [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }  }  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
668	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
669	[BUG]  [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  c;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( "  [CE]  unclosed  string  literal  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  c;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( "  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(!ignoreSurroundingSpaces)  {  return  c;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( "	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	25	None	replace
670	[BUG]  [BUGGY]  if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( "  [CE]  illegal  start  of  expression  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( "  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( "	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
671	[BUG]  [BUGGY]  while(c  <  len)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  len)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  len)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
672	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  -  END_OF_STREAM  +  2;	  return    c    &    END_OF_STREAM    +    2;    	compilable	  [FE]  (entry  2)  	272	5	replace
673	[BUG]  [BUGGY]  return  c  -  END_OF_STREAM  +  2;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  END_OF_STREAM  +  2;	  return    c    &    END_OF_STREAM    +    2;    	compilable	  [FE]  (entry  2)  	272	5	replace
674	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  &  END_OF_STREAM  +  4;	  return    c    &    END_OF_STREAM    +    2;    	compilable	  [FE]  (entry  2)  	272	5	replace
675	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  4;  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  END_OF_STREAM  +  4;	  return    c    &    END_OF_STREAM    +    2;    	compilable	  [FE]  (entry  2)  	272	5	replace
676	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  END_OF_STREAM  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  +  END_OF_STREAM  +  2;	  return    c    &    END_OF_STREAM    +    2;    	compilable	  [FE]  (entry  2)  	272	5	replace
677	[BUG]  [BUGGY]  return  c  +  END_OF_STREAM  +  2;  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  END_OF_STREAM  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  END_OF_STREAM  +  2;	  return    c    &    END_OF_STREAM    +    2;    	compilable	  [FE]  (entry  2)  	272	5	replace
678	[BUG]  [BUGGY]  int  c  =  getSurroundingSpaces().length;  return  END_OF_STREAM  +  c;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpaces().length;  return  END_OF_STREAM  +  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpaces().length;  return  END_OF_STREAM  +  c;	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpaces().length;    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	339	None	replace
679	[BUG]  [BUGGY]  c  =  getSurroundingSpaces().length;  return  END_OF_STREAM  +  c;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getSurroundingSpaces().length;  return  END_OF_STREAM  +  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getSurroundingSpaces().length;  return  END_OF_STREAM  +  c;	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpaces().length;    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	339	None	replace
680	[BUG]  [BUGGY]  return  END_OF_STREAM  +  getSurroundingSpaces().length;  [CE]  cannot  find  symbol  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  getSurroundingSpaces().length;	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpaces().length;    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  cannot  find  symbol	339	None	replace
681	[BUG]  [BUGGY]  int  c  =  getSurroundingSpaces().length;  return  END_OF_STREAM  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpaces().length;  return  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpaces().length;  return  END_OF_STREAM  +  1;	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpaces().length;    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	339	None	replace
682	[BUG]  [BUGGY]  return  END_OF_STREAM  &&  END_OF_STREAM  *  2;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  &&  END_OF_STREAM  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  &&  END_OF_STREAM  *  2;	  return    END_OF_STREAM    ||    END_OF_STREAM    *    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	358	None	replace
683	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM  *  2  +  1;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM  *  2  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_STREAM  *  2  +  1;	  return    END_OF_STREAM    ||    END_OF_STREAM    *    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	358	None	replace
684	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM  *  4;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM  *  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_STREAM  *  4;	  return    END_OF_STREAM    ||    END_OF_STREAM    *    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	358	None	replace
685	[BUG]  [BUGGY]  return  c  ||  END_OF_STREAM  *  2;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ||  END_OF_STREAM  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ||  END_OF_STREAM  *  2;	  return    END_OF_STREAM    ||    END_OF_STREAM    *    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	358	None	replace
686	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM  +  2;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_STREAM  +  2;	  return    END_OF_STREAM    ||    END_OF_STREAM    *    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	358	None	replace
687	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM  *  2L;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM  *  2L;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_STREAM  *  2L;	  return    END_OF_STREAM    ||    END_OF_STREAM    *    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	358	None	replace
688	[BUG]  [BUGGY]  return  c!=  0?  c  :  END_OF_STREAM;  c  >>  0?  c  :  END_OF_STREAM;  [CE]  not  a  statement  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  c  :  END_OF_STREAM;  c  >>  0?  c  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    c    :    END_OF_STREAM;    c  >>  0?  c  :  END_OF_STREAM;	  	non-compiled	[CE]  not  a  statement	143	None	add
689	[BUG]  [BUGGY]  return  c!=  0?  c  :  END_OF_STREAM;  c  >=  0?  c  :  END_OF_STREAM;  [CE]  not  a  statement  [FE]      Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  c  :  END_OF_STREAM;  c  >=  0?  c  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    c    :    END_OF_STREAM;    c  >=  0?  c  :  END_OF_STREAM;	  	non-compiled	[CE]  not  a  statement	143	None	add
690	[BUG]  [BUGGY]  return  c!=  0?  c  :  END_OF_STREAM;  c!=  0?  c  :  END_OF_STREAM;  [CE]  not  a  statement  [FE]        Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  c  :  END_OF_STREAM;  c!=  0?  c  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    c    :    END_OF_STREAM;    c!=  0?  c  :  END_OF_STREAM;	  	non-compiled	[CE]  not  a  statement	143	None	add
691	[BUG]  [BUGGY]  return  c!=  0?  c  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  c  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    c    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	143	None	add
692	[BUG]  [BUGGY]  return  c!=  0?  c  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  c  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    c    :    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	143	None	add
693	[BUG]  [BUGGY]  return  c!=  0?  c  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  c  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    c    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	143	None	add
694	[BUG]  [BUGGY]  return  c!=  0?  c  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  c  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    c    :    END_OF_STREAM;    int  c  =  getCurrentSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	143	None	add
695	[BUG]  [BUGGY]  return  c!=  0?  c  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  c  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    c    :    END_OF_STREAM;    int  c  =  getCurrentSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	143	None	add
696	[BUG]  [BUGGY]  int  escape  =  readEscape(in,  c,  escapeChar);  [CE]  cannot  find  symbol  escapeChar  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escape  =  readEscape(in,  c,  escapeChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escape  =  readEscape(in,  c,  escapeChar);	  return    escape;    int    escape    =    readEscape(in,    c);    	non-compiled	[CE]  cannot  find  symbol  escapeChar	237	None	replace
697	[BUG]  [BUGGY]  return  c;  escape  =  readEscape(in,  escape);  [CE]  cannot  assign  a  value  to  final  variable  escape  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c;  escape  =  readEscape(in,  escape);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c;  escape  =  readEscape(in,  escape);	  return    escape;    int    escape    =    readEscape(in,    c);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  escape	237	None	replace
698	[BUG]  [BUGGY]  char  escape  =  readEscape(in,  c);  [CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  char  escape  =  readEscape(in,  c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	char  escape  =  readEscape(in,  c);	  return    escape;    int    escape    =    readEscape(in,    c);    	non-compiled	[CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;	237	None	replace
699	[BUG]  [BUGGY]  int  escape  =  readEscape(in,  c,  escapeSurroundingSpaces);  [CE]  cannot  find  symbol  escapeSurroundingSpaces  [FE]                            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escape  =  readEscape(in,  c,  escapeSurroundingSpaces);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escape  =  readEscape(in,  c,  escapeSurroundingSpaces);	  return    escape;    int    escape    =    readEscape(in,    c);    	non-compiled	[CE]  cannot  find  symbol  escapeSurroundingSpaces	237	None	replace
700	[BUG]  [BUGGY]  return  in;  escape  =  readEscape(escapeChar,  in,  c);  [CE]  incompatible  types  [FE]                              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  in;  escape  =  readEscape(escapeChar,  in,  c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  in;  escape  =  readEscape(escapeChar,  in,  c);	  return    escape;    int    escape    =    readEscape(in,    c);    	non-compiled	[CE]  incompatible  types	237	None	replace
701	[BUG]  [BUGGY]  return  in;  escape  =  readEscape(c,  escape);  [CE]  incompatible  types  [FE]                                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  in;  escape  =  readEscape(c,  escape);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  in;  escape  =  readEscape(c,  escape);	  return    escape;    int    escape    =    readEscape(in,    c);    	non-compiled	[CE]  incompatible  types	237	None	replace
702	[BUG]  [BUGGY]  int  escape  =  readEscape(in,  c,  commmentStart);  [CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;  [FE]                                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escape  =  readEscape(in,  c,  commmentStart);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escape  =  readEscape(in,  c,  commmentStart);	  return    escape;    int    escape    =    readEscape(in,    c);    	non-compiled	[CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;	237	None	replace
703	[BUG]  [BUGGY]  return  c  +  8;  c  +  8;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  8;  c  +  8;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    8;    c  +  8;	  	non-compiled	[CE]  not  a  statement	90	None	add
704	[BUG]  [BUGGY]  return  c  +  8;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  8;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    8;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	90	None	add
705	[BUG]  [BUGGY]  return  c  +  8;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  8;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    8;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	90	None	add
706	[BUG]  [BUGGY]  return  c  +  8;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  8;  int  c  =  in.read();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    8;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	90	None	add
707	[BUG]  [BUGGY]  return  c  +  8;  int  c  +  8;  [CE]  ';'  expected  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  8;  int  c  +  8;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    8;    int  c  +  8;	  	non-compiled	[CE]  ';'  expected	90	None	add
708	[BUG]  [BUGGY]  return  c  +  8;  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  8;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    8;    int  c  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	90	None	add
709	[BUG]  [BUGGY]  return  c  +  8;  int  c  =  getSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  8;  int  c  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    8;    int  c  =  getSurroundingSpace(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	90	None	add
710	[BUG]  [BUGGY]  return  c  +  8;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  8;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    8;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	90	None	add
711	[BUG]  [BUGGY]  if(c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	202	None	replace
712	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')return  END_OF_STREAM;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	202	None	replace
713	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	202	None	replace
714	[BUG]  [BUGGY]  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [CE]  illegal  start  of  expression  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  illegal  start  of  expression	202	None	replace
715	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	202	None	replace
716	[BUG]  [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(ignoreEmptyLines)  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  }	  return    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	128	None	replace
717	[BUG]  [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getEscapeSurroundingSpaces();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getEscapeSurroundingSpaces();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(ignoreEmptyLines)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getEscapeSurroundingSpaces();  }	  return    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	128	None	replace
718	[BUG]  [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  }  else  {  throw  new  IOException( " ");  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  }  else  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(ignoreEmptyLines)  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  }  else  {  throw  new  IOException( " ");  }	  return    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	128	None	replace
719	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
720	[BUG]  [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }  [CE]  >  expected  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  >  expected	16	None	replace
721	[BUG]  [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }  [CE]  >  expected  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  >  expected	16	None	replace
722	[BUG]  [BUGGY]  int  len  =  0;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  len  =  0;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  len  =  0;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
723	[BUG]  [BUGGY]  int  len  =  0;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  len  =  0;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  len  =  0;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
724	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreSurroundingSpaces)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreSurroundingSpaces)  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreSurroundingSpaces)  {  throw  new  IOException( " ");  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
725	[BUG]  [BUGGY]  return  c  <  =  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  illegal  start  of  expression  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  =  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  =  0?  END_OF_STREAM  :  END_OF_STREAM;	  return    c    <    0?    END_OF_STREAM    :    END_OF_STREAM;    	non-compiled	[CE]  illegal  start  of  expression	330	None	replace
726	[BUG]  [BUGGY]  default:  return  BACKSPACE;  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  [CE]  duplicate  default  label  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  default:  return  BACKSPACE;  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	default:  return  BACKSPACE;  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence.   ");    	non-compiled	[CE]  duplicate  default  label	343	None	replace
727	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  <  0?  1  :  c  +  1;	  return    c    >    0?    1    :    c    +    1;    	compilable	  [FE]  (entry  2)  	308	5	replace
728	[BUG]  [BUGGY]  return  c  <  0?  1  :  c  +  1;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  0?  1  :  c  +  1;	  return    c    >    0?    1    :    c    +    1;    	compilable	  [FE]  (entry  2)  	308	5	replace
729	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  1  :  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  >=  0?  1  :  c  +  1;	  return    c    >    0?    1    :    c    +    1;    	compilable	  [FE]  (entry  2)  	308	5	replace
730	[BUG]  [BUGGY]  return  c  >=  0?  1  :  c  +  1;  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  1  :  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >=  0?  1  :  c  +  1;	  return    c    >    0?    1    :    c    +    1;    	compilable	  [FE]  (entry  2)  	308	5	replace
731	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  ==  0?  1  :  c  +  1;	  return    c    >    0?    1    :    c    +    1;    	compilable	  [FE]  (entry  2)  	308	5	replace
732	[BUG]  [BUGGY]  return  c  ==  0?  1  :  c  +  1;  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  1  :  c  +  1;	  return    c    >    0?    1    :    c    +    1;    	compilable	  [FE]  (entry  2)  	308	5	replace
733	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  >  0?  1  :  c  +  2;	  return    c    >    0?    1    :    c    +    1;    	compilable	  [FE]  (entry  2)  	308	5	replace
734	[BUG]  [BUGGY]  return  c  >  0?  1  :  c  +  2;  [FE]  (entry  2)  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  c  +  2;	  return    c    >    0?    1    :    c    +    1;    	compilable	  [FE]  (entry  2)  	308	5	replace
735	[BUG]  [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [CE]  >  expected  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }	  for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  >  expected	20	None	replace
736	[BUG]  [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }  [CE]  >  expected  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }	  for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  >  expected	20	None	replace
737	[BUG]  [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  String  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [CE]  >  expected  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  String  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  0;  c  <  len;  c++)  {  String  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }	  for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  >  expected	20	None	replace
738	[BUG]  [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  comenceStart;  }  [CE]  >  expected  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  comenceStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  comenceStart;  }	  for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  >  expected	20	None	replace
739	[BUG]  [BUGGY]  Char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [CE]  cannot  find  symbol  [FE]                                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }	  for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
740	[BUG]  [BUGGY]  Character  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [CE]  cannot  find  symbol  [FE]                                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Character  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Character  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }	  for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
741	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&  ignoreSurroundingSpaces)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&  ignoreSurroundingSpaces)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&  ignoreSurroundingSpaces)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	333	None	replace
742	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	333	None	replace
743	[BUG]  [BUGGY]  if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	333	None	replace
744	[BUG]  [BUGGY]  if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&  ignoreSurroundingSpaces)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&  ignoreSurroundingSpaces)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&  ignoreSurroundingSpaces)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	333	None	replace
745	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&  ignoreSurroundingSpaces)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&  ignoreSurroundingSpaces)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&  ignoreSurroundingSpaces)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	333	None	replace
746	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreSurroundingSpaces)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreSurroundingSpaces)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreSurroundingSpaces)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	333	None	replace
747	[BUG]  [BUGGY]  if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&  ignoreSurroundingSpaces)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&  ignoreSurroundingSpaces)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&  ignoreSurroundingSpaces)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	333	None	replace
748	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces();  return  c  -  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces();  return  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces();  return  c  -  1;	  return    c    -    1;    int    c    =    getEscapeSurroundingSpaces();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	309	None	replace
749	[BUG]  [BUGGY]  c  =  getEscapeSurroundingSpaces();  return  c  -  1;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getEscapeSurroundingSpaces();  return  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getEscapeSurroundingSpaces();  return  c  -  1;	  return    c    -    1;    int    c    =    getEscapeSurroundingSpaces();    return    c    -    1;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	309	None	replace
750	[BUG]  [BUGGY]  int  c  =  getSurroundingSpaces();  return  c  -  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpaces();  return  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpaces();  return  c  -  1;	  return    c    -    1;    int    c    =    getEscapeSurroundingSpaces();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	309	None	replace
751	[BUG]  [BUGGY]  c  =  getSurroundingSpaces();  return  c  -  1;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getSurroundingSpaces();  return  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getSurroundingSpaces();  return  c  -  1;	  return    c    -    1;    int    c    =    getEscapeSurroundingSpaces();    return    c    -    1;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	309	None	replace
752	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces();  return(c  -  1);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces();  return(c  -  1);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces();  return(c  -  1);	  return    c    -    1;    int    c    =    getEscapeSurroundingSpaces();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	309	None	replace
753	[BUG]  [BUGGY]  int  c  =  getSurroundingSpaces();  return(c  -  1);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpaces();  return(c  -  1);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpaces();  return(c  -  1);	  return    c    -    1;    int    c    =    getSurroundingSpaces();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	310	None	replace
754	[BUG]  [BUGGY]  while(c  <  getSurroundingSpaces())  {  return  c  -  1;  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  getSurroundingSpaces())  {  return  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  getSurroundingSpaces())  {  return  c  -  1;	  return    c    -    1;    int    c    =    getSurroundingSpaces();    return    c    -    1;    	non-compiled	[CE]  illegal  start  of  expression	310	None	replace
755	[BUG]  [BUGGY]  int  c  =  getSurroundingSpaces();  return  c  -  2;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpaces();  return  c  -  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpaces();  return  c  -  2;	  return    c    -    1;    int    c    =    getSurroundingSpaces();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	310	None	replace
756	[BUG]  [BUGGY]  return  END_OF_STREAM  +  1);  [CE]  ';'  expected  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  1);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  1);	  return    END_OF_STREAM    +    1L;    	non-compiled	[CE]  ';'  expected	73	None	replace
757	[BUG]  [BUGGY]  return  END_OF_STREAM  +  10.0;  [CE]  possible  loss  of  precision  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  10.0;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  10.0;	  return    END_OF_STREAM    +    1L;    	non-compiled	[CE]  possible  loss  of  precision	73	None	replace
758	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  128;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  END_OF_STREAM  +  128;	  return    END_OF_STREAM    +    1L;    	compilable	  [FE]  (entry  2)  	73	5	replace
759	[BUG]  [BUGGY]  return  END_OF_STREAM  +  128;  [FE]  (entry  2)  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  128;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  128;	  return    END_OF_STREAM    +    1L;    	compilable	  [FE]  (entry  2)  	73	5	replace
760	[BUG]  [BUGGY]  return  END_OF_STREAM  +  1E;  [CE]  malformed  floating  point  literal  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  1E;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  1E;	  return    END_OF_STREAM    +    1L;    	non-compiled	[CE]  malformed  floating  point  literal	73	None	replace
761	[BUG]  [BUGGY]  return  END_OF_STREAM  +  1B;  [CE]  ';'  expected  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  1B;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  1B;	  return    END_OF_STREAM    +    1L;    	non-compiled	[CE]  ';'  expected	73	None	replace
762	[BUG]  [BUGGY]  int  c  =  getChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getChar();	  return    c    +    1;    int    c    =    getChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	222	None	replace
763	[BUG]  [BUGGY]  Integer  c  =  getChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  getChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  getChar();	  return    c    +    1;    int    c    =    getChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	222	None	replace
764	[BUG]  [BUGGY]  char  c  =  getChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  char  c  =  getChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	char  c  =  getChar();	  return    c    +    1;    int    c    =    getChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	222	None	replace
765	[BUG]  [BUGGY]  c  =  getChar();  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getChar();	  return    c    +    1;    int    c    =    getChar();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	222	None	replace
766	[BUG]  [BUGGY]  return  c  -  6;  c  -  6;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  6;  c  -  6;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    6;    c  -  6;	  	non-compiled	[CE]  not  a  statement	116	None	add
767	[BUG]  [BUGGY]  return  c  -  6;  int  c  -  6;  [CE]  ';'  expected  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  6;  int  c  -  6;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    6;    int  c  -  6;	  	non-compiled	[CE]  ';'  expected	116	None	add
768	[BUG]  [BUGGY]  return  c  -  6;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  6;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    6;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	116	None	add
769	[BUG]  [BUGGY]  return  c  -  6;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  6;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    6;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	116	None	add
770	[BUG]  [BUGGY]  return  c  -  6;  int  c  =  Integer.parseInt(quoteChar);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  6;  int  c  =  Integer.parseInt(quoteChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    6;    int  c  =  Integer.parseInt(quoteChar);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	116	None	add
771	[BUG]  [BUGGY]  return  c  -  6;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  6;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    6;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	116	None	add
772	[BUG]  [BUGGY]  return  c  -  6;  int  c  =  getSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  6;  int  c  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    6;    int  c  =  getSurroundingSpace(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	116	None	add
773	[BUG]  [BUGGY]  return  c  -  6;  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  6;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    6;    int  c  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	116	None	add
774	[BUG]  [BUGGY]  int  c  =  getCurrentSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getCurrentSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getCurrentSurroundingSpaces();	  return    c    >    0?    c    :    END_OF_STREAM;    int    c    =    getCurrentSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	51	None	replace
775	[BUG]  [BUGGY]  Integer  c  =  getCurrentSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  getCurrentSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  getCurrentSurroundingSpaces();	  return    c    >    0?    c    :    END_OF_STREAM;    int    c    =    getCurrentSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	51	None	replace
776	[BUG]  [BUGGY]  Record  do  not  match  expected  result(c  &  BACKSPACE);  [CE]  not  a  statement  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Record  do  not  match  expected  result(c  &  BACKSPACE);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Record  do  not  match  expected  result(c  &  BACKSPACE);	  return    c    &    END_OF_STREAM;    Record    do    not    match    expected    result(c    &    END_OF_STREAM);    	non-compiled	[CE]  not  a  statement	194	None	replace
777	[BUG]  [BUGGY]  Record  do  not  match  expected  result(c  &  END_OF_STREAM);  [CE]  not  a  statement  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Record  do  not  match  expected  result(c  &  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Record  do  not  match  expected  result(c  &  END_OF_STREAM);	  return    c    &    END_OF_STREAM;    Record    do    not    match    expected    result(c    &    END_OF_STREAM);    	non-compiled	[CE]  not  a  statement	194	None	replace
778	[BUG]  [BUGGY]  Result  do  not  match  expected  result(c  &  END_OF_STREAM);  [CE]  not  a  statement  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Result  do  not  match  expected  result(c  &  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Result  do  not  match  expected  result(c  &  END_OF_STREAM);	  return    c    &    END_OF_STREAM;    Record    do    not    match    expected    result(c    &    END_OF_STREAM);    	non-compiled	[CE]  not  a  statement	194	None	replace
779	[BUG]  [BUGGY]  Record  do  not  match  expected  result(c  +  END_OF_STREAM);  [CE]  not  a  statement  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Record  do  not  match  expected  result(c  +  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Record  do  not  match  expected  result(c  +  END_OF_STREAM);	  return    c    &    END_OF_STREAM;    Record    do    not    match    expected    result(c    &    END_OF_STREAM);    	non-compiled	[CE]  not  a  statement	194	None	replace
780	[BUG]  [BUGGY]  result(c  &  END_OF_STREAM);  [CE]  cannot  find  symbol  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result(c  &  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result(c  &  END_OF_STREAM);	  return    c    &    END_OF_STREAM;    Record    do    not    match    expected    result(c    &    END_OF_STREAM);    	non-compiled	[CE]  cannot  find  symbol	194	None	replace
781	[BUG]  [BUGGY]  record  does  not  match  expected  result(c  &  END_OF_STREAM);  [CE]  ';'  expected  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  record  does  not  match  expected  result(c  &  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	record  does  not  match  expected  result(c  &  END_OF_STREAM);	  return    c    &    END_OF_STREAM;    Record    do    not    match    expected    result(c    &    END_OF_STREAM);    	non-compiled	[CE]  ';'  expected	194	None	replace
782	[BUG]  [BUGGY]  return  c  +  1;  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence.   ");  [CE]  duplicate  case  label  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  1;  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence.   ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  1;  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence.   ");	  return    END_OF_STREAM    +    1;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence.   ");    	non-compiled	[CE]  duplicate  case  label	320	None	replace
783	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  escape;  [CE]  duplicate  case  label  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  escape;	  case    END_OF_STREAM:    return    BACKSPACE;    	non-compiled	[CE]  duplicate  case  label	2	None	replace
784	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  label;  [CE]  duplicate  case  label  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  label;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  label;	  case    END_OF_STREAM:    return    BACKSPACE;    	non-compiled	[CE]  duplicate  case  label	2	None	replace
785	[BUG]  [BUGGY]  return  c  -  1;  int  c  =  getSurroundingSpaces().size()  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1;  int  c  =  getSurroundingSpaces().size()  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  1;  int  c  =  getSurroundingSpaces().size()  +  1;	  return    c    -    1;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	156	None	replace
786	[BUG]  [BUGGY]  result  =  END_OF_STREAM  ||  END_OF_STREAM.equals(Character.toLowerCase(c));  [CE]  cannot  find  symbol  result  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result  =  END_OF_STREAM  ||  END_OF_STREAM.equals(Character.toLowerCase(c));  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result  =  END_OF_STREAM  ||  END_OF_STREAM.equals(Character.toLowerCase(c));	  result    =    END_OF_STREAM    ||    END_OF_STREAM.equals(c);    	non-compiled	[CE]  cannot  find  symbol  result	124	None	replace
787	[BUG]  [BUGGY]  c  =  END_OF_STREAM  ||  END_OF_STREAM.equals(c);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  END_OF_STREAM  ||  END_OF_STREAM.equals(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  END_OF_STREAM  ||  END_OF_STREAM.equals(c);	  result    =    END_OF_STREAM    ||    END_OF_STREAM.equals(c);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	124	None	replace
788	[BUG]  [BUGGY]  result  =  END_OF_STREAM  ||  END_OF_STREAM.equals(escapeChar);  [CE]  cannot  find  symbol  result  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result  =  END_OF_STREAM  ||  END_OF_STREAM.equals(escapeChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result  =  END_OF_STREAM  ||  END_OF_STREAM.equals(escapeChar);	  result    =    END_OF_STREAM    ||    END_OF_STREAM.equals(c);    	non-compiled	[CE]  cannot  find  symbol  result	124	None	replace
789	[BUG]  [BUGGY]  result  =  END_OF_STREAM  ||  END_OF_STREAM.equals(c));  [CE]  ';'  expected  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result  =  END_OF_STREAM  ||  END_OF_STREAM.equals(c));  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result  =  END_OF_STREAM  ||  END_OF_STREAM.equals(c));	  result    =    END_OF_STREAM    ||    END_OF_STREAM.equals(c);    	non-compiled	[CE]  ';'  expected	124	None	replace
790	[BUG]  [BUGGY]  result  =  END_OF_STREAM  ||  END_OF_STREAM.equals(ch);  [CE]  cannot  find  symbol  result  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result  =  END_OF_STREAM  ||  END_OF_STREAM.equals(ch);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result  =  END_OF_STREAM  ||  END_OF_STREAM.equals(ch);	  result    =    END_OF_STREAM    ||    END_OF_STREAM.equals(c);    	non-compiled	[CE]  cannot  find  symbol  result	124	None	replace
791	[BUG]  [BUGGY]  result  =  END_OF_STREAM  ||  END_OF_STREAM.equals(entryChar);  [CE]  cannot  find  symbol  result  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result  =  END_OF_STREAM  ||  END_OF_STREAM.equals(entryChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result  =  END_OF_STREAM  ||  END_OF_STREAM.equals(entryChar);	  result    =    END_OF_STREAM    ||    END_OF_STREAM.equals(c);    	non-compiled	[CE]  cannot  find  symbol  result	124	None	replace
792	[BUG]  [BUGGY]  return  c  +  1;  END_OF_STREAM  +  1;  [CE]  not  a  statement  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  1;  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  1;  END_OF_STREAM  +  1;	  return    END_OF_STREAM    +    1;    END_OF_STREAM    +    1;    	non-compiled	[CE]  not  a  statement	175	None	replace
793	[BUG]  [BUGGY]  END_OF_STREAM  +  1;  [CE]  not  a  statement  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	END_OF_STREAM  +  1;	  return    END_OF_STREAM    +    1;    END_OF_STREAM    +    1;    	non-compiled	[CE]  not  a  statement	175	None	replace
794	[BUG]  [BUGGY]  result  =  END_OF_STREAM  +  1;  END_OF_STREAM  +  1;  [CE]  not  a  statement  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result  =  END_OF_STREAM  +  1;  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result  =  END_OF_STREAM  +  1;  END_OF_STREAM  +  1;	  return    END_OF_STREAM    +    1;    END_OF_STREAM    +    1;    	non-compiled	[CE]  not  a  statement	175	None	replace
795	[BUG]  [BUGGY]  result  +=  1;  END_OF_STREAM  +  1;  [CE]  not  a  statement  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result  +=  1;  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result  +=  1;  END_OF_STREAM  +  1;	  return    END_OF_STREAM    +    1;    END_OF_STREAM    +    1;    	non-compiled	[CE]  not  a  statement	175	None	replace
796	[BUG]  [BUGGY]  result  +=  END_OF_STREAM;  [CE]  cannot  find  symbol  result  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result  +=  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result  +=  END_OF_STREAM;	  return    END_OF_STREAM    +    1;    END_OF_STREAM    +    1;    	non-compiled	[CE]  cannot  find  symbol  result	175	None	replace
797	[BUG]  [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(ignoreEmptyLines)  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  }	  return    END_OF_STREAM;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	129	None	replace
798	[BUG]  [BUGGY]  while(c  <  getSurroundingSpaces().size())  {  return  END_OF_STREAM;  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  getSurroundingSpaces().size())  {  return  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  getSurroundingSpaces().size())  {  return  END_OF_STREAM;	  return    END_OF_STREAM;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
799	[BUG]  [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getSurroundingSpaces().size();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getSurroundingSpaces().size();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(ignoreEmptyLines)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getSurroundingSpaces().size();  }	  return    END_OF_STREAM;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	129	None	replace
800	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  DISABLED;  }  [CE]  missing  return  statement  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  DISABLED;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  DISABLED;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	335	None	replace
801	[BUG]  [BUGGY]  if(c!=  END_OF_STREAM)  {  return  DISABLED;  }  [CE]  missing  return  statement  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c!=  END_OF_STREAM)  {  return  DISABLED;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c!=  END_OF_STREAM)  {  return  DISABLED;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	335	None	replace
802	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  DISABLED;  }  [CE]  missing  return  statement  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  DISABLED;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  DISABLED;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	335	None	replace
803	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  return  DISABLED;  }  [CE]  missing  return  statement  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c!=  'n'  ||  c  ==  'r')  {  return  DISABLED;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c!=  'n'  ||  c  ==  'r')  {  return  DISABLED;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	335	None	replace
804	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  DISABLED;  }  [CE]  missing  return  statement  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  DISABLED;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  DISABLED;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	335	None	replace
805	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  't')  {  return  DISABLED;  }  [CE]  missing  return  statement  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  't')  {  return  DISABLED;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  't')  {  return  DISABLED;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	335	None	replace
806	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n')  {  return  DISABLED;  }  [CE]  missing  return  statement  [FE]                            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n')  {  return  DISABLED;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n')  {  return  DISABLED;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    DISABLED;    }    	non-compiled	[CE]  missing  return  statement	335	None	replace
807	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  &&  c  <  =  END_OF_STREAM;  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  &&  c  <  =  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  &&  c  <  =  END_OF_STREAM;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM;    	non-compiled	[CE]  illegal  start  of  expression	268	None	replace
808	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  ==  END_OF_STREAM;  [CE]  incompatible  types  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  ==  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  ==  END_OF_STREAM;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM;    	non-compiled	[CE]  incompatible  types	268	None	replace
809	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c!=  END_OF_STREAM;  [CE]  incompatible  types  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c!=  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c!=  END_OF_STREAM;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM;    	non-compiled	[CE]  incompatible  types	268	None	replace
810	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  >=  END_OF_STREAM;  [CE]  incompatible  types  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  >=  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  >=  END_OF_STREAM;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM;    	non-compiled	[CE]  incompatible  types	268	None	replace
811	[BUG]  [BUGGY]  return  c  >=  END_OF_STREAM  &&  c  <  =  END_OF_STREAM;  [CE]  illegal  start  of  expression  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  END_OF_STREAM  &&  c  <  =  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >=  END_OF_STREAM  &&  c  <  =  END_OF_STREAM;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM;    	non-compiled	[CE]  illegal  start  of  expression	268	None	replace
812	[BUG]  [BUGGY]  return  c  >=  END_OF_STREAM  ||  c  ==  END_OF_STREAM;  [CE]  incompatible  types  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  END_OF_STREAM  ||  c  ==  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >=  END_OF_STREAM  ||  c  ==  END_OF_STREAM;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM;    	non-compiled	[CE]  incompatible  types	268	None	replace
813	[BUG]  [BUGGY]  int  escape  =  getEscapeSurroundingSpaces();  if(escape  ==  escape)  {  return  escape;  }  [CE]  cannot  find  symbol  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escape  =  getEscapeSurroundingSpaces();  if(escape  ==  escape)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escape  =  getEscapeSurroundingSpaces();  if(escape  ==  escape)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeSurroundingSpaces();    if(escape    ==    escape)    {    return    escape;    }    	non-compiled	[CE]  cannot  find  symbol	233	None	replace
814	[BUG]  [BUGGY]  escape  =  getEscapeSurroundingSpaces();  if(escape  ==  escape)  {  return  escape;  }  [CE]  cannot  assign  a  value  to  final  variable  escape  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  escape  =  getEscapeSurroundingSpaces();  if(escape  ==  escape)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	escape  =  getEscapeSurroundingSpaces();  if(escape  ==  escape)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeSurroundingSpaces();    if(escape    ==    escape)    {    return    escape;    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  escape	233	None	replace
815	[BUG]  [BUGGY]  int  escape  =  getEscapeSurroundingSpaces();  if(escape!=  escape)  {  return  escape;  }  [CE]  cannot  find  symbol  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escape  =  getEscapeSurroundingSpaces();  if(escape!=  escape)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escape  =  getEscapeSurroundingSpaces();  if(escape!=  escape)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeSurroundingSpaces();    if(escape    ==    escape)    {    return    escape;    }    	non-compiled	[CE]  cannot  find  symbol	233	None	replace
816	[BUG]  [BUGGY]  int  escape  =  getEscapeSurroundingSpaces();  if(escape  >=  escape)  {  return  escape;  }  [CE]  cannot  find  symbol  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escape  =  getEscapeSurroundingSpaces();  if(escape  >=  escape)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escape  =  getEscapeSurroundingSpaces();  if(escape  >=  escape)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeSurroundingSpaces();    if(escape    ==    escape)    {    return    escape;    }    	non-compiled	[CE]  cannot  find  symbol	233	None	replace
817	[BUG]  [BUGGY]  escape  =  getEscapeSurroundingSpaces();  if(escape!=  escape)  {  return  escape;  }  [CE]  cannot  assign  a  value  to  final  variable  escape  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  escape  =  getEscapeSurroundingSpaces();  if(escape!=  escape)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	escape  =  getEscapeSurroundingSpaces();  if(escape!=  escape)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeSurroundingSpaces();    if(escape    ==    escape)    {    return    escape;    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  escape	233	None	replace
818	[BUG]  [BUGGY]  int  escape  =  getEscapeSurroundingSpaces();  if(escape  <  escape)  {  return  escape;  }  [CE]  cannot  find  symbol  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escape  =  getEscapeSurroundingSpaces();  if(escape  <  escape)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escape  =  getEscapeSurroundingSpaces();  if(escape  <  escape)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeSurroundingSpaces();    if(escape    ==    escape)    {    return    escape;    }    	non-compiled	[CE]  cannot  find  symbol	233	None	replace
819	[BUG]  [BUGGY]  escape  =  getEscapeSurroundingSpaces();  if(escape  >=  escape)  {  return  escape;  }  [CE]  cannot  assign  a  value  to  final  variable  escape  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  escape  =  getEscapeSurroundingSpaces();  if(escape  >=  escape)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	escape  =  getEscapeSurroundingSpaces();  if(escape  >=  escape)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeSurroundingSpaces();    if(escape    ==    escape)    {    return    escape;    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  escape	233	None	replace
820	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces().size();	  return    c    &    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces().size();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	42	None	replace
821	[BUG]  [BUGGY]  Integer  c  =  getEscapeSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  getEscapeSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  getEscapeSurroundingSpaces().size();	  return    c    &    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces().size();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	42	None	replace
822	[BUG]  [BUGGY]  c  =  getEscapeSurroundingSpaces().size();  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getEscapeSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getEscapeSurroundingSpaces().size();	  return    c    &    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces().size();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	42	None	replace
823	[BUG]  [BUGGY]  char  c  =  getEscapeSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  char  c  =  getEscapeSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	char  c  =  getEscapeSurroundingSpaces().size();	  return    c    &    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces().size();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	42	None	replace
824	[BUG]  [BUGGY]  return  CSVFormat.intValue();  [CE]  cannot  find  symbol  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.intValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.intValue();	  return    d.intValue();    	non-compiled	[CE]  cannot  find  symbol	244	None	replace
825	[BUG]  [BUGGY]  return  s.intValue();  [CE]  cannot  find  symbol  s  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  s.intValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  s.intValue();	  return    d.intValue();    	non-compiled	[CE]  cannot  find  symbol  s	244	None	replace
826	[BUG]  [BUGGY]  return  format.intValue();  [CE]  cannot  find  symbol  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  format.intValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  format.intValue();	  return    d.intValue();    	non-compiled	[CE]  cannot  find  symbol	244	None	replace
827	[BUG]  [BUGGY]  return  text.intValue();  [CE]  cannot  find  symbol  text  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  text.intValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  text.intValue();	  return    d.intValue();    	non-compiled	[CE]  cannot  find  symbol  text	244	None	replace
828	[BUG]  [BUGGY]  return  END_OF_STREAM  +  ignoreEmptyLines;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  ignoreEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  ignoreEmptyLines;	  return    END_OF_STREAM    +    commmentSurroundingSpaces;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	83	None	replace
829	[BUG]  [BUGGY]  return  END_OF_STREAM  +  escapeEmptyLines;  [CE]  cannot  find  symbol  escapeEmptyLines  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  escapeEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  escapeEmptyLines;	  return    END_OF_STREAM    +    commmentSurroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  escapeEmptyLines	83	None	replace
830	[BUG]  [BUGGY]  while(c  <  END_OF_STREAM)  {  int  c  =  getSurroundingSpaces();  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  END_OF_STREAM)  {  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  END_OF_STREAM)  {  int  c  =  getSurroundingSpaces();	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  illegal  start  of  expression	176	None	replace
831	[BUG]  [BUGGY]  Integer  c  +  1;  [CE]  ';'  expected  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  +  1;	  return    c    +    1;    Integer    c    +    1;    	non-compiled	[CE]  ';'  expected	223	None	replace
832	[BUG]  [BUGGY]  int  c  =  Integer.parseInt(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  Integer.parseInt(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  Integer.parseInt(c);	  return    c    +    1;    Integer    c    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	223	None	replace
833	[BUG]  [BUGGY]  int  c  =  Integer.valueOf(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  Integer.valueOf(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  Integer.valueOf(c);	  return    c    +    1;    Integer    c    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	223	None	replace
834	[BUG]  [BUGGY]  int  c  =  Integer.valueOf(c  +  1);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  Integer.valueOf(c  +  1);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  Integer.valueOf(c  +  1);	  return    c    +    1;    Integer    c    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	223	None	replace
835	[BUG]  [BUGGY]  int  c  =  Integer.toString(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  Integer.toString(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  Integer.toString(c);	  return    c    +    1;    Integer    c    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	223	None	replace
836	[BUG]  [BUGGY]  int  c  =  Integer.MAX_VALUE;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  Integer.MAX_VALUE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  Integer.MAX_VALUE;	  return    c    +    1;    Integer    c    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	223	None	replace
837	[BUG]  [BUGGY]  int  c  =  escapeSurroundingSpaces(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  escapeSurroundingSpaces(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  escapeSurroundingSpaces(c);	  return    c    +    1;    Integer    c    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	223	None	replace
838	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces(entry);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces(entry);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces(entry);	  return    c    +    2;    int    c    =    getEscapeSurroundingSpaces(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	60	None	replace
839	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces(in);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces(in);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces(in);	  return    c    +    2;    int    c    =    getEscapeSurroundingSpaces(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	60	None	replace
840	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  commmentStart);  break;  [CE]  cannot  find  symbol  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  commmentStart);  break;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(c,  commmentStart);  break;	  int    delimiter    =    readEscapeSurroundingSpaces(c,    escape);    break;    	non-compiled	[CE]  cannot  find  symbol	289	None	replace
841	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  END_OF_STREAM);  break;  [CE]  cannot  find  symbol  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  END_OF_STREAM);  break;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(c,  END_OF_STREAM);  break;	  int    delimiter    =    readEscapeSurroundingSpaces(c,    escape);    break;    	non-compiled	[CE]  cannot  find  symbol	289	None	replace
842	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  escape,  commmentStart);  break;  [CE]  cannot  find  symbol  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  escape,  commmentStart);  break;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(c,  escape,  commmentStart);  break;	  int    delimiter    =    readEscapeSurroundingSpaces(c,    escape);    break;    	non-compiled	[CE]  cannot  find  symbol	289	None	replace
843	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  escape,  quoteChar);  break;  [CE]  cannot  find  symbol  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  escape,  quoteChar);  break;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(c,  escape,  quoteChar);  break;	  int    delimiter    =    readEscapeSurroundingSpaces(c,    escape);    break;    	non-compiled	[CE]  cannot  find  symbol	289	None	replace
844	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  commmentStart,  escape);  break;  [CE]  cannot  find  symbol  [FE]                                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  commmentStart,  escape);  break;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(c,  commmentStart,  escape);  break;	  int    delimiter    =    readEscapeSurroundingSpaces(c,    escape);    break;    	non-compiled	[CE]  cannot  find  symbol	289	None	replace
845	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  END_OF_STREAM,  escape);  break;  [CE]  cannot  find  symbol  [FE]                                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  END_OF_STREAM,  escape);  break;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(c,  END_OF_STREAM,  escape);  break;	  int    delimiter    =    readEscapeSurroundingSpaces(c,    escape);    break;    	non-compiled	[CE]  cannot  find  symbol	289	None	replace
846	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(escape,  c);  break;  [CE]  cannot  find  symbol  [FE]                                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(escape,  c);  break;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(escape,  c);  break;	  int    delimiter    =    readEscapeSurroundingSpaces(c,    escape);    break;    	non-compiled	[CE]  cannot  find  symbol	289	None	replace
847	[BUG]  [BUGGY]  Integer  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  getEscapeChar();	  return    c    -    1;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	246	None	replace
848	[BUG]  [BUGGY]  c  =  getEscapeChar();  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getEscapeChar();	  return    c    -    1;    int    c    =    getEscapeChar();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	246	None	replace
849	[BUG]  [BUGGY]  return  c  -  1;  int  c  =  getSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1;  int  c  =  getSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  1;  int  c  =  getSurroundingSpace();	  return    c    -    1;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	246	None	replace
850	[BUG]  [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    END_OF_STREAM    :    END_OF_STREAM;    c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  not  a  statement	214	None	add
851	[BUG]  [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  c  >>  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  not  a  statement  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  c  >>  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    END_OF_STREAM    :    END_OF_STREAM;    c  >>  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  not  a  statement	214	None	add
852	[BUG]  [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	214	None	add
853	[BUG]  [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	214	None	add
854	[BUG]  [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpace(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	214	None	add
855	[BUG]  [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getCurrentSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	214	None	add
856	[BUG]  [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getCurrentSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	214	None	add
857	[BUG]  [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	214	None	add
858	[BUG]  [BUGGY]  return  c  ||  END_OF_STREAM  +  1;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ||  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ||  END_OF_STREAM  +  1;	  return    END_OF_STREAM    ||    END_OF_STREAM    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	357	None	replace
859	[BUG]  [BUGGY]  return  END_OF_STREAM  &&  END_OF_STREAM  +  1;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  &&  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  &&  END_OF_STREAM  +  1;	  return    END_OF_STREAM    ||    END_OF_STREAM    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	357	None	replace
860	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM  +  1L;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM  +  1L;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_STREAM  +  1L;	  return    END_OF_STREAM    ||    END_OF_STREAM    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	357	None	replace
861	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM  +  3;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM  +  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_STREAM  +  3;	  return    END_OF_STREAM    ||    END_OF_STREAM    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	357	None	replace
862	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM  +  4;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM  +  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_STREAM  +  4;	  return    END_OF_STREAM    ||    END_OF_STREAM    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	357	None	replace
863	[BUG]  [BUGGY]  return  c  +  5;  c  +  5;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  5;  c  +  5;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    5;    c  +  5;	  	non-compiled	[CE]  not  a  statement	94	None	add
864	[BUG]  [BUGGY]  return  c  +  5;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  5;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    5;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	94	None	add
865	[BUG]  [BUGGY]  return  c  +  5;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  5;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    5;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	94	None	add
866	[BUG]  [BUGGY]  return  c  +  5;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  5;  int  c  =  in.read();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    5;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	94	None	add
867	[BUG]  [BUGGY]  return  c  +  5;  int  c  =  Integer.parseInt(quoteChar);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  5;  int  c  =  Integer.parseInt(quoteChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    5;    int  c  =  Integer.parseInt(quoteChar);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	94	None	add
868	[BUG]  [BUGGY]  return  c  +  5;  int  c  =  getSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  5;  int  c  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    5;    int  c  =  getSurroundingSpace(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	94	None	add
869	[BUG]  [BUGGY]  return  c  +  5;  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  5;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    5;    int  c  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	94	None	add
870	[BUG]  [BUGGY]  return  c  +  5;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  5;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    5;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	94	None	add
871	[BUG]  [BUGGY]  c  +=  getSurroundingSpaces().length;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  +=  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  +=  getSurroundingSpaces().length;	  return    c    +    1;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	36	None	replace
872	[BUG]  [BUGGY]  null  c  =  getSurroundingSpaces().length;  [CE]  not  a  statement  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  null  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	null  c  =  getSurroundingSpaces().length;	  return    c    +    1;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  not  a  statement	36	None	replace
873	[BUG]  [BUGGY]  return  c  +  1;  int  c  =  getSurroundingSpaces().length  -  2;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  1;  int  c  =  getSurroundingSpaces().length  -  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  1;  int  c  =  getSurroundingSpaces().length  -  2;	  return    c    +    1;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	36	None	replace
874	[BUG]  [BUGGY]  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  in.read();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  in.read();	  return    c    &    END_OF_STREAM;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	43	None	replace
875	[BUG]  [BUGGY]  while(c  <  END_OF_STREAM  ||  c  >  END_OF_STREAM)  {  int  c  =  in.read();  [CE]  illegal  start  of  expression  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  END_OF_STREAM  ||  c  >  END_OF_STREAM)  {  int  c  =  in.read();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  END_OF_STREAM  ||  c  >  END_OF_STREAM)  {  int  c  =  in.read();	  return    c    &    END_OF_STREAM;    int    c    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
876	[BUG]  [BUGGY]  while(c  <  END_OF_STREAM  ||  c  >  END_OF_STREAM)  {  return  in.read();  [CE]  illegal  start  of  expression  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  END_OF_STREAM  ||  c  >  END_OF_STREAM)  {  return  in.read();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  END_OF_STREAM  ||  c  >  END_OF_STREAM)  {  return  in.read();	  return    c    &    END_OF_STREAM;    int    c    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
877	[BUG]  [BUGGY]  Integer  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  in.read();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  in.read();	  return    c    &    END_OF_STREAM;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	43	None	replace
878	[BUG]  [BUGGY]  while(c  <  END_OF_STREAM  ||  c  >  END_OF_STREAM)  {  c  =  in.read();  [CE]  illegal  start  of  expression  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  END_OF_STREAM  ||  c  >  END_OF_STREAM)  {  c  =  in.read();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  END_OF_STREAM  ||  c  >  END_OF_STREAM)  {  c  =  in.read();	  return    c    &    END_OF_STREAM;    int    c    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
879	[BUG]  [BUGGY]  while(c  <  END_OF_STREAM  ||  c  >  in.read())  {  return  c  &  END_OF_STREAM;  [CE]  illegal  start  of  expression  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  END_OF_STREAM  ||  c  >  in.read())  {  return  c  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  END_OF_STREAM  ||  c  >  in.read())  {  return  c  &  END_OF_STREAM;	  return    c    &    END_OF_STREAM;    int    c    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
880	[BUG]  [BUGGY]  while(c  <  END_OF_STREAM)  {  return  c  &  END_OF_STREAM;  int  c  =  in.read();  [CE]  illegal  start  of  expression  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  END_OF_STREAM)  {  return  c  &  END_OF_STREAM;  int  c  =  in.read();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  END_OF_STREAM)  {  return  c  &  END_OF_STREAM;  int  c  =  in.read();	  return    c    &    END_OF_STREAM;    int    c    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
881	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }	  return    END_OF_STREAM;    return    END_OF_STREAM;    	non-compiled	[CE]  missing  return  statement	125	None	replace
882	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }	  return    END_OF_STREAM;    return    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	125	3	replace
883	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }  [FE]  (entry  2)  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }	  return    END_OF_STREAM;    return    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	125	3	replace
884	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    END_OF_STREAM;    return    END_OF_STREAM;    	compilable	  [FE]  IllegalArgumentException  	125	5	replace
885	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    END_OF_STREAM;    return    END_OF_STREAM;    	compilable	  [FE]  IllegalArgumentException  	125	5	replace
886	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IllegalStateException( " ");  }	  return    END_OF_STREAM;    return    END_OF_STREAM;    	compilable	  [FE]  IllegalStateException  	125	5	replace
887	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  IllegalStateException  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IllegalStateException( " ");  }	  return    END_OF_STREAM;    return    END_OF_STREAM;    	compilable	  [FE]  IllegalStateException  	125	5	replace
888	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  '.')  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(c  ==  '.')  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }	  return    END_OF_STREAM;    return    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	125	3	replace
889	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }  [FE]  (entry  2)  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  '.')  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  '.')  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }	  return    END_OF_STREAM;    return    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	125	3	replace
890	[BUG]  [BUGGY]  if(in.isEmpty())  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }  [CE]  illegal  start  of  expression  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in.isEmpty())  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in.isEmpty())  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentEnd;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
891	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }  [CE]  illegal  start  of  expression  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentEnd;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
892	[BUG]  [BUGGY]  if(in.isEmpty())  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  com  [CE]  ';'  expected  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in.isEmpty())  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  com  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in.isEmpty())  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  com	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentEnd;    }    	non-compiled	[CE]  ';'  expected	29	None	replace
893	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentEnd)  {  return  com  [CE]  ';'  expected  [FE]                            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentEnd)  {  return  com  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentEnd)  {  return  com	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentEnd;    }    	non-compiled	[CE]  ';'  expected	29	None	replace
894	[BUG]  [BUGGY]  if(in.isEmpty())  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }  }  [CE]  illegal  start  of  expression  [FE]                              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in.isEmpty())  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in.isEmpty())  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentEnd;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
895	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  c  +  1;  [CE]  duplicate  case  label  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  c  +  1;	  case    END_OF_STREAM:    return    c;    	non-compiled	[CE]  duplicate  case  label	1	None	replace
896	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  c  +  2;  [CE]  duplicate  case  label  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  c  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  c  +  2;	  case    END_OF_STREAM:    return    c;    	non-compiled	[CE]  duplicate  case  label	1	None	replace
897	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  c.length;  [CE]  duplicate  case  label  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  c.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  c.length;	  case    END_OF_STREAM:    return    c;    	non-compiled	[CE]  duplicate  case  label	1	None	replace
898	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  c  -  1;  [CE]  duplicate  case  label  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  c  -  1;	  case    END_OF_STREAM:    return    c;    	non-compiled	[CE]  duplicate  case  label	1	None	replace
899	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  <  END_OF_STREAM  ||  c  >  END_OF_Escape;  [CE]  cannot  find  symbol  END_OF_Escape  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  <  END_OF_STREAM  ||  c  >  END_OF_Escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  <  END_OF_STREAM  ||  c  >  END_OF_Escape;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM    ||    c    >    END_OF_Escape;    	non-compiled	[CE]  cannot  find  symbol  END_OF_Escape	265	None	replace
900	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  >=  END_OF_STREAM  ||  c  >  END_OF_Escape;  [CE]  cannot  find  symbol  END_OF_Escape  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  >=  END_OF_STREAM  ||  c  >  END_OF_Escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  >=  END_OF_STREAM  ||  c  >  END_OF_Escape;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM    ||    c    >    END_OF_Escape;    	non-compiled	[CE]  cannot  find  symbol  END_OF_Escape	265	None	replace
901	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c!=  END_OF_STREAM  ||  c  >  END_OF_Escape;  [CE]  cannot  find  symbol  END_OF_Escape  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c!=  END_OF_STREAM  ||  c  >  END_OF_Escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c!=  END_OF_STREAM  ||  c  >  END_OF_Escape;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM    ||    c    >    END_OF_Escape;    	non-compiled	[CE]  cannot  find  symbol  END_OF_Escape	265	None	replace
902	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  <  END_OF_Escape  ||  c  >  END_OF_Escape;  [CE]  cannot  find  symbol  END_OF_Escape  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  <  END_OF_Escape  ||  c  >  END_OF_Escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  <  END_OF_Escape  ||  c  >  END_OF_Escape;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM    ||    c    >    END_OF_Escape;    	non-compiled	[CE]  cannot  find  symbol  END_OF_Escape	265	None	replace
903	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  <  =  END_OF_Escape  ||  c  >=  END_OF_Escape;  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  <  =  END_OF_Escape  ||  c  >=  END_OF_Escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  <  =  END_OF_Escape  ||  c  >=  END_OF_Escape;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM    ||    c    >    END_OF_Escape;    	non-compiled	[CE]  illegal  start  of  expression	265	None	replace
904	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  <  END_OF_STREAM  ||  c  >=  END_OF_Escape;  [CE]  cannot  find  symbol  END_OF_Escape  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  <  END_OF_STREAM  ||  c  >=  END_OF_Escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  <  END_OF_STREAM  ||  c  >=  END_OF_Escape;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM    ||    c    >=    END_OF_Escape;    	non-compiled	[CE]  cannot  find  symbol  END_OF_Escape	267	None	replace
905	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  ==  END_OF_STREAM  ||  c  >=  END_OF_Escape;  [CE]  cannot  find  symbol  END_OF_Escape  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  ==  END_OF_STREAM  ||  c  >=  END_OF_Escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  ==  END_OF_STREAM  ||  c  >=  END_OF_Escape;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM    ||    c    >=    END_OF_Escape;    	non-compiled	[CE]  cannot  find  symbol  END_OF_Escape	267	None	replace
906	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c!=  END_OF_STREAM  ||  c  >=  END_OF_Escape;  [CE]  cannot  find  symbol  END_OF_Escape  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c!=  END_OF_STREAM  ||  c  >=  END_OF_Escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c!=  END_OF_STREAM  ||  c  >=  END_OF_Escape;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM    ||    c    >=    END_OF_Escape;    	non-compiled	[CE]  cannot  find  symbol  END_OF_Escape	267	None	replace
907	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  <  =  END_OF_STREAM  ||  c  >=  END_OF_SURroundingSpaces;  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  <  =  END_OF_STREAM  ||  c  >=  END_OF_SURroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  <  =  END_OF_STREAM  ||  c  >=  END_OF_SURroundingSpaces;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM    ||    c    >=    END_OF_Escape;    	non-compiled	[CE]  illegal  start  of  expression	267	None	replace
908	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  <  =  END_OF_STREAM  ||  c  >=  END_OF_CSV;  [CE]  illegal  start  of  expression  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  <  =  END_OF_STREAM  ||  c  >=  END_OF_CSV;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  <  =  END_OF_STREAM  ||  c  >=  END_OF_CSV;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM    ||    c    >=    END_OF_Escape;    	non-compiled	[CE]  illegal  start  of  expression	267	None	replace
909	[BUG]  [BUGGY]  return  c  +  18;  c  +  18;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  18;  c  +  18;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    18;    c  +  18;	  	non-compiled	[CE]  not  a  statement	369	None	add
910	[BUG]  [BUGGY]  return  c  +  18;  int  c  +  18;  [CE]  ';'  expected  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  18;  int  c  +  18;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    18;    int  c  +  18;	  	non-compiled	[CE]  ';'  expected	369	None	add
911	[BUG]  [BUGGY]  return  c  +  18;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  18;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    18;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	369	None	add
912	[BUG]  [BUGGY]  return  c  +  18;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  18;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    18;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	369	None	add
913	[BUG]  [BUGGY]  return  c  +  18;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  18;  int  c  =  in.read();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    18;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	369	None	add
914	[BUG]  [BUGGY]  return  c  +  18;  int  c  =  Integer.parseInt(quoteChar);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  18;  int  c  =  Integer.parseInt(quoteChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    18;    int  c  =  Integer.parseInt(quoteChar);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	369	None	add
915	[BUG]  [BUGGY]  return  c  +  18;  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  18;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    18;    int  c  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	369	None	add
916	[BUG]  [BUGGY]  return  c  +  18;  int  c  =  getSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  18;  int  c  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    18;    int  c  =  getSurroundingSpace(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	369	None	add
917	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace();  return  c  -  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace();  return  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace();  return  c  -  1;	  return    c    -    1;    int    c    =    getSurroundingSpace();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	312	None	replace
918	[BUG]  [BUGGY]  c  =  getSurroundingSpace();  return  c  -  1;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getSurroundingSpace();  return  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getSurroundingSpace();  return  c  -  1;	  return    c    -    1;    int    c    =    getSurroundingSpace();    return    c    -    1;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	312	None	replace
919	[BUG]  [BUGGY]  while(c  <  getSurroundingSpace())  {  return  c  -  1;  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  getSurroundingSpace())  {  return  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  getSurroundingSpace())  {  return  c  -  1;	  return    c    -    1;    int    c    =    getSurroundingSpace();    return    c    -    1;    	non-compiled	[CE]  illegal  start  of  expression	312	None	replace
920	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace();  return(c  -  1);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace();  return(c  -  1);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace();  return(c  -  1);	  return    c    -    1;    int    c    =    getSurroundingSpace();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	312	None	replace
921	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  /  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  &  END_OF_STREAM  /  2;	  return    c    &    END_OF_STREAM    *    2;    	compilable	  [FE]  (entry  2)  	274	5	replace
922	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  /  2;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  /  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  END_OF_STREAM  /  2;	  return    c    &    END_OF_STREAM    *    2;    	compilable	  [FE]  (entry  2)  	274	5	replace
923	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  -  END_OF_STREAM  *  2;	  return    c    &    END_OF_STREAM    *    2;    	compilable	  [FE]  (entry  2)  	274	5	replace
924	[BUG]  [BUGGY]  return  c  -  END_OF_STREAM  *  2;  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  END_OF_STREAM  *  2;	  return    c    &    END_OF_STREAM    *    2;    	compilable	  [FE]  (entry  2)  	274	5	replace
925	[BUG]  [BUGGY]  [FE]  Records  do  not  match  expected  result  (entry  8)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  *  2  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  &  END_OF_STREAM  *  2  +  1;	  return    c    &    END_OF_STREAM    *    2;    	compilable	  [FE]  Records  do  not  match  expected  result  (entry  8)  	274	3	replace
926	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  *  2  +  1;  [FE]  Records  do  not  match  expected  result  (entry  8)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  *  2  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  END_OF_STREAM  *  2  +  1;	  return    c    &    END_OF_STREAM    *    2;    	compilable	  [FE]  Records  do  not  match  expected  result  (entry  8)  	274	3	replace
927	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  *  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  &  END_OF_STREAM  *  4;	  return    c    &    END_OF_STREAM    *    2;    	compilable	  [FE]  (entry  2)  	274	4	replace
928	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  *  4;  [FE]  (entry  2)  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  *  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  END_OF_STREAM  *  4;	  return    c    &    END_OF_STREAM    *    2;    	compilable	  [FE]  (entry  2)  	274	4	replace
929	[BUG]  [BUGGY]  Record  do  not  match  expected  result(c  -  END_OF_STREAM);  [CE]  not  a  statement  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Record  do  not  match  expected  result(c  -  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Record  do  not  match  expected  result(c  -  END_OF_STREAM);	  return    c    &    END_OF_STREAM;    Record    do    not    match    expected    result(c    -    END_OF_STREAM);    	non-compiled	[CE]  not  a  statement	195	None	replace
930	[BUG]  [BUGGY]  return  c  -  END_OF_STREAM;  Record  do  not  match  expected  result(c  -  END_OF_STREAM);  [CE]  not  a  statement  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM;  Record  do  not  match  expected  result(c  -  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  END_OF_STREAM;  Record  do  not  match  expected  result(c  -  END_OF_STREAM);	  return    c    &    END_OF_STREAM;    Record    do    not    match    expected    result(c    -    END_OF_STREAM);    	non-compiled	[CE]  not  a  statement	195	None	replace
931	[BUG]  [BUGGY]  Result  do  not  match  expected  result(c  -  END_OF_STREAM);  [CE]  not  a  statement  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Result  do  not  match  expected  result(c  -  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Result  do  not  match  expected  result(c  -  END_OF_STREAM);	  return    c    &    END_OF_STREAM;    Record    do    not    match    expected    result(c    -    END_OF_STREAM);    	non-compiled	[CE]  not  a  statement	195	None	replace
932	[BUG]  [BUGGY]  record  does  not  match  expected  result(c  -  END_OF_STREAM);  [CE]  ';'  expected  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  record  does  not  match  expected  result(c  -  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	record  does  not  match  expected  result(c  -  END_OF_STREAM);	  return    c    &    END_OF_STREAM;    Record    do    not    match    expected    result(c    -    END_OF_STREAM);    	non-compiled	[CE]  ';'  expected	195	None	replace
933	[BUG]  [BUGGY]  record  do  not  match  expected  result(c  -  END_OF_STREAM);  [CE]  not  a  statement  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  record  do  not  match  expected  result(c  -  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	record  do  not  match  expected  result(c  -  END_OF_STREAM);	  return    c    &    END_OF_STREAM;    Record    do    not    match    expected    result(c    -    END_OF_STREAM);    	non-compiled	[CE]  not  a  statement	195	None	replace
934	[BUG]  [BUGGY]  return  c  -  END_OF_STREAM;  record  do  not  match  expected  result(c  -  END_OF_STREAM);  [CE]  not  a  statement  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM;  record  do  not  match  expected  result(c  -  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  END_OF_STREAM;  record  do  not  match  expected  result(c  -  END_OF_STREAM);	  return    c    &    END_OF_STREAM;    Record    do    not    match    expected    result(c    -    END_OF_STREAM);    	non-compiled	[CE]  not  a  statement	195	None	replace
935	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  /  6;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  /  6;	  return    c    -    6;    	compilable	  [FE]  (entry  2)  	117	5	replace
936	[BUG]  [BUGGY]  return  c  /  6;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  /  6;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  /  6;	  return    c    -    6;    	compilable	  [FE]  (entry  2)  	117	5	replace
937	[BUG]  [BUGGY]  return  c  ==  0?  1  :  END_OBJECT;  [CE]  cannot  find  symbol  END_OBJECT  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  END_OBJECT;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  1  :  END_OBJECT;	  return    c    ==    0?    1    :    c;    	non-compiled	[CE]  cannot  find  symbol  END_OBJECT	255	None	replace
938	[BUG]  [BUGGY]  return  c  ==  0?  1  :  escapeSurroundingSpaces;  [CE]  cannot  find  symbol  escapeSurroundingSpaces  [FE]      Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  escapeSurroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  1  :  escapeSurroundingSpaces;	  return    c    ==    0?    1    :    c;    	non-compiled	[CE]  cannot  find  symbol  escapeSurroundingSpaces	255	None	replace
939	[BUG]  [BUGGY]  return  c  ==  0?  1  :  ENDSPACE;  [CE]  cannot  find  symbol  ENDSPACE  [FE]        Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  ENDSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  1  :  ENDSPACE;	  return    c    ==    0?    1    :    c;    	non-compiled	[CE]  cannot  find  symbol  ENDSPACE	255	None	replace
940	[BUG]  [BUGGY]  return  c  ==  0?  1  :  b;  [CE]  cannot  find  symbol  b  [FE]          Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  b;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  1  :  b;	  return    c    ==    0?    1    :    c;    	non-compiled	[CE]  cannot  find  symbol  b	255	None	replace
941	[BUG]  [BUGGY]  return  c  ==  0?  1  :  d;  [CE]  cannot  find  symbol  d  [FE]            Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  d;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  1  :  d;	  return    c    ==    0?    1    :    c;    	non-compiled	[CE]  cannot  find  symbol  d	255	None	replace
942	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  |  1L;  [CE]  possible  loss  of  precision  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  |  1L;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  END_OF_STREAM  |  1L;	  return    c    &    END_OF_STREAM    |    1;    	non-compiled	[CE]  possible  loss  of  precision	105	None	replace
943	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  |  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  &  END_OF_STREAM  |  2;	  return    c    &    END_OF_STREAM    |    1;    	compilable	  [FE]  (entry  2)  	105	5	replace
944	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  |  2;  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  |  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  END_OF_STREAM  |  2;	  return    c    &    END_OF_STREAM    |    1;    	compilable	  [FE]  (entry  2)  	105	5	replace
945	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE  |  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  &  BACKSPACE  |  1;	  return    c    &    END_OF_STREAM    |    1;    	compilable	  [FE]  (entry  2)  	105	5	replace
946	[BUG]  [BUGGY]  return  c  &  BACKSPACE  |  1;  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE  |  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  BACKSPACE  |  1;	  return    c    &    END_OF_STREAM    |    1;    	compilable	  [FE]  (entry  2)  	105	5	replace
947	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  |  1  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  &  END_OF_STREAM  |  1  +  1;	  return    c    &    END_OF_STREAM    |    1;    	compilable	  [FE]  (entry  2)  	105	5	replace
948	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  |  1  +  1;  [FE]  (entry  2)  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  |  1  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  END_OF_STREAM  |  1  +  1;	  return    c    &    END_OF_STREAM    |    1;    	compilable	  [FE]  (entry  2)  	105	5	replace
949	[BUG]  [BUGGY]  return  c  >=  0?  1  :  c;  c  >=  0?  1  :  c;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  1  :  c;  c  >=  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    1    :    c;    c  >=  0?  1  :  c;	  	non-compiled	[CE]  not  a  statement	250	None	add
950	[BUG]  [BUGGY]  return  c  >=  0?  1  :  c;  c  >>  0?  1  :  c;  [CE]  not  a  statement  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  1  :  c;  c  >>  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    1    :    c;    c  >>  0?  1  :  c;	  	non-compiled	[CE]  not  a  statement	250	None	add
951	[BUG]  [BUGGY]  return  c  >=  0?  1  :  c;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  1  :  c;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    1    :    c;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	250	None	add
952	[BUG]  [BUGGY]  return  c  >=  0?  1  :  c;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  1  :  c;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    1    :    c;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	250	None	add
953	[BUG]  [BUGGY]  return  c  >=  0?  1  :  c;  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  1  :  c;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    1    :    c;    int  c  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	250	None	add
954	[BUG]  [BUGGY]  return  c  >=  0?  1  :  c;  int  c  =  getSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  1  :  c;  int  c  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    1    :    c;    int  c  =  getSurroundingSpace(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	250	None	add
955	[BUG]  [BUGGY]  return  c  >=  0?  1  :  c;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  1  :  c;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    1    :    c;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	250	None	add
956	[BUG]  [BUGGY]  return  c  >=  0?  1  :  c;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  1  :  c;  int  c  =  in.read();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    1    :    c;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	250	None	add
957	[BUG]  [BUGGY]  int  c  =  0;  Integer  c  >  0?  1  :  c;  [CE]  ';'  expected  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  0;  Integer  c  >  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  0;  Integer  c  >  0?  1  :  c;	  return    c    >    0?    1    :    c;    Integer    c    >    0?    1    :    c;    	non-compiled	[CE]  ';'  expected	160	None	replace
958	[BUG]  [BUGGY]  Integer  c  >  0?  1  :  c.intValue();  [CE]  ';'  expected  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  >  0?  1  :  c.intValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  >  0?  1  :  c.intValue();	  return    c    >    0?    1    :    c;    Integer    c    >    0?    1    :    c;    	non-compiled	[CE]  ';'  expected	160	None	replace
959	[BUG]  [BUGGY]  return  c  ||  END_OF_EscapeSequences.indexOf(c)  >=  0;  [CE]  cannot  find  symbol  END_OF_EscapeSequences  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ||  END_OF_EscapeSequences.indexOf(c)  >=  0;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ||  END_OF_EscapeSequences.indexOf(c)  >=  0;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences.indexOf(c)    >=    0;    	non-compiled	[CE]  cannot  find  symbol  END_OF_EscapeSequences	351	None	replace
960	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_EscapeSequences.indexOf(c)>  0;  [CE]  cannot  find  symbol  END_OF_EscapeSequences  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_EscapeSequences.indexOf(c)>  0;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_EscapeSequences.indexOf(c)>  0;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences.indexOf(c)    >=    0;    	non-compiled	[CE]  cannot  find  symbol  END_OF_EscapeSequences	351	None	replace
961	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_EscapeSequences.indexOf(c)  >>  0;  [CE]  cannot  find  symbol  END_OF_EscapeSequences  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_EscapeSequences.indexOf(c)  >>  0;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_EscapeSequences.indexOf(c)  >>  0;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences.indexOf(c)    >=    0;    	non-compiled	[CE]  cannot  find  symbol  END_OF_EscapeSequences	351	None	replace
962	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_SURroundingSpaces.indexOf(c)  >=  0;  [CE]  cannot  find  symbol  END_OF_SURroundingSpaces  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_SURroundingSpaces.indexOf(c)  >=  0;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_SURroundingSpaces.indexOf(c)  >=  0;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences.indexOf(c)    >=    0;    	non-compiled	[CE]  cannot  find  symbol  END_OF_SURroundingSpaces	351	None	replace
963	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_EscapeSequences.indexOf(c)  ==  0;  [CE]  cannot  find  symbol  END_OF_EscapeSequences  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_EscapeSequences.indexOf(c)  ==  0;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_EscapeSequences.indexOf(c)  ==  0;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences.indexOf(c)    >=    0;    	non-compiled	[CE]  cannot  find  symbol  END_OF_EscapeSequences	351	None	replace
964	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_EscapeSequences.indexOf(c)  >=  0;  [CE]  cannot  find  symbol  END_EscapeSequences  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_EscapeSequences.indexOf(c)  >=  0;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_EscapeSequences.indexOf(c)  >=  0;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences.indexOf(c)    >=    0;    	non-compiled	[CE]  cannot  find  symbol  END_EscapeSequences	351	None	replace
965	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM  +  1;	  return    c    >    0?    END_OF_STREAM    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	140	3	replace
966	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM  +  1;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM  +  1;	  return    c    >    0?    END_OF_STREAM    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	140	3	replace
967	[BUG]  [BUGGY]  (c  >  0?  1  :  END_OF_STREAM);  int  c  =  getEscapeChar();  [CE]  not  a  statement  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  (c  >  0?  1  :  END_OF_STREAM);  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	(c  >  0?  1  :  END_OF_STREAM);  int  c  =  getEscapeChar();	  return    c    >    0?    1    :    c;    int    c    =    getEscapeChar();    	non-compiled	[CE]  not  a  statement	256	None	replace
968	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  END_OF_STREAM;  int  c  =  getEscapeChar();	  return    c    >    0?    1    :    c;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	256	None	replace
969	[BUG]  [BUGGY]  char  c  >  0?  1  :  c;  int  c  =  getEscapeChar();  [CE]  ';'  expected  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  char  c  >  0?  1  :  c;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	char  c  >  0?  1  :  c;  int  c  =  getEscapeChar();	  return    c    >    0?    1    :    c;    int    c    =    getEscapeChar();    	non-compiled	[CE]  ';'  expected	256	None	replace
970	[BUG]  [BUGGY]  return  c  >  0?  1  :  END;  [CE]  cannot  find  symbol  END  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  END;	  return    c    >    0?    1    :    b;    	non-compiled	[CE]  cannot  find  symbol  END	68	None	replace
971	[BUG]  [BUGGY]  return  c.equals(END_OF_STREAM)?  BACKSPACE  :  END_OF_STREAM;  [CE]  int  cannot  be  dereferenced  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c.equals(END_OF_STREAM)?  BACKSPACE  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c.equals(END_OF_STREAM)?  BACKSPACE  :  END_OF_STREAM;	  return    END_OF_STREAM.equals(c)?    BACKSPACE    :    END_OF_STREAM;    	non-compiled	[CE]  int  cannot  be  dereferenced	347	None	replace
972	[BUG]  [BUGGY]  return  BACKSPACE.equals(END_OF_STREAM)?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  char  cannot  be  dereferenced  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  BACKSPACE.equals(END_OF_STREAM)?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  BACKSPACE.equals(END_OF_STREAM)?  END_OF_STREAM  :  END_OF_STREAM;	  return    END_OF_STREAM.equals(c)?    BACKSPACE    :    END_OF_STREAM;    	non-compiled	[CE]  char  cannot  be  dereferenced	347	None	replace
973	[BUG]  [BUGGY]  return  END_OF_STREAM.equals(c)?  BACKSPACE  :  END_OF_STREAM  +  1;  [CE]  int  cannot  be  dereferenced  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.equals(c)?  BACKSPACE  :  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.equals(c)?  BACKSPACE  :  END_OF_STREAM  +  1;	  return    END_OF_STREAM.equals(c)?    BACKSPACE    :    END_OF_STREAM;    	non-compiled	[CE]  int  cannot  be  dereferenced	347	None	replace
974	[BUG]  [BUGGY]  return  END_OF_STREAM.equals(c)?  BACKSPACE  +  END_OF_STREAM  :  END_OF_STREAM;  [CE]  int  cannot  be  dereferenced  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.equals(c)?  BACKSPACE  +  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.equals(c)?  BACKSPACE  +  END_OF_STREAM  :  END_OF_STREAM;	  return    END_OF_STREAM.equals(c)?    BACKSPACE    :    END_OF_STREAM;    	non-compiled	[CE]  int  cannot  be  dereferenced	347	None	replace
975	[BUG]  [BUGGY]  return  c.equals(end_OF_STREAM)?  BACKSPACE  :  END_OF_STREAM;  [CE]  cannot  find  symbol  end_OF_STREAM  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c.equals(end_OF_STREAM)?  BACKSPACE  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c.equals(end_OF_STREAM)?  BACKSPACE  :  END_OF_STREAM;	  return    END_OF_STREAM.equals(c)?    BACKSPACE    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  end_OF_STREAM	347	None	replace
976	[BUG]  [BUGGY]  return  CSVFormat.equals(c)?  BACKSPACE  :  END_OF_STREAM;  [CE]  non-static  method  equals(Object)  cannot  be  referenced  from  a  static  context  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.equals(c)?  BACKSPACE  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.equals(c)?  BACKSPACE  :  END_OF_STREAM;	  return    END_OF_STREAM.equals(c)?    BACKSPACE    :    END_OF_STREAM;    	non-compiled	[CE]  non-static  method  equals(Object)  cannot  be  referenced  from  a  static  context	347	None	replace
977	[BUG]  [BUGGY]  return  c  +  1;  case  END_OF_STREAM:  throw  new  EOFException( "EOF  whilst  processing  escape  sequence ");  [CE]  duplicate  case  label  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  1;  case  END_OF_STREAM:  throw  new  EOFException( "EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  1;  case  END_OF_STREAM:  throw  new  EOFException( "EOF  whilst  processing  escape  sequence ");	  return    END_OF_STREAM    +    1;    case    END_OF_STREAM:    throw    new    EOFException(   "EOF    whilst    processing    escape    sequence       ");    	non-compiled	[CE]  duplicate  case  label	318	None	replace
978	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  -1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  ==  0?  1  :  -1;	  return    c    >    0?    1    :    -1;    	compilable	  [FE]  (entry  2)  	306	3	replace
979	[BUG]  [BUGGY]  return  c  ==  0?  1  :  -1;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  -1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  1  :  -1;	  return    c    >    0?    1    :    -1;    	compilable	  [FE]  (entry  2)  	306	3	replace
980	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  -1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  <  0?  1  :  -1;	  return    c    >    0?    1    :    -1;    	compilable	  [FE]  (entry  2)  	306	3	replace
981	[BUG]  [BUGGY]  return  c  <  0?  1  :  -1;  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  -1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  0?  1  :  -1;	  return    c    >    0?    1    :    -1;    	compilable	  [FE]  (entry  2)  	306	3	replace
982	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  1  :  -1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  >=  0?  1  :  -1;	  return    c    >    0?    1    :    -1;    	compilable	  [FE]  (entry  2)  	306	5	replace
983	[BUG]  [BUGGY]  return  c  >=  0?  1  :  -1;  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  1  :  -1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >=  0?  1  :  -1;	  return    c    >    0?    1    :    -1;    	compilable	  [FE]  (entry  2)  	306	5	replace
984	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  1  :  -1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c!=  0?  1  :  -1;	  return    c    >    0?    1    :    -1;    	compilable	  [FE]  (entry  2)  	306	5	replace
985	[BUG]  [BUGGY]  return  c!=  0?  1  :  -1;  [FE]  (entry  2)  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  1  :  -1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c!=  0?  1  :  -1;	  return    c    >    0?    1    :    -1;    	compilable	  [FE]  (entry  2)  	306	5	replace
986	[BUG]  [BUGGY]  return  c  >>  0?  1  :  -1;  [CE]  incompatible  types  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >>  0?  1  :  -1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >>  0?  1  :  -1;	  return    c    >    0?    1    :    -1;    	non-compiled	[CE]  incompatible  types	306	None	replace
987	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    END_OF_STREAM    :    END_OF_STREAM;    c  >  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  not  a  statement	139	None	add
988	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  ';'  expected  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  ';'  expected	139	None	add
989	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpaces();  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	139	None	add
990	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpace();  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpace();  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getCurrentSurroundingSpace();  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	139	None	add
991	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpaces();  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpaces();  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getCurrentSurroundingSpaces();  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	139	None	add
992	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	139	None	add
993	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	139	None	add
994	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  >  0?  END_OF_STREAM  :  END_OF_STREAM.intValue();  [CE]  ';'  expected  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  >  0?  END_OF_STREAM  :  END_OF_STREAM.intValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  >  0?  END_OF_STREAM  :  END_OF_STREAM.intValue();	  	non-compiled	[CE]  ';'  expected	139	None	add
995	[BUG]  [BUGGY]  int  escapeSurroundingSpaces;  [CE]  missing  return  statement  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escapeSurroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escapeSurroundingSpaces;	  return    escapeSurroundingSpaces;    	non-compiled	[CE]  missing  return  statement	148	None	replace
996	[BUG]  [BUGGY]  reverseEmptyLines;  [CE]  not  a  statement  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  reverseEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	reverseEmptyLines;	  return    escapeSurroundingSpaces;    	non-compiled	[CE]  not  a  statement	148	None	replace
997	[BUG]  [BUGGY]  int  escapeSurroundingSpaces  =  ignoreEmptyLines;  [CE]  incompatible  types  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escapeSurroundingSpaces  =  ignoreEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escapeSurroundingSpaces  =  ignoreEmptyLines;	  return    escapeSurroundingSpaces;    	non-compiled	[CE]  incompatible  types	148	None	replace
998	[BUG]  [BUGGY]  int  escapeSurroundingSpaces  =  ignoreEmptyLines.size();  [CE]  boolean  cannot  be  dereferenced  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escapeSurroundingSpaces  =  ignoreEmptyLines.size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escapeSurroundingSpaces  =  ignoreEmptyLines.size();	  return    escapeSurroundingSpaces;    	non-compiled	[CE]  boolean  cannot  be  dereferenced	148	None	replace
999	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  /  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  /  4;	  return    c    -    4;    	compilable	  [FE]  (entry  2)  	115	5	replace
1000	[BUG]  [BUGGY]  return  c  /  4;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  /  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  /  4;	  return    c    -    4;    	compilable	  [FE]  (entry  2)  	115	5	replace
1001	[BUG]  [BUGGY]  c  +=  getSurroundingSpaces();  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  +=  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  +=  getSurroundingSpaces();	  return    c    +    1;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	32	None	replace
1002	[BUG]  [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    END_OF_STREAM    :    END_OF_STREAM;    c!=  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  not  a  statement	327	None	add
1003	[BUG]  [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  c  >>  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  not  a  statement  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  c  >>  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    END_OF_STREAM    :    END_OF_STREAM;    c  >>  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  not  a  statement	327	None	add
1004	[BUG]  [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  not  a  statement  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    END_OF_STREAM    :    END_OF_STREAM;    c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  not  a  statement	327	None	add
1005	[BUG]  [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	327	None	add
1006	[BUG]  [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	327	None	add
1007	[BUG]  [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpace(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	327	None	add
1008	[BUG]  [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getCurrentSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	327	None	add
1009	[BUG]  [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getCurrentSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	327	None	add
1010	[BUG]  [BUGGY]  return  c  +  ignoreEmptyLines;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  ignoreEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  ignoreEmptyLines;	  return    c    +    escapeSurroundingSpaces;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	134	None	replace
1011	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  delimiter;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  +  delimiter;	  return    c    +    escapeSurroundingSpaces;    	compilable	  [FE]  (entry  2)  	134	5	replace
1012	[BUG]  [BUGGY]  return  c  +  delimiter;  [FE]  (entry  2)  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  delimiter;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  delimiter;	  return    c    +    escapeSurroundingSpaces;    	compilable	  [FE]  (entry  2)  	134	5	replace
1013	[BUG]  [BUGGY]  return  c  +  END_OF_STREAMS;  [CE]  cannot  find  symbol  END_OF_STREAMS  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  END_OF_STREAMS;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  END_OF_STREAMS;	  return    c    +    escapeSurroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  END_OF_STREAMS	134	None	replace
1014	[BUG]  [BUGGY]  return  c  +  endEmptyLines;  [CE]  cannot  find  symbol  endEmptyLines  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  endEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  endEmptyLines;	  return    c    +    escapeSurroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  endEmptyLines	134	None	replace
1015	[BUG]  [BUGGY]  Integer  c  -  1;  [CE]  ';'  expected  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  -  1;	  return    c    -    1;    Integer    c    -    1;    	non-compiled	[CE]  ';'  expected	245	None	replace
1016	[BUG]  [BUGGY]  int  c  -  1;  [CE]  ';'  expected  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  -  1;	  return    c    -    1;    Integer    c    -    1;    	non-compiled	[CE]  ';'  expected	245	None	replace
1017	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  19;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  +  19;	  return    c    +    18;    	compilable	  [FE]  (entry  2)  	370	5	replace
1018	[BUG]  [BUGGY]  return  c  +  19;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  19;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  19;	  return    c    +    18;    	compilable	  [FE]  (entry  2)  	370	5	replace
1019	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  17;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  +  17;	  return    c    +    18;    	compilable	  [FE]  (entry  2)  	370	5	replace
1020	[BUG]  [BUGGY]  return  c  +  17;  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  17;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  17;	  return    c    +    18;    	compilable	  [FE]  (entry  2)  	370	5	replace
1021	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM.length  +  1;  [CE]  int  cannot  be  dereferenced  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM.length  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  END_OF_STREAM.length  +  1;	  return    c    >    0?    1    :    END_OF_STREAM.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	253	None	replace
1022	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM,  c.length;  [CE]  ';'  expected  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM,  c.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  END_OF_STREAM,  c.length;	  return    c    >    0?    1    :    END_OF_STREAM.length;    	non-compiled	[CE]  ';'  expected	253	None	replace
1023	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM,  delimiter.length;  [CE]  ';'  expected  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM,  delimiter.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  END_OF_STREAM,  delimiter.length;	  return    c    >    0?    1    :    END_OF_STREAM.length;    	non-compiled	[CE]  ';'  expected	253	None	replace
1024	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM,  in.length;  [CE]  ';'  expected  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM,  in.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  END_OF_STREAM,  in.length;	  return    c    >    0?    1    :    END_OF_STREAM.length;    	non-compiled	[CE]  ';'  expected	253	None	replace
1025	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM,  length;  [CE]  ';'  expected  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM,  length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  END_OF_STREAM,  length;	  return    c    >    0?    1    :    END_OF_STREAM.length;    	non-compiled	[CE]  ';'  expected	253	None	replace
1026	[BUG]  [BUGGY]  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [CE]  illegal  start  of  expression  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  illegal  start  of  expression	199	None	replace
1027	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	199	None	replace
1028	[BUG]  [BUGGY]  if(c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	199	None	replace
1029	[BUG]  [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	199	None	replace
1030	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getEscapeChar();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getEscapeChar();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getEscapeChar();  }	  return    END_OF_STREAM;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	258	None	replace
1031	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getEscapeChar();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getEscapeChar();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getEscapeChar();  }	  return    END_OF_STREAM;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	258	None	replace
1032	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  return  getEscapeChar();  }  [CE]  cannot  find  symbol  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  return  getEscapeChar();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  return  getEscapeChar();  }	  return    END_OF_STREAM;    int    c    =    getEscapeChar();    	non-compiled	[CE]  cannot  find  symbol	258	None	replace
1033	[BUG]  [BUGGY]  [FE]  IOException  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " ");  }	  return    END_OF_STREAM;    int    c    =    getEscapeChar();    	compilable	  [FE]  IOException  	258	5	replace
1034	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " ");  }  [FE]  IOException  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " ");  }	  return    END_OF_STREAM;    int    c    =    getEscapeChar();    	compilable	  [FE]  IOException  	258	5	replace
1035	[BUG]  [BUGGY]  c  >  0?  c  :  END_OF_STREAM;  [CE]  not  a  statement  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  >  0?  c  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  >  0?  c  :  END_OF_STREAM;	  return    c    >    0?    c    :    END_OF_STREAM;    c    >    0?    c    :    END_OF_STREAM;    	non-compiled	[CE]  not  a  statement	46	None	replace
1036	[BUG]  [BUGGY]  return  c  <  0?  c  :  END_OF_STREAM;  c  >  0?  c  :  END_OF_STREAM;  [CE]  not  a  statement  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  c  :  END_OF_STREAM;  c  >  0?  c  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  0?  c  :  END_OF_STREAM;  c  >  0?  c  :  END_OF_STREAM;	  return    c    >    0?    c    :    END_OF_STREAM;    c    >    0?    c    :    END_OF_STREAM;    	non-compiled	[CE]  not  a  statement	46	None	replace
1037	[BUG]  [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  c  >  0?  c  :  END_OF_STREAM;  [CE]  not  a  statement  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  c  >  0?  c  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  c  :  END_OF_STREAM;  c  >  0?  c  :  END_OF_STREAM;	  return    c    >    0?    c    :    END_OF_STREAM;    c    >    0?    c    :    END_OF_STREAM;    	non-compiled	[CE]  not  a  statement	46	None	replace
1038	[BUG]  [BUGGY]  return  c  >=  0?  c  :  END_OF_STREAM;  c  >  0?  c  :  END_OF_STREAM;  [CE]  not  a  statement  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  c  :  END_OF_STREAM;  c  >  0?  c  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >=  0?  c  :  END_OF_STREAM;  c  >  0?  c  :  END_OF_STREAM;	  return    c    >    0?    c    :    END_OF_STREAM;    c    >    0?    c    :    END_OF_STREAM;    	non-compiled	[CE]  not  a  statement	46	None	replace
1039	[BUG]  [BUGGY]  Integer  c  =  getSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  getSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  getSurroundingSpace();	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpace();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	193	None	replace
1040	[BUG]  [BUGGY]  c  =  getSurroundingSpace();  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getSurroundingSpace();	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpace();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	193	None	replace
1041	[BUG]  [BUGGY]  null  c  =  getSurroundingSpace();  [CE]  not  a  statement  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  null  c  =  getSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	null  c  =  getSurroundingSpace();	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpace();    	non-compiled	[CE]  not  a  statement	193	None	replace
1042	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  quoteChar);  break;  [CE]  cannot  find  symbol  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  quoteChar);  break;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(c,  quoteChar);  break;	  int    delimiter    =    readEscapeSurroundingSpaces(c);    break;    	non-compiled	[CE]  cannot  find  symbol	285	None	replace
1043	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(escape);  break;  [CE]  cannot  find  symbol  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(escape);  break;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(escape);  break;	  int    delimiter    =    readEscapeSurroundingSpaces(c);    break;    	non-compiled	[CE]  cannot  find  symbol	285	None	replace
1044	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(in,  c);  break;  [CE]  cannot  find  symbol  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(in,  c);  break;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(in,  c);  break;	  int    delimiter    =    readEscapeSurroundingSpaces(c);    break;    	non-compiled	[CE]  cannot  find  symbol	285	None	replace
1045	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  escapeChar);  break;  [CE]  cannot  find  symbol  escapeChar  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  escapeChar);  break;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(c,  escapeChar);  break;	  int    delimiter    =    readEscapeSurroundingSpaces(c);    break;    	non-compiled	[CE]  cannot  find  symbol  escapeChar	285	None	replace
1046	[BUG]  [BUGGY]  return  c  >  0?  1  :  -1;  c  >  0?  1  :  -1;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  -1;  c  >  0?  1  :  -1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    -1;    c  >  0?  1  :  -1;	  	non-compiled	[CE]  not  a  statement	305	None	add
1047	[BUG]  [BUGGY]  return  c  >  0?  1  :  -1;  int  c  >  0?  1  :  -1;  [CE]  ';'  expected  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  -1;  int  c  >  0?  1  :  -1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    -1;    int  c  >  0?  1  :  -1;	  	non-compiled	[CE]  ';'  expected	305	None	add
1048	[BUG]  [BUGGY]  return  c  >  0?  1  :  -1;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  -1;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    -1;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	305	None	add
1049	[BUG]  [BUGGY]  return  c  >  0?  1  :  -1;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  -1;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    -1;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	305	None	add
1050	[BUG]  [BUGGY]  return  c  >  0?  1  :  -1;  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  -1;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    -1;    int  c  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	305	None	add
1051	[BUG]  [BUGGY]  return  c  >  0?  1  :  -1;  int  c  =  Integer.parseInt(quoteChar);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  -1;  int  c  =  Integer.parseInt(quoteChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    -1;    int  c  =  Integer.parseInt(quoteChar);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	305	None	add
1052	[BUG]  [BUGGY]  return  c  >  0?  1  :  -1;  int  c  =  Integer.parseInt(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  -1;  int  c  =  Integer.parseInt(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    -1;    int  c  =  Integer.parseInt(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	305	None	add
1053	[BUG]  [BUGGY]  return  c  >  0?  1  :  -1;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  -1;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    -1;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	305	None	add
1054	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_WRITE;  [CE]  cannot  find  symbol  END_OF_WRITE  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_WRITE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  END_OF_STREAM  :  END_OF_WRITE;	  return    c    ==    0?    c    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_WRITE	138	None	replace
1055	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_LINE;  [CE]  cannot  find  symbol  END_OF_LINE  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_LINE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  END_OF_STREAM  :  END_OF_LINE;	  return    c    ==    0?    c    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_LINE	138	None	replace
1056	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  -1  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  ==  0?  -1  :  END_OF_STREAM;	  return    c    ==    0?    c    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	138	3	replace
1057	[BUG]  [BUGGY]  return  c  ==  0?  -1  :  END_OF_STREAM;  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  -1  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  -1  :  END_OF_STREAM;	  return    c    ==    0?    c    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	138	3	replace
1058	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_SECOND;  [CE]  cannot  find  symbol  END_OF_SECOND  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_SECOND;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  END_OF_STREAM  :  END_OF_SECOND;	  return    c    ==    0?    c    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_SECOND	138	None	replace
1059	[BUG]  [BUGGY]  return  c  ||  END_OF_EscapeSequences;  [CE]  cannot  find  symbol  END_OF_EscapeSequences  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ||  END_OF_EscapeSequences;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ||  END_OF_EscapeSequences;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences;    	non-compiled	[CE]  cannot  find  symbol  END_OF_EscapeSequences	348	None	replace
1060	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_SURroundingSpaces;  [CE]  cannot  find  symbol  END_SURroundingSpaces  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_SURroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_SURroundingSpaces;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences;    	non-compiled	[CE]  cannot  find  symbol  END_SURroundingSpaces	348	None	replace
1061	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_EscapeSurroundingSpaces;  [CE]  cannot  find  symbol  END_EscapeSurroundingSpaces  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_EscapeSurroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_EscapeSurroundingSpaces;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences;    	non-compiled	[CE]  cannot  find  symbol  END_EscapeSurroundingSpaces	348	None	replace
1062	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_EscapeSequences.length;  [CE]  cannot  find  symbol  END_EscapeSequences  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_EscapeSequences.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_EscapeSequences.length;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences;    	non-compiled	[CE]  cannot  find  symbol  END_EscapeSequences	348	None	replace
1063	[BUG]  [BUGGY]  return  escape  ||  END_OF_EscapeSequences;  [CE]  cannot  find  symbol  END_OF_EscapeSequences  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  escape  ||  END_OF_EscapeSequences;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  escape  ||  END_OF_EscapeSequences;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences;    	non-compiled	[CE]  cannot  find  symbol  END_OF_EscapeSequences	348	None	replace
1064	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_EscapeSequences;  [CE]  cannot  find  symbol  END_EscapeSequences  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_EscapeSequences;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_EscapeSequences;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences;    	non-compiled	[CE]  cannot  find  symbol  END_EscapeSequences	348	None	replace
1065	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_EOF_EscapeSequences;  [CE]  cannot  find  symbol  END_EOF_EscapeSequences  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_EOF_EscapeSequences;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_EOF_EscapeSequences;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences;    	non-compiled	[CE]  cannot  find  symbol  END_EOF_EscapeSequences	348	None	replace
1066	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  len;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  [CE]  illegal  start  of  expression  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  len;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  len;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    len;    ++c)    {    if(!ignoreEmptyLines)    {    return    c    >    0?    1    :    c;    }    	non-compiled	[CE]  illegal  start  of  expression	293	None	replace
1067	[BUG]  [BUGGY]  c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  [CE]  not  a  statement  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    len;    ++c)    {    if(!ignoreEmptyLines)    {    return    c    >    0?    1    :    c;    }    	non-compiled	[CE]  not  a  statement	293	None	replace
1068	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  len;  ++c)  {  if(!ignoreSurroundingSpaces)  {  return  c  >  0?  1  :  c;  }  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  len;  ++c)  {  if(!ignoreSurroundingSpaces)  {  return  c  >  0?  1  :  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  len;  ++c)  {  if(!ignoreSurroundingSpaces)  {  return  c  >  0?  1  :  c;  }	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    len;    ++c)    {    if(!ignoreEmptyLines)    {    return    c    >    0?    1    :    c;    }    	non-compiled	[CE]  illegal  start  of  expression	293	None	replace
1069	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  len;  ++c)  {  if(ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  len;  ++c)  {  if(ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  len;  ++c)  {  if(ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    len;    ++c)    {    if(!ignoreEmptyLines)    {    return    c    >    0?    1    :    c;    }    	non-compiled	[CE]  illegal  start  of  expression	293	None	replace
1070	[BUG]  [BUGGY]  c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(!ignoreSurroundingSpaces)  {  return  c  >  0?  1  :  c;  }  [CE]  not  a  statement  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(!ignoreSurroundingSpaces)  {  return  c  >  0?  1  :  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(!ignoreSurroundingSpaces)  {  return  c  >  0?  1  :  c;  }	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    len;    ++c)    {    if(!ignoreEmptyLines)    {    return    c    >    0?    1    :    c;    }    	non-compiled	[CE]  not  a  statement	293	None	replace
1071	[BUG]  [BUGGY]  return  c  &  BACKSPACE;  c  &  BACKSPACE;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE;  c  &  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    BACKSPACE;    c  &  BACKSPACE;	  	non-compiled	[CE]  not  a  statement	98	None	add
1072	[BUG]  [BUGGY]  return  c  &  BACKSPACE;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    BACKSPACE;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	98	None	add
1073	[BUG]  [BUGGY]  return  c  &  BACKSPACE;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    BACKSPACE;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	98	None	add
1074	[BUG]  [BUGGY]  return  c  &  BACKSPACE;  Integer  c  &  BACKSPACE;  [CE]  ';'  expected  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE;  Integer  c  &  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    BACKSPACE;    Integer  c  &  BACKSPACE;	  	non-compiled	[CE]  ';'  expected	98	None	add
1075	[BUG]  [BUGGY]  return  c  &  BACKSPACE;  (c  &  BACKSPACE);  [CE]  not  a  statement  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE;  (c  &  BACKSPACE);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    BACKSPACE;    (c  &  BACKSPACE);	  	non-compiled	[CE]  not  a  statement	98	None	add
1076	[BUG]  [BUGGY]  return  c  &  BACKSPACE;  int  c  =  getCurrentSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE;  int  c  =  getCurrentSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    BACKSPACE;    int  c  =  getCurrentSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	98	None	add
1077	[BUG]  [BUGGY]  return  c  &  BACKSPACE;  int  c  =  getCurrentSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE;  int  c  =  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    BACKSPACE;    int  c  =  getCurrentSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	98	None	add
1078	[BUG]  [BUGGY]  (c  >  0?  1  :  c);  [CE]  not  a  statement  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  (c  >  0?  1  :  c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	(c  >  0?  1  :  c);	  return    c    >    0?    1    :    c;    (c    >    0?    1    :    c);    	non-compiled	[CE]  not  a  statement	163	None	replace
1079	[BUG]  [BUGGY]  return  c  >  0?  1;  (c  >  0?  1  :  c);  [CE]  :  expected  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1;  (c  >  0?  1  :  c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1;  (c  >  0?  1  :  c);	  return    c    >    0?    1    :    c;    (c    >    0?    1    :    c);    	non-compiled	[CE]  :  expected	163	None	replace
1080	[BUG]  [BUGGY]  c  =  0;  (c  >  0?  1  :  c);  [CE]  not  a  statement  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  0;  (c  >  0?  1  :  c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  0;  (c  >  0?  1  :  c);	  return    c    >    0?    1    :    c;    (c    >    0?    1    :    c);    	non-compiled	[CE]  not  a  statement	163	None	replace
1081	[BUG]  [BUGGY]  int  c  =  0;  (c  >  0?  1  :  c);  [CE]  not  a  statement  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  0;  (c  >  0?  1  :  c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  0;  (c  >  0?  1  :  c);	  return    c    >    0?    1    :    c;    (c    >    0?    1    :    c);    	non-compiled	[CE]  not  a  statement	163	None	replace
1082	[BUG]  [BUGGY]  return  c  >  0?  1  :  c;  (c  <  0?  1  :  c);  [CE]  not  a  statement  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c;  (c  <  0?  1  :  c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  c;  (c  <  0?  1  :  c);	  return    c    >    0?    1    :    c;    (c    >    0?    1    :    c);    	non-compiled	[CE]  not  a  statement	163	None	replace
1083	[BUG]  [BUGGY]  return  END_OF_STREAM  +  ignoreEmptyLines[c];  [CE]  array  required,  but  boolean  found  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  ignoreEmptyLines[c];  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  ignoreEmptyLines[c];	  return    END_OF_STREAM    +    escapeSurroundingSpaces[c];    	non-compiled	[CE]  array  required,  but  boolean  found	229	None	replace
1084	[BUG]  [BUGGY]  return  END_OF_STREAM  +  this.ignoreEmptyLines[c];  [CE]  array  required,  but  boolean  found  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  this.ignoreEmptyLines[c];  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  this.ignoreEmptyLines[c];	  return    END_OF_STREAM    +    escapeSurroundingSpaces[c];    	non-compiled	[CE]  array  required,  but  boolean  found	229	None	replace
1085	[BUG]  [BUGGY]  return  END_OF_STREAM  +  ignoredEmptyLines[c];  [CE]  cannot  find  symbol  ignoredEmptyLines  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  ignoredEmptyLines[c];  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  ignoredEmptyLines[c];	  return    END_OF_STREAM    +    escapeSurroundingSpaces[c];    	non-compiled	[CE]  cannot  find  symbol  ignoredEmptyLines	229	None	replace
1086	[BUG]  [BUGGY]  return  END_OF_STREAM  +  ignoreSurroundingSpaces[c];  [CE]  array  required,  but  boolean  found  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  ignoreSurroundingSpaces[c];  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  ignoreSurroundingSpaces[c];	  return    END_OF_STREAM    +    escapeSurroundingSpaces[c];    	non-compiled	[CE]  array  required,  but  boolean  found	229	None	replace
1087	[BUG]  [BUGGY]  return  END_OF_STREAM  +  invSurroundingSpaces[c];  [CE]  cannot  find  symbol  invSurroundingSpaces  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  invSurroundingSpaces[c];  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  invSurroundingSpaces[c];	  return    END_OF_STREAM    +    escapeSurroundingSpaces[c];    	non-compiled	[CE]  cannot  find  symbol  invSurroundingSpaces	229	None	replace
1088	[BUG]  [BUGGY]  result  &=  END_OF_STREAM;  [CE]  cannot  find  symbol  result  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result  &=  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result  &=  END_OF_STREAM;	  return    c    &    END_OF_STREAM;    return    c    &    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  result	321	None	replace
1089	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  |  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  |  END_OF_STREAM;	  return    c    &    END_OF_STREAM;    return    c    &    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	321	3	replace
1090	[BUG]  [BUGGY]  return  c  |  END_OF_STREAM;  [FE]  (entry  2)  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  |  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  |  END_OF_STREAM;	  return    c    &    END_OF_STREAM;    return    c    &    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	321	3	replace
1091	[BUG]  [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(ignoreEmptyLines)  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  }	  return    END_OF_STREAM;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	132	None	replace
1092	[BUG]  [BUGGY]  while(c  <  getSurroundingSpaces().length)  {  return  END_OF_STREAM;  [CE]  illegal  start  of  expression  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  getSurroundingSpaces().length)  {  return  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  getSurroundingSpaces().length)  {  return  END_OF_STREAM;	  return    END_OF_STREAM;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
1093	[BUG]  [BUGGY]  while(c  <  getSurroundingSpaces().length)  {  c  =  getSurroundingSpaces().length;  [CE]  illegal  start  of  expression  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  getSurroundingSpaces().length)  {  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  getSurroundingSpaces().length)  {  c  =  getSurroundingSpaces().length;	  return    END_OF_STREAM;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
1094	[BUG]  [BUGGY]  c  =  getSurroundingSpace();  return  c  +  1;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getSurroundingSpace();  return  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getSurroundingSpace();  return  c  +  1;	  return    c    +    1;    int    c    =    getSurroundingSpace();    return    c    +    1;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	362	None	replace
1095	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace();  return  c  +  2;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace();  return  c  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace();  return  c  +  2;	  return    c    +    1;    int    c    =    getSurroundingSpace();    return    c    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	362	None	replace
1096	[BUG]  [BUGGY]  c  +=  getSurroundingSpace();  return  c  +  1;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  +=  getSurroundingSpace();  return  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  +=  getSurroundingSpace();  return  c  +  1;	  return    c    +    1;    int    c    =    getSurroundingSpace();    return    c    +    1;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	362	None	replace
1097	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace();  return  c  +  3;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace();  return  c  +  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace();  return  c  +  3;	  return    c    +    1;    int    c    =    getSurroundingSpace();    return    c    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	362	None	replace
1098	[BUG]  [BUGGY]  c  =  getSurroundingSpace();  return  c  +  2;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getSurroundingSpace();  return  c  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getSurroundingSpace();  return  c  +  2;	  return    c    +    1;    int    c    =    getSurroundingSpace();    return    c    +    1;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	362	None	replace
1099	[BUG]  [BUGGY]  return  c  -  1;  int  c  =  getEscapeSurroundingSpaces()  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1;  int  c  =  getEscapeSurroundingSpaces()  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  1;  int  c  =  getEscapeSurroundingSpaces()  +  1;	  return    c    -    1;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	152	None	replace
1100	[BUG]  [BUGGY]  return  END_OF_STREAM  +  DISABLED;  return  END_OF_STREAM  +  DISABLED;  [CE]  unreachable  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  DISABLED;  return  END_OF_STREAM  +  DISABLED;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    DISABLED;    return  END_OF_STREAM  +  DISABLED;	  	non-compiled	[CE]  unreachable  statement	182	None	add
1101	[BUG]  [BUGGY]  return  END_OF_STREAM  +  DISABLED;  DISABLED  +  END_OF_STREAM;  [CE]  not  a  statement  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  DISABLED;  DISABLED  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    DISABLED;    DISABLED  +  END_OF_STREAM;	  	non-compiled	[CE]  not  a  statement	182	None	add
1102	[BUG]  [BUGGY]  return  END_OF_STREAM  +  DISABLED;  DISABLED  +  DISABLED;  [CE]  not  a  statement  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  DISABLED;  DISABLED  +  DISABLED;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    DISABLED;    DISABLED  +  DISABLED;	  	non-compiled	[CE]  not  a  statement	182	None	add
1103	[BUG]  [BUGGY]  return  END_OF_STREAM  +  DISABLED;  int  DISABLED  =  getSurroundingSpaces().length;  [CE]  cannot  find  symbol  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  DISABLED;  int  DISABLED  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    DISABLED;    int  DISABLED  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  cannot  find  symbol	182	None	add
1104	[BUG]  [BUGGY]  return  END_OF_STREAM  +  DISABLED;  int  DISABLED  =  getSurroundingSpaces().size();  [CE]  cannot  find  symbol  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  DISABLED;  int  DISABLED  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    DISABLED;    int  DISABLED  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  cannot  find  symbol	182	None	add
1105	[BUG]  [BUGGY]  return  END_OF_STREAM  +  DISABLED;  int  commmentStart  =  getCommentStart();  [CE]  cannot  find  symbol  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  DISABLED;  int  commmentStart  =  getCommentStart();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    DISABLED;    int  commmentStart  =  getCommentStart();	  	non-compiled	[CE]  cannot  find  symbol	182	None	add
1106	[BUG]  [BUGGY]  return  END_OF_STREAM  +  DISABLED;  int  DISABLED  =  getSurroundingSpace(c);  [CE]  cannot  find  symbol  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  DISABLED;  int  DISABLED  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    DISABLED;    int  DISABLED  =  getSurroundingSpace(c);	  	non-compiled	[CE]  cannot  find  symbol	182	None	add
1107	[BUG]  [BUGGY]  return  END_OF_STREAM  +  DISABLED;  int  DISABLED  =  getEscapeSurroundingSpaces();  [CE]  cannot  find  symbol  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  DISABLED;  int  DISABLED  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    DISABLED;    int  DISABLED  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  cannot  find  symbol	182	None	add
1108	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    END_OF_STREAM?    END_OF_STREAM    :    END_OF_STREAM;    c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  not  a  statement	263	None	add
1109	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  (c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM);  [CE]  not  a  statement  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  (c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    END_OF_STREAM?    END_OF_STREAM    :    END_OF_STREAM;    (c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM);	  	non-compiled	[CE]  not  a  statement	263	None	add
1110	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    END_OF_STREAM?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	263	None	add
1111	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  (c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  ')'  expected  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  (c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    END_OF_STREAM?    END_OF_STREAM    :    END_OF_STREAM;    (c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  ')'  expected	263	None	add
1112	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM);  [CE]  not  a  statement  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    END_OF_STREAM?    END_OF_STREAM    :    END_OF_STREAM;    c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM);	  	non-compiled	[CE]  not  a  statement	263	None	add
1113	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM.intValue();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM.intValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    END_OF_STREAM?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM.intValue();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	263	None	add
1114	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM.intValue();  [CE]  not  a  statement  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM.intValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    END_OF_STREAM?    END_OF_STREAM    :    END_OF_STREAM;    c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM.intValue();	  	non-compiled	[CE]  not  a  statement	263	None	add
1115	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM  +  1;  [CE]  not  a  statement  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    END_OF_STREAM?    END_OF_STREAM    :    END_OF_STREAM;    c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM  +  1;	  	non-compiled	[CE]  not  a  statement	263	None	add
1116	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  END_OF_STREAM;  [CE]  duplicate  case  label  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  END_OF_STREAM;	  return    BACKSPACE;    return    BACKSPACE;    	non-compiled	[CE]  duplicate  case  label	224	None	replace
1117	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }	  return    BACKSPACE;    return    BACKSPACE;    	compilable	  [FE]  (entry  2)  	224	3	replace
1118	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }  [FE]  (entry  2)  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }	  return    BACKSPACE;    return    BACKSPACE;    	compilable	  [FE]  (entry  2)  	224	3	replace
1119	[BUG]  [BUGGY]  [FE]  IOException  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }	  return    BACKSPACE;    return    BACKSPACE;    	compilable	  [FE]  IOException  	224	5	replace
1120	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }  [FE]  IOException  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }	  return    BACKSPACE;    return    BACKSPACE;    	compilable	  [FE]  IOException  	224	5	replace
1121	[BUG]  [BUGGY]  return  CSVFormat.END_OF_STREAM  +  1;  [CE]  cannot  find  symbol  END_OF_STREAM  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.END_OF_STREAM  +  1;	  return    CSVFormat.END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_STREAM	3	None	replace
1122	[BUG]  [BUGGY]  return  CSVFormat.END_OBJECT;  [CE]  cannot  find  symbol  END_OBJECT  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.END_OBJECT;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.END_OBJECT;	  return    CSVFormat.END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OBJECT	3	None	replace
1123	[BUG]  [BUGGY]  return  CSVFormat.END_OF_STREAM  -  1;  [CE]  cannot  find  symbol  END_OF_STREAM  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.END_OF_STREAM  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.END_OF_STREAM  -  1;	  return    CSVFormat.END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_STREAM	3	None	replace
1124	[BUG]  [BUGGY]  return  CSVFormat.END_OF_STREAM  ||  END_OF_STREAM;  [CE]  cannot  find  symbol  END_OF_STREAM  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.END_OF_STREAM  ||  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.END_OF_STREAM  ||  END_OF_STREAM;	  return    CSVFormat.END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_STREAM	3	None	replace
1125	[BUG]  [BUGGY]  return  END_OF_Escape.equals(c)?  END_OF_Escape  :  END_OF_STREAM;  [CE]  cannot  find  symbol  END_OF_Escape  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_Escape.equals(c)?  END_OF_Escape  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_Escape.equals(c)?  END_OF_Escape  :  END_OF_STREAM;	  return    END_OF_STREAM.equals(c)?    END_OF_Escape    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_Escape	367	None	replace
1126	[BUG]  [BUGGY]  return  c.equals(END_OF_Escape)?  END_OF_Escape  :  END_OF_STREAM;  [CE]  cannot  find  symbol  END_OF_Escape  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c.equals(END_OF_Escape)?  END_OF_Escape  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c.equals(END_OF_Escape)?  END_OF_Escape  :  END_OF_STREAM;	  return    END_OF_STREAM.equals(c)?    END_OF_Escape    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_Escape	367	None	replace
1127	[BUG]  [BUGGY]  return  END_OF_Escape.equals(c)?  END_OF_STREAM  :  END_OF_Escape;  [CE]  cannot  find  symbol  END_OF_Escape  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_Escape.equals(c)?  END_OF_STREAM  :  END_OF_Escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_Escape.equals(c)?  END_OF_STREAM  :  END_OF_Escape;	  return    END_OF_STREAM.equals(c)?    END_OF_Escape    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_Escape	367	None	replace
1128	[BUG]  [BUGGY]  return  END_OF_Escape.equals(c)?  END_OF_Escape  :  END_OF_SECOND;  [CE]  cannot  find  symbol  END_OF_Escape  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_Escape.equals(c)?  END_OF_Escape  :  END_OF_SECOND;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_Escape.equals(c)?  END_OF_Escape  :  END_OF_SECOND;	  return    END_OF_STREAM.equals(c)?    END_OF_Escape    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_Escape	367	None	replace
1129	[BUG]  [BUGGY]  return  END_OF_Escape.equals(c)?  END_OF_SURroundingSpaces  :  END_OF_STREAM;  [CE]  cannot  find  symbol  END_OF_Escape  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_Escape.equals(c)?  END_OF_SURroundingSpaces  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_Escape.equals(c)?  END_OF_SURroundingSpaces  :  END_OF_STREAM;	  return    END_OF_STREAM.equals(c)?    END_OF_Escape    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_Escape	367	None	replace
1130	[BUG]  [BUGGY]  return  c.equals(END_OF_STREAM)?  END_OF_Escape  :  END_OF_STREAM;  [CE]  int  cannot  be  dereferenced  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c.equals(END_OF_STREAM)?  END_OF_Escape  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c.equals(END_OF_STREAM)?  END_OF_Escape  :  END_OF_STREAM;	  return    END_OF_STREAM.equals(c)?    END_OF_Escape    :    END_OF_STREAM;    	non-compiled	[CE]  int  cannot  be  dereferenced	367	None	replace
1131	[BUG]  [BUGGY]  return  END_OF_STREAM  +  commmentStart;  commmentStart  +  commmentStart;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  commmentStart;  commmentStart  +  commmentStart;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    commmentStart;    commmentStart  +  commmentStart;	  	non-compiled	[CE]  not  a  statement	80	None	add
1132	[BUG]  [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  Integer.parseInt(c);  [CE]  no  suitable  method  found  for  parseInt(int)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  Integer.parseInt(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    commmentStart;    int  commmentStart  =  Integer.parseInt(c);	  	non-compiled	[CE]  no  suitable  method  found  for  parseInt(int)	80	None	add
1133	[BUG]  [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  in.read();  [CE]  unreachable  statement  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  in.read();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    commmentStart;    int  commmentStart  =  in.read();	  	non-compiled	[CE]  unreachable  statement	80	None	add
1134	[BUG]  [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  getCommentSurroundingSpaces();  [CE]  cannot  find  symbol  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  getCommentSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    commmentStart;    int  commmentStart  =  getCommentSurroundingSpaces();	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
1135	[BUG]  [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  getEscapeSurroundingSpaces();  [CE]  cannot  find  symbol  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    commmentStart;    int  commmentStart  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
1136	[BUG]  [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  getEscapeSurroundingSpaces().length;  [CE]  cannot  find  symbol  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  getEscapeSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    commmentStart;    int  commmentStart  =  getEscapeSurroundingSpaces().length;	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
1137	[BUG]  [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  getCommentSurroundingSpaces().length;  [CE]  cannot  find  symbol  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  getCommentSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    commmentStart;    int  commmentStart  =  getCommentSurroundingSpaces().length;	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
1138	[BUG]  [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  Integer.toString(c);  [CE]  incompatible  types  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  Integer.toString(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    commmentStart;    int  commmentStart  =  Integer.toString(c);	  	non-compiled	[CE]  incompatible  types	80	None	add
1139	[BUG]  [BUGGY]  return  END_OF_STREAM  +  ignoreEmptyLines.length;  [CE]  boolean  cannot  be  dereferenced  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  ignoreEmptyLines.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  ignoreEmptyLines.length;	  return    END_OF_STREAM    +    escapeSurroundingSpaces.length;    	non-compiled	[CE]  boolean  cannot  be  dereferenced	227	None	replace
1140	[BUG]  [BUGGY]  return  END_OF_STREAM  +  c.length;  [CE]  int  cannot  be  dereferenced  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  c.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  c.length;	  return    END_OF_STREAM    +    escapeSurroundingSpaces.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	227	None	replace
1141	[BUG]  [BUGGY]  return  END_OF_STREAM  +  this.ignoreEmptyLines.length;  [CE]  boolean  cannot  be  dereferenced  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  this.ignoreEmptyLines.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  this.ignoreEmptyLines.length;	  return    END_OF_STREAM    +    escapeSurroundingSpaces.length;    	non-compiled	[CE]  boolean  cannot  be  dereferenced	227	None	replace
1142	[BUG]  [BUGGY]  return  END_OF_STREAM  +  in.length;  [CE]  cannot  find  symbol  length  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  in.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  in.length;	  return    END_OF_STREAM    +    escapeSurroundingSpaces.length;    	non-compiled	[CE]  cannot  find  symbol  length	227	None	replace
1143	[BUG]  [BUGGY]  return  END_OF_STREAM  +  delimiter.length;  [CE]  char  cannot  be  dereferenced  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  delimiter.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  delimiter.length;	  return    END_OF_STREAM    +    escapeSurroundingSpaces.length;    	non-compiled	[CE]  char  cannot  be  dereferenced	227	None	replace
1144	[BUG]  [BUGGY]  return  END_OF_STREAM  +  flags.length;  [CE]  cannot  find  symbol  flags  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  flags.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  flags.length;	  return    END_OF_STREAM    +    escapeSurroundingSpaces.length;    	non-compiled	[CE]  cannot  find  symbol  flags	227	None	replace
1145	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpace(c);	  return    BACKSPACE;    Integer    c    =    getEscapeSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	170	None	replace
1146	[BUG]  [BUGGY]  default:  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c);  [CE]  duplicate  default  label  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  default:  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	default:  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c);	  return    BACKSPACE;    Integer    c    =    getEscapeSurroundingSpace(c);    	non-compiled	[CE]  duplicate  default  label	170	None	replace
1147	[BUG]  [BUGGY]  while(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c);  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c);	  return    BACKSPACE;    Integer    c    =    getEscapeSurroundingSpace(c);    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
1148	[BUG]  [BUGGY]  Integer  c  =  getEscapeSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  getEscapeSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  getEscapeSurroundingSpace(c);	  return    BACKSPACE;    Integer    c    =    getEscapeSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	170	None	replace
1149	[BUG]  [BUGGY]  default:  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c,  ignoreEmptyLines);  [CE]  duplicate  default  label  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  default:  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c,  ignoreEmptyLines);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	default:  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c,  ignoreEmptyLines);	  return    BACKSPACE;    Integer    c    =    getEscapeSurroundingSpace(c);    	non-compiled	[CE]  duplicate  default  label	170	None	replace
1150	[BUG]  [BUGGY]  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c,  END_OF_STREAM);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c,  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c,  END_OF_STREAM);	  return    BACKSPACE;    Integer    c    =    getEscapeSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	170	None	replace
1151	[BUG]  [BUGGY]  c  =  getEscapeSurroundingSpace(c);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getEscapeSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getEscapeSurroundingSpace(c);	  return    BACKSPACE;    Integer    c    =    getEscapeSurroundingSpace(c);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	170	None	replace
1152	[BUG]  [BUGGY]  c  >  0?  1  :  getSurroundingSpaces().length;  [CE]  not  a  statement  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  >  0?  1  :  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  >  0?  1  :  getSurroundingSpaces().length;	  return    c    >    0?    1    :    c;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  not  a  statement	257	None	replace
1153	[BUG]  [BUGGY]  char  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  char  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	char  c  =  getSurroundingSpaces().length;	  return    c    >    0?    1    :    c;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	257	None	replace
1154	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpace();  return  END_OF_STREAM  +  c;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpace();  return  END_OF_STREAM  +  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpace();  return  END_OF_STREAM  +  c;	  return    END_OF_STREAM    +    c;    int    c    =    getEscapeSurroundingSpace();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	340	None	replace
1155	[BUG]  [BUGGY]  c  =  getEscapeSurroundingSpace();  return  END_OF_STREAM  +  c;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getEscapeSurroundingSpace();  return  END_OF_STREAM  +  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getEscapeSurroundingSpace();  return  END_OF_STREAM  +  c;	  return    END_OF_STREAM    +    c;    int    c    =    getEscapeSurroundingSpace();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	340	None	replace
1156	[BUG]  [BUGGY]  null  c  =  getEscapeSurroundingSpace();  return  END_OF_STREAM  +  c;  [CE]  not  a  statement  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  null  c  =  getEscapeSurroundingSpace();  return  END_OF_STREAM  +  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	null  c  =  getEscapeSurroundingSpace();  return  END_OF_STREAM  +  c;	  return    END_OF_STREAM    +    c;    int    c    =    getEscapeSurroundingSpace();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  not  a  statement	340	None	replace
1157	[BUG]  [BUGGY]  Integer  c  =  getEscapeSurroundingSpace();  return  END_OF_STREAM  +  c;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  getEscapeSurroundingSpace();  return  END_OF_STREAM  +  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  getEscapeSurroundingSpace();  return  END_OF_STREAM  +  c;	  return    END_OF_STREAM    +    c;    int    c    =    getEscapeSurroundingSpace();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	340	None	replace
1158	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpace();  return  END_OF_STREAM  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpace();  return  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpace();  return  END_OF_STREAM  +  1;	  return    END_OF_STREAM    +    c;    int    c    =    getEscapeSurroundingSpace();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	340	None	replace
1159	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  END_OF_STREAM  +  2;  [CE]  duplicate  case  label  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  END_OF_STREAM  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  END_OF_STREAM  +  2;	  return    END_OF_STREAM    +    1;    case    END_OF_STREAM:    return    END_OF_STREAM    +    1;    	non-compiled	[CE]  duplicate  case  label	315	None	replace
1160	[BUG]  [BUGGY]  default:  return  END_OF_STREAM  +  1;  [CE]  duplicate  default  label  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  default:  return  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	default:  return  END_OF_STREAM  +  1;	  return    END_OF_STREAM    +    1;    case    END_OF_STREAM:    return    END_OF_STREAM    +    1;    	non-compiled	[CE]  duplicate  default  label	315	None	replace
1161	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result:  return  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	result:  return  END_OF_STREAM  +  1;	  return    END_OF_STREAM    +    1;    case    END_OF_STREAM:    return    END_OF_STREAM    +    1;    	compilable	  [FE]  (entry  2)  	315	5	replace
1162	[BUG]  [BUGGY]  result:  return  END_OF_STREAM  +  1;  [FE]  (entry  2)  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result:  return  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result:  return  END_OF_STREAM  +  1;	  return    END_OF_STREAM    +    1;    case    END_OF_STREAM:    return    END_OF_STREAM    +    1;    	compilable	  [FE]  (entry  2)  	315	5	replace
1163	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpace(escape);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpace(escape);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpace(escape);	  return    c    +    1;    int    c    =    getEscapeSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	34	None	replace
1164	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpace(null);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpace(null);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpace(null);	  return    c    +    1;    int    c    =    getEscapeSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	34	None	replace
1165	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpace(escapeChar);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpace(escapeChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpace(escapeChar);	  return    c    +    1;    int    c    =    getEscapeSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	34	None	replace
1166	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpace(entry);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpace(entry);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpace(entry);	  return    c    +    1;    int    c    =    getEscapeSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	34	None	replace
1167	[BUG]  [BUGGY]  return  c  -  1;  c  -  2;  [CE]  not  a  statement  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1;  c  -  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  1;  c  -  2;	  return    c    -    1;    c    -    1;    	non-compiled	[CE]  not  a  statement	150	None	replace
1168	[BUG]  [BUGGY]  return  c  -  2;  c  -  1;  [CE]  not  a  statement  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  2;  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  2;  c  -  1;	  return    c    -    1;    c    -    1;    	non-compiled	[CE]  not  a  statement	150	None	replace
1169	[BUG]  [BUGGY]  c  -=  END_OF_STREAM;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  -=  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  -=  END_OF_STREAM;	  return    c    -    1;    c    -    1;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	150	None	replace
1170	[BUG]  [BUGGY]  c  -=  1;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  -=  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  -=  1;	  return    c    -    1;    c    -    1;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	150	None	replace
1171	[BUG]  [BUGGY]  return  c  +  1;  c  -  1;  [CE]  not  a  statement  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  1;  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  1;  c  -  1;	  return    c    -    1;    c    -    1;    	non-compiled	[CE]  not  a  statement	150	None	replace
1172	[BUG]  [BUGGY]  return  c  -  2;  c  -  2;  [CE]  not  a  statement  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  2;  c  -  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  2;  c  -  2;	  return    c    -    1;    c    -    1;    	non-compiled	[CE]  not  a  statement	150	None	replace
1173	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  END_OF_STREAM  +  3;	  return    END_OF_STREAM    +    4;    	compilable	  [FE]  (entry  2)  	75	5	replace
1174	[BUG]  [BUGGY]  return  END_OF_STREAM  +  3;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  3;	  return    END_OF_STREAM    +    4;    	compilable	  [FE]  (entry  2)  	75	5	replace
1175	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  5;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  END_OF_STREAM  +  5;	  return    END_OF_STREAM    +    4;    	compilable	  [FE]  (entry  2)  	75	5	replace
1176	[BUG]  [BUGGY]  return  END_OF_STREAM  +  5;  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  5;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  5;	  return    END_OF_STREAM    +    4;    	compilable	  [FE]  (entry  2)  	75	5	replace
1177	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  6;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  END_OF_STREAM  +  6;	  return    END_OF_STREAM    +    4;    	compilable	  [FE]  (entry  2)  	75	5	replace
1178	[BUG]  [BUGGY]  return  END_OF_STREAM  +  6;  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  6;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  6;	  return    END_OF_STREAM    +    4;    	compilable	  [FE]  (entry  2)  	75	5	replace
1179	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  c  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  <  0?  c  :  END_OF_STREAM;	  return    c    >    0?    c    :    END_OF_STREAM;    return    c    >    0?    c    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	313	3	replace
1180	[BUG]  [BUGGY]  return  c  <  0?  c  :  END_OF_STREAM;  [FE]  (entry  2)  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  c  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  0?  c  :  END_OF_STREAM;	  return    c    >    0?    c    :    END_OF_STREAM;    return    c    >    0?    c    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	313	3	replace
1181	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  END_OF_STREAM.intValue();  [CE]  duplicate  case  label  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  END_OF_STREAM.intValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  END_OF_STREAM.intValue();	  return    END_OF_STREAM;    case    END_OF_STREAM:    return    END_OF_STREAM;    	non-compiled	[CE]  duplicate  case  label	296	None	replace
1182	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreSurroundingSpaces  ||!ignoreEmptyLines)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreSurroundingSpaces  ||!ignoreEmptyLines)  {  return  false;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreSurroundingSpaces  ||!ignoreEmptyLines)  {  return  false;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None	replace
1183	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }  }  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None	replace
1184	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None	replace
1185	[BUG]  [BUGGY]  int  len  =  escape.length;  for(int  i  =  0,  len  =  len;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  len  =  escape.length;  for(int  i  =  0,  len  =  len;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  len  =  escape.length;  for(int  i  =  0,  len  =  len;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None	replace
1186	[BUG]  [BUGGY]  int  len  =  escape.length;  for(int  i  =  0,  len  =  len;  i  <  len;  ++i)  {  if(!ignoreSurroundingSpaces  ||!ignoreEmptyLines)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  len  =  escape.length;  for(int  i  =  0,  len  =  len;  i  <  len;  ++i)  {  if(!ignoreSurroundingSpaces  ||!ignoreEmptyLines)  {  return  false;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  len  =  escape.length;  for(int  i  =  0,  len  =  len;  i  <  len;  ++i)  {  if(!ignoreSurroundingSpaces  ||!ignoreEmptyLines)  {  return  false;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None	replace
1187	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreSurroundingSpaces)  {  return  false;  }  }  [CE]  illegal  start  of  expression  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreSurroundingSpaces)  {  return  false;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreSurroundingSpaces)  {  return  false;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None	replace
1188	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreSurroundingSpaces  ||  ignoreEmptyLines)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreSurroundingSpaces  ||  ignoreEmptyLines)  {  return  false;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreSurroundingSpaces  ||  ignoreEmptyLines)  {  return  false;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None	replace
1189	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  +  escape;	  return    END_OF_STREAM    +    escape;    	compilable	  [FE]  (entry  2)  	280	5	replace
1190	[BUG]  [BUGGY]  return  c  +  escape;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  escape;	  return    END_OF_STREAM    +    escape;    	compilable	  [FE]  (entry  2)  	280	5	replace
1191	[BUG]  [BUGGY]  return  escapeSurroundingSpaces  +  END_OF_STREAM;  [CE]  cannot  find  symbol  escapeSurroundingSpaces  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  escapeSurroundingSpaces  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  escapeSurroundingSpaces  +  END_OF_STREAM;	  return    END_OF_STREAM    +    escape;    	non-compiled	[CE]  cannot  find  symbol  escapeSurroundingSpaces	280	None	replace
1192	[BUG]  [BUGGY]  while(c  <  getCurrentIndex())  {  return  END_OF_STREAM;  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  getCurrentIndex())  {  return  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  getCurrentIndex())  {  return  END_OF_STREAM;	  return    END_OF_STREAM;    int    c    =    getCurrentIndex();    	non-compiled	[CE]  illegal  start  of  expression	261	None	replace
1193	[BUG]  [BUGGY]  while(c  <  getCurrentIndex())  {  c  =  getCurrentIndex();  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  getCurrentIndex())  {  c  =  getCurrentIndex();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  getCurrentIndex())  {  c  =  getCurrentIndex();	  return    END_OF_STREAM;    int    c    =    getCurrentIndex();    	non-compiled	[CE]  illegal  start  of  expression	261	None	replace
1194	[BUG]  [BUGGY]  null  c  =  getCurrentIndex();  [CE]  not  a  statement  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  null  c  =  getCurrentIndex();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	null  c  =  getCurrentIndex();	  return    END_OF_STREAM;    int    c    =    getCurrentIndex();    	non-compiled	[CE]  not  a  statement	261	None	replace
1195	[BUG]  [BUGGY]  c  >  0?  END_OF_STREAM  :  END_BACKSPACE;  int  c  =  getSurroundingSpaces().length;  [CE]  not  a  statement  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  >  0?  END_OF_STREAM  :  END_BACKSPACE;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  >  0?  END_OF_STREAM  :  END_BACKSPACE;  int  c  =  getSurroundingSpaces().length;	  return    c    >    0?    c    :    END_OF_STREAM;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  not  a  statement	53	None	replace
1196	[BUG]  [BUGGY]  c  >  0?  END_OF_STREAM  :  END_EmptyLines;  int  c  =  getSurroundingSpaces().length;  [CE]  not  a  statement  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  >  0?  END_OF_STREAM  :  END_EmptyLines;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  >  0?  END_OF_STREAM  :  END_EmptyLines;  int  c  =  getSurroundingSpaces().length;	  return    c    >    0?    c    :    END_OF_STREAM;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  not  a  statement	53	None	replace
1197	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_EmptyLines;  int  c  =  getSurroundingSpaces().length;  [CE]  cannot  find  symbol  END_EmptyLines  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_EmptyLines;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  END_OF_STREAM  :  END_EmptyLines;  int  c  =  getSurroundingSpaces().length;	  return    c    >    0?    c    :    END_OF_STREAM;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  cannot  find  symbol  END_EmptyLines	53	None	replace
1198	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_SPACE;  int  c  =  getSurroundingSpaces().length;  [CE]  cannot  find  symbol  END_SPACE  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_SPACE;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  END_OF_STREAM  :  END_SPACE;  int  c  =  getSurroundingSpaces().length;	  return    c    >    0?    c    :    END_OF_STREAM;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  cannot  find  symbol  END_SPACE	53	None	replace
1199	[BUG]  [BUGGY]  (c  >  0?  END_OF_STREAM  :  END_OF_STREAM);  int  c  =  getSurroundingSpaces().length;  [CE]  not  a  statement  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  (c  >  0?  END_OF_STREAM  :  END_OF_STREAM);  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	(c  >  0?  END_OF_STREAM  :  END_OF_STREAM);  int  c  =  getSurroundingSpaces().length;	  return    c    >    0?    c    :    END_OF_STREAM;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  not  a  statement	53	None	replace
1200	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  com  [CE]  ';'  expected  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  com  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  com	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readCharAt(c);    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
1201	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readCharAt(c);    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
1202	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart!=  commmentStart)  {  return  com  [CE]  ';'  expected  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart!=  commmentStart)  {  return  com  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart!=  commmentStart)  {  return  com	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readCharAt(c);    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
1203	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  in;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  com  [CE]  ';'  expected  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  in;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  com  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  in;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  com	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readCharAt(c);    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
1204	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart!=  commmentStart)  {  return  [CE]  illegal  start  of  expression  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart!=  commmentStart)  {  return  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart!=  commmentStart)  {  return	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readCharAt(c);    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
1205	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  comenceStart;  }  [CE]  illegal  start  of  expression  [FE]                            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  comenceStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  comenceStart;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readCharAt(c);    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
1206	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  in;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  [CE]  illegal  start  of  expression  [FE]                              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  in;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  in;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readCharAt(c);    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
1207	[BUG]  [BUGGY]  return  c  -  END_OF_STREAM;  c  -  END_OF_STREAM;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM;  c  -  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    END_OF_STREAM;    c  -  END_OF_STREAM;	  	non-compiled	[CE]  not  a  statement	96	None	add
1208	[BUG]  [BUGGY]  return  c  -  END_OF_STREAM;  int  c  -  END_OF_STREAM;  [CE]  ';'  expected  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM;  int  c  -  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    END_OF_STREAM;    int  c  -  END_OF_STREAM;	  	non-compiled	[CE]  ';'  expected	96	None	add
1209	[BUG]  [BUGGY]  return  c  -  END_OF_STREAM;  (c  -  END_OF_STREAM);  [CE]  not  a  statement  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM;  (c  -  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    END_OF_STREAM;    (c  -  END_OF_STREAM);	  	non-compiled	[CE]  not  a  statement	96	None	add
1210	[BUG]  [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    END_OF_STREAM;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	96	None	add
1211	[BUG]  [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	96	None	add
1212	[BUG]  [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    END_OF_STREAM;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	96	None	add
1213	[BUG]  [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    END_OF_STREAM;    int  c  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	96	None	add
1214	[BUG]  [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpace(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	96	None	add
1215	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  -  END_OF_STREAM  +  1;	  return    c    &    END_OF_STREAM    +    1;    	compilable	  [FE]  (entry  2)  	101	5	replace
1216	[BUG]  [BUGGY]  return  c  -  END_OF_STREAM  +  1;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  END_OF_STREAM  +  1;	  return    c    &    END_OF_STREAM    +    1;    	compilable	  [FE]  (entry  2)  	101	5	replace
1217	[BUG]  [BUGGY]  [FE]  Records  do  not  match  expected  result  (entry  8)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  +  END_OF_STREAM  +  1;	  return    c    &    END_OF_STREAM    +    1;    	compilable	  [FE]  Records  do  not  match  expected  result  (entry  8)  	101	3	replace
1218	[BUG]  [BUGGY]  return  c  +  END_OF_STREAM  +  1;  [FE]  Records  do  not  match  expected  result  (entry  8)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  END_OF_STREAM  +  1;	  return    c    &    END_OF_STREAM    +    1;    	compilable	  [FE]  Records  do  not  match  expected  result  (entry  8)  	101	3	replace
1219	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  &  BACKSPACE  +  1;	  return    c    &    END_OF_STREAM    +    1;    	compilable	  [FE]  (entry  2)  	101	5	replace
1220	[BUG]  [BUGGY]  return  c  &  BACKSPACE  +  1;  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  BACKSPACE  +  1;	  return    c    &    END_OF_STREAM    +    1;    	compilable	  [FE]  (entry  2)  	101	5	replace
1221	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  *  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  *  END_OF_STREAM;	  return    c    +    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	78	5	replace
1222	[BUG]  [BUGGY]  return  c  *  END_OF_STREAM;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  *  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  *  END_OF_STREAM;	  return    c    +    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	78	5	replace
1223	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  *  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  *  END_OF_STREAM  +  1;	  return    c    +    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	78	5	replace
1224	[BUG]  [BUGGY]  return  c  *  END_OF_STREAM  +  1;  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  *  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  *  END_OF_STREAM  +  1;	  return    c    +    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	78	5	replace
1225	[BUG]  [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  throw  new  IOException( " ");  }  [CE]  >  expected  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  throw  new  IOException( " ");  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  >  expected	17	None	replace
1226	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces.contains(c))  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces.contains(c))  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces.contains(c))  {  throw  new  IOException( " ");  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
1227	[BUG]  [BUGGY]  int  len  =  0;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  len  =  0;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  len  =  0;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  throw  new  IOException( " ");  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
1228	[BUG]  [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  throw  new  IOException( " ");  }  [CE]  >  expected  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  throw  new  IOException( " ");  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  >  expected	17	None	replace
1229	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptySpaces.contains(c))  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptySpaces.contains(c))  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptySpaces.contains(c))  {  throw  new  IOException( " ");  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
1230	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  throw  new  IOException( " ");  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
1231	[BUG]  [BUGGY]  return  c  -  4;  c  -  4;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  4;  c  -  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    4;    c  -  4;	  	non-compiled	[CE]  not  a  statement	114	None	add
1232	[BUG]  [BUGGY]  return  c  -  4;  int  c  -  4;  [CE]  ';'  expected  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  4;  int  c  -  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    4;    int  c  -  4;	  	non-compiled	[CE]  ';'  expected	114	None	add
1233	[BUG]  [BUGGY]  return  c  -  4;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  4;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    4;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	114	None	add
1234	[BUG]  [BUGGY]  return  c  -  4;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  4;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    4;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	114	None	add
1235	[BUG]  [BUGGY]  return  c  -  4;  int  c  =  Integer.parseInt(quoteChar);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  4;  int  c  =  Integer.parseInt(quoteChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    4;    int  c  =  Integer.parseInt(quoteChar);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	114	None	add
1236	[BUG]  [BUGGY]  return  c  -  4;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  4;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    4;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	114	None	add
1237	[BUG]  [BUGGY]  return  c  -  4;  Integer  c  -  4;  [CE]  ';'  expected  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  4;  Integer  c  -  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    4;    Integer  c  -  4;	  	non-compiled	[CE]  ';'  expected	114	None	add
1238	[BUG]  [BUGGY]  return  c  -  4;  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  4;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    4;    int  c  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	114	None	add
1239	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  DISABLED  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  DISABLED  +  END_OF_STREAM;	  return    END_OF_STREAM    +    DISABLED;    	compilable	  [FE]  (entry  2)  	183	5	replace
1240	[BUG]  [BUGGY]  return  DISABLED  +  END_OF_STREAM;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  DISABLED  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  DISABLED  +  END_OF_STREAM;	  return    END_OF_STREAM    +    DISABLED;    	compilable	  [FE]  (entry  2)  	183	5	replace
1241	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  DISABLED;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  +  DISABLED;	  return    END_OF_STREAM    +    DISABLED;    	compilable	  [FE]  (entry  2)  	183	5	replace
1242	[BUG]  [BUGGY]  return  c  +  DISABLED;  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  DISABLED;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  DISABLED;	  return    END_OF_STREAM    +    DISABLED;    	compilable	  [FE]  (entry  2)  	183	5	replace
1243	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  DISABLED  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  END_OF_STREAM  +  DISABLED  +  1;	  return    END_OF_STREAM    +    DISABLED;    	compilable	  [FE]  (entry  2)  	183	5	replace
1244	[BUG]  [BUGGY]  return  END_OF_STREAM  +  DISABLED  +  1;  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  DISABLED  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  DISABLED  +  1;	  return    END_OF_STREAM    +    DISABLED;    	compilable	  [FE]  (entry  2)  	183	5	replace
1245	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getEscapeChar();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getEscapeChar();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getEscapeChar();  }	  return    BACKSPACE;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	226	None	replace
1246	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getEscapeChar();  }  else  {  throw  new  IOException( " ");  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getEscapeChar();  }  else  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getEscapeChar();  }  else  {  throw  new  IOException( " ");  }	  return    BACKSPACE;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	226	None	replace
1247	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getEscapeChar();  }  else  {  return  END_OF_STREAM;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getEscapeChar();  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getEscapeChar();  }  else  {  return  END_OF_STREAM;  }	  return    BACKSPACE;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	226	None	replace
1248	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getEscapeChar();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getEscapeChar();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getEscapeChar();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    BACKSPACE;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	226	None	replace
1249	[BUG]  [BUGGY]  while(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getEscapeChar();  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getEscapeChar();	  return    BACKSPACE;    int    c    =    getEscapeChar();    	non-compiled	[CE]  illegal  start  of  expression	226	None	replace
1250	[BUG]  [BUGGY]  return  this.ignoredSurroundingSpaces  &&  this.ignoredEmptyLines;  [CE]  cannot  find  symbol  ignoredSurroundingSpaces  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoredSurroundingSpaces  &&  this.ignoredEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoredSurroundingSpaces  &&  this.ignoredEmptyLines;	  return    this.ignoredSurroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  ignoredSurroundingSpaces	270	None	replace
1251	[BUG]  [BUGGY]  return  this.ignoredSurroundingSpaces?  0  :  this.ignoredSurroundingSpaces;  [CE]  cannot  find  symbol  ignoredSurroundingSpaces  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoredSurroundingSpaces?  0  :  this.ignoredSurroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoredSurroundingSpaces?  0  :  this.ignoredSurroundingSpaces;	  return    this.ignoredSurroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  ignoredSurroundingSpaces	270	None	replace
1252	[BUG]  [BUGGY]  return  this.ignoredSurroundingSpaces  ||  END_OF_STREAM;  [CE]  cannot  find  symbol  ignoredSurroundingSpaces  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoredSurroundingSpaces  ||  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoredSurroundingSpaces  ||  END_OF_STREAM;	  return    this.ignoredSurroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  ignoredSurroundingSpaces	270	None	replace
1253	[BUG]  [BUGGY]  return  this.ignoredSurroundingSpaces  +  1;  [CE]  cannot  find  symbol  ignoredSurroundingSpaces  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoredSurroundingSpaces  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoredSurroundingSpaces  +  1;	  return    this.ignoredSurroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  ignoredSurroundingSpaces	270	None	replace
1254	[BUG]  [BUGGY]  return  this.ignoredSurroundingSpaces?  1  :  0;  [CE]  cannot  find  symbol  ignoredSurroundingSpaces  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoredSurroundingSpaces?  1  :  0;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoredSurroundingSpaces?  1  :  0;	  return    this.ignoredSurroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  ignoredSurroundingSpaces	270	None	replace
1255	[BUG]  [BUGGY]  case  EOF:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  [CE]  cannot  find  symbol  EOF  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  EOF:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  EOF:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");	  return    END_OF_STREAM;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    	non-compiled	[CE]  cannot  find  symbol  EOF	297	None	replace
1256	[BUG]  [BUGGY]  [FE]  IOException  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	throw  new  IOException( "EOF  whilst  processing  escape  sequence ");	  return    END_OF_STREAM;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    	compilable	  [FE]  IOException  	297	5	replace
1257	[BUG]  [BUGGY]  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  [FE]  IOException  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	throw  new  IOException( "EOF  whilst  processing  escape  sequence ");	  return    END_OF_STREAM;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    	compilable	  [FE]  IOException  	297	5	replace
1258	[BUG]  [BUGGY]  c  >  0?  END_OF_STREAM  :  END_EmptyLines;  int  c  =  getSurroundingSpaces().size();  [CE]  not  a  statement  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  >  0?  END_OF_STREAM  :  END_EmptyLines;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  >  0?  END_OF_STREAM  :  END_EmptyLines;  int  c  =  getSurroundingSpaces().size();	  return    c    >    0?    c    :    END_OF_STREAM;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  not  a  statement	49	None	replace
1259	[BUG]  [BUGGY]  c  >  0?  END_OF_STREAM  :  END_BACKSPACE;  int  c  =  getSurroundingSpaces().size();  [CE]  not  a  statement  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  >  0?  END_OF_STREAM  :  END_BACKSPACE;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  >  0?  END_OF_STREAM  :  END_BACKSPACE;  int  c  =  getSurroundingSpaces().size();	  return    c    >    0?    c    :    END_OF_STREAM;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  not  a  statement	49	None	replace
1260	[BUG]  [BUGGY]  (c  >  0?  END_OF_STREAM  :  END_OF_STREAM);  int  c  =  getSurroundingSpaces().size();  [CE]  not  a  statement  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  (c  >  0?  END_OF_STREAM  :  END_OF_STREAM);  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	(c  >  0?  END_OF_STREAM  :  END_OF_STREAM);  int  c  =  getSurroundingSpaces().size();	  return    c    >    0?    c    :    END_OF_STREAM;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  not  a  statement	49	None	replace
1261	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_EmptyLines;  int  c  =  getSurroundingSpaces().size();  [CE]  cannot  find  symbol  END_EmptyLines  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_EmptyLines;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  END_OF_STREAM  :  END_EmptyLines;  int  c  =  getSurroundingSpaces().size();	  return    c    >    0?    c    :    END_OF_STREAM;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  cannot  find  symbol  END_EmptyLines	49	None	replace
1262	[BUG]  [BUGGY]  return  c  %  END_OF_STREAM;  c  %  END_OF_STREAM;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  %  END_OF_STREAM;  c  %  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    %    END_OF_STREAM;    c  %  END_OF_STREAM;	  	non-compiled	[CE]  not  a  statement	102	None	add
1263	[BUG]  [BUGGY]  return  c  %  END_OF_STREAM;  int  c  %  END_OF_STREAM;  [CE]  ';'  expected  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  %  END_OF_STREAM;  int  c  %  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    %    END_OF_STREAM;    int  c  %  END_OF_STREAM;	  	non-compiled	[CE]  ';'  expected	102	None	add
1264	[BUG]  [BUGGY]  return  c  %  END_OF_STREAM;  (c  %  END_OF_STREAM);  [CE]  not  a  statement  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  %  END_OF_STREAM;  (c  %  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    %    END_OF_STREAM;    (c  %  END_OF_STREAM);	  	non-compiled	[CE]  not  a  statement	102	None	add
1265	[BUG]  [BUGGY]  return  c  %  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  %  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    %    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	102	None	add
1266	[BUG]  [BUGGY]  return  c  %  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  %  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    %    END_OF_STREAM;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	102	None	add
1267	[BUG]  [BUGGY]  return  c  %  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  %  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    %    END_OF_STREAM;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	102	None	add
1268	[BUG]  [BUGGY]  return  c  %  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  %  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    %    END_OF_STREAM;    int  c  =  getCurrentSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	102	None	add
1269	[BUG]  [BUGGY]  return  c  %  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  %  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    %    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpace(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	102	None	add
1270	[BUG]  [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  illegal  start  of  type  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    END_OF_STREAM    :    END_OF_STREAM;    c  <  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  illegal  start  of  type	329	None	add
1271	[BUG]  [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpaces();  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	329	None	add
1272	[BUG]  [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpaces();  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpaces();  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getCurrentSurroundingSpaces();  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	329	None	add
1273	[BUG]  [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	329	None	add
1274	[BUG]  [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	329	None	add
1275	[BUG]  [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpace(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	329	None	add
1276	[BUG]  [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	329	None	add
1277	[BUG]  [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getCurrentSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	329	None	add
1278	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  com  [CE]  ';'  expected  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  com  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  com	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart!=    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
1279	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart!=    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
1280	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart!=    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
1281	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  in;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  com  [CE]  ';'  expected  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  in;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  com  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  in;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  com	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart!=    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
1282	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  comenceStart;  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  comenceStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  comenceStart;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart!=    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
1283	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  >=  commmentStart)  {  return  com  [CE]  ';'  expected  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  >=  commmentStart)  {  return  com  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  >=  commmentStart)  {  return  com	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart!=    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
1284	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  DISABLED;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  com  [CE]  ';'  expected  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  DISABLED;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  com  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  DISABLED;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  com	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart!=    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
1285	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreSurroundingSpaces  &&!ignoreEmptyLines)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreSurroundingSpaces  &&!ignoreEmptyLines)  {  return  false;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreSurroundingSpaces  &&!ignoreEmptyLines)  {  return  false;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	337	None	replace
1286	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  c.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  i  =  0,  len  =  c.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  false;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  i  =  0,  len  =  c.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  false;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	337	None	replace
1287	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  false;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  false;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	337	None	replace
1288	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreSurroundingSpaces)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreSurroundingSpaces)  {  return  false;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreSurroundingSpaces)  {  return  false;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	337	None	replace
1289	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  false;  }  }  [CE]  illegal  start  of  expression  [FE]                            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  false;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  false;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	337	None	replace
1290	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&  ignoreSurroundingSpaces)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&  ignoreSurroundingSpaces)  {  return  false;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&  ignoreSurroundingSpaces)  {  return  false;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	337	None	replace
1291	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  false;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  false;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	337	None	replace
1292	[BUG]  [BUGGY]  return  c  &  BACKSPACE;  c  &  END_OF_STREAM;  [CE]  not  a  statement  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE;  c  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  BACKSPACE;  c  &  END_OF_STREAM;	  return    c    &    END_OF_STREAM;    c    &    END_OF_STREAM;    	non-compiled	[CE]  not  a  statement	38	None	replace
1293	[BUG]  [BUGGY]  c  &  END_OF_STREAM;  [CE]  not  a  statement  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  &  END_OF_STREAM;	  return    c    &    END_OF_STREAM;    c    &    END_OF_STREAM;    	non-compiled	[CE]  not  a  statement	38	None	replace
1294	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  |  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  &  END_OF_STREAM  |  END_OF_STREAM;	  return    c    &    END_OF_STREAM;    c    &    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	38	3	replace
1295	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  |  END_OF_STREAM;  [FE]  (entry  2)  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  |  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  END_OF_STREAM  |  END_OF_STREAM;	  return    c    &    END_OF_STREAM;    c    &    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	38	3	replace
1296	[BUG]  [BUGGY]  int  c  =  END_OF_STREAM.length();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  END_OF_STREAM.length();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  END_OF_STREAM.length();	  return    c    &    END_OF_STREAM;    c    &    END_OF_STREAM;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	38	None	replace
1297	[BUG]  [BUGGY]  result  &  END_OF_STREAM;  [CE]  not  a  statement  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result  &  END_OF_STREAM;	  return    c    &    END_OF_STREAM;    c    &    END_OF_STREAM;    	non-compiled	[CE]  not  a  statement	38	None	replace
1298	[BUG]  [BUGGY]  return  c  &  BACKSPACE  ||  END_OF_STREAM;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE  ||  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  BACKSPACE  ||  END_OF_STREAM;	  return    c    &    BACKSPACE;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	99	None	replace
1299	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  -  BACKSPACE;	  return    c    &    BACKSPACE;    	compilable	  [FE]  (entry  2)  	99	5	replace
1300	[BUG]  [BUGGY]  return  c  -  BACKSPACE;  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  BACKSPACE;	  return    c    &    BACKSPACE;    	compilable	  [FE]  (entry  2)  	99	5	replace
1301	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  +  BACKSPACE;	  return    c    &    BACKSPACE;    	compilable	  [FE]  (entry  2)  	99	5	replace
1302	[BUG]  [BUGGY]  return  c  +  BACKSPACE;  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  BACKSPACE;	  return    c    &    BACKSPACE;    	compilable	  [FE]  (entry  2)  	99	5	replace
1303	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE  |  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  &  BACKSPACE  |  END_OF_STREAM;	  return    c    &    BACKSPACE;    	compilable	  [FE]  (entry  2)  	99	3	replace
1304	[BUG]  [BUGGY]  return  c  &  BACKSPACE  |  END_OF_STREAM;  [FE]  (entry  2)  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE  |  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  BACKSPACE  |  END_OF_STREAM;	  return    c    &    BACKSPACE;    	compilable	  [FE]  (entry  2)  	99	3	replace
1305	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  &  BACKSPACE  +  2;	  return    c    &    BACKSPACE;    	compilable	  [FE]  (entry  2)  	99	5	replace
1306	[BUG]  [BUGGY]  return  c  &  BACKSPACE  +  2;  [FE]  (entry  2)  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  BACKSPACE  +  2;	  return    c    &    BACKSPACE;    	compilable	  [FE]  (entry  2)  	99	5	replace
1307	[BUG]  [BUGGY]  return  c.intValue()  +  2;  [CE]  int  cannot  be  dereferenced  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c.intValue()  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c.intValue()  +  2;	  return    c.intValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	106	None	replace
1308	[BUG]  [BUGGY]  return  c.intValue()  *  2;  [CE]  int  cannot  be  dereferenced  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c.intValue()  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c.intValue()  *  2;	  return    c.intValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	106	None	replace
1309	[BUG]  [BUGGY]  return  c.intValue()  -  1;  [CE]  int  cannot  be  dereferenced  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c.intValue()  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c.intValue()  -  1;	  return    c.intValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	106	None	replace
1310	[BUG]  [BUGGY]  result  =  c;  [CE]  cannot  find  symbol  result  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result  =  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result  =  c;	  result    =    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  result	4	None	replace
1311	[BUG]  [BUGGY]  result  =  END_OF_STREAM.length;  [CE]  cannot  find  symbol  result  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result  =  END_OF_STREAM.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result  =  END_OF_STREAM.length;	  result    =    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  result	4	None	replace
1312	[BUG]  [BUGGY]  result  =  END_OF_STREAM  |  1;  [CE]  cannot  find  symbol  result  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result  =  END_OF_STREAM  |  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result  =  END_OF_STREAM  |  1;	  result    =    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  result	4	None	replace
1313	[BUG]  [BUGGY]  result  =  END_OF_STREAM  |  BACKSPACE;  [CE]  cannot  find  symbol  result  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result  =  END_OF_STREAM  |  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result  =  END_OF_STREAM  |  BACKSPACE;	  result    =    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  result	4	None	replace
1314	[BUG]  [BUGGY]  result  =  END_OF_STREAM  +  2;  [CE]  cannot  find  symbol  result  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result  =  END_OF_STREAM  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result  =  END_OF_STREAM  +  2;	  result    =    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  result	4	None	replace
1315	[BUG]  [BUGGY]  (c  >  0?  1  :  END_OF_STREAM);  int  c  =  getSurroundingSpaces().size();  [CE]  not  a  statement  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  (c  >  0?  1  :  END_OF_STREAM);  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	(c  >  0?  1  :  END_OF_STREAM);  int  c  =  getSurroundingSpaces().size();	  return    c    >    0?    1    :    c;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  not  a  statement	164	None	replace
1316	[BUG]  [BUGGY]  while(c  <  0  ||  c  >  0  ||  c  <  getSurroundingSpaces().size())  {  return  c  >  0?  1;  [CE]  :  expected  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  0  ||  c  >  0  ||  c  <  getSurroundingSpaces().size())  {  return  c  >  0?  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  0  ||  c  >  0  ||  c  <  getSurroundingSpaces().size())  {  return  c  >  0?  1;	  return    c    >    0?    1    :    c;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  :  expected	164	None	replace
1317	[BUG]  [BUGGY]  while(c  <  0  ||  c  >  0  ||  c  <  =  getSurroundingSpaces().size())  {  return  c  >  0?  1;  [CE]  illegal  start  of  expression  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  0  ||  c  >  0  ||  c  <  =  getSurroundingSpaces().size())  {  return  c  >  0?  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  0  ||  c  >  0  ||  c  <  =  getSurroundingSpaces().size())  {  return  c  >  0?  1;	  return    c    >    0?    1    :    c;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
1318	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  <  END_OF_STREAM  ||  c  >  END_OF_SURroundingSpaces;  [CE]  cannot  find  symbol  END_OF_SURroundingSpaces  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  <  END_OF_STREAM  ||  c  >  END_OF_SURroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  <  END_OF_STREAM  ||  c  >  END_OF_SURroundingSpaces;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM    ||    c    >    END_OF_SURroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  END_OF_SURroundingSpaces	266	None	replace
1319	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  >=  END_OF_SURroundingSpaces  ||  c  >  END_OF_SURroundingSpaces;  [CE]  cannot  find  symbol  END_OF_SURroundingSpaces  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  >=  END_OF_SURroundingSpaces  ||  c  >  END_OF_SURroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  >=  END_OF_SURroundingSpaces  ||  c  >  END_OF_SURroundingSpaces;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM    ||    c    >    END_OF_SURroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  END_OF_SURroundingSpaces	266	None	replace
1320	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  <  END_OF_SURroundingSpaces  ||  c  >  END_OF_SURroundingSpaces;  [CE]  cannot  find  symbol  END_OF_SURroundingSpaces  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  <  END_OF_SURroundingSpaces  ||  c  >  END_OF_SURroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  <  END_OF_SURroundingSpaces  ||  c  >  END_OF_SURroundingSpaces;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM    ||    c    >    END_OF_SURroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  END_OF_SURroundingSpaces	266	None	replace
1321	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  >=  END_OF_STREAM  ||  c  >  END_OF_SURroundingSpaces;  [CE]  cannot  find  symbol  END_OF_SURroundingSpaces  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  >=  END_OF_STREAM  ||  c  >  END_OF_SURroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  >=  END_OF_STREAM  ||  c  >  END_OF_SURroundingSpaces;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM    ||    c    >    END_OF_SURroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  END_OF_SURroundingSpaces	266	None	replace
1322	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  <  =  END_OF_STREAM  ||  c!=  END_OF_SURroundingSpaces;  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  <  =  END_OF_STREAM  ||  c!=  END_OF_SURroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  <  =  END_OF_STREAM  ||  c!=  END_OF_SURroundingSpaces;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM    ||    c    >    END_OF_SURroundingSpaces;    	non-compiled	[CE]  illegal  start  of  expression	266	None	replace
1323	[BUG]  [BUGGY]  return  this.ignoredEmptyLines  &&  this.ignoredSurroundingSpaces;  [CE]  cannot  find  symbol  ignoredEmptyLines  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoredEmptyLines  &&  this.ignoredSurroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoredEmptyLines  &&  this.ignoredSurroundingSpaces;	  return    this.ignoredEmptyLines;    	non-compiled	[CE]  cannot  find  symbol  ignoredEmptyLines	147	None	replace
1324	[BUG]  [BUGGY]  return  this.ignoredEmptyLines  &&  this.ignoredSpaces;  [CE]  cannot  find  symbol  ignoredEmptyLines  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoredEmptyLines  &&  this.ignoredSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoredEmptyLines  &&  this.ignoredSpaces;	  return    this.ignoredEmptyLines;    	non-compiled	[CE]  cannot  find  symbol  ignoredEmptyLines	147	None	replace
1325	[BUG]  [BUGGY]  return  this.ignoredEmptyLines?  0  :  this.ignoredEmptyLines;  [CE]  cannot  find  symbol  ignoredEmptyLines  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoredEmptyLines?  0  :  this.ignoredEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoredEmptyLines?  0  :  this.ignoredEmptyLines;	  return    this.ignoredEmptyLines;    	non-compiled	[CE]  cannot  find  symbol  ignoredEmptyLines	147	None	replace
1326	[BUG]  [BUGGY]  return  this.ignoredEmptySpaces;  [CE]  cannot  find  symbol  ignoredEmptySpaces  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoredEmptySpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoredEmptySpaces;	  return    this.ignoredEmptyLines;    	non-compiled	[CE]  cannot  find  symbol  ignoredEmptySpaces	147	None	replace
1327	[BUG]  [BUGGY]  return  c  <  0?  1  :  c;  c  <  0?  1  :  c;  [CE]  illegal  start  of  type  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  c;  c  <  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    1    :    c;    c  <  0?  1  :  c;	  	non-compiled	[CE]  illegal  start  of  type	64	None	add
1328	[BUG]  [BUGGY]  return  c  <  0?  1  :  c;  int  c  <  0?  1  :  c;  [CE]  ';'  expected  [FE]      Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  c;  int  c  <  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    1    :    c;    int  c  <  0?  1  :  c;	  	non-compiled	[CE]  ';'  expected	64	None	add
1329	[BUG]  [BUGGY]  return  c  <  0?  1  :  c;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  c;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    1    :    c;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	64	None	add
1330	[BUG]  [BUGGY]  return  c  <  0?  1  :  c;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  c;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    1    :    c;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	64	None	add
1331	[BUG]  [BUGGY]  return  c  <  0?  1  :  c;  int  c  =  getSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  c;  int  c  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    1    :    c;    int  c  =  getSurroundingSpace(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	64	None	add
1332	[BUG]  [BUGGY]  return  c  <  0?  1  :  c;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  c;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    1    :    c;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	64	None	add
1333	[BUG]  [BUGGY]  return  c  <  0?  1  :  c;  int  c  =  getEscapeSurroundingSpaces(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  c;  int  c  =  getEscapeSurroundingSpaces(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    1    :    c;    int  c  =  getEscapeSurroundingSpaces(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	64	None	add
1334	[BUG]  [BUGGY]  return  c  <  0?  1  :  c;  int  c  =  getCurrentSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  c;  int  c  =  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    1    :    c;    int  c  =  getCurrentSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	64	None	add
1335	[BUG]  [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  [CE]  >  expected  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    return    c;    }    	non-compiled	[CE]  >  expected	19	None	replace
1336	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces.contains(c))  {  return  c;  }  [CE]  illegal  start  of  expression  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces.contains(c))  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces.contains(c))  {  return  c;  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
1337	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptySpaces.contains(c))  {  return  c;  }  [CE]  illegal  start  of  expression  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptySpaces.contains(c))  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptySpaces.contains(c))  {  return  c;  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
1338	[BUG]  [BUGGY]  int  len  =  0;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  [CE]  illegal  start  of  expression  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  len  =  0;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  len  =  0;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
1339	[BUG]  [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  return  c;  }  [CE]  >  expected  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  return  c;  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    return    c;    }    	non-compiled	[CE]  >  expected	19	None	replace
1340	[BUG]  [BUGGY]  int  c  =  0;  c  <  len;  c++;  [CE]  >  expected  [FE]                                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  0;  c  <  len;  c++;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  0;  c  <  len;  c++;	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    return    c;    }    	non-compiled	[CE]  >  expected	19	None	replace
1341	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  b  +  1;  [CE]  duplicate  case  label  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  b  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  b  +  1;	  case    END_OF_STREAM:    return    b;    	non-compiled	[CE]  duplicate  case  label	6	None	replace
1342	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  b.length;  [CE]  duplicate  case  label  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  b.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  b.length;	  case    END_OF_STREAM:    return    b;    	non-compiled	[CE]  duplicate  case  label	6	None	replace
1343	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  b  +  2;  [CE]  duplicate  case  label  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  b  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  b  +  2;	  case    END_OF_STREAM:    return    b;    	non-compiled	[CE]  duplicate  case  label	6	None	replace
1344	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  l;  [CE]  duplicate  case  label  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  l;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  l;	  case    END_OF_STREAM:    return    b;    	non-compiled	[CE]  duplicate  case  label	6	None	replace
1345	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  c  >  0?  1  :  END_OF_STREAM;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  c  >  0?  1  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    END_OF_STREAM;    c  >  0?  1  :  END_OF_STREAM;	  	non-compiled	[CE]  not  a  statement	62	None	add
1346	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  int  c  >  0?  1  :  END_OF_STREAM;  [CE]  ';'  expected  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  int  c  >  0?  1  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    END_OF_STREAM;    int  c  >  0?  1  :  END_OF_STREAM;	  	non-compiled	[CE]  ';'  expected	62	None	add
1347	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  (c  >  0?  1  :  END_OF_STREAM);  [CE]  not  a  statement  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  (c  >  0?  1  :  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    END_OF_STREAM;    (c  >  0?  1  :  END_OF_STREAM);	  	non-compiled	[CE]  not  a  statement	62	None	add
1348	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	62	None	add
1349	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	62	None	add
1350	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	62	None	add
1351	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	62	None	add
1352	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  int  c  =  Integer.parseInt(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  int  c  =  Integer.parseInt(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    END_OF_STREAM;    int  c  =  Integer.parseInt(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	62	None	add
1353	[BUG]  [BUGGY]  c  +=  getCurrentSurroundingSpace();  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  +=  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  +=  getCurrentSurroundingSpace();	  return    c    +    1;    int    c    =    getCurrentSurroundingSpace();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	221	None	replace
1354	[BUG]  [BUGGY]  if(c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	198	None	replace
1355	[BUG]  [BUGGY]  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [CE]  illegal  start  of  expression  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  illegal  start  of  expression	198	None	replace
1356	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	198	None	replace
1357	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreEmptyLines?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  this.ignoreEmptyLines?  END_OF_STREAM  :  END_OF_STREAM;	  return    this.escapeSurroundingSpaces?    END_OF_STREAM    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	206	3	replace
1358	[BUG]  [BUGGY]  return  this.ignoreEmptyLines?  END_OF_STREAM  :  END_OF_STREAM;  [FE]  (entry  2)  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreEmptyLines?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoreEmptyLines?  END_OF_STREAM  :  END_OF_STREAM;	  return    this.escapeSurroundingSpaces?    END_OF_STREAM    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	206	3	replace
1359	[BUG]  [BUGGY]  return  this.ignoredEmptyLines?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  cannot  find  symbol  ignoredEmptyLines  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoredEmptyLines?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoredEmptyLines?  END_OF_STREAM  :  END_OF_STREAM;	  return    this.escapeSurroundingSpaces?    END_OF_STREAM    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  ignoredEmptyLines	206	None	replace
1360	[BUG]  [BUGGY]  return  this.ignoredSurroundingSpaces?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  cannot  find  symbol  ignoredSurroundingSpaces  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoredSurroundingSpaces?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoredSurroundingSpaces?  END_OF_STREAM  :  END_OF_STREAM;	  return    this.escapeSurroundingSpaces?    END_OF_STREAM    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  ignoredSurroundingSpaces	206	None	replace
1361	[BUG]  [BUGGY]  return  c?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  incompatible  types  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c?  END_OF_STREAM  :  END_OF_STREAM;	  return    this.escapeSurroundingSpaces?    END_OF_STREAM    :    END_OF_STREAM;    	non-compiled	[CE]  incompatible  types	206	None	replace
1362	[BUG]  [BUGGY]  int  c  =  getSurroundingSpaces();  return  END_OF_STREAM  +  c;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpaces();  return  END_OF_STREAM  +  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpaces();  return  END_OF_STREAM  +  c;	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpaces();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	186	None	replace
1363	[BUG]  [BUGGY]  c  =  getSurroundingSpaces();  return  END_OF_STREAM  +  c;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getSurroundingSpaces();  return  END_OF_STREAM  +  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getSurroundingSpaces();  return  END_OF_STREAM  +  c;	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpaces();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	186	None	replace
1364	[BUG]  [BUGGY]  null  c  =  getSurroundingSpaces();  return  END_OF_STREAM  +  c;  [CE]  not  a  statement  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  null  c  =  getSurroundingSpaces();  return  END_OF_STREAM  +  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	null  c  =  getSurroundingSpaces();  return  END_OF_STREAM  +  c;	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpaces();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  not  a  statement	186	None	replace
1365	[BUG]  [BUGGY]  int  c  =  getSurroundingSpaces();  return  END_OF_STREAM  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpaces();  return  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpaces();  return  END_OF_STREAM  +  1;	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpaces();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	186	None	replace
1366	[BUG]  [BUGGY]  return  END_OF_STREAM  +  getSurroundingSpaces();  [CE]  cannot  find  symbol  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  getSurroundingSpaces();	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpaces();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  cannot  find  symbol	186	None	replace
1367	[BUG]  [BUGGY]  return  c  +  END_OF_STREAM;  c  +  END_OF_STREAM;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  END_OF_STREAM;  c  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    END_OF_STREAM;    c  +  END_OF_STREAM;	  	non-compiled	[CE]  not  a  statement	77	None	add
1368	[BUG]  [BUGGY]  return  c  +  END_OF_STREAM;  (c  +  END_OF_STREAM);  [CE]  not  a  statement  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  END_OF_STREAM;  (c  +  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    END_OF_STREAM;    (c  +  END_OF_STREAM);	  	non-compiled	[CE]  not  a  statement	77	None	add
1369	[BUG]  [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    END_OF_STREAM;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	77	None	add
1370	[BUG]  [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	77	None	add
1371	[BUG]  [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  in.read();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    END_OF_STREAM;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	77	None	add
1372	[BUG]  [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    END_OF_STREAM;    int  c  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	77	None	add
1373	[BUG]  [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  getSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    END_OF_STREAM;    int  c  =  getSurroundingSpace(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	77	None	add
1374	[BUG]  [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    END_OF_STREAM;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	77	None	add
1375	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  int  c  =  getCurrentIndex();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  int  c  =  getCurrentIndex();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  int  c  =  getCurrentIndex();  }	  return    END_OF_STREAM    +    1;    int    c    =    getCurrentIndex();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	191	None	replace
1376	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  int  c  =  getCurrentIndex();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  int  c  =  getCurrentIndex();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  int  c  =  getCurrentIndex();  }	  return    END_OF_STREAM    +    1;    int    c    =    getCurrentIndex();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	191	None	replace
1377	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  return  getCurrentIndex();  }  [CE]  cannot  find  symbol  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  return  getCurrentIndex();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  return  getCurrentIndex();  }	  return    END_OF_STREAM    +    1;    int    c    =    getCurrentIndex();    	non-compiled	[CE]  cannot  find  symbol	191	None	replace
1378	[BUG]  [BUGGY]  return  END_OF_STREAM  +  this.ignoreEmptyLines;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  this.ignoreEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  this.ignoreEmptyLines;	  return    END_OF_STREAM    +    escapeSurroundingSpaces;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	79	None	replace
1379	[BUG]  [BUGGY]  return  END_OF_STREAM  +  this.ignoredEmptyLines;  [CE]  cannot  find  symbol  ignoredEmptyLines  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  this.ignoredEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  this.ignoredEmptyLines;	  return    END_OF_STREAM    +    escapeSurroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  ignoredEmptyLines	79	None	replace
1380	[BUG]  [BUGGY]  return  c  >  0?  1  :  escapeChar;  [CE]  cannot  find  symbol  escapeChar  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  escapeChar;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  escapeChar;	  return    c    >    0?    1    :    END_OF_SURroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  escapeChar	252	None	replace
1381	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_EmptyLines;  [CE]  cannot  find  symbol  END_EmptyLines  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_EmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  END_EmptyLines;	  return    c    >    0?    1    :    END_OF_SURroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  END_EmptyLines	252	None	replace
1382	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	331	None	replace
1383	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreSurroundingSpaces)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreSurroundingSpaces)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreSurroundingSpaces)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	331	None	replace
1384	[BUG]  [BUGGY]  if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	331	None	replace
1385	[BUG]  [BUGGY]  if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreSurroundingSpaces)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreSurroundingSpaces)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreSurroundingSpaces)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	331	None	replace
1386	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||  ignoreSurroundingSpaces)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||  ignoreSurroundingSpaces)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||  ignoreSurroundingSpaces)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	331	None	replace
1387	[BUG]  [BUGGY]  if(c  ==  '.')  {  return  c;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreSurroundingSpaces)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  '.')  {  return  c;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreSurroundingSpaces)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  '.')  {  return  c;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreSurroundingSpaces)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	331	None	replace
1388	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	331	None	replace
1389	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  *  2;  c  &  END_OF_STREAM  *  2;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  *  2;  c  &  END_OF_STREAM  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    *    2;    c  &  END_OF_STREAM  *  2;	  	non-compiled	[CE]  not  a  statement	273	None	add
1390	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  *  2;  (c  &  END_OF_STREAM  *  2);  [CE]  not  a  statement  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  *  2;  (c  &  END_OF_STREAM  *  2);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    *    2;    (c  &  END_OF_STREAM  *  2);	  	non-compiled	[CE]  not  a  statement	273	None	add
1391	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  *  2;  return  c  &  END_OF_STREAM  *  2;  [CE]  unreachable  statement  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  *  2;  return  c  &  END_OF_STREAM  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    *    2;    return  c  &  END_OF_STREAM  *  2;	  	non-compiled	[CE]  unreachable  statement	273	None	add
1392	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  *  2;  result  &  END_OF_STREAM  *  2;  [CE]  not  a  statement  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  *  2;  result  &  END_OF_STREAM  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    *    2;    result  &  END_OF_STREAM  *  2;	  	non-compiled	[CE]  not  a  statement	273	None	add
1393	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  *  2;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  *  2;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    *    2;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	273	None	add
1394	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  *  2;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  *  2;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    *    2;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	273	None	add
1395	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  *  2;  int  c  =  Integer.parseInt(quoteChar);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  *  2;  int  c  =  Integer.parseInt(quoteChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    *    2;    int  c  =  Integer.parseInt(quoteChar);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	273	None	add
1396	[BUG]  [BUGGY]  c  +=  2;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  +=  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  +=  2;	  return    c    +    2;    c    +    2;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	54	None	replace
1397	[BUG]  [BUGGY]  return  c  +  4;  c  +  2;  [CE]  not  a  statement  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  4;  c  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  4;  c  +  2;	  return    c    +    2;    c    +    2;    	non-compiled	[CE]  not  a  statement	54	None	replace
1398	[BUG]  [BUGGY]  return  c  +  1;  c  +  3;  [CE]  not  a  statement  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  1;  c  +  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  1;  c  +  3;	  return    c    +    2;    c    +    2;    	non-compiled	[CE]  not  a  statement	54	None	replace
1399	[BUG]  [BUGGY]  return  c.doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c.doubleValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c.doubleValue();	  return    END_OF_STREAM.doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	108	None	replace
1400	[BUG]  [BUGGY]  return  END_OF_STREAM.doubleValue()  +  1;  [CE]  int  cannot  be  dereferenced  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.doubleValue()  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.doubleValue()  +  1;	  return    END_OF_STREAM.doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	108	None	replace
1401	[BUG]  [BUGGY]  return  c,  END_OF_STREAM.doubleValue();  [CE]  ';'  expected  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c,  END_OF_STREAM.doubleValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c,  END_OF_STREAM.doubleValue();	  return    END_OF_STREAM.doubleValue();    	non-compiled	[CE]  ';'  expected	108	None	replace
1402	[BUG]  [BUGGY]  return  END_OF_STREAM.doubleValue()  +  2;  [CE]  int  cannot  be  dereferenced  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.doubleValue()  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.doubleValue()  +  2;	  return    END_OF_STREAM.doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	108	None	replace
1403	[BUG]  [BUGGY]  return  END_OF_STREAM.doubleValue()  *  2;  [CE]  int  cannot  be  dereferenced  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.doubleValue()  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.doubleValue()  *  2;	  return    END_OF_STREAM.doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	108	None	replace
1404	[BUG]  [BUGGY]  return  this.end_OF_STREAM.doubleValue();  [CE]  cannot  find  symbol  end_OF_STREAM  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.end_OF_STREAM.doubleValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.end_OF_STREAM.doubleValue();	  return    END_OF_STREAM.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  end_OF_STREAM	108	None	replace
1405	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_STREAM;  [CE]  cannot  find  symbol  END_STREAM  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  END_STREAM;	  return    c    >    0?    1    :    END_OBJECT;    	non-compiled	[CE]  cannot  find  symbol  END_STREAM	67	None	replace
1406	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_BACKSPACE;  [CE]  cannot  find  symbol  END_BACKSPACE  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  END_BACKSPACE;	  return    c    >    0?    1    :    END_OBJECT;    	non-compiled	[CE]  cannot  find  symbol  END_BACKSPACE	67	None	replace
1407	[BUG]  [BUGGY]  return  c  >  0?  1  :  EOF;  [CE]  cannot  find  symbol  EOF  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  EOF;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  EOF;	  return    c    >    0?    1    :    END_OBJECT;    	non-compiled	[CE]  cannot  find  symbol  EOF	67	None	replace
1408	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM  +  1;	  return    c    ==    END_OF_STREAM?    END_OF_STREAM    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	264	5	replace
1409	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM  +  1;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM  +  1;	  return    c    ==    END_OF_STREAM?    END_OF_STREAM    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	264	5	replace
1410	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_SURroundingSpaces;  [CE]  cannot  find  symbol  END_SURroundingSpaces  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_SURroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_SURroundingSpaces;	  return    c    ==    END_OF_STREAM?    END_OF_STREAM    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_SURroundingSpaces	264	None	replace
1411	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  END_OF_STREAM  ==  END_OF_STREAM;  [CE]  incompatible  types  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  END_OF_STREAM  ==  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  END_OF_STREAM  ==  END_OF_STREAM;	  return    c    ==    END_OF_STREAM?    END_OF_STREAM    :    END_OF_STREAM;    	non-compiled	[CE]  incompatible  types	264	None	replace
1412	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_SURFACE;  [CE]  cannot  find  symbol  END_SURFACE  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_SURFACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_SURFACE;	  return    c    ==    END_OF_STREAM?    END_OF_STREAM    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_SURFACE	264	None	replace
1413	[BUG]  [BUGGY]  Integer  c  =  in.readInt();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  in.readInt();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  in.readInt();	  return    BACKSPACE;    Integer    c    =    in.readInt();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	168	None	replace
1414	[BUG]  [BUGGY]  int  c  =  in.readInt();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  in.readInt();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  in.readInt();	  return    BACKSPACE;    Integer    c    =    in.readInt();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	168	None	replace
1415	[BUG]  [BUGGY]  null  c  =  in.readInt();  [CE]  not  a  statement  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  null  c  =  in.readInt();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	null  c  =  in.readInt();	  return    BACKSPACE;    Integer    c    =    in.readInt();    	non-compiled	[CE]  not  a  statement	168	None	replace
1416	[BUG]  [BUGGY]  c  =  in.readInt();  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  in.readInt();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  in.readInt();	  return    BACKSPACE;    Integer    c    =    in.readInt();    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	168	None	replace
1417	[BUG]  [BUGGY]  null  =  null;  Integer  c  =  in.readInt();  [CE]  unexpected  type  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  null  =  null;  Integer  c  =  in.readInt();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	null  =  null;  Integer  c  =  in.readInt();	  return    BACKSPACE;    Integer    c    =    in.readInt();    	non-compiled	[CE]  unexpected  type	168	None	replace
1418	[BUG]  [BUGGY]  null  =  in.readInt();  [CE]  unexpected  type  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  null  =  in.readInt();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	null  =  in.readInt();	  return    BACKSPACE;    Integer    c    =    in.readInt();    	non-compiled	[CE]  unexpected  type	168	None	replace
1419	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    else    {    throw    new    IOException(   "   ");    }    	compilable	  [FE]  IOException  	204	5	replace
1420	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }  [FE]  IOException  [FE]    IOException    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    else    {    throw    new    IOException(   "   ");    }    	compilable	  [FE]  IOException  	204	5	replace
1421	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " ");  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    else    {    throw    new    IOException(   "   ");    }    	compilable	  [FE]  IOException  	204	5	replace
1422	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " ");  }  [FE]  IOException  [FE]      IOException    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " ");  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    else    {    throw    new    IOException(   "   ");    }    	compilable	  [FE]  IOException  	204	5	replace
1423	[BUG]  [BUGGY]  [FE]  IOException  [FE]        IOException    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    else    {    throw    new    IOException(   "   ");    }    	compilable	  [FE]  IOException  	204	5	replace
1424	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  }  [FE]  IOException  [FE]        IOException    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    else    {    throw    new    IOException(   "   ");    }    	compilable	  [FE]  IOException  	204	5	replace
1425	[BUG]  [BUGGY]  int  delimiter  =  getSurroundingSpaces().size()  -  1;  [CE]  cannot  find  symbol  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getSurroundingSpaces().size()  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getSurroundingSpaces().size()  -  1;	  int    delimiter    =    getSurroundingSpaces().size();    	non-compiled	[CE]  cannot  find  symbol	288	None	replace
1426	[BUG]  [BUGGY]  int  delimiter  =  getSurroundingSpaces().size()  +  1;  [CE]  cannot  find  symbol  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getSurroundingSpaces().size()  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getSurroundingSpaces().size()  +  1;	  int    delimiter    =    getSurroundingSpaces().size();    	non-compiled	[CE]  cannot  find  symbol	288	None	replace
1427	[BUG]  [BUGGY]  int  delimiter  =  getSurroundingSpaces().size()  -  2;  [CE]  cannot  find  symbol  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getSurroundingSpaces().size()  -  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getSurroundingSpaces().size()  -  2;	  int    delimiter    =    getSurroundingSpaces().size();    	non-compiled	[CE]  cannot  find  symbol	288	None	replace
1428	[BUG]  [BUGGY]  int  delimiter  =  getDelimiter().size();  [CE]  cannot  find  symbol  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getDelimiter().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getDelimiter().size();	  int    delimiter    =    getSurroundingSpaces().size();    	non-compiled	[CE]  cannot  find  symbol	288	None	replace
1429	[BUG]  [BUGGY]  int  delimiter  =  getSurroundingSpaces().size()  /  2;  [CE]  cannot  find  symbol  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getSurroundingSpaces().size()  /  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getSurroundingSpaces().size()  /  2;	  int    delimiter    =    getSurroundingSpaces().size();    	non-compiled	[CE]  cannot  find  symbol	288	None	replace
1430	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoredEmptyLines.contains(c))  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoredEmptyLines.contains(c))  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoredEmptyLines.contains(c))  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoredEmptyLines.contains(c))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	332	None	replace
1431	[BUG]  [BUGGY]  if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoredEmptyLines.contains(c))  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoredEmptyLines.contains(c))  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoredEmptyLines.contains(c))  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoredEmptyLines.contains(c))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	332	None	replace
1432	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoredEmptyLines.contains(c))  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoredEmptyLines.contains(c))  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoredEmptyLines.contains(c))  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoredEmptyLines.contains(c))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	332	None	replace
1433	[BUG]  [BUGGY]  if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoredEmptyLines.contains(c))  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoredEmptyLines.contains(c))  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoredEmptyLines.contains(c))  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoredEmptyLines.contains(c))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	332	None	replace
1434	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoredEmptyLines.contains(c))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoredEmptyLines.contains(c))  {  break;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoredEmptyLines.contains(c))  {  break;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoredEmptyLines.contains(c))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	332	None	replace
1435	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoredEmptyLines.contains(c))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoredEmptyLines.contains(c))  {  break;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoredEmptyLines.contains(c))  {  break;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoredEmptyLines.contains(c))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	332	None	replace
1436	[BUG]  [BUGGY]  if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoredEmptyLines.contains(c))  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoredEmptyLines.contains(c))  {  break;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c!=  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoredEmptyLines.contains(c))  {  break;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoredEmptyLines.contains(c))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	332	None	replace
1437	[BUG]  [BUGGY]  return  END_OF_STREAM  +  quoteChar;  int  quoteChar  =  Integer.parseInt(quoteChar);  [CE]  no  suitable  method  found  for  parseInt(int)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  quoteChar;  int  quoteChar  =  Integer.parseInt(quoteChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    quoteChar;    int  quoteChar  =  Integer.parseInt(quoteChar);	  	non-compiled	[CE]  no  suitable  method  found  for  parseInt(int)	84	None	add
1438	[BUG]  [BUGGY]  return  END_OF_STREAM  +  quoteChar;  int  quoteChar  =  getSurroundingSpaces().length;  [CE]  cannot  find  symbol  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  quoteChar;  int  quoteChar  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    quoteChar;    int  quoteChar  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  cannot  find  symbol	84	None	add
1439	[BUG]  [BUGGY]  return  END_OF_STREAM  +  quoteChar;  int  quoteChar  =  getSurroundingSpaces().size();  [CE]  cannot  find  symbol  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  quoteChar;  int  quoteChar  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    quoteChar;    int  quoteChar  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  cannot  find  symbol	84	None	add
1440	[BUG]  [BUGGY]  return  END_OF_STREAM  +  quoteChar;  int  quoteChar  =  Integer.toHexString(c);  [CE]  incompatible  types  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  quoteChar;  int  quoteChar  =  Integer.toHexString(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    quoteChar;    int  quoteChar  =  Integer.toHexString(c);	  	non-compiled	[CE]  incompatible  types	84	None	add
1441	[BUG]  [BUGGY]  return  END_OF_STREAM  +  quoteChar;  int  quoteChar  =  getCommentStart();  [CE]  cannot  find  symbol  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  quoteChar;  int  quoteChar  =  getCommentStart();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    quoteChar;    int  quoteChar  =  getCommentStart();	  	non-compiled	[CE]  cannot  find  symbol	84	None	add
1442	[BUG]  [BUGGY]  return  END_OF_STREAM  +  quoteChar;  int  quoteChar  =  Integer.parseInt(c);  [CE]  no  suitable  method  found  for  parseInt(int)  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  quoteChar;  int  quoteChar  =  Integer.parseInt(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    quoteChar;    int  quoteChar  =  Integer.parseInt(c);	  	non-compiled	[CE]  no  suitable  method  found  for  parseInt(int)	84	None	add
1443	[BUG]  [BUGGY]  return  END_OF_STREAM  +  quoteChar;  int  quoteChar  =  getSurroundingSpace(c);  [CE]  cannot  find  symbol  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  quoteChar;  int  quoteChar  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    quoteChar;    int  quoteChar  =  getSurroundingSpace(c);	  	non-compiled	[CE]  cannot  find  symbol	84	None	add
1444	[BUG]  [BUGGY]  return  END_OF_STREAM  +  quoteChar;  int  quoteChar  =  Integer.toString(c);  [CE]  incompatible  types  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  quoteChar;  int  quoteChar  =  Integer.toString(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    quoteChar;    int  quoteChar  =  Integer.toString(c);	  	non-compiled	[CE]  incompatible  types	84	None	add
1445	[BUG]  [BUGGY]  return  END_OF_STREAM  +  8;  END_OF_STREAM  +  8;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  8;  END_OF_STREAM  +  8;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    8;    END_OF_STREAM  +  8;	  	non-compiled	[CE]  not  a  statement	277	None	add
1446	[BUG]  [BUGGY]  return  END_OF_STREAM  +  8;  return  END_OF_STREAM  +  8;  [CE]  unreachable  statement  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  8;  return  END_OF_STREAM  +  8;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    8;    return  END_OF_STREAM  +  8;	  	non-compiled	[CE]  unreachable  statement	277	None	add
1447	[BUG]  [BUGGY]  return  END_OF_STREAM  +  8;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  8;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    8;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	277	None	add
1448	[BUG]  [BUGGY]  return  END_OF_STREAM  +  8;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  8;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    8;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	277	None	add
1449	[BUG]  [BUGGY]  return  END_OF_STREAM  +  8;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  8;  int  c  =  in.read();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    8;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	277	None	add
1450	[BUG]  [BUGGY]  return  END_OF_STREAM  +  8;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  8;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    8;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	277	None	add
1451	[BUG]  [BUGGY]  return  END_OF_STREAM  +  8;  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  8;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    8;    int  c  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	277	None	add
1452	[BUG]  [BUGGY]  return  END_OF_STREAM  +  8;  int  c  =  getSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  8;  int  c  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    8;    int  c  =  getSurroundingSpace(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	277	None	add
1453	[BUG]  [BUGGY]  (c  >  0?  1  :  END_OF_STREAM);  int  c  =  getSurroundingSpaces();  [CE]  not  a  statement  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  (c  >  0?  1  :  END_OF_STREAM);  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	(c  >  0?  1  :  END_OF_STREAM);  int  c  =  getSurroundingSpaces();	  return    c    >    0?    1    :    c;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  not  a  statement	161	None	replace
1454	[BUG]  [BUGGY]  while(c  <  0  ||  c  >  0  ||  c  <  =  ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  0  ||  c  >  0  ||  c  <  =  ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  0  ||  c  >  0  ||  c  <  =  ignoreEmptyLines)  {  return  c  >  0?  1  :  c;	  return    c    >    0?    1    :    c;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
1455	[BUG]  [BUGGY]  while(c  <  0  ||  c  >  0  ||  c  <  ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  0  ||  c  >  0  ||  c  <  ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  0  ||  c  >  0  ||  c  <  ignoreEmptyLines)  {  return  c  >  0?  1  :  c;	  return    c    >    0?    1    :    c;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
1456	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    END_OF_STREAM    :    END_OF_STREAM;    c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  not  a  statement	212	None	add
1457	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpaces();  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	212	None	add
1458	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpace();  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpace();  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getCurrentSurroundingSpace();  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	212	None	add
1459	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpaces();  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpaces();  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getCurrentSurroundingSpaces();  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	212	None	add
1460	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	212	None	add
1461	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	212	None	add
1462	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getCurrentSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	212	None	add
1463	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpace(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	212	None	add
1464	[BUG]  [BUGGY]  return  END_OF_STREAM.intValue()  *  2  +  1;  [CE]  int  cannot  be  dereferenced  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.intValue()  *  2  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.intValue()  *  2  +  1;	  return    END_OF_STREAM.intValue()    *    2;    	non-compiled	[CE]  int  cannot  be  dereferenced	111	None	replace
1465	[BUG]  [BUGGY]  return  END_OF_STREAM.intValue()  /  2;  [CE]  int  cannot  be  dereferenced  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.intValue()  /  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.intValue()  /  2;	  return    END_OF_STREAM.intValue()    *    2;    	non-compiled	[CE]  int  cannot  be  dereferenced	111	None	replace
1466	[BUG]  [BUGGY]  return  c,  END_OF_STREAM.intValue()  *  2;  [CE]  ';'  expected  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c,  END_OF_STREAM.intValue()  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c,  END_OF_STREAM.intValue()  *  2;	  return    END_OF_STREAM.intValue()    *    2;    	non-compiled	[CE]  ';'  expected	111	None	replace
1467	[BUG]  [BUGGY]  return  END_OF_STREAM.intValue()  *  4;  [CE]  int  cannot  be  dereferenced  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.intValue()  *  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.intValue()  *  4;	  return    END_OF_STREAM.intValue()    *    2;    	non-compiled	[CE]  int  cannot  be  dereferenced	111	None	replace
1468	[BUG]  [BUGGY]  return  END_OF_STREAM.intValue()  *  3;  [CE]  int  cannot  be  dereferenced  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.intValue()  *  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.intValue()  *  3;	  return    END_OF_STREAM.intValue()    *    2;    	non-compiled	[CE]  int  cannot  be  dereferenced	111	None	replace
1469	[BUG]  [BUGGY]  return  c  >  0?  1;  [CE]  :  expected  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1;	  return    c    >    0?    1    :    c;    return    c    >    0?    1    :    c;    	non-compiled	[CE]  :  expected	292	None	replace
1470	[BUG]  [BUGGY]  int  c  =  getEscapeChar();  return  c  -  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeChar();  return  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeChar();  return  c  -  1;	  return    c    -    1;    int    c    =    getEscapeChar();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	311	None	replace
1471	[BUG]  [BUGGY]  c  =  getEscapeChar();  return  c  -  1;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getEscapeChar();  return  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getEscapeChar();  return  c  -  1;	  return    c    -    1;    int    c    =    getEscapeChar();    return    c    -    1;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	311	None	replace
1472	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  c  -  1;  }  else  {  int  c  =  getEscapeChar();  return  c  -  1;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  c  -  1;  }  else  {  int  c  =  getEscapeChar();  return  c  -  1;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  c  -  1;  }  else  {  int  c  =  getEscapeChar();  return  c  -  1;  }	  return    c    -    1;    int    c    =    getEscapeChar();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	311	None	replace
1473	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeChar();  return  c  -  1;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeChar();  return  c  -  1;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeChar();  return  c  -  1;  }	  return    c    -    1;    int    c    =    getEscapeChar();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	311	None	replace
1474	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeChar();  return  c  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeChar();  return  c  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeChar();  return  c  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    -    1;    int    c    =    getEscapeChar();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	311	None	replace
1475	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeChar();  return  c  -  1;  }  else  {  throw  new  IOException( " ");  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeChar();  return  c  -  1;  }  else  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeChar();  return  c  -  1;  }  else  {  throw  new  IOException( " ");  }	  return    c    -    1;    int    c    =    getEscapeChar();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	311	None	replace
1476	[BUG]  [BUGGY]  default:  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpaces();  [CE]  duplicate  default  label  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  default:  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	default:  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpaces();	  return    BACKSPACE;    Integer    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  duplicate  default  label	225	None	replace
1477	[BUG]  [BUGGY]  Integer  c  =  getEscapeSurroundingSpaces().intValue();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  getEscapeSurroundingSpaces().intValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  getEscapeSurroundingSpaces().intValue();	  return    BACKSPACE;    Integer    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	225	None	replace
1478	[BUG]  [BUGGY]  return  END_OF_STREAM  +  2;  return  END_OF_STREAM  +  2;  [CE]  unreachable  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  2;  return  END_OF_STREAM  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    2;    return  END_OF_STREAM  +  2;	  	non-compiled	[CE]  unreachable  statement	71	None	add
1479	[BUG]  [BUGGY]  return  END_OF_STREAM  +  2;  END_OF_STREAM  +  2;  [CE]  not  a  statement  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  2;  END_OF_STREAM  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    2;    END_OF_STREAM  +  2;	  	non-compiled	[CE]  not  a  statement	71	None	add
1480	[BUG]  [BUGGY]  return  END_OF_STREAM  +  2;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  2;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    2;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	71	None	add
1481	[BUG]  [BUGGY]  return  END_OF_STREAM  +  2;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  2;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    2;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	71	None	add
1482	[BUG]  [BUGGY]  return  END_OF_STREAM  +  2;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  2;  int  c  =  in.read();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    2;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	71	None	add
1483	[BUG]  [BUGGY]  return  END_OF_STREAM  +  2;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  2;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    2;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	71	None	add
1484	[BUG]  [BUGGY]  return  END_OF_STREAM  +  2;  Integer  c  =  in.readInt();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  2;  Integer  c  =  in.readInt();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    2;    Integer  c  =  in.readInt();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	71	None	add
1485	[BUG]  [BUGGY]  return  END_OF_STREAM  +  2;  END_OF_STREAM  +  1;  [CE]  not  a  statement  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  2;  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    2;    END_OF_STREAM  +  1;	  	non-compiled	[CE]  not  a  statement	71	None	add
1486	[BUG]  [BUGGY]  char  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  char  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	char  c  =  getEscapeChar();	  return    c    &    END_OF_STREAM;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	323	None	replace
1487	[BUG]  [BUGGY]  return  c.longValue();  [CE]  int  cannot  be  dereferenced  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c.longValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c.longValue();	  return    END_OF_STREAM.longValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	109	None	replace
1488	[BUG]  [BUGGY]  return  END_OF_STREAM.longValue()  +  1;  [CE]  int  cannot  be  dereferenced  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.longValue()  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.longValue()  +  1;	  return    END_OF_STREAM.longValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	109	None	replace
1489	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM  +  1;	  return    c    ==    0?    END_OF_STREAM    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	213	5	replace
1490	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM  +  1;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM  +  1;	  return    c    ==    0?    END_OF_STREAM    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	213	5	replace
1491	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM.length;  [CE]  int  cannot  be  dereferenced  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM.length;	  return    c    ==    0?    END_OF_STREAM    :    END_OF_STREAM;    	non-compiled	[CE]  int  cannot  be  dereferenced	213	None	replace
1492	[BUG]  [BUGGY]  return  c  +  1;  int  c  =  getSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  1;  int  c  =  getSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  1;  int  c  =  getSurroundingSpace();	  return    c    +    1;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	219	None	replace
1493	[BUG]  [BUGGY]  return  c  -  1  +  1;  c  -  1  +  1;  [CE]  not  a  statement  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1  +  1;  c  -  1  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    1    +    1;    c  -  1  +  1;	  	non-compiled	[CE]  not  a  statement	301	None	add
1494	[BUG]  [BUGGY]  return  c  -  1  +  1;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1  +  1;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    1    +    1;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	301	None	add
1495	[BUG]  [BUGGY]  return  c  -  1  +  1;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1  +  1;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    1    +    1;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	301	None	add
1496	[BUG]  [BUGGY]  return  c  -  1  +  1;  int  c  =  getChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1  +  1;  int  c  =  getChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    1    +    1;    int  c  =  getChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	301	None	add
1497	[BUG]  [BUGGY]  return  c  -  1  +  1;  int  c  =  getCurrentSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1  +  1;  int  c  =  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    1    +    1;    int  c  =  getCurrentSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	301	None	add
1498	[BUG]  [BUGGY]  return  c  -  1  +  1;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1  +  1;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    1    +    1;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	301	None	add
1499	[BUG]  [BUGGY]  return  c  -  1  +  1;  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1  +  1;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    1    +    1;    int  c  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	301	None	add
1500	[BUG]  [BUGGY]  return  c  -  1  +  1;  int  c  =  getCurrentSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1  +  1;  int  c  =  getCurrentSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    1    +    1;    int  c  =  getCurrentSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	301	None	add
1501	[BUG]  [BUGGY]  return  END_OF_STREAM  +  1;  break;  [CE]  unreachable  statement  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  1;  break;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  1;  break;	  return    END_OF_STREAM    +    1;    result    +=    END_OF_STREAM;    	non-compiled	[CE]  unreachable  statement	181	None	replace
1502	[BUG]  [BUGGY]  return  END_OF_STREAM  +  1;  default:  result  +=  END_OF_STREAM;  [CE]  duplicate  default  label  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  1;  default:  result  +=  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  1;  default:  result  +=  END_OF_STREAM;	  return    END_OF_STREAM    +    1;    result    +=    END_OF_STREAM;    	non-compiled	[CE]  duplicate  default  label	181	None	replace
1503	[BUG]  [BUGGY]  return  END_OF_STREAM  +  1;  this.escape  +=  END_OF_STREAM;  [CE]  cannot  assign  a  value  to  final  variable  escape  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  1;  this.escape  +=  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  1;  this.escape  +=  END_OF_STREAM;	  return    END_OF_STREAM    +    1;    result    +=    END_OF_STREAM;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  escape	181	None	replace
1504	[BUG]  [BUGGY]  return  END_OF_STREAM  +  1;  default:  throw  new  EOFException( " ");  [CE]  duplicate  default  label  [FE]                            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  1;  default:  throw  new  EOFException( " ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  1;  default:  throw  new  EOFException( " ");	  return    END_OF_STREAM    +    1;    result    +=    END_OF_STREAM;    	non-compiled	[CE]  duplicate  default  label	181	None	replace
1505	[BUG]  [BUGGY]  char  c  =  getSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  char  c  =  getSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	char  c  =  getSurroundingSpace();	  return    c    &    END_OF_STREAM;    int    c    =    getSurroundingSpace();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	45	None	replace
1506	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace();  return  END_OF_STREAM  +  c;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace();  return  END_OF_STREAM  +  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace();  return  END_OF_STREAM  +  c;	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpace();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	188	None	replace
1507	[BUG]  [BUGGY]  c  =  getSurroundingSpace();  return  END_OF_STREAM  +  c;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getSurroundingSpace();  return  END_OF_STREAM  +  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getSurroundingSpace();  return  END_OF_STREAM  +  c;	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpace();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	188	None	replace
1508	[BUG]  [BUGGY]  null  c  =  getSurroundingSpace();  return  END_OF_STREAM  +  c;  [CE]  not  a  statement  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  null  c  =  getSurroundingSpace();  return  END_OF_STREAM  +  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	null  c  =  getSurroundingSpace();  return  END_OF_STREAM  +  c;	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpace();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  not  a  statement	188	None	replace
1509	[BUG]  [BUGGY]  Integer  c  =  getSurroundingSpace();  return  END_OF_STREAM  +  c;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  getSurroundingSpace();  return  END_OF_STREAM  +  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  getSurroundingSpace();  return  END_OF_STREAM  +  c;	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpace();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	188	None	replace
1510	[BUG]  [BUGGY]  Integer  c  =  getSurroundingSpace();  return  c  +  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  getSurroundingSpace();  return  c  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  getSurroundingSpace();  return  c  +  END_OF_STREAM;	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpace();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	188	None	replace
1511	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace(escapeChar);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace(escapeChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace(escapeChar);	  return    END_OF_STREAM;    int    c    =    getSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	130	None	replace
1512	[BUG]  [BUGGY]  c  =  getSurroundingSpace(end);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getSurroundingSpace(end);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getSurroundingSpace(end);	  return    END_OF_STREAM;    int    c    =    getSurroundingSpace(c);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	130	None	replace
1513	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.escape  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  this.escape  &  END_OF_STREAM;	  return    entry    &    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	291	5	replace
1514	[BUG]  [BUGGY]  return  this.escape  &  END_OF_STREAM;  [FE]  (entry  2)  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.escape  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.escape  &  END_OF_STREAM;	  return    entry    &    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	291	5	replace
1515	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  escape  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  escape  &  END_OF_STREAM;	  return    entry    &    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	291	5	replace
1516	[BUG]  [BUGGY]  return  escape  &  END_OF_STREAM;  [FE]  (entry  2)  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  escape  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  escape  &  END_OF_STREAM;	  return    entry    &    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	291	5	replace
1517	[BUG]  [BUGGY]  return  result  &  END_OF_STREAM;  [CE]  cannot  find  symbol  result  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  result  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  result  &  END_OF_STREAM;	  return    entry    &    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  result	291	None	replace
1518	[BUG]  [BUGGY]  return  pattern  &  END_OF_STREAM;  [CE]  cannot  find  symbol  pattern  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  pattern  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  pattern  &  END_OF_STREAM;	  return    entry    &    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  pattern	291	None	replace
1519	[BUG]  [BUGGY]  return  contiguous  &  END_OF_STREAM;  [CE]  cannot  find  symbol  contiguous  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  contiguous  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  contiguous  &  END_OF_STREAM;	  return    entry    &    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  contiguous	291	None	replace
1520	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    2;    ++c)    {    if(!ignoreEmptyLines)    {    return    c    >    0?    1    :    c;    }    	non-compiled	[CE]  illegal  start  of  expression	294	None	replace
1521	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoreSurroundingSpaces)  {  return  c  >  0?  1  :  c;  }  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoreSurroundingSpaces)  {  return  c  >  0?  1  :  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoreSurroundingSpaces)  {  return  c  >  0?  1  :  c;  }	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    2;    ++c)    {    if(!ignoreEmptyLines)    {    return    c    >    0?    1    :    c;    }    	non-compiled	[CE]  illegal  start  of  expression	294	None	replace
1522	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  2;  ++c)  {  if(ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  2;  ++c)  {  if(ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  2;  ++c)  {  if(ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    2;    ++c)    {    if(!ignoreEmptyLines)    {    return    c    >    0?    1    :    c;    }    	non-compiled	[CE]  illegal  start  of  expression	294	None	replace
1523	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoeEmptyLines)  {  return  c  >  0?  1  :  c;  }  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoeEmptyLines)  {  return  c  >  0?  1  :  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoeEmptyLines)  {  return  c  >  0?  1  :  c;  }	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    2;    ++c)    {    if(!ignoreEmptyLines)    {    return    c    >    0?    1    :    c;    }    	non-compiled	[CE]  illegal  start  of  expression	294	None	replace
1524	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoreEmptySpaces)  {  return  c  >  0?  1  :  c;  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoreEmptySpaces)  {  return  c  >  0?  1  :  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoreEmptySpaces)  {  return  c  >  0?  1  :  c;  }	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    2;    ++c)    {    if(!ignoreEmptyLines)    {    return    c    >    0?    1    :    c;    }    	non-compiled	[CE]  illegal  start  of  expression	294	None	replace
1525	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  /  1  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  /  1  +  1;	  return    c    -    1    +    1;    	compilable	  [FE]  (entry  2)  	302	5	replace
1526	[BUG]  [BUGGY]  return  c  /  1  +  1;  [FE]  (entry  2)  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  /  1  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  /  1  +  1;	  return    c    -    1    +    1;    	compilable	  [FE]  (entry  2)  	302	5	replace
1527	[BUG]  [BUGGY]  return  c  -  1,  escapeSurroundingSpaces  +  1;  [CE]  ';'  expected  [FE]      Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1,  escapeSurroundingSpaces  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  1,  escapeSurroundingSpaces  +  1;	  return    c    -    1    +    1;    	non-compiled	[CE]  ';'  expected	302	None	replace
1528	[BUG]  [BUGGY]  return  c  -  1,  escapeSurroundingSpaces.length  +  1;  [CE]  ';'  expected  [FE]        Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1,  escapeSurroundingSpaces.length  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  1,  escapeSurroundingSpaces.length  +  1;	  return    c    -    1    +    1;    	non-compiled	[CE]  ';'  expected	302	None	replace
1529	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]          Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  *  1  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  *  1  +  1;	  return    c    -    1    +    1;    	compilable	  [FE]  (entry  2)  	302	5	replace
1530	[BUG]  [BUGGY]  return  c  *  1  +  1;  [FE]  (entry  2)  [FE]          Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  *  1  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  *  1  +  1;	  return    c    -    1    +    1;    	compilable	  [FE]  (entry  2)  	302	5	replace
1531	[BUG]  [BUGGY]  return  c  +  6;  c  +  6;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  6;  c  +  6;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    6;    c  +  6;	  	non-compiled	[CE]  not  a  statement	92	None	add
1532	[BUG]  [BUGGY]  return  c  +  6;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  6;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    6;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	92	None	add
1533	[BUG]  [BUGGY]  return  c  +  6;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  6;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    6;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	92	None	add
1534	[BUG]  [BUGGY]  return  c  +  6;  int  c  +  6;  [CE]  ';'  expected  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  6;  int  c  +  6;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    6;    int  c  +  6;	  	non-compiled	[CE]  ';'  expected	92	None	add
1535	[BUG]  [BUGGY]  return  c  +  6;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  6;  int  c  =  in.read();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    6;    int  c  =  in.read();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	92	None	add
1536	[BUG]  [BUGGY]  return  c  +  6;  int  c  =  getSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  6;  int  c  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    6;    int  c  =  getSurroundingSpace(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	92	None	add
1537	[BUG]  [BUGGY]  return  c  +  6;  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  6;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    6;    int  c  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	92	None	add
1538	[BUG]  [BUGGY]  return  c  +  6;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  6;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    6;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	92	None	add
1539	[BUG]  [BUGGY]  return  c  -  2;  int  c  -  2;  [CE]  ';'  expected  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  2;  int  c  -  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    2;    int  c  -  2;	  	non-compiled	[CE]  ';'  expected	112	None	add
1540	[BUG]  [BUGGY]  return  c  -  2;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  2;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    2;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	112	None	add
1541	[BUG]  [BUGGY]  return  c  -  2;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  2;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    2;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	112	None	add
1542	[BUG]  [BUGGY]  return  c  -  2;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  2;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    2;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	112	None	add
1543	[BUG]  [BUGGY]  return  c  -  2;  int  c  =  getSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  2;  int  c  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    2;    int  c  =  getSurroundingSpace(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	112	None	add
1544	[BUG]  [BUGGY]  return  c  -  2;  int  c  =  getEscapeSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  2;  int  c  =  getEscapeSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    2;    int  c  =  getEscapeSurroundingSpace(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	112	None	add
1545	[BUG]  [BUGGY]  return  c  -  2;  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  2;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    2;    int  c  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	112	None	add
1546	[BUG]  [BUGGY]  return  c  ||  END_OF_STREAM;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ||  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ||  END_OF_STREAM;	  return    END_OF_STREAM    ||    END_OF_STREAM;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	355	None	replace
1547	[BUG]  [BUGGY]  return  END_OF_STREAM  &&  END_OF_STREAM;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  &&  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  &&  END_OF_STREAM;	  return    END_OF_STREAM    ||    END_OF_STREAM;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	355	None	replace
1548	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_SCRIPT;  [CE]  cannot  find  symbol  END_OF_SCRIPT  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_SCRIPT;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_SCRIPT;	  return    END_OF_STREAM    ||    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_SCRIPT	355	None	replace
1549	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_BACKSPACE;  [CE]  cannot  find  symbol  END_OF_BACKSPACE  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_BACKSPACE;	  return    END_OF_STREAM    ||    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_BACKSPACE	355	None	replace
1550	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_SPACE;  [CE]  cannot  find  symbol  END_OF_SPACE  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_SPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_SPACE;	  return    END_OF_STREAM    ||    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_SPACE	355	None	replace
1551	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_SECOND;  [CE]  cannot  find  symbol  END_OF_SECOND  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_SECOND;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_SECOND;	  return    END_OF_STREAM    ||    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_SECOND	355	None	replace
1552	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_SECTION;  [CE]  cannot  find  symbol  END_OF_SECTION  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_SECTION;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_SECTION;	  return    END_OF_STREAM    ||    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_SECTION	355	None	replace
1553	[BUG]  [BUGGY]  (c  +  END_OF_STREAM));  [CE]  not  a  statement  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  (c  +  END_OF_STREAM));  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	(c  +  END_OF_STREAM));	  return    END_OF_STREAM    +    c;    (c    +    END_OF_STREAM));    	non-compiled	[CE]  not  a  statement	12	None	replace
1554	[BUG]  [BUGGY]  int  c  =  END_OF_STREAM  +  END_SPACE;  (c  +  END_OF_STREAM));  [CE]  not  a  statement  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  END_OF_STREAM  +  END_SPACE;  (c  +  END_OF_STREAM));  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  END_OF_STREAM  +  END_SPACE;  (c  +  END_OF_STREAM));	  return    END_OF_STREAM    +    c;    (c    +    END_OF_STREAM));    	non-compiled	[CE]  not  a  statement	12	None	replace
1555	[BUG]  [BUGGY]  int  c  =  END_OF_STREAM  +  END_SURroundingSpaces;  (c  +  END_OF_STREAM));  [CE]  not  a  statement  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  END_OF_STREAM  +  END_SURroundingSpaces;  (c  +  END_OF_STREAM));  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  END_OF_STREAM  +  END_SURroundingSpaces;  (c  +  END_OF_STREAM));	  return    END_OF_STREAM    +    c;    (c    +    END_OF_STREAM));    	non-compiled	[CE]  not  a  statement	12	None	replace
1556	[BUG]  [BUGGY]  c  =  END_OF_STREAM  +  END_SURroundingSpaces;  (c  +  END_OF_STREAM));  [CE]  not  a  statement  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  END_OF_STREAM  +  END_SURroundingSpaces;  (c  +  END_OF_STREAM));  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  END_OF_STREAM  +  END_SURroundingSpaces;  (c  +  END_OF_STREAM));	  return    END_OF_STREAM    +    c;    (c    +    END_OF_STREAM));    	non-compiled	[CE]  not  a  statement	12	None	replace
1557	[BUG]  [BUGGY]  c  =  END_OF_STREAM  +  END_OF_STREAM;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  END_OF_STREAM  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  END_OF_STREAM  +  END_OF_STREAM;	  return    END_OF_STREAM    +    c;    (c    +    END_OF_STREAM));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	12	None	replace
1558	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces(false);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces(false);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces(false);	  return    c    +    1;    int    c    =    getEscapeSurroundingSpaces(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	35	None	replace
1559	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces(escapeChar);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces(escapeChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces(escapeChar);	  return    c    +    1;    int    c    =    getEscapeSurroundingSpaces(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	35	None	replace
1560	[BUG]  [BUGGY]  int  escape  =  getEscapeSurroundingSpaces();  if(escape!=  null)  {  return  escape;  }  [CE]  cannot  find  symbol  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escape  =  getEscapeSurroundingSpaces();  if(escape!=  null)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escape  =  getEscapeSurroundingSpaces();  if(escape!=  null)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeSurroundingSpaces();    if(escape!=    null)    {    return    escape;    }    	non-compiled	[CE]  cannot  find  symbol	231	None	replace
1561	[BUG]  [BUGGY]  escape  =  getEscapeSurroundingSpaces();  if(escape!=  null)  {  return  escape;  }  [CE]  cannot  assign  a  value  to  final  variable  escape  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  escape  =  getEscapeSurroundingSpaces();  if(escape!=  null)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	escape  =  getEscapeSurroundingSpaces();  if(escape!=  null)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeSurroundingSpaces();    if(escape!=    null)    {    return    escape;    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  escape	231	None	replace
1562	[BUG]  [BUGGY]  int  escape  =  getEscapeSurroundingSpaces();  if(escape  ==  null)  {  return  escape;  }  [CE]  cannot  find  symbol  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escape  =  getEscapeSurroundingSpaces();  if(escape  ==  null)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escape  =  getEscapeSurroundingSpaces();  if(escape  ==  null)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeSurroundingSpaces();    if(escape!=    null)    {    return    escape;    }    	non-compiled	[CE]  cannot  find  symbol	231	None	replace
1563	[BUG]  [BUGGY]  escape  =  getEscapeSurroundingSpaces();  if(escape  ==  null)  {  return  escape;  }  [CE]  cannot  assign  a  value  to  final  variable  escape  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  escape  =  getEscapeSurroundingSpaces();  if(escape  ==  null)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	escape  =  getEscapeSurroundingSpaces();  if(escape  ==  null)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeSurroundingSpaces();    if(escape!=    null)    {    return    escape;    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  escape	231	None	replace
1564	[BUG]  [BUGGY]  int  escape  =  getEscapeSurroundingSpaces();  if(escaped!=  null)  {  return  escape;  }  [CE]  cannot  find  symbol  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escape  =  getEscapeSurroundingSpaces();  if(escaped!=  null)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escape  =  getEscapeSurroundingSpaces();  if(escaped!=  null)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeSurroundingSpaces();    if(escape!=    null)    {    return    escape;    }    	non-compiled	[CE]  cannot  find  symbol	231	None	replace
1565	[BUG]  [BUGGY]  int  escape  =  getEscapeSurroundingSpaces();  if(escape  >=  null)  {  return  escape;  }  [CE]  cannot  find  symbol  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escape  =  getEscapeSurroundingSpaces();  if(escape  >=  null)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escape  =  getEscapeSurroundingSpaces();  if(escape  >=  null)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeSurroundingSpaces();    if(escape!=    null)    {    return    escape;    }    	non-compiled	[CE]  cannot  find  symbol	231	None	replace
1566	[BUG]  [BUGGY]  escape  =  getEscapeSurroundingSpaces();  if(c!=  null)  {  return  escape;  }  [CE]  cannot  assign  a  value  to  final  variable  escape  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  escape  =  getEscapeSurroundingSpaces();  if(c!=  null)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	escape  =  getEscapeSurroundingSpaces();  if(c!=  null)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeSurroundingSpaces();    if(escape!=    null)    {    return    escape;    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  escape	231	None	replace
1567	[BUG]  [BUGGY]  return  CSVFormat.BACKSPACE  ||  END_OF_STREAM;  [CE]  cannot  find  symbol  BACKSPACE  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.BACKSPACE  ||  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.BACKSPACE  ||  END_OF_STREAM;	  return    CSVFormat.BACKSPACE;    	non-compiled	[CE]  cannot  find  symbol  BACKSPACE	135	None	replace
1568	[BUG]  [BUGGY]  return  CSVFormat.BACKSPACE,  END_OF_STREAM;  [CE]  ';'  expected  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.BACKSPACE,  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.BACKSPACE,  END_OF_STREAM;	  return    CSVFormat.BACKSPACE;    	non-compiled	[CE]  ';'  expected	135	None	replace
1569	[BUG]  [BUGGY]  return  CSVFormat.BACKSPACE  +  1;  [CE]  cannot  find  symbol  BACKSPACE  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.BACKSPACE  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.BACKSPACE  +  1;	  return    CSVFormat.BACKSPACE;    	non-compiled	[CE]  cannot  find  symbol  BACKSPACE	135	None	replace
1570	[BUG]  [BUGGY]  return  CSVFormat.BACKSPACE  -  1;  [CE]  cannot  find  symbol  BACKSPACE  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.BACKSPACE  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.BACKSPACE  -  1;	  return    CSVFormat.BACKSPACE;    	non-compiled	[CE]  cannot  find  symbol  BACKSPACE	135	None	replace
1571	[BUG]  [BUGGY]  return  CSVFormat.END_OF_SURroundingSpaces  +  1;  [CE]  cannot  find  symbol  END_OF_SURroundingSpaces  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.END_OF_SURroundingSpaces  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.END_OF_SURroundingSpaces  +  1;	  return    CSVFormat.END_OF_SURroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  END_OF_SURroundingSpaces	146	None	replace
1572	[BUG]  [BUGGY]  return  CSVFormat.END_OF_SURroundingSpaces  ||  END_OF_STREAM;  [CE]  cannot  find  symbol  END_OF_SURroundingSpaces  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.END_OF_SURroundingSpaces  ||  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.END_OF_SURroundingSpaces  ||  END_OF_STREAM;	  return    CSVFormat.END_OF_SURroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  END_OF_SURroundingSpaces	146	None	replace
1573	[BUG]  [BUGGY]  return  CSVFormat.END_OF_SURroundingSpaces?  1  :  0;  [CE]  cannot  find  symbol  END_OF_SURroundingSpaces  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.END_OF_SURroundingSpaces?  1  :  0;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.END_OF_SURroundingSpaces?  1  :  0;	  return    CSVFormat.END_OF_SURroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  END_OF_SURroundingSpaces	146	None	replace
1574	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM  +  1;	  return    c!=    0?    END_OF_STREAM    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	328	3	replace
1575	[BUG]  [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM  +  1;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM  +  1;	  return    c!=    0?    END_OF_STREAM    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	328	3	replace
1576	[BUG]  [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
1577	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
1578	[BUG]  [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  c;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  c;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(!ignoreSurroundingSpaces)  {  return  c;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
1579	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||  ignoreSurroundingSpaces)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||  ignoreSurroundingSpaces)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||  ignoreSurroundingSpaces)  {  break;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
1580	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreSurroundingSpaces)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreSurroundingSpaces)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreSurroundingSpaces)  {  break;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
1581	[BUG]  [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
1582	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
1583	[BUG]  [BUGGY]  return  CSVFormatUtil.END_OF_SURroundingSpaces  +  1;  [CE]  cannot  find  symbol  CSVFormatUtil  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormatUtil.END_OF_SURroundingSpaces  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormatUtil.END_OF_SURroundingSpaces  +  1;	  return    END_OF_SURroundingSpaces    +    1;    	non-compiled	[CE]  cannot  find  symbol  CSVFormatUtil	324	None	replace
1584	[BUG]  [BUGGY]  return  this.ignoreEmptyLines  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreEmptyLines  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoreEmptyLines  +  1;	  return    END_OF_SURroundingSpaces    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	324	None	replace
1585	[BUG]  [BUGGY]  return  END_OF_SURroundingSpaces  +  2;  [CE]  cannot  find  symbol  END_OF_SURroundingSpaces  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_SURroundingSpaces  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_SURroundingSpaces  +  2;	  return    END_OF_SURroundingSpaces    +    1;    	non-compiled	[CE]  cannot  find  symbol  END_OF_SURroundingSpaces	324	None	replace
1586	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	200	None	replace
1587	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')return  END_OF_STREAM;  }  [CE]  class,  interface,  or  enum  expected  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	200	None	replace
1588	[BUG]  [BUGGY]  if(c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	200	None	replace
1589	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	200	None	replace
1590	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  'r')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  'r')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c!=  'r')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	200	None	replace
1591	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  ==  0?  1  :  escape;	  return    c    >    0?    1    :    escape;    	compilable	  [FE]  (entry  2)  	304	5	replace
1592	[BUG]  [BUGGY]  return  c  ==  0?  1  :  escape;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  1  :  escape;	  return    c    >    0?    1    :    escape;    	compilable	  [FE]  (entry  2)  	304	5	replace
1593	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  <  0?  1  :  escape;	  return    c    >    0?    1    :    escape;    	compilable	  [FE]  (entry  2)  	304	5	replace
1594	[BUG]  [BUGGY]  return  c  <  0?  1  :  escape;  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  0?  1  :  escape;	  return    c    >    0?    1    :    escape;    	compilable	  [FE]  (entry  2)  	304	5	replace
1595	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  escape  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  >  0?  1  :  escape  +  1;	  return    c    >    0?    1    :    escape;    	compilable	  [FE]  (entry  2)  	304	5	replace
1596	[BUG]  [BUGGY]  return  c  >  0?  1  :  escape  +  1;  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  escape  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  escape  +  1;	  return    c    >    0?    1    :    escape;    	compilable	  [FE]  (entry  2)  	304	5	replace
1597	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  1  :  escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  >=  0?  1  :  escape;	  return    c    >    0?    1    :    escape;    	compilable	  [FE]  (entry  2)  	304	5	replace
1598	[BUG]  [BUGGY]  return  c  >=  0?  1  :  escape;  [FE]  (entry  2)  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  1  :  escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >=  0?  1  :  escape;	  return    c    >    0?    1    :    escape;    	compilable	  [FE]  (entry  2)  	304	5	replace
1599	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  1  :  escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c!=  0?  1  :  escape;	  return    c    >    0?    1    :    escape;    	compilable	  [FE]  (entry  2)  	304	5	replace
1600	[BUG]  [BUGGY]  return  c!=  0?  1  :  escape;  [FE]  (entry  2)  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  1  :  escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c!=  0?  1  :  escape;	  return    c    >    0?    1    :    escape;    	compilable	  [FE]  (entry  2)  	304	5	replace
1601	[BUG]  [BUGGY]  int  c  =  getEmptyLines().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEmptyLines().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEmptyLines().size();	  return    BACKSPACE;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	172	None	replace
1602	[BUG]  [BUGGY]  return  c  -  1;  int  c  =  getCurrentSurroundingSpace()  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1;  int  c  =  getCurrentSurroundingSpace()  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  1;  int  c  =  getCurrentSurroundingSpace()  +  1;	  return    c    -    1;    int    c    =    getCurrentSurroundingSpace();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	247	None	replace
1603	[BUG]  [BUGGY]  return  c  -  1;  int  c  =  getCurrentSurroundingSpace()  +  2;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1;  int  c  =  getCurrentSurroundingSpace()  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  1;  int  c  =  getCurrentSurroundingSpace()  +  2;	  return    c    -    1;    int    c    =    getCurrentSurroundingSpace();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	247	None	replace
1604	[BUG]  [BUGGY]  while(c  <  =  END_OF_STREAM)  {  return  c  +  2;  int  c  =  getEscapeChar();  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  =  END_OF_STREAM)  {  return  c  +  2;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  =  END_OF_STREAM)  {  return  c  +  2;  int  c  =  getEscapeChar();	  return    c    +    2;    int    c    =    getEscapeChar();    	non-compiled	[CE]  illegal  start  of  expression	241	None	replace
1605	[BUG]  [BUGGY]  while(c  <  =  END_OF_STREAM  ||  c  >  END_OF_STREAM)  {  return  c  +  2;  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  =  END_OF_STREAM  ||  c  >  END_OF_STREAM)  {  return  c  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  =  END_OF_STREAM  ||  c  >  END_OF_STREAM)  {  return  c  +  2;	  return    c    +    2;    int    c    =    getEscapeChar();    	non-compiled	[CE]  illegal  start  of  expression	241	None	replace
1606	[BUG]  [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  c  ==  0?  c  :  END_OF_STREAM;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  c  ==  0?  c  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    c    :    END_OF_STREAM;    c  ==  0?  c  :  END_OF_STREAM;	  	non-compiled	[CE]  not  a  statement	137	None	add
1607	[BUG]  [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    c    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	137	None	add
1608	[BUG]  [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    c    :    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	137	None	add
1609	[BUG]  [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  int  c  =  Integer.parseInt(quoteChar);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  int  c  =  Integer.parseInt(quoteChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    c    :    END_OF_STREAM;    int  c  =  Integer.parseInt(quoteChar);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	137	None	add
1610	[BUG]  [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    c    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	137	None	add
1611	[BUG]  [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  int  c  =  getSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  int  c  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    c    :    END_OF_STREAM;    int  c  =  getSurroundingSpace(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	137	None	add
1612	[BUG]  [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    c    :    END_OF_STREAM;    int  c  =  getCurrentSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	137	None	add
1613	[BUG]  [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    c    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	137	None	add
1614	[BUG]  [BUGGY]  return  c  +  1;  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  [CE]  duplicate  case  label  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  1;  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  1;  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");	  return    END_OF_STREAM    +    1;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence       ");    	non-compiled	[CE]  duplicate  case  label	316	None	replace
1615	[BUG]  [BUGGY]  result  +=  END_OF_STREAM  +  1;  [CE]  cannot  find  symbol  result  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result  +=  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result  +=  END_OF_STREAM  +  1;	  return    END_OF_STREAM    +    1;    result    +=    END_OF_STREAM    +    1;    	non-compiled	[CE]  cannot  find  symbol  result	178	None	replace
1616	[BUG]  [BUGGY]  return  c  +  1;  result  +=  END_OF_STREAM  +  1;  [CE]  cannot  find  symbol  result  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  1;  result  +=  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  1;  result  +=  END_OF_STREAM  +  1;	  return    END_OF_STREAM    +    1;    result    +=    END_OF_STREAM    +    1;    	non-compiled	[CE]  cannot  find  symbol  result	178	None	replace
1617	[BUG]  [BUGGY]  return  END_OF_STREAM  +  1;  result  +=  END_OF_STREAM  +  2;  [CE]  cannot  find  symbol  result  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  1;  result  +=  END_OF_STREAM  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  1;  result  +=  END_OF_STREAM  +  2;	  return    END_OF_STREAM    +    1;    result    +=    END_OF_STREAM    +    1;    	non-compiled	[CE]  cannot  find  symbol  result	178	None	replace
1618	[BUG]  [BUGGY]  default:  return  END_OF_STREAM  +  1;  result  +=  END_OF_STREAM  +  1;  [CE]  duplicate  default  label  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  default:  return  END_OF_STREAM  +  1;  result  +=  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	default:  return  END_OF_STREAM  +  1;  result  +=  END_OF_STREAM  +  1;	  return    END_OF_STREAM    +    1;    result    +=    END_OF_STREAM    +    1;    	non-compiled	[CE]  duplicate  default  label	178	None	replace
1619	[BUG]  [BUGGY]  return  END_OF_STREAM  +  1;  default:  result  +=  END_OF_STREAM  +  1;  [CE]  duplicate  default  label  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  1;  default:  result  +=  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  1;  default:  result  +=  END_OF_STREAM  +  1;	  return    END_OF_STREAM    +    1;    result    +=    END_OF_STREAM    +    1;    	non-compiled	[CE]  duplicate  default  label	178	None	replace
1620	[BUG]  [BUGGY]  return  this.ignoreEmptyLines?  END_OF_STREAM  :  END_EXPECTED;  [CE]  cannot  find  symbol  END_EXPECTED  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreEmptyLines?  END_OF_STREAM  :  END_EXPECTED;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoreEmptyLines?  END_OF_STREAM  :  END_EXPECTED;	  return    this.escapeSurroundingSpaces?    END_OF_STREAM    :    END_EXPECTED;    	non-compiled	[CE]  cannot  find  symbol  END_EXPECTED	211	None	replace
1621	[BUG]  [BUGGY]  return  this.ignoredEmptyLines?  END_OF_STREAM  :  END_EXPECTED;  [CE]  cannot  find  symbol  ignoredEmptyLines  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoredEmptyLines?  END_OF_STREAM  :  END_EXPECTED;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoredEmptyLines?  END_OF_STREAM  :  END_EXPECTED;	  return    this.escapeSurroundingSpaces?    END_OF_STREAM    :    END_EXPECTED;    	non-compiled	[CE]  cannot  find  symbol  ignoredEmptyLines	211	None	replace
1622	[BUG]  [BUGGY]  return  this.ignoredSurroundingSpaces?  END_OF_STREAM  :  END_EXPECTED;  [CE]  cannot  find  symbol  ignoredSurroundingSpaces  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoredSurroundingSpaces?  END_OF_STREAM  :  END_EXPECTED;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoredSurroundingSpaces?  END_OF_STREAM  :  END_EXPECTED;	  return    this.escapeSurroundingSpaces?    END_OF_STREAM    :    END_EXPECTED;    	non-compiled	[CE]  cannot  find  symbol  ignoredSurroundingSpaces	211	None	replace
1623	[BUG]  [BUGGY]  return  END_OF_STREAM?  END_OF_STREAM  :  END_EXPECTED;  [CE]  incompatible  types  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM?  END_OF_STREAM  :  END_EXPECTED;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM?  END_OF_STREAM  :  END_EXPECTED;	  return    this.escapeSurroundingSpaces?    END_OF_STREAM    :    END_EXPECTED;    	non-compiled	[CE]  incompatible  types	211	None	replace
1624	[BUG]  [BUGGY]  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [CE]  illegal  start  of  expression  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  illegal  start  of  expression	201	None	replace
1625	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	201	None	replace
1626	[BUG]  [BUGGY]  if(c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	201	None	replace
1627	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'a'  ||  c  ==  'z')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	201	None	replace
1628	[BUG]  [BUGGY]  case  END_EOF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence ");  [CE]  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_EOF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_EOF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence ");	  return    END_OF_STREAM;    case    END_OF_STREAM:    throw    new    EOF    whilst    processing    escape    sequence       ");    	non-compiled	[CE]  	299	None	replace
1629	[BUG]  [BUGGY]  result:  throw  new  EOF  whilst  processing  escape  sequence ");  [CE]  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result:  throw  new  EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result:  throw  new  EOF  whilst  processing  escape  sequence ");	  return    END_OF_STREAM;    case    END_OF_STREAM:    throw    new    EOF    whilst    processing    escape    sequence       ");    	non-compiled	[CE]  	299	None	replace
1630	[BUG]  [BUGGY]  case  END_OBJECT:  throw  new  EOF  whilst  processing  escape  sequence ");  [CE]  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OBJECT:  throw  new  EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OBJECT:  throw  new  EOF  whilst  processing  escape  sequence ");	  return    END_OF_STREAM;    case    END_OF_STREAM:    throw    new    EOF    whilst    processing    escape    sequence       ");    	non-compiled	[CE]  	299	None	replace
1631	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace(lineNumber);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace(lineNumber);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace(lineNumber);	  return    BACKSPACE;    int    c    =    getSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	169	None	replace
1632	[BUG]  [BUGGY]  c  =  getSurroundingSpace(escape);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getSurroundingSpace(escape);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getSurroundingSpace(escape);	  return    BACKSPACE;    int    c    =    getSurroundingSpace(c);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	169	None	replace
1633	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace(lineno);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace(lineno);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace(lineno);	  return    BACKSPACE;    int    c    =    getSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	169	None	replace
1634	[BUG]  [BUGGY]  return  c  ||  c  >=  END_OF_STREAM;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ||  c  >=  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ||  c  >=  END_OF_STREAM;	  return    c    *    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	326	None	replace
1635	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  *  2  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  *  2  +  1;	  return    c    *    2;    	compilable	  [FE]  (entry  2)  	326	5	replace
1636	[BUG]  [BUGGY]  return  c  *  2  +  1;  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  *  2  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  *  2  +  1;	  return    c    *    2;    	compilable	  [FE]  (entry  2)  	326	5	replace
1637	[BUG]  [BUGGY]  return  c  -  2;  int  c  -  1;  [CE]  ';'  expected  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  2;  int  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  2;  int  c  -  1;	  return    c    -    1;    int    c    -    1;    	non-compiled	[CE]  ';'  expected	151	None	replace
1638	[BUG]  [BUGGY]  char  c  -  1;  [CE]  ';'  expected  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  char  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	char  c  -  1;	  return    c    -    1;    int    c    -    1;    	non-compiled	[CE]  ';'  expected	151	None	replace
1639	[BUG]  [BUGGY]  return  c  -  1;  int  c  -  2;  [CE]  ';'  expected  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1;  int  c  -  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  1;  int  c  -  2;	  return    c    -    1;    int    c    -    1;    	non-compiled	[CE]  ';'  expected	151	None	replace
1640	[BUG]  [BUGGY]  int  c  -=  1;  [CE]  ';'  expected  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  -=  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  -=  1;	  return    c    -    1;    int    c    -    1;    	non-compiled	[CE]  ';'  expected	151	None	replace
1641	[BUG]  [BUGGY]  return  c  -  1;  int  c  -=  1;  [CE]  ';'  expected  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1;  int  c  -=  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  1;  int  c  -=  1;	  return    c    -    1;    int    c    -    1;    	non-compiled	[CE]  ';'  expected	151	None	replace
1642	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpace(false);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpace(false);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpace(false);	  return    BACKSPACE;    int    c    =    getEscapeSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	171	None	replace
1643	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpace(separator);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpace(separator);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpace(separator);	  return    BACKSPACE;    int    c    =    getEscapeSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	171	None	replace
1644	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpace(end);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpace(end);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpace(end);	  return    BACKSPACE;    int    c    =    getEscapeSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	171	None	replace
1645	[BUG]  [BUGGY]  return  c  >  0?  1  :  escape(c,  END_OF_STREAM);  [CE]  cannot  find  symbol  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  escape(c,  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  escape(c,  END_OF_STREAM);	  return    c    >    0?    1    :    escape(c);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
1646	[BUG]  [BUGGY]  return  c  >  0?  1  :  escape(c,  delimiter);  [CE]  cannot  find  symbol  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  escape(c,  delimiter);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  escape(c,  delimiter);	  return    c    >    0?    1    :    escape(c);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
1647	[BUG]  [BUGGY]  return  c  >  0?  1  :  escape(c,  commmentStart);  [CE]  cannot  find  symbol  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  escape(c,  commmentStart);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  escape(c,  commmentStart);	  return    c    >    0?    1    :    escape(c);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
1648	[BUG]  [BUGGY]  return  c  >  0?  1  :  escapeSurroundingSpaces(c);  [CE]  cannot  find  symbol  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  escapeSurroundingSpaces(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  escapeSurroundingSpaces(c);	  return    c    >    0?    1    :    escape(c);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
1649	[BUG]  [BUGGY]  return  c  >  0?  1  :  escapeEmptyLines(c);  [CE]  cannot  find  symbol  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  escapeEmptyLines(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  escapeEmptyLines(c);	  return    c    >    0?    1    :    escape(c);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
1650	[BUG]  [BUGGY]  return  c  >  0?  1  :  escape(c,  DElimiter);  [CE]  cannot  find  symbol  DElimiter  [FE]                            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  escape(c,  DElimiter);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  escape(c,  DElimiter);	  return    c    >    0?    1    :    escape(c);    	non-compiled	[CE]  cannot  find  symbol  DElimiter	69	None	replace
1651	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  %  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  %  BACKSPACE;	  return    c    %    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	103	5	replace
1652	[BUG]  [BUGGY]  return  c  %  BACKSPACE;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  %  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  %  BACKSPACE;	  return    c    %    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	103	5	replace
1653	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  %  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  %  2;	  return    c    %    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	103	5	replace
1654	[BUG]  [BUGGY]  return  c  %  2;  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  %  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  %  2;	  return    c    %    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	103	5	replace
1655	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  %  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  %  END_OF_STREAM  +  1;	  return    c    %    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	103	5	replace
1656	[BUG]  [BUGGY]  return  c  %  END_OF_STREAM  +  1;  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  %  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  %  END_OF_STREAM  +  1;	  return    c    %    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	103	5	replace
1657	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  /  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  /  END_OF_STREAM;	  return    c    %    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	103	5	replace
1658	[BUG]  [BUGGY]  return  c  /  END_OF_STREAM;  [FE]  (entry  2)  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  /  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  /  END_OF_STREAM;	  return    c    %    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	103	5	replace
1659	[BUG]  [BUGGY]  c  =  getEscapeSurroundingSpace(end);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getEscapeSurroundingSpace(end);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getEscapeSurroundingSpace(end);	  return    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpace(c);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	131	None	replace
1660	[BUG]  [BUGGY]  return  c  ||  END_OF_Escape.equals(c);  [CE]  cannot  find  symbol  END_OF_Escape  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ||  END_OF_Escape.equals(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ||  END_OF_Escape.equals(c);	  return    END_OF_STREAM    ||    END_OF_Escape.equals(c);    	non-compiled	[CE]  cannot  find  symbol  END_OF_Escape	349	None	replace
1661	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_SURroundingSpaces.equals(c);  [CE]  cannot  find  symbol  END_SURroundingSpaces  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_SURroundingSpaces.equals(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_SURroundingSpaces.equals(c);	  return    END_OF_STREAM    ||    END_OF_Escape.equals(c);    	non-compiled	[CE]  cannot  find  symbol  END_SURroundingSpaces	349	None	replace
1662	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_Escape.equals(c);  [CE]  cannot  find  symbol  END_Escape  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_Escape.equals(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_Escape.equals(c);	  return    END_OF_STREAM    ||    END_OF_Escape.equals(c);    	non-compiled	[CE]  cannot  find  symbol  END_Escape	349	None	replace
1663	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_SPACE.equals(c);  [CE]  cannot  find  symbol  END_SPACE  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_SPACE.equals(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_SPACE.equals(c);	  return    END_OF_STREAM    ||    END_OF_Escape.equals(c);    	non-compiled	[CE]  cannot  find  symbol  END_SPACE	349	None	replace
1664	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_SURroundingSpaces.equals(c);  [CE]  cannot  find  symbol  END_OF_SURroundingSpaces  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_SURroundingSpaces.equals(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_SURroundingSpaces.equals(c);	  return    END_OF_STREAM    ||    END_OF_Escape.equals(c);    	non-compiled	[CE]  cannot  find  symbol  END_OF_SURroundingSpaces	349	None	replace
1665	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_EOF.equals(c);  [CE]  cannot  find  symbol  END_EOF  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_EOF.equals(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_EOF.equals(c);	  return    END_OF_STREAM    ||    END_OF_Escape.equals(c);    	non-compiled	[CE]  cannot  find  symbol  END_EOF	349	None	replace
1666	[BUG]  [BUGGY]  char  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  char  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	char  c  =  getSurroundingSpaces();	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	10	None	replace
1667	[BUG]  [BUGGY]  return  c.equals(END_OF_STREAM)?  END_OF_STREAM  :  END_OF_Escape;  [CE]  int  cannot  be  dereferenced  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c.equals(END_OF_STREAM)?  END_OF_STREAM  :  END_OF_Escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c.equals(END_OF_STREAM)?  END_OF_STREAM  :  END_OF_Escape;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_Escape;    	non-compiled	[CE]  int  cannot  be  dereferenced	364	None	replace
1668	[BUG]  [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_RECORD  :  END_OF_Escape;  [CE]  int  cannot  be  dereferenced  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_RECORD  :  END_OF_Escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.equals(c)?  END_OF_RECORD  :  END_OF_Escape;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_Escape;    	non-compiled	[CE]  int  cannot  be  dereferenced	364	None	replace
1669	[BUG]  [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_STREAM  :  END_OF_SECOND;  [CE]  int  cannot  be  dereferenced  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_STREAM  :  END_OF_SECOND;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.equals(c)?  END_OF_STREAM  :  END_OF_SECOND;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_Escape;    	non-compiled	[CE]  int  cannot  be  dereferenced	364	None	replace
1670	[BUG]  [BUGGY]  return  c  >  0?  1  :  c  +  1;  c  >  0?  1  :  c  +  1;  [CE]  not  a  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c  +  1;  c  >  0?  1  :  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    c    +    1;    c  >  0?  1  :  c  +  1;	  	non-compiled	[CE]  not  a  statement	307	None	add
1671	[BUG]  [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  >  0?  1  :  c  +  1;  [CE]  ';'  expected  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  >  0?  1  :  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    c    +    1;    int  c  >  0?  1  :  c  +  1;	  	non-compiled	[CE]  ';'  expected	307	None	add
1672	[BUG]  [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  =  Integer.parseInt(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  =  Integer.parseInt(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    c    +    1;    int  c  =  Integer.parseInt(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	307	None	add
1673	[BUG]  [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    c    +    1;    int  c  =  getSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	307	None	add
1674	[BUG]  [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    c    +    1;    int  c  =  getEscapeSurroundingSpaces();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	307	None	add
1675	[BUG]  [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    c    +    1;    int  c  =  getSurroundingSpaces().length;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	307	None	add
1676	[BUG]  [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    c    +    1;    int  c  =  getSurroundingSpaces().size();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	307	None	add
1677	[BUG]  [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  =  getSurroundingSpace(c);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    c    +    1;    int  c  =  getSurroundingSpace(c);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	307	None	add
1678	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  int  c  =  getCurrentIndex();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  int  c  =  getCurrentIndex();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  int  c  =  getCurrentIndex();  }	  return    END_OF_STREAM;    int    c    =    getCurrentIndex();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	261	None	replace
1679	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  int  c  =  getCurrentIndex();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  int  c  =  getCurrentIndex();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  int  c  =  getCurrentIndex();  }	  return    END_OF_STREAM;    int    c    =    getCurrentIndex();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	261	None	replace
1680	[BUG]  [BUGGY]  while(c  <  END_OF_STREAM)  {  c  =  getCurrentIndex();  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  END_OF_STREAM)  {  c  =  getCurrentIndex();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  END_OF_STREAM)  {  c  =  getCurrentIndex();	  return    END_OF_STREAM;    int    c    =    getCurrentIndex();    	non-compiled	[CE]  illegal  start  of  expression	261	None	replace
1681	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n')  {  return  END_OF_STREAM;  int  c  =  getCurrentIndex();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n')  {  return  END_OF_STREAM;  int  c  =  getCurrentIndex();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n')  {  return  END_OF_STREAM;  int  c  =  getCurrentIndex();  }	  return    END_OF_STREAM;    int    c    =    getCurrentIndex();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	261	None	replace
1682	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'n')  {  return  END_OF_STREAM;  int  c  =  getCurrentIndex();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'n')  {  return  END_OF_STREAM;  int  c  =  getCurrentIndex();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'n')  {  return  END_OF_STREAM;  int  c  =  getCurrentIndex();  }	  return    END_OF_STREAM;    int    c    =    getCurrentIndex();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	261	None	replace
1683	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeChar();  return  c  -  1;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeChar();  return  c  -  1;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeChar();  return  c  -  1;  }	  return    c    -    1;    int    c    =    getEscapeChar();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	311	None	replace
1684	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeChar();  return  c  -  1;  }  else  {  return  END_OF_STREAM;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeChar();  return  c  -  1;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeChar();  return  c  -  1;  }  else  {  return  END_OF_STREAM;  }	  return    c    -    1;    int    c    =    getEscapeChar();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	311	None	replace
1685	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeChar();  return  c  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeChar();  return  c  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeChar();  return  c  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    -    1;    int    c    =    getEscapeChar();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	311	None	replace
1686	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeChar();  return  c  -  1;  }  else  {  throw  new  IOException( " ");  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeChar();  return  c  -  1;  }  else  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeChar();  return  c  -  1;  }  else  {  throw  new  IOException( " ");  }	  return    c    -    1;    int    c    =    getEscapeChar();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	311	None	replace
1687	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OPTIONAL_SURroundingSpaces;  [CE]  cannot  find  symbol  END_OPTIONAL_SURroundingSpaces  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OPTIONAL_SURroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  END_OPTIONAL_SURroundingSpaces;	  return    c    >    0?    1    :    b;    	non-compiled	[CE]  cannot  find  symbol  END_OPTIONAL_SURroundingSpaces	68	None	replace
1688	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OCCURRENCE;  [CE]  cannot  find  symbol  END_OCCURRENCE  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OCCURRENCE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  END_OCCURRENCE;	  return    c    >    0?    1    :    b;    	non-compiled	[CE]  cannot  find  symbol  END_OCCURRENCE	68	None	replace
1689	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OF_BACKSPACE;  [CE]  cannot  find  symbol  END_OF_BACKSPACE  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  END_OF_BACKSPACE;	  return    c    >    0?    1    :    b;    	non-compiled	[CE]  cannot  find  symbol  END_OF_BACKSPACE	68	None	replace
1690	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  ENDSPACE;  [CE]  duplicate  case  label  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  ENDSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  ENDSPACE;	  case    END_OF_STREAM:    return    c;    	non-compiled	[CE]  duplicate  case  label	1	None	replace
1691	[BUG]  [BUGGY]  c  =  END_OF_STREAM  +  END_SPACE;  (c  +  END_OF_STREAM));  [CE]  not  a  statement  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  END_OF_STREAM  +  END_SPACE;  (c  +  END_OF_STREAM));  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  END_OF_STREAM  +  END_SPACE;  (c  +  END_OF_STREAM));	  return    END_OF_STREAM    +    c;    (c    +    END_OF_STREAM));    	non-compiled	[CE]  not  a  statement	12	None	replace
1692	[BUG]  [BUGGY]  c  =  END_OF_STREAM;  (c  +  END_OF_STREAM));  [CE]  not  a  statement  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  END_OF_STREAM;  (c  +  END_OF_STREAM));  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  END_OF_STREAM;  (c  +  END_OF_STREAM));	  return    END_OF_STREAM    +    c;    (c    +    END_OF_STREAM));    	non-compiled	[CE]  not  a  statement	12	None	replace
1693	[BUG]  [BUGGY]  c  =  END_OF_STREAM  +  1;  (c  +  END_OF_STREAM));  [CE]  not  a  statement  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  END_OF_STREAM  +  1;  (c  +  END_OF_STREAM));  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  END_OF_STREAM  +  1;  (c  +  END_OF_STREAM));	  return    END_OF_STREAM    +    c;    (c    +    END_OF_STREAM));    	non-compiled	[CE]  not  a  statement	12	None	replace
1694	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  >=  END_OF_Escape  ||  c  >=  END_OF_Escape;  [CE]  cannot  find  symbol  END_OF_Escape  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  >=  END_OF_Escape  ||  c  >=  END_OF_Escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  >=  END_OF_Escape  ||  c  >=  END_OF_Escape;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM    ||    c    >=    END_OF_Escape;    	non-compiled	[CE]  cannot  find  symbol  END_OF_Escape	267	None	replace
1695	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  ==  END_OF_Escape  ||  c  >=  END_OF_Escape;  [CE]  cannot  find  symbol  END_OF_Escape  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  ==  END_OF_Escape  ||  c  >=  END_OF_Escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  ==  END_OF_Escape  ||  c  >=  END_OF_Escape;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM    ||    c    >=    END_OF_Escape;    	non-compiled	[CE]  cannot  find  symbol  END_OF_Escape	267	None	replace
1696	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  ==  END_OF_Escape  ||  c  >=  END_OF_SURroundingSpace;  [CE]  cannot  find  symbol  END_OF_Escape  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  ==  END_OF_Escape  ||  c  >=  END_OF_SURroundingSpace;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  ==  END_OF_Escape  ||  c  >=  END_OF_SURroundingSpace;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM    ||    c    >=    END_OF_Escape;    	non-compiled	[CE]  cannot  find  symbol  END_OF_Escape	267	None	replace
1697	[BUG]  [BUGGY]  return  c  %  END_OF_STREAM;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  %  END_OF_STREAM;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    %    END_OF_STREAM;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	102	None	add
1698	[BUG]  [BUGGY]  return  c  %  END_OF_STREAM;  int  c  =  getSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  %  END_OF_STREAM;  int  c  =  getSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    %    END_OF_STREAM;    int  c  =  getSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	102	None	add
1699	[BUG]  [BUGGY]  return  c  %  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  %  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    %    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	102	None	add
1700	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getEscapeSurroundingSpaces();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getEscapeSurroundingSpaces();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getEscapeSurroundingSpaces();  }	  return    BACKSPACE;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	167	None	replace
1701	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  BACKSPACE;  int  c  =  getEscapeSurroundingSpaces();  [CE]  duplicate  case  label  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  BACKSPACE;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  BACKSPACE;  int  c  =  getEscapeSurroundingSpaces();	  return    BACKSPACE;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  duplicate  case  label	167	None	replace
1702	[BUG]  [BUGGY]  while(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getEscapeSurroundingSpaces();  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getEscapeSurroundingSpaces();	  return    BACKSPACE;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
1703	[BUG]  [BUGGY]  while(c  <  =  END_OF_STREAM)  {  c  =  getEscapeSurroundingSpaces();  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  =  END_OF_STREAM)  {  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  =  END_OF_STREAM)  {  c  =  getEscapeSurroundingSpaces();	  return    BACKSPACE;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
1704	[BUG]  [BUGGY]  return  this.ignoredSurroundingSpaces  &&  this.ignoredEmptyLines  <  =  0;  [CE]  illegal  start  of  expression  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoredSurroundingSpaces  &&  this.ignoredEmptyLines  <  =  0;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoredSurroundingSpaces  &&  this.ignoredEmptyLines  <  =  0;	  return    this.ignoredSurroundingSpaces;    	non-compiled	[CE]  illegal  start  of  expression	270	None	replace
1705	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  0;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  0;	  return    END_OF_STREAM;    case    END_OF_STREAM:    return    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	296	5	replace
1706	[BUG]  [BUGGY]  return  0;  [FE]  (entry  2)  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  0;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  0;	  return    END_OF_STREAM;    case    END_OF_STREAM:    return    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	296	5	replace
1707	[BUG]  [BUGGY]  case  END_OBJECT:  return  END_OF_STREAM;  [CE]  cannot  find  symbol  END_OBJECT  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OBJECT:  return  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OBJECT:  return  END_OF_STREAM;	  return    END_OF_STREAM;    case    END_OF_STREAM:    return    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OBJECT	296	None	replace
1708	[BUG]  [BUGGY]  return  c  -  1;  int  c  =  getSurroundingEmptyLines();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1;  int  c  =  getSurroundingEmptyLines();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  1;  int  c  =  getSurroundingEmptyLines();	  return    c    -    1;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	153	None	replace
1709	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  b  -  1;  [CE]  duplicate  case  label  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  b  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  b  -  1;	  case    END_OF_STREAM:    return    b;    	non-compiled	[CE]  duplicate  case  label	6	None	replace
1710	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  b  +  4;  [CE]  duplicate  case  label  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  b  +  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  b  +  4;	  case    END_OF_STREAM:    return    b;    	non-compiled	[CE]  duplicate  case  label	6	None	replace
1711	[BUG]  [BUGGY]  c  =  getSurroundingSpace(END_OF_STREAM);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getSurroundingSpace(END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getSurroundingSpace(END_OF_STREAM);	  return    END_OF_STREAM;    int    c    =    getSurroundingSpace(c);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	130	None	replace
1712	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace(surroundingSpaces);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace(surroundingSpaces);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace(surroundingSpaces);	  return    END_OF_STREAM;    int    c    =    getSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	130	None	replace
1713	[BUG]  [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  >  0?  1  :  c;  [CE]  ';'  expected  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  >  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  c  +  1;  int  c  >  0?  1  :  c;	  return    c    >    0?    1    :    c;    int    c    >    0?    1    :    c;    	non-compiled	[CE]  ';'  expected	159	None	replace
1714	[BUG]  [BUGGY]  return  c  <  0?  1  :  c;  int  c  >  0?  1  :  c;  [CE]  ';'  expected  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  c;  int  c  >  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  0?  1  :  c;  int  c  >  0?  1  :  c;	  return    c    >    0?    1    :    c;    int    c    >    0?    1    :    c;    	non-compiled	[CE]  ';'  expected	159	None	replace
1715	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  int  c  >  0?  1  :  c;  [CE]  ';'  expected  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  int  c  >  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  END_OF_STREAM;  int  c  >  0?  1  :  c;	  return    c    >    0?    1    :    c;    int    c    >    0?    1    :    c;    	non-compiled	[CE]  ';'  expected	159	None	replace
1716	[BUG]  [BUGGY]  return  c  >  0?  1  :  c;  int  c  =  0?  1  :  c;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c;  int  c  =  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  c;  int  c  =  0?  1  :  c;	  return    c    >    0?    1    :    c;    int    c    >    0?    1    :    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	159	None	replace
1717	[BUG]  [BUGGY]  return  c  >  0?  1  :  c;  int  c  <  0?  1  :  c;  [CE]  ';'  expected  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c;  int  c  <  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  c;  int  c  <  0?  1  :  c;	  return    c    >    0?    1    :    c;    int    c    >    0?    1    :    c;    	non-compiled	[CE]  ';'  expected	159	None	replace
1718	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  END_OF_STREAM  +  END_OF_STREAM;	  return    ch    +    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	184	5	replace
1719	[BUG]  [BUGGY]  return  END_OF_STREAM  +  END_OF_STREAM;  [FE]  (entry  2)  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  END_OF_STREAM;	  return    ch    +    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	184	5	replace
1720	[BUG]  [BUGGY]  return  s  +  END_OF_STREAM;  [CE]  cannot  find  symbol  s  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  s  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  s  +  END_OF_STREAM;	  return    ch    +    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  s	184	None	replace
1721	[BUG]  [BUGGY]  return  END_OF_STREAM  +  END_OF_LINE;  [CE]  cannot  find  symbol  END_OF_LINE  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  END_OF_LINE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  END_OF_LINE;	  return    ch    +    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_LINE	184	None	replace
1722	[BUG]  [BUGGY]  return  END_OF_STREAM?  -1  :  this.escapeSurroundingSpaces;  [CE]  incompatible  types  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM?  -1  :  this.escapeSurroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM?  -1  :  this.escapeSurroundingSpaces;	  return    this.escapeSurroundingSpaces?    -1    :    END_OF_STREAM;    	non-compiled	[CE]  incompatible  types	210	None	replace
1723	[BUG]  [BUGGY]  return  this.escapeEmptyLines?  -1  :  END_OF_STREAM;  [CE]  cannot  find  symbol  escapeEmptyLines  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.escapeEmptyLines?  -1  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.escapeEmptyLines?  -1  :  END_OF_STREAM;	  return    this.escapeSurroundingSpaces?    -1    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  escapeEmptyLines	210	None	replace
1724	[BUG]  [BUGGY]  return  'escape'  +  'ufffd';  [CE]  unclosed  character  literal  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  'escape'  +  'ufffd';  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  'escape'  +  'ufffd';	  return    END_OF_STREAM    +    'ufffd';    	non-compiled	[CE]  unclosed  character  literal	185	None	replace
1725	[BUG]  [BUGGY]  return  'E'  +  'ufffd';  [CE]  unclosed  character  literal  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  'E'  +  'ufffd';  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  'E'  +  'ufffd';	  return    END_OF_STREAM    +    'ufffd';    	non-compiled	[CE]  unclosed  character  literal	185	None	replace
1726	[BUG]  [BUGGY]  return  'u'  +  'ufffd';  [CE]  unclosed  character  literal  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  'u'  +  'ufffd';  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  'u'  +  'ufffd';	  return    END_OF_STREAM    +    'ufffd';    	non-compiled	[CE]  unclosed  character  literal	185	None	replace
1727	[BUG]  [BUGGY]  return  c  &  DISABLED;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  DISABLED;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  DISABLED;  int  c  =  getEscapeChar();	  return    c    &    END_OF_STREAM;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	323	None	replace
1728	[BUG]  [BUGGY]  return  c  <  =  END_OF_STREAM;  int  c  =  getEscapeChar();  [CE]  illegal  start  of  expression  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  =  END_OF_STREAM;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  =  END_OF_STREAM;  int  c  =  getEscapeChar();	  return    c    &    END_OF_STREAM;    int    c    =    getEscapeChar();    	non-compiled	[CE]  illegal  start  of  expression	323	None	replace
1729	[BUG]  [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  END_OF_STREAM;  int  c  =  getEscapeChar();	  return    c    &    END_OF_STREAM;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	323	None	replace
1730	[BUG]  [BUGGY]  return  c  <  =  END_OF_STREAM;  [CE]  illegal  start  of  expression  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  =  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  =  END_OF_STREAM;	  return    c    &    END_OF_STREAM;    int    c    =    getEscapeChar();    	non-compiled	[CE]  illegal  start  of  expression	323	None	replace
1731	[BUG]  [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart!=    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
1732	[BUG]  [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  com  [CE]  ';'  expected  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  com  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  com	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart!=    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
1733	[BUG]  [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  >=  commmentStart)  {  return  commmentStart;  }  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  >=  commmentStart)  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  >=  commmentStart)  {  return  commmentStart;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart!=    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
1734	[BUG]  [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  comenceStart;  }  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  comenceStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  comenceStart;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart!=    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
1735	[BUG]  [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  String  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  String  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  String  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart!=    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
1736	[BUG]  [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  [CE]  illegal  start  of  expression  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart!=    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
1737	[BUG]  [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  String  commmentStart  =  in.readString();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }  [CE]  illegal  start  of  expression  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  String  commmentStart  =  in.readString();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  String  commmentStart  =  in.readString();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart!=    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
1738	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_EmptyLines;  int  c  =  getSurroundingSpaces().length;  [CE]  cannot  find  symbol  END_EmptyLines  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_EmptyLines;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  END_EmptyLines;  int  c  =  getSurroundingSpaces().length;	  return    c    >    0?    1    :    c;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  cannot  find  symbol  END_EmptyLines	257	None	replace
1739	[BUG]  [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  while  processing  escape  sequence. ");  [CE]  duplicate  case  label  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  while  processing  escape  sequence. ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  throw  new  IOException( "EOF  while  processing  escape  sequence. ");	  return    END_OF_STREAM    +    1;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence.   ");    	non-compiled	[CE]  duplicate  case  label	320	None	replace
1740	[BUG]  [BUGGY]  return  END_OF_STREAM  +  DISABLED;  int  DISABLED  =  getSurroundingSpaces();  [CE]  cannot  find  symbol  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  DISABLED;  int  DISABLED  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    DISABLED;    int  DISABLED  =  getSurroundingSpaces();	  	non-compiled	[CE]  cannot  find  symbol	182	None	add
1741	[BUG]  [BUGGY]  return  END_OF_STREAM  +  DISABLED;  Integer  DISABLED  =  getSurroundingSpace(c);  [CE]  cannot  find  symbol  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  DISABLED;  Integer  DISABLED  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    DISABLED;    Integer  DISABLED  =  getSurroundingSpace(c);	  	non-compiled	[CE]  cannot  find  symbol	182	None	add
1742	[BUG]  [BUGGY]  return  c  +  this.ignoreSurroundingSpaces;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  this.ignoreSurroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  this.ignoreSurroundingSpaces;	  return    c    +    END_OF_SURroundingSpaces;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	269	None	replace
1743	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  int  c  =  getChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  int  c  =  getChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    END_OF_STREAM;    int  c  =  getChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	62	None	add
1744	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces().size();  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces().size();  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpaces().size();  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	212	None	add
1745	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces().length;  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces().length;  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpaces().length;  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	212	None	add
1746	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpaces();  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	212	None	add
1747	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentIndex();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentIndex();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getCurrentIndex();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	212	None	add
1748	[BUG]  [BUGGY]  case  END_OBJECT:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  [CE]  cannot  find  symbol  END_OBJECT  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OBJECT:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OBJECT:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");	  return    END_OF_STREAM;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    	non-compiled	[CE]  cannot  find  symbol  END_OBJECT	297	None	replace
1749	[BUG]  [BUGGY]  case  END_EOF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  [CE]  cannot  find  symbol  END_EOF_STREAM  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_EOF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_EOF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");	  return    END_OF_STREAM;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    	non-compiled	[CE]  cannot  find  symbol  END_EOF_STREAM	297	None	replace
1750	[BUG]  [BUGGY]  if(escape!=  0)  {  int  escape  =  getEscapeSurroundingSpaces();  if(escape!=  null)  {  return  escape;  }  [CE]  illegal  start  of  expression  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(escape!=  0)  {  int  escape  =  getEscapeSurroundingSpaces();  if(escape!=  null)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(escape!=  0)  {  int  escape  =  getEscapeSurroundingSpaces();  if(escape!=  null)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeSurroundingSpaces();    if(escape!=    null)    {    return    escape;    }    	non-compiled	[CE]  illegal  start  of  expression	231	None	replace
1751	[BUG]  [BUGGY]  int  escape  =  getEndingSpaces();  if(escape!=  null)  {  return  escape;  }  [CE]  cannot  find  symbol  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escape  =  getEndingSpaces();  if(escape!=  null)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escape  =  getEndingSpaces();  if(escape!=  null)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeSurroundingSpaces();    if(escape!=    null)    {    return    escape;    }    	non-compiled	[CE]  cannot  find  symbol	231	None	replace
1752	[BUG]  [BUGGY]  if(escape!=  0)  {  int  escape  =  getEscapeSurroundingSpaces();  if(escape!=  null)  {  return  escape;  }  }  [CE]  cannot  find  symbol  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(escape!=  0)  {  int  escape  =  getEscapeSurroundingSpaces();  if(escape!=  null)  {  return  escape;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(escape!=  0)  {  int  escape  =  getEscapeSurroundingSpaces();  if(escape!=  null)  {  return  escape;  }  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeSurroundingSpaces();    if(escape!=    null)    {    return    escape;    }    	non-compiled	[CE]  cannot  find  symbol	231	None	replace
1753	[BUG]  [BUGGY]  int  commmentStart  =  getCommentStart();  [CE]  cannot  find  symbol  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  commmentStart  =  getCommentStart();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  commmentStart  =  getCommentStart();	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeSurroundingSpaces();    if(escape!=    null)    {    return    escape;    }    	non-compiled	[CE]  cannot  find  symbol	231	None	replace
1754	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  1;  c  &  END_OF_STREAM;  [CE]  not  a  statement  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  1;  c  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  END_OF_STREAM  +  1;  c  &  END_OF_STREAM;	  return    c    &    END_OF_STREAM;    c    &    END_OF_STREAM;    	non-compiled	[CE]  not  a  statement	38	None	replace
1755	[BUG]  [BUGGY]  return  c  &  DISABLED;  c  &  END_OF_STREAM;  [CE]  not  a  statement  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  DISABLED;  c  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  DISABLED;  c  &  END_OF_STREAM;	  return    c    &    END_OF_STREAM;    c    &    END_OF_STREAM;    	non-compiled	[CE]  not  a  statement	38	None	replace
1756	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM;  c  &  END_OF_STREAM  +  1;  [CE]  not  a  statement  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM;  c  &  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  END_OF_STREAM;  c  &  END_OF_STREAM  +  1;	  return    c    &    END_OF_STREAM;    c    &    END_OF_STREAM;    	non-compiled	[CE]  not  a  statement	38	None	replace
1757	[BUG]  [BUGGY]  return  c  <  =  END_OF_STREAM;  c  &  END_OF_STREAM;  [CE]  illegal  start  of  expression  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  =  END_OF_STREAM;  c  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  =  END_OF_STREAM;  c  &  END_OF_STREAM;	  return    c    &    END_OF_STREAM;    c    &    END_OF_STREAM;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
1758	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  0;  }  [CE]  missing  return  statement  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  0;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  0;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	202	None	replace
1759	[BUG]  [BUGGY]  if(c  ==  'u'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'u'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'u'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	202	None	replace
1760	[BUG]  [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  't'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	202	None	replace
1761	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  -1;  }  [CE]  missing  return  statement  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  -1;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  -1;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	202	None	replace
1762	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  BACKSPACE;  int  c  =  getSurroundingSpaces();  [CE]  duplicate  case  label  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  BACKSPACE;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  BACKSPACE;  int  c  =  getSurroundingSpaces();	  return    BACKSPACE;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  duplicate  case  label	166	None	replace
1763	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  }	  return    END_OF_STREAM;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	132	None	replace
1764	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  }	  return    END_OF_STREAM;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	132	None	replace
1765	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  }	  return    END_OF_STREAM;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	132	None	replace
1766	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n')  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n')  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n')  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  }	  return    END_OF_STREAM;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	132	None	replace
1767	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getSurroundingSpaces().length;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getSurroundingSpaces().length;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getSurroundingSpaces().length;  }	  return    END_OF_STREAM;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	132	None	replace
1768	[BUG]  [BUGGY]  if(c  >=  END_OF_STREAM)  {  return  c  +  1;  int  c  =  getChar();  return  c  +  1;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >=  END_OF_STREAM)  {  return  c  +  1;  int  c  =  getChar();  return  c  +  1;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >=  END_OF_STREAM)  {  return  c  +  1;  int  c  =  getChar();  return  c  +  1;  }	  return    c    +    1;    int    c    =    getChar();    return    c    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	363	None	replace
1769	[BUG]  [BUGGY]  if(c  >=  END_OF_STREAM)  {  return  c  +  1;  }  else  {  int  c  =  getChar();  return  c  +  1;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >=  END_OF_STREAM)  {  return  c  +  1;  }  else  {  int  c  =  getChar();  return  c  +  1;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >=  END_OF_STREAM)  {  return  c  +  1;  }  else  {  int  c  =  getChar();  return  c  +  1;  }	  return    c    +    1;    int    c    =    getChar();    return    c    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	363	None	replace
1770	[BUG]  [BUGGY]  if(c  >=  END_OF_STREAM)  {  return  c  +  1;  int  c  =  getChar();  return  c  +  1;  }  else  {  return  END_OF_STREAM;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >=  END_OF_STREAM)  {  return  c  +  1;  int  c  =  getChar();  return  c  +  1;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >=  END_OF_STREAM)  {  return  c  +  1;  int  c  =  getChar();  return  c  +  1;  }  else  {  return  END_OF_STREAM;  }	  return    c    +    1;    int    c    =    getChar();    return    c    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	363	None	replace
1771	[BUG]  [BUGGY]  if(escape  ==  0)  {  int  escape  =  getEscapeChar();  if(escape!=  null)  {  return  escape;  }  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(escape  ==  0)  {  int  escape  =  getEscapeChar();  if(escape!=  null)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(escape  ==  0)  {  int  escape  =  getEscapeChar();  if(escape!=  null)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeChar();    if(escape!=    null)    {    return    escape;    }    	non-compiled	[CE]  illegal  start  of  expression	232	None	replace
1772	[BUG]  [BUGGY]  if(escape!=  0)  {  int  escape  =  getEscapeChar();  if(escape!=  null)  {  return  escape;  }  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(escape!=  0)  {  int  escape  =  getEscapeChar();  if(escape!=  null)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(escape!=  0)  {  int  escape  =  getEscapeChar();  if(escape!=  null)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeChar();    if(escape!=    null)    {    return    escape;    }    	non-compiled	[CE]  illegal  start  of  expression	232	None	replace
1773	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  c;  }  [CE]  missing  return  statement  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  c;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeChar();    if(escape!=    null)    {    return    escape;    }    	non-compiled	[CE]  missing  return  statement	232	None	replace
1774	[BUG]  [BUGGY]  return  CSVFormat.START_OBJECT;  [CE]  cannot  find  symbol  START_OBJECT  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.START_OBJECT;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.START_OBJECT;	  return    CSVFormat.START_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  START_OBJECT	5	None	replace
1775	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM  *  3;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM  *  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_STREAM  *  3;	  return    END_OF_STREAM    ||    END_OF_STREAM    *    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	358	None	replace
1776	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM  *  2  +  4;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM  *  2  +  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_STREAM  *  2  +  4;	  return    END_OF_STREAM    ||    END_OF_STREAM    *    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	358	None	replace
1777	[BUG]  [BUGGY]  return  c  +  2;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  2;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  2;  int  c  =  getSurroundingSpaces().size();	  return    c    +    1;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	37	None	replace
1778	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM  *  1;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM  *  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_STREAM  *  1;	  return    END_OF_STREAM    ||    END_OF_STREAM    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	357	None	replace
1779	[BUG]  [BUGGY]  return  c  +  3;  int  c  =  Integer.MAX_VALUE;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  3;  int  c  =  Integer.MAX_VALUE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    3;    int  c  =  Integer.MAX_VALUE;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	86	None	add
1780	[BUG]  [BUGGY]  return  c  +  3;  int  c  =  getChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  3;  int  c  =  getChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    3;    int  c  =  getChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	86	None	add
1781	[BUG]  [BUGGY]  return  c  +  3;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  3;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    3;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	86	None	add
1782	[BUG]  [BUGGY]  return  c  +  3;  Integer  c  +  3;  [CE]  ';'  expected  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  3;  Integer  c  +  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    3;    Integer  c  +  3;	  	non-compiled	[CE]  ';'  expected	86	None	add
1783	[BUG]  [BUGGY]  return  c  >=  0?  c  :  END_OF_STREAM;  int  c  =  getCurrentIndex();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  c  :  END_OF_STREAM;  int  c  =  getCurrentIndex();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    c    :    END_OF_STREAM;    int  c  =  getCurrentIndex();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	141	None	add
1784	[BUG]  [BUGGY]  return  c  >=  0?  c  :  END_OF_STREAM;  int  c  =  getSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  c  :  END_OF_STREAM;  int  c  =  getSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    c    :    END_OF_STREAM;    int  c  =  getSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	141	None	add
1785	[BUG]  [BUGGY]  return  c  >=  0?  c  :  END_OF_STREAM;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  c  :  END_OF_STREAM;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    c    :    END_OF_STREAM;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	141	None	add
1786	[BUG]  [BUGGY]  return  c  >=  0?  c  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  c  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    c    :    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	141	None	add
1787	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  }	  return    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	128	None	replace
1788	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  }	  return    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	128	None	replace
1789	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  }	  return    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	128	None	replace
1790	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getEscapeSurroundingSpaces();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getEscapeSurroundingSpaces();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getEscapeSurroundingSpaces();  }	  return    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	128	None	replace
1791	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  escapeSurroundingSpaces.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  break;  }  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  i  =  0,  len  =  escapeSurroundingSpaces.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  break;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  i  =  0,  len  =  escapeSurroundingSpaces.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  break;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	333	None	replace
1792	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreSurroundingSpaces  &&!ignoreEmptyLines)  {  break;  }  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreSurroundingSpaces  &&!ignoreEmptyLines)  {  break;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreSurroundingSpaces  &&!ignoreEmptyLines)  {  break;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	333	None	replace
1793	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  break;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  break;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	333	None	replace
1794	[BUG]  [BUGGY]  if(c  ==  'n')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	333	None	replace
1795	[BUG]  [BUGGY]  if(c  ==  'n')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&!ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&!ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&!ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	333	None	replace
1796	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignor  [CE]  ')'  expected  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignor  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignor	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  ')'  expected	333	None	replace
1797	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&!ignor  [CE]  ')'  expected  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&!ignor  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&!ignor	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  ')'  expected	333	None	replace
1798	[BUG]  [BUGGY]  return  c  <  =  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  [CE]  illegal  start  of  expression  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  =  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  =  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;	  return    c    &    END_OF_STREAM;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
1799	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpaces().length;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpaces().length;	  return    c    &    END_OF_STREAM;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	44	None	replace
1800	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  ==  END_SURroundingSpaces;  [CE]  cannot  find  symbol  END_SURroundingSpaces  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  ==  END_SURroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  ==  END_SURroundingSpaces;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_SURroundingSpaces	268	None	replace
1801	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces();  return  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces();  return  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces();  return  END_OF_STREAM;	  return    END_OF_STREAM;    Integer    c    =    getEscapeSurroundingSpaces();    return    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	260	None	replace
1802	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpaces();  return  c  &  END_OF_STREAM  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpaces();  return  c  &  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    +    1;    int  c  =  getSurroundingSpaces();  return  c  &  END_OF_STREAM  +  1;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	100	None	add
1803	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  1;  int  c  =  Integer.MAX_VALUE;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  1;  int  c  =  Integer.MAX_VALUE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    +    1;    int  c  =  Integer.MAX_VALUE;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	100	None	add
1804	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  1;  int  c  =  Integer.parseInt(text.getChars());  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  1;  int  c  =  Integer.parseInt(text.getChars());  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    +    1;    int  c  =  Integer.parseInt(text.getChars());	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	100	None	add
1805	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  1;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  1;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    +    1;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	100	None	add
1806	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpaces();  return  c  &  END_OF_STREAM  +  2;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpaces();  return  c  &  END_OF_STREAM  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    +    1;    int  c  =  getSurroundingSpaces();  return  c  &  END_OF_STREAM  +  2;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	100	None	add
1807	[BUG]  [BUGGY]  return  c  +  4;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  4;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  4;  int  c  =  getEscapeChar();	  return    c    +    2;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	241	None	replace
1808	[BUG]  [BUGGY]  return  c  +  1;  Integer  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  1;  Integer  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  1;  Integer  c  =  getEscapeChar();	  return    c    +    2;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	241	None	replace
1809	[BUG]  [BUGGY]  return  c  >  0?  1  :  escape(c  +  1);  [CE]  cannot  find  symbol  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  escape(c  +  1);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  escape(c  +  1);	  return    c    >    0?    1    :    escape(c);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
1810	[BUG]  [BUGGY]  result  =  0;  [CE]  cannot  find  symbol  result  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result  =  0;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result  =  0;	  result    =    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  result	4	None	replace
1811	[BUG]  [BUGGY]  result  =  END_OF_STREAM  *  2;  [CE]  cannot  find  symbol  result  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result  =  END_OF_STREAM  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result  =  END_OF_STREAM  *  2;	  result    =    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  result	4	None	replace
1812	[BUG]  [BUGGY]  while(c  <  =  END_OF_STREAM)  {  c  =  getSurroundingSpaces().size();  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  =  END_OF_STREAM)  {  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  =  END_OF_STREAM)  {  c  =  getSurroundingSpaces().size();	  return    BACKSPACE;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
1813	[BUG]  [BUGGY]  while(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getSurroundingSpaces().size();  [CE]  illegal  start  of  expression  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getSurroundingSpaces().size();	  return    BACKSPACE;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
1814	[BUG]  [BUGGY]  default:  return  BACKSPACE;  int  c  =  getSurroundingSpaces().size();  [CE]  duplicate  default  label  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  default:  return  BACKSPACE;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	default:  return  BACKSPACE;  int  c  =  getSurroundingSpaces().size();	  return    BACKSPACE;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  duplicate  default  label	172	None	replace
1815	[BUG]  [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    END_OF_STREAM;    int  c  =  getCurrentSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	96	None	add
1816	[BUG]  [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  getCurrentIndex();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  getCurrentIndex();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    END_OF_STREAM;    int  c  =  getCurrentIndex();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	96	None	add
1817	[BUG]  [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  getSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  getSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    END_OF_STREAM;    int  c  =  getSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	96	None	add
1818	[BUG]  [BUGGY]  return  c  -  3;  int  c  =  Integer.MAX_VALUE;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  3;  int  c  =  Integer.MAX_VALUE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    3;    int  c  =  Integer.MAX_VALUE;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	118	None	add
1819	[BUG]  [BUGGY]  return  c  -  3;  Integer  c  -  3;  [CE]  ';'  expected  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  3;  Integer  c  -  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    3;    Integer  c  -  3;	  	non-compiled	[CE]  ';'  expected	118	None	add
1820	[BUG]  [BUGGY]  return  c  -  3;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  3;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    3;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	118	None	add
1821	[BUG]  [BUGGY]  return  c  -  3;  int  c  =  getChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  3;  int  c  =  getChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    3;    int  c  =  getChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	118	None	add
1822	[BUG]  [BUGGY]  return  c;  result  =  END_OF_STREAM;  [CE]  cannot  find  symbol  result  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c;  result  =  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c;  result  =  END_OF_STREAM;	  return    END_OF_STREAM;    result    =    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  result	126	None	replace
1823	[BUG]  [BUGGY]  return  escape;  result  =  END_OF_STREAM;  [CE]  cannot  find  symbol  result  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  escape;  result  =  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  escape;  result  =  END_OF_STREAM;	  return    END_OF_STREAM;    result    =    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  result	126	None	replace
1824	[BUG]  [BUGGY]  result  =  END_OF_STREAM.result;  [CE]  cannot  find  symbol  result  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result  =  END_OF_STREAM.result;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result  =  END_OF_STREAM.result;	  return    END_OF_STREAM;    result    =    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  result	126	None	replace
1825	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM.length;  [CE]  int  cannot  be  dereferenced  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  END_OF_STREAM.length;	  return    c    &    END_OF_STREAM;    return    c    &    END_OF_STREAM;    	non-compiled	[CE]  int  cannot  be  dereferenced	321	None	replace
1826	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  %  END_OF_STREAM  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  %  END_OF_STREAM  +  2;	  return    c    &    END_OF_STREAM    +    2;    	compilable	  [FE]  (entry  2)  	272	5	replace
1827	[BUG]  [BUGGY]  return  c  %  END_OF_STREAM  +  2;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  %  END_OF_STREAM  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  %  END_OF_STREAM  +  2;	  return    c    &    END_OF_STREAM    +    2;    	compilable	  [FE]  (entry  2)  	272	5	replace
1828	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  <  =  END_OF_Escape;  [CE]  illegal  start  of  expression  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  <  =  END_OF_Escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  <  =  END_OF_Escape;	  return    c    *    2;    	non-compiled	[CE]  illegal  start  of  expression	326	None	replace
1829	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  <  =  END_OF_SURroundingSpaces;  [CE]  illegal  start  of  expression  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  <  =  END_OF_SURroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  <  =  END_OF_SURroundingSpaces;	  return    c    *    2;    	non-compiled	[CE]  illegal  start  of  expression	326	None	replace
1830	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  <  =  END_OF_SURroundingSpaces);  [CE]  illegal  start  of  expression  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  <  =  END_OF_SURroundingSpaces);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  <  =  END_OF_SURroundingSpaces);	  return    c    *    2;    	non-compiled	[CE]  illegal  start  of  expression	326	None	replace
1831	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  *  2;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  *  2;	  return    c    *    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	326	None	replace
1832	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  END;  [CE]  duplicate  case  label  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  END;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  END;	  case    END_OF_STREAM:    return    BACKSPACE;    	non-compiled	[CE]  duplicate  case  label	2	None	replace
1833	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  CSVFormat.DEFAULT;  [CE]  duplicate  case  label  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  CSVFormat.DEFAULT;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  CSVFormat.DEFAULT;	  case    END_OF_STREAM:    return    BACKSPACE;    	non-compiled	[CE]  duplicate  case  label	2	None	replace
1834	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  end;  [CE]  duplicate  case  label  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  end;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  end;	  case    END_OF_STREAM:    return    BACKSPACE;    	non-compiled	[CE]  duplicate  case  label	2	None	replace
1835	[BUG]  [BUGGY]  return  c  +  END_OF_STREAM;  return  c  +  END_OF_STREAM;  [CE]  unreachable  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  END_OF_STREAM;  return  c  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    END_OF_STREAM;    return  c  +  END_OF_STREAM;	  	non-compiled	[CE]  unreachable  statement	77	None	add
1836	[BUG]  [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  Integer.MAX_VALUE;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  Integer.MAX_VALUE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    END_OF_STREAM;    int  c  =  Integer.MAX_VALUE;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	77	None	add
1837	[BUG]  [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  Integer.parseInt(getEscapeChar());  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  Integer.parseInt(getEscapeChar());  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    END_OF_STREAM;    int  c  =  Integer.parseInt(getEscapeChar());	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	77	None	add
1838	[BUG]  [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  Integer.parseInt(text.getChars());  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  Integer.parseInt(text.getChars());  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    END_OF_STREAM;    int  c  =  Integer.parseInt(text.getChars());	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	77	None	add
1839	[BUG]  [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    END_OF_STREAM;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	77	None	add
1840	[BUG]  [BUGGY]  return  this.escapeEmptyLines?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  cannot  find  symbol  escapeEmptyLines  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.escapeEmptyLines?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.escapeEmptyLines?  END_OF_STREAM  :  END_OF_STREAM;	  return    this.escapeSurroundingSpaces?    END_OF_STREAM    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  escapeEmptyLines	206	None	replace
1841	[BUG]  [BUGGY]  return  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  incompatible  types  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;	  return    this.escapeSurroundingSpaces?    END_OF_STREAM    :    END_OF_STREAM;    	non-compiled	[CE]  incompatible  types	206	None	replace
1842	[BUG]  [BUGGY]  default:  return  BACKSPACE;  Integer  c  =  in.readInt();  [CE]  duplicate  default  label  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  default:  return  BACKSPACE;  Integer  c  =  in.readInt();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	default:  return  BACKSPACE;  Integer  c  =  in.readInt();	  return    BACKSPACE;    Integer    c    =    in.readInt();    	non-compiled	[CE]  duplicate  default  label	168	None	replace
1843	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  BACKSPACE;  Integer  c  =  in.readInt();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  BACKSPACE;  Integer  c  =  in.readInt();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  BACKSPACE;  Integer  c  =  in.readInt();  }	  return    BACKSPACE;    Integer    c    =    in.readInt();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	168	None	replace
1844	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  BACKSPACE;  Integer  c  =  in.readInt();  [CE]  duplicate  case  label  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  BACKSPACE;  Integer  c  =  in.readInt();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  BACKSPACE;  Integer  c  =  in.readInt();	  return    BACKSPACE;    Integer    c    =    in.readInt();    	non-compiled	[CE]  duplicate  case  label	168	None	replace
1845	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  in.readInt();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  in.readInt();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  in.readInt();  }	  return    BACKSPACE;    Integer    c    =    in.readInt();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	168	None	replace
1846	[BUG]  [BUGGY]  while(c!=  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  in.readInt();  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c!=  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  in.readInt();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c!=  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  in.readInt();	  return    BACKSPACE;    Integer    c    =    in.readInt();    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
1847	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  in.readInt();  }  else  {  throw  new  IOException( " ");  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  in.readInt();  }  else  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  in.readInt();  }  else  {  throw  new  IOException( " ");  }	  return    BACKSPACE;    Integer    c    =    in.readInt();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	168	None	replace
1848	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM  +  1;	  return    c    >=    0?    END_OF_STREAM    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	215	3	replace
1849	[BUG]  [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM  +  1;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM  +  1;	  return    c    >=    0?    END_OF_STREAM    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	215	3	replace
1850	[BUG]  [BUGGY]  return  c  >  0?  c  :  END_OF_STREAM  +  1;  c  >  0?  c  :  END_OF_STREAM;  [CE]  not  a  statement  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  c  :  END_OF_STREAM  +  1;  c  >  0?  c  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  c  :  END_OF_STREAM  +  1;  c  >  0?  c  :  END_OF_STREAM;	  return    c    >    0?    c    :    END_OF_STREAM;    c    >    0?    c    :    END_OF_STREAM;    	non-compiled	[CE]  not  a  statement	46	None	replace
1851	[BUG]  [BUGGY]  return  c  >  0?  c  :  END_OF_STREAM;  c  >  0?  c  :  END_OF_STREAM  +  1;  [CE]  not  a  statement  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  c  :  END_OF_STREAM;  c  >  0?  c  :  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  c  :  END_OF_STREAM;  c  >  0?  c  :  END_OF_STREAM  +  1;	  return    c    >    0?    c    :    END_OF_STREAM;    c    >    0?    c    :    END_OF_STREAM;    	non-compiled	[CE]  not  a  statement	46	None	replace
1852	[BUG]  [BUGGY]  return  c  >  0?  c  :  END_OF_STREAM;  c  >  0?  b  :  END_OF_STREAM;  [CE]  not  a  statement  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  c  :  END_OF_STREAM;  c  >  0?  b  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  c  :  END_OF_STREAM;  c  >  0?  b  :  END_OF_STREAM;	  return    c    >    0?    c    :    END_OF_STREAM;    c    >    0?    c    :    END_OF_STREAM;    	non-compiled	[CE]  not  a  statement	46	None	replace
1853	[BUG]  [BUGGY]  return  b  &  END_OF_STREAM;  [CE]  cannot  find  symbol  b  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  b  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  b  &  END_OF_STREAM;	  return    entry    &    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  b	291	None	replace
1854	[BUG]  [BUGGY]  return  END_OF_STREAM  &  END_OF_SPACE;  [CE]  cannot  find  symbol  END_OF_SPACE  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  &  END_OF_SPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  &  END_OF_SPACE;	  return    entry    &    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_SPACE	291	None	replace
1855	[BUG]  [BUGGY]  return  s  &  END_OF_STREAM;  [CE]  cannot  find  symbol  s  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  s  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  s  &  END_OF_STREAM;	  return    entry    &    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  s	291	None	replace
1856	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  1  :  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c!=  0?  1  :  c  +  1;	  return    c    >    0?    1    :    c    +    1;    	compilable	  [FE]  (entry  2)  	308	5	replace
1857	[BUG]  [BUGGY]  return  c!=  0?  1  :  c  +  1;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  1  :  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c!=  0?  1  :  c  +  1;	  return    c    >    0?    1    :    c    +    1;    	compilable	  [FE]  (entry  2)  	308	5	replace
1858	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  ignoreEmptyLines);  [CE]  cannot  find  symbol  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  ignoreEmptyLines);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(c,  ignoreEmptyLines);	  int    delimiter    =    readEscapeSurroundingSpaces(c);    	non-compiled	[CE]  cannot  find  symbol	286	None	replace
1859	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(outline);  [CE]  cannot  find  symbol  outline  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(outline);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(outline);	  int    delimiter    =    readEscapeSurroundingSpaces(c);    	non-compiled	[CE]  cannot  find  symbol  outline	286	None	replace
1860	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(encodeEscapeChar(c));  [CE]  cannot  find  symbol  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(encodeEscapeChar(c));  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(encodeEscapeChar(c));	  int    delimiter    =    readEscapeSurroundingSpaces(c);    	non-compiled	[CE]  cannot  find  symbol	286	None	replace
1861	[BUG]  [BUGGY]  if(escape  ==  0)  {  int  escape  =  getEscapeChar();  if(escape!=  0)  {  return  escape;  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(escape  ==  0)  {  int  escape  =  getEscapeChar();  if(escape!=  0)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(escape  ==  0)  {  int  escape  =  getEscapeChar();  if(escape!=  0)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeChar();    if(escape!=    0)    {    return    escape;    }    	non-compiled	[CE]  illegal  start  of  expression	236	None	replace
1862	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_SPACE;  [CE]  cannot  find  symbol  END_OF_SPACE  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_SPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  END_OF_STREAM  :  END_OF_SPACE;	  return    c!=    0?    c    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_SPACE	144	None	replace
1863	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_RUNNSPACE;  [CE]  cannot  find  symbol  END_OF_RUNNSPACE  [FE]      Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_RUNNSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  END_OF_STREAM  :  END_OF_RUNNSPACE;	  return    c!=    0?    c    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_RUNNSPACE	144	None	replace
1864	[BUG]  [BUGGY]  return  c  >  0?  1  :  escape;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  escape;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    escape;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	303	None	add
1865	[BUG]  [BUGGY]  return  c  >  0?  1  :  escape;  int  c  =  getChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  escape;  int  c  =  getChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    escape;    int  c  =  getChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	303	None	add
1866	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException(   "   ");  }  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " ".);  }  [CE]  <identifier>  expected  [FE]    IOException    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException(   "   ");  }  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " ".);  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    else    {    throw    new    IOException(   "   ");    }    if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	203	None	add
1867	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  }	  return    END_OF_STREAM;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	127	None	replace
1868	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  }  else  {  throw  new  IOException( " ");  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  }  else  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  }  else  {  throw  new  IOException( " ");  }	  return    END_OF_STREAM;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	127	None	replace
1869	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getSurroundingSpaces();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getSurroundingSpaces();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getSurroundingSpaces();  }	  return    END_OF_STREAM;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	127	None	replace
1870	[BUG]  [BUGGY]  while(c  <  END_OF_STREAM)  {  c  =  getSurroundingSpaces();  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  END_OF_STREAM)  {  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  END_OF_STREAM)  {  c  =  getSurroundingSpaces();	  return    END_OF_STREAM;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
1871	[BUG]  [BUGGY]  while(c  <  =  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }  [CE]  illegal  start  of  expression  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  =  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  =  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }	  if(c    ==    END_OF_STREAM)    {    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
1872	[BUG]  [BUGGY]  while(c  <  END_OF_STREAM  ||  c  >  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }  [CE]  missing  return  statement  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  END_OF_STREAM  ||  c  >  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  END_OF_STREAM  ||  c  >  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }	  if(c    ==    END_OF_STREAM)    {    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    }    	non-compiled	[CE]  missing  return  statement	18	None	replace
1873	[BUG]  [BUGGY]  while(c  <  =  END_EOF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }  [CE]  illegal  start  of  expression  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  =  END_EOF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  =  END_EOF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }	  if(c    ==    END_OF_STREAM)    {    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
1874	[BUG]  [BUGGY]  while(c  <  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  [CE]  illegal  start  of  expression  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");	  if(c    ==    END_OF_STREAM)    {    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
1875	[BUG]  [BUGGY]  c  =  getSurroundingSpace(bufferedReader);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getSurroundingSpace(bufferedReader);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getSurroundingSpace(bufferedReader);	  return    BACKSPACE;    int    c    =    getSurroundingSpace(c);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	169	None	replace
1876	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace(bufferedReader);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace(bufferedReader);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace(bufferedReader);	  return    BACKSPACE;    int    c    =    getSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	169	None	replace
1877	[BUG]  [BUGGY]  return  this.escapeEmptyLines?  0  :  END_OF_STREAM;  [CE]  cannot  find  symbol  escapeEmptyLines  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.escapeEmptyLines?  0  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.escapeEmptyLines?  0  :  END_OF_STREAM;	  return    this.escapeSurroundingSpaces?    0    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  escapeEmptyLines	207	None	replace
1878	[BUG]  [BUGGY]  return  END_OF_STREAM?  0  :  this.escapeSurroundingSpaces;  [CE]  incompatible  types  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM?  0  :  this.escapeSurroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM?  0  :  this.escapeSurroundingSpaces;	  return    this.escapeSurroundingSpaces?    0    :    END_OF_STREAM;    	non-compiled	[CE]  incompatible  types	207	None	replace
1879	[BUG]  [BUGGY]  Integer  c  =  getSurroundingSpace();  return  c  -  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  getSurroundingSpace();  return  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  getSurroundingSpace();  return  c  -  1;	  return    c    -    1;    int    c    =    getSurroundingSpace();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	312	None	replace
1880	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace().length;  return  c  -  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace().length;  return  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace().length;  return  c  -  1;	  return    c    -    1;    int    c    =    getSurroundingSpace();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	312	None	replace
1881	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace();  return  c  -  2;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace();  return  c  -  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace();  return  c  -  2;	  return    c    -    1;    int    c    =    getSurroundingSpace();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	312	None	replace
1882	[BUG]  [BUGGY]  c  >  0?  1  :  c;  return  c  >  0?  1  :  c;  [CE]  not  a  statement  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  >  0?  1  :  c;  return  c  >  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  >  0?  1  :  c;  return  c  >  0?  1  :  c;	  return    c    >    0?    1    :    c;    return    c    >    0?    1    :    c;    	non-compiled	[CE]  not  a  statement	292	None	replace
1883	[BUG]  [BUGGY]  c  >  0?  1  :  c;  return  c  >  0?  1;  [CE]  not  a  statement  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  >  0?  1  :  c;  return  c  >  0?  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  >  0?  1  :  c;  return  c  >  0?  1;	  return    c    >    0?    1    :    c;    return    c    >    0?    1    :    c;    	non-compiled	[CE]  not  a  statement	292	None	replace
1884	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace();  return  END_OF_STREAM  +  char.length;  [CE]  class  expected  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace();  return  END_OF_STREAM  +  char.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace();  return  END_OF_STREAM  +  char.length;	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpace();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  class  expected	188	None	replace
1885	[BUG]  [BUGGY]  return  c  -  6;  Integer  c  -  6;  [CE]  ';'  expected  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  6;  Integer  c  -  6;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    6;    Integer  c  -  6;	  	non-compiled	[CE]  ';'  expected	116	None	add
1886	[BUG]  [BUGGY]  return  c  -  6;  int  c  =  Integer.MAX_VALUE;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  6;  int  c  =  Integer.MAX_VALUE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    6;    int  c  =  Integer.MAX_VALUE;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	116	None	add
1887	[BUG]  [BUGGY]  return  c  -  6;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  6;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    6;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	116	None	add
1888	[BUG]  [BUGGY]  return  c  -  6;  int  c  =  getChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  6;  int  c  =  getChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    6;    int  c  =  getChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	116	None	add
1889	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_SPACE;  [CE]  cannot  find  symbol  END_SPACE  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_SPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  END_SPACE;	  return    c    >    0?    1    :    END_OF_SURroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  END_SPACE	252	None	replace
1890	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'e'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'e'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	201	None	replace
1891	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	201	None	replace
1892	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	201	None	replace
1893	[BUG]  [BUGGY]  if(c  ==  'u'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'u'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'u'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	201	None	replace
1894	[BUG]  [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    1    :    c;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	254	None	add
1895	[BUG]  [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  getCurrentIndex();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  getCurrentIndex();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    1    :    c;    int  c  =  getCurrentIndex();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	254	None	add
1896	[BUG]  [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  getSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  getSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    1    :    c;    int  c  =  getSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	254	None	add
1897	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  't')  {  return  delimiter;  }  [CE]  missing  return  statement  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  't')  {  return  delimiter;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  't')  {  return  delimiter;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    return    delimiter;    }    	non-compiled	[CE]  missing  return  statement	205	None	replace
1898	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  't')  {  return  0;  }  [CE]  missing  return  statement  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  't')  {  return  0;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  't')  {  return  0;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    return    delimiter;    }    	non-compiled	[CE]  missing  return  statement	205	None	replace
1899	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  't')  {  return  -1;  }  [CE]  missing  return  statement  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  't')  {  return  -1;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  't')  {  return  -1;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    return    delimiter;    }    	non-compiled	[CE]  missing  return  statement	205	None	replace
1900	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  't')  {  return  commmentStart;  }  [CE]  missing  return  statement  [FE]                                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  't')  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  't')  {  return  commmentStart;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    return    delimiter;    }    	non-compiled	[CE]  missing  return  statement	205	None	replace
1901	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r')  {  return  delimiter;  }  [CE]  missing  return  statement  [FE]                                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r')  {  return  delimiter;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r')  {  return  delimiter;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    return    delimiter;    }    	non-compiled	[CE]  missing  return  statement	205	None	replace
1902	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  't')  {  return  EOF;  }  [CE]  cannot  find  symbol  EOF  [FE]                                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  't')  {  return  EOF;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  't')  {  return  EOF;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    return    delimiter;    }    	non-compiled	[CE]  cannot  find  symbol  EOF	205	None	replace
1903	[BUG]  [BUGGY]  c  >  0?  1  :  c;  for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  [CE]  not  a  statement  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  >  0?  1  :  c;  for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  >  0?  1  :  c;  for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    2;    ++c)    {    if(!ignoreEmptyLines)    {    return    c    >    0?    1    :    c;    }    	non-compiled	[CE]  not  a  statement	294	None	replace
1904	[BUG]  [BUGGY]  if(c  >  0)  {  return  c  >  0?  1  :  c;  for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  }  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  0)  {  return  c  >  0?  1  :  c;  for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  0)  {  return  c  >  0?  1  :  c;  for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  }	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    2;    ++c)    {    if(!ignoreEmptyLines)    {    return    c    >    0?    1    :    c;    }    	non-compiled	[CE]  illegal  start  of  expression	294	None	replace
1905	[BUG]  [BUGGY]  return  c  <  0?  1  :  c;  for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  c;  for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  0?  1  :  c;  for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    2;    ++c)    {    if(!ignoreEmptyLines)    {    return    c    >    0?    1    :    c;    }    	non-compiled	[CE]  illegal  start  of  expression	294	None	replace
1906	[BUG]  [BUGGY]  return  END_OF_STREAM?  -1  :  this.encodeEscapeSurroundingSpaces;  [CE]  incompatible  types  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM?  -1  :  this.encodeEscapeSurroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM?  -1  :  this.encodeEscapeSurroundingSpaces;	  return    this.encodeEscapeSurroundingSpaces?    -1    :    END_OF_STREAM;    	non-compiled	[CE]  incompatible  types	122	None	replace
1907	[BUG]  [BUGGY]  c  >  0?  1  :  c;  (c  >  0?  1  :  c);  [CE]  not  a  statement  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  >  0?  1  :  c;  (c  >  0?  1  :  c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  >  0?  1  :  c;  (c  >  0?  1  :  c);	  return    c    >    0?    1    :    c;    (c    >    0?    1    :    c);    	non-compiled	[CE]  not  a  statement	163	None	replace
1908	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  (c  >  0?  1  :  c);  [CE]  not  a  statement  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  (c  >  0?  1  :  c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  END_OF_STREAM;  (c  >  0?  1  :  c);	  return    c    >    0?    1    :    c;    (c    >    0?    1    :    c);    	non-compiled	[CE]  not  a  statement	163	None	replace
1909	[BUG]  [BUGGY]  return  c  >  0?  1  :  c  +  1;  (c  >  0?  1  :  c);  [CE]  not  a  statement  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c  +  1;  (c  >  0?  1  :  c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  c  +  1;  (c  >  0?  1  :  c);	  return    c    >    0?    1    :    c;    (c    >    0?    1    :    c);    	non-compiled	[CE]  not  a  statement	163	None	replace
1910	[BUG]  [BUGGY]  return  c  >  0?  1  :  b;  (c  >  0?  1  :  c);  [CE]  not  a  statement  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  b;  (c  >  0?  1  :  c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  b;  (c  >  0?  1  :  c);	  return    c    >    0?    1    :    c;    (c    >    0?    1    :    c);    	non-compiled	[CE]  not  a  statement	163	None	replace
1911	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  end);  break;  [CE]  cannot  find  symbol  end  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  end);  break;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(c,  end);  break;	  int    delimiter    =    readEscapeSurroundingSpaces(c,    escape);    break;    	non-compiled	[CE]  cannot  find  symbol  end	289	None	replace
1912	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  END);  break;  [CE]  cannot  find  symbol  END  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  END);  break;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(c,  END);  break;	  int    delimiter    =    readEscapeSurroundingSpaces(c,    escape);    break;    	non-compiled	[CE]  cannot  find  symbol  END	289	None	replace
1913	[BUG]  [BUGGY]  return  c  -  1,  END_OF_STREAM;  [CE]  ';'  expected  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1,  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  1,  END_OF_STREAM;	  return    c    -    1    +    1;    	non-compiled	[CE]  ';'  expected	302	None	replace
1914	[BUG]  [BUGGY]  return  c  -  1,  END_OF_STREAM  +  1;  [CE]  ';'  expected  [FE]      Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1,  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  1,  END_OF_STREAM  +  1;	  return    c    -    1    +    1;    	non-compiled	[CE]  ';'  expected	302	None	replace
1915	[BUG]  [BUGGY]  return  c  -  1,  END_OF_STREAM,  END_OF_STREAM  +  1;  [CE]  ';'  expected  [FE]        Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1,  END_OF_STREAM,  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  1,  END_OF_STREAM,  END_OF_STREAM  +  1;	  return    c    -    1    +    1;    	non-compiled	[CE]  ';'  expected	302	None	replace
1916	[BUG]  [BUGGY]  return  c  -  1,  END_OF_STREAM,  END_OF_STREAM);  [CE]  ';'  expected  [FE]          Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1,  END_OF_STREAM,  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  1,  END_OF_STREAM,  END_OF_STREAM);	  return    c    -    1    +    1;    	non-compiled	[CE]  ';'  expected	302	None	replace
1917	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  BACKSPACE;  int  c  =  getEscapeChar();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  BACKSPACE;  int  c  =  getEscapeChar();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  BACKSPACE;  int  c  =  getEscapeChar();  }	  return    BACKSPACE;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	226	None	replace
1918	[BUG]  [BUGGY]  if(c!=  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getEscapeChar();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c!=  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getEscapeChar();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c!=  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getEscapeChar();  }	  return    BACKSPACE;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	226	None	replace
1919	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  BACKSPACE;  int  c  =  getEscapeChar();  [CE]  duplicate  case  label  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  BACKSPACE;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  BACKSPACE;  int  c  =  getEscapeChar();	  return    BACKSPACE;    int    c    =    getEscapeChar();    	non-compiled	[CE]  duplicate  case  label	226	None	replace
1920	[BUG]  [BUGGY]  c  =  getEscapeSurroundingSpace(END_OF_STREAM);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getEscapeSurroundingSpace(END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getEscapeSurroundingSpace(END_OF_STREAM);	  return    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpace(c);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	131	None	replace
1921	[BUG]  [BUGGY]  return  c  +  5;  int  c  =  getChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  5;  int  c  =  getChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    5;    int  c  =  getChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	94	None	add
1922	[BUG]  [BUGGY]  return  c  +  5;  int  c  =  Integer.MAX_VALUE;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  5;  int  c  =  Integer.MAX_VALUE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    5;    int  c  =  Integer.MAX_VALUE;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	94	None	add
1923	[BUG]  [BUGGY]  return  c  +  5;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  5;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    5;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	94	None	add
1924	[BUG]  [BUGGY]  return  c  +  5;  Integer  c  +  5;  [CE]  ';'  expected  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  5;  Integer  c  +  5;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    5;    Integer  c  +  5;	  	non-compiled	[CE]  ';'  expected	94	None	add
1925	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces().size();  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	139	None	add
1926	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	139	None	add
1927	[BUG]  [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  getCommentStart();  [CE]  cannot  find  symbol  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  getCommentStart();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    commmentStart;    int  commmentStart  =  getCommentStart();	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
1928	[BUG]  [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  Integer.parseInt(quoteChar);  [CE]  no  suitable  method  found  for  parseInt(char)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  Integer.parseInt(quoteChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    commmentStart;    int  commmentStart  =  Integer.parseInt(quoteChar);	  	non-compiled	[CE]  no  suitable  method  found  for  parseInt(char)	80	None	add
1929	[BUG]  [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  getEscapeSurroundingSpaces().size();  [CE]  cannot  find  symbol  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  getEscapeSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    commmentStart;    int  commmentStart  =  getEscapeSurroundingSpaces().size();	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
1930	[BUG]  [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  getEscapeChar();  [CE]  cannot  find  symbol  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    commmentStart;    int  commmentStart  =  getEscapeChar();	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
1931	[BUG]  [BUGGY]  if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  }  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
1932	[BUG]  [BUGGY]  if(!ignoreSurroundingSpaces.contains(c))  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(!ignoreSurroundingSpaces.contains(c))  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(!ignoreSurroundingSpaces.contains(c))  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
1933	[BUG]  [BUGGY]  if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
1934	[BUG]  [BUGGY]  if(!ignoreSurroundingSpaces.contains(c))  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  }  [CE]  illegal  start  of  expression  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(!ignoreSurroundingSpaces.contains(c))  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(!ignoreSurroundingSpaces.contains(c))  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
1935	[BUG]  [BUGGY]  if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  return  c;  }  }  [CE]  illegal  start  of  expression  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  return  c;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  return  c;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
1936	[BUG]  [BUGGY]  if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  return  c;  }  [CE]  illegal  start  of  expression  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  return  c;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
1937	[BUG]  [BUGGY]  if(!ignoreSurroundingSpaces.contains(c))  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c  [CE]  ';'  expected  [FE]                            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(!ignoreSurroundingSpaces.contains(c))  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(!ignoreSurroundingSpaces.contains(c))  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    return    c;    }    	non-compiled	[CE]  ';'  expected	26	None	replace
1938	[BUG]  [BUGGY]  return  src.intValue()  +  1;  [CE]  cannot  find  symbol  src  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  src.intValue()  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  src.intValue()  +  1;	  return    END_OF_STREAM.intValue()    +    1;    	non-compiled	[CE]  cannot  find  symbol  src	107	None	replace
1939	[BUG]  [BUGGY]  escape  =  getEscapeSurroundingSpaces();  if(escape  <  escape)  {  return  escape;  }  [CE]  cannot  assign  a  value  to  final  variable  escape  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  escape  =  getEscapeSurroundingSpaces();  if(escape  <  escape)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	escape  =  getEscapeSurroundingSpaces();  if(escape  <  escape)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeSurroundingSpaces();    if(escape    >=    escape)    {    return    escape;    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  escape	234	None	replace
1940	[BUG]  [BUGGY]  return  this.ignoreEmptyLines  -  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreEmptyLines  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoreEmptyLines  -  1;	  return    this.ignoreEmptyLines;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	145	None	replace
1941	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  c  >  0?  1  :  c;  [CE]  not  a  statement  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  c  >  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  END_OF_STREAM;  c  >  0?  1  :  c;	  return    c    >    0?    1    :    c;    c    >    0?    1    :    c;    	non-compiled	[CE]  not  a  statement	158	None	replace
1942	[BUG]  [BUGGY]  int  c  >  0?  1  :  c;  c  >  0?  1  :  c;  [CE]  ';'  expected  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  >  0?  1  :  c;  c  >  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  >  0?  1  :  c;  c  >  0?  1  :  c;	  return    c    >    0?    1    :    c;    c    >    0?    1    :    c;    	non-compiled	[CE]  ';'  expected	158	None	replace
1943	[BUG]  [BUGGY]  return  c  >  0?  1  :  b;  c  >  0?  1  :  c;  [CE]  not  a  statement  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  b;  c  >  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  b;  c  >  0?  1  :  c;	  return    c    >    0?    1    :    c;    c    >    0?    1    :    c;    	non-compiled	[CE]  not  a  statement	158	None	replace
1944	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  int  c  =  getEscapeChar();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  int  c  =  getEscapeChar();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  int  c  =  getEscapeChar();  }	  return    END_OF_STREAM;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	258	None	replace
1945	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  int  c  =  getEscapeChar();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  int  c  =  getEscapeChar();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  int  c  =  getEscapeChar();  }	  return    END_OF_STREAM;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	258	None	replace
1946	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getEscapeChar();  }  else  {  throw  new  IOException( " ");  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getEscapeChar();  }  else  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getEscapeChar();  }  else  {  throw  new  IOException( " ");  }	  return    END_OF_STREAM;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	258	None	replace
1947	[BUG]  [BUGGY]  return  escape.longValue();  [CE]  char  cannot  be  dereferenced  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  escape.longValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  escape.longValue();	  return    END_OF_STREAM.longValue();    	non-compiled	[CE]  char  cannot  be  dereferenced	109	None	replace
1948	[BUG]  [BUGGY]  return  END_OF_STREAM.longValue()  +  2;  [CE]  int  cannot  be  dereferenced  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.longValue()  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.longValue()  +  2;	  return    END_OF_STREAM.longValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	109	None	replace
1949	[BUG]  [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	327	None	add
1950	[BUG]  [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentIndex();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentIndex();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getCurrentIndex();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	327	None	add
1951	[BUG]  [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	327	None	add
1952	[BUG]  [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	327	None	add
1953	[BUG]  [BUGGY]  return  END_OF_STREAM  +  ignorEmptyLines[c];  [CE]  cannot  find  symbol  ignorEmptyLines  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  ignorEmptyLines[c];  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  ignorEmptyLines[c];	  return    END_OF_STREAM    +    escapeSurroundingSpaces[c];    	non-compiled	[CE]  cannot  find  symbol  ignorEmptyLines	229	None	replace
1954	[BUG]  [BUGGY]  return  END_OF_STREAM  +  inscapeSurroundingSpaces[c];  [CE]  cannot  find  symbol  inscapeSurroundingSpaces  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  inscapeSurroundingSpaces[c];  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  inscapeSurroundingSpaces[c];	  return    END_OF_STREAM    +    escapeSurroundingSpaces[c];    	non-compiled	[CE]  cannot  find  symbol  inscapeSurroundingSpaces	229	None	replace
1955	[BUG]  [BUGGY]  return  c  -  2;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  2;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  2;  int  c  =  getEscapeChar();	  return    c    -    1;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	246	None	replace
1956	[BUG]  [BUGGY]  return  c  <  =  1;  int  c  =  getEscapeChar();  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  =  1;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  =  1;  int  c  =  getEscapeChar();	  return    c    -    1;    int    c    =    getEscapeChar();    	non-compiled	[CE]  illegal  start  of  expression	246	None	replace
1957	[BUG]  [BUGGY]  return  END_OF_STREAM  +  quoteChar;  int  quoteChar  =  getEscapeChar();  [CE]  cannot  find  symbol  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  quoteChar;  int  quoteChar  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    quoteChar;    int  quoteChar  =  getEscapeChar();	  	non-compiled	[CE]  cannot  find  symbol	84	None	add
1958	[BUG]  [BUGGY]  return  END_OF_STREAM  +  quoteChar;  int  quoteChar  =  Integer.toHexString(quoteChar);  [CE]  incompatible  types  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  quoteChar;  int  quoteChar  =  Integer.toHexString(quoteChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    quoteChar;    int  quoteChar  =  Integer.toHexString(quoteChar);	  	non-compiled	[CE]  incompatible  types	84	None	add
1959	[BUG]  [BUGGY]  return  END_OF_STREAM  +  quoteChar;  int  quoteChar  =  getSurroundingSpaces();  [CE]  cannot  find  symbol  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  quoteChar;  int  quoteChar  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    quoteChar;    int  quoteChar  =  getSurroundingSpaces();	  	non-compiled	[CE]  cannot  find  symbol	84	None	add
1960	[BUG]  [BUGGY]  return  END_OF_STREAM  +  quoteChar;  int  quoteChar  =  readEscape(in,  c);  [CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  quoteChar;  int  quoteChar  =  readEscape(in,  c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    quoteChar;    int  quoteChar  =  readEscape(in,  c);	  	non-compiled	[CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;	84	None	add
1961	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoredEmptyLines.contains(c))  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoredEmptyLines.contains(c))  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoredEmptyLines.contains(c))  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoredEmptyLines.contains(c))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	332	None	replace
1962	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoredEmptyLines.contains(c))  {  break;  }  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoredEmptyLines.contains(c))  {  break;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoredEmptyLines.contains(c))  {  break;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoredEmptyLines.contains(c))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	332	None	replace
1963	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoredEmptyLines.contains(c))  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoredEmptyLines.contains(c))  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoredEmptyLines.contains(c))  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoredEmptyLines.contains(c))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	332	None	replace
1964	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  -  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  END_OF_STREAM  -  c;	  return    c    -    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	97	5	replace
1965	[BUG]  [BUGGY]  return  END_OF_STREAM  -  c;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  -  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  -  c;	  return    c    -    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	97	5	replace
1966	[BUG]  [BUGGY]  return  EXPR_RESULT;  [CE]  cannot  find  symbol  EXPR_RESULT  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  EXPR_RESULT;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  EXPR_RESULT;	  return    CSVFormat.EXPR_RESULT;    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT	133	None	replace
1967	[BUG]  [BUGGY]  return  CSVFormat.EscapeSURroundingSpace;  [CE]  cannot  find  symbol  EscapeSURroundingSpace  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.EscapeSURroundingSpace;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.EscapeSURroundingSpace;	  return    CSVFormat.EXPR_RESULT;    	non-compiled	[CE]  cannot  find  symbol  EscapeSURroundingSpace	133	None	replace
1968	[BUG]  [BUGGY]  return  CSVFormat.Escaped;  [CE]  cannot  find  symbol  Escaped  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.Escaped;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.Escaped;	  return    CSVFormat.EXPR_RESULT;    	non-compiled	[CE]  cannot  find  symbol  Escaped	133	None	replace
1969	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  END_OF_STREAM  +  4;  [CE]  duplicate  case  label  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  END_OF_STREAM  +  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  END_OF_STREAM  +  4;	  return    END_OF_STREAM    +    1;    case    END_OF_STREAM:    return    END_OF_STREAM    +    1;    	non-compiled	[CE]  duplicate  case  label	315	None	replace
1970	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  END_OF_STREAM  +  3;  [CE]  duplicate  case  label  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  END_OF_STREAM  +  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  END_OF_STREAM  +  3;	  return    END_OF_STREAM    +    1;    case    END_OF_STREAM:    return    END_OF_STREAM    +    1;    	non-compiled	[CE]  duplicate  case  label	315	None	replace
1971	[BUG]  [BUGGY]  return  c  *  1;  c  -  1;  [CE]  not  a  statement  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  *  1;  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  *  1;  c  -  1;	  return    c    -    1;    c    -    1;    	non-compiled	[CE]  not  a  statement	150	None	replace
1972	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  |  1;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  |  1;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    |    1;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	104	None	add
1973	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  |  1;  int  c  =  getCurrentIndex();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  |  1;  int  c  =  getCurrentIndex();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    |    1;    int  c  =  getCurrentIndex();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	104	None	add
1974	[BUG]  [BUGGY]  return  END_OF_STREAM  +  DISABLED;  int  c  =  getSurroundingSpaces().size();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  DISABLED;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  DISABLED;  int  c  =  getSurroundingSpaces().size();	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	13	None	replace
1975	[BUG]  [BUGGY]  return  c  +  8;  int  c  =  getChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  8;  int  c  =  getChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    8;    int  c  =  getChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	90	None	add
1976	[BUG]  [BUGGY]  return  c  +  8;  int  c  =  Integer.MAX_VALUE;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  8;  int  c  =  Integer.MAX_VALUE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    8;    int  c  =  Integer.MAX_VALUE;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	90	None	add
1977	[BUG]  [BUGGY]  return  c  +  8;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  8;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    8;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	90	None	add
1978	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  in.length;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [CE]  illegal  start  of  expression  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  in.length;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  in.length;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }	  for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
1979	[BUG]  [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  [CE]  >  expected  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return	  for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  >  expected	20	None	replace
1980	[BUG]  [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  com  [CE]  >  expected  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  com  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  com	  for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  >  expected	20	None	replace
1981	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  in.readChar();  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [CE]  illegal  start  of  expression  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  in.readChar();  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  in.readChar();  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }	  for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
1982	[BUG]  [BUGGY]  int  c  =  getSurroundingSpaces();  return  END_OF_STREAM  +  d;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpaces();  return  END_OF_STREAM  +  d;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpaces();  return  END_OF_STREAM  +  d;	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpaces();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	186	None	replace
1983	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  END_OF_STREAM  *  2;	  return    END_OF_STREAM    +    2;    	compilable	  [FE]  (entry  2)  	72	5	replace
1984	[BUG]  [BUGGY]  return  END_OF_STREAM  *  2;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  *  2;	  return    END_OF_STREAM    +    2;    	compilable	  [FE]  (entry  2)  	72	5	replace
1985	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  quoteChar  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  END_OF_STREAM  +  quoteChar  +  2;	  return    END_OF_STREAM    +    quoteChar;    	compilable	  [FE]  (entry  2)  	85	5	replace
1986	[BUG]  [BUGGY]  return  END_OF_STREAM  +  quoteChar  +  2;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  quoteChar  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  quoteChar  +  2;	  return    END_OF_STREAM    +    quoteChar;    	compilable	  [FE]  (entry  2)  	85	5	replace
1987	[BUG]  [BUGGY]  return  END_OF_STREAM  +  quoteChar.length;  [CE]  char  cannot  be  dereferenced  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  quoteChar.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  quoteChar.length;	  return    END_OF_STREAM    +    quoteChar;    	non-compiled	[CE]  char  cannot  be  dereferenced	85	None	replace
1988	[BUG]  [BUGGY]  return  c  ||  END_OF_STREAM.equals(end);  [CE]  cannot  find  symbol  end  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ||  END_OF_STREAM.equals(end);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ||  END_OF_STREAM.equals(end);	  return    END_OF_STREAM    ||    END_OF_STREAM.equals(c);    	non-compiled	[CE]  cannot  find  symbol  end	356	None	replace
1989	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM.equals(DISABLED);  [CE]  int  cannot  be  dereferenced  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM.equals(DISABLED);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_STREAM.equals(DISABLED);	  return    END_OF_STREAM    ||    END_OF_STREAM.equals(c);    	non-compiled	[CE]  int  cannot  be  dereferenced	356	None	replace
1990	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM.equals(c  +  1);  [CE]  int  cannot  be  dereferenced  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM.equals(c  +  1);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_STREAM.equals(c  +  1);	  return    END_OF_STREAM    ||    END_OF_STREAM.equals(c);    	non-compiled	[CE]  int  cannot  be  dereferenced	356	None	replace
1991	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM.equals(escapeChar);  [CE]  cannot  find  symbol  escapeChar  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM.equals(escapeChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_STREAM.equals(escapeChar);	  return    END_OF_STREAM    ||    END_OF_STREAM.equals(c);    	non-compiled	[CE]  cannot  find  symbol  escapeChar	356	None	replace
1992	[BUG]  [BUGGY]  return  c  ||  END_OF_STREAM.equals(endSurroundingSpaces);  [CE]  cannot  find  symbol  endSurroundingSpaces  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ||  END_OF_STREAM.equals(endSurroundingSpaces);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ||  END_OF_STREAM.equals(endSurroundingSpaces);	  return    END_OF_STREAM    ||    END_OF_STREAM.equals(c);    	non-compiled	[CE]  cannot  find  symbol  endSurroundingSpaces	356	None	replace
1993	[BUG]  [BUGGY]  return  c  +  escapeSurroundingSpaces.length;  [CE]  cannot  find  symbol  escapeSurroundingSpaces  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  escapeSurroundingSpaces.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  escapeSurroundingSpaces.length;	  return    c    +    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  escapeSurroundingSpaces	78	None	replace
1994	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpaces();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpaces();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpaces();  }	  return    BACKSPACE;    Integer    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	225	None	replace
1995	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpaces();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpaces();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpaces();  }	  return    BACKSPACE;    Integer    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	225	None	replace
1996	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpaces();  [CE]  duplicate  case  label  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpaces();	  return    BACKSPACE;    Integer    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  duplicate  case  label	225	None	replace
1997	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpaces();  }  else  {  return  c;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpaces();  }  else  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpaces();  }  else  {  return  c;  }	  return    BACKSPACE;    Integer    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	225	None	replace
1998	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'e'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'e'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	199	None	replace
1999	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  0;  }  [CE]  missing  return  statement  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  0;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  0;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	199	None	replace
2000	[BUG]  [BUGGY]  if(c  ==  'u'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'u'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'u'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	199	None	replace
2001	[BUG]  [BUGGY]  Integer  c  =  getEscapeSurroundingSpaces();  return  c  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  getEscapeSurroundingSpaces();  return  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  getEscapeSurroundingSpaces();  return  c  +  1;	  return    c    +    1;    int    c    =    getEscapeSurroundingSpaces();    return    c    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	360	None	replace
2002	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM  +  length;  [CE]  cannot  find  symbol  length  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM  +  length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  END_OF_STREAM  +  length;	  return    c    >    0?    1    :    END_OF_STREAM.length;    	non-compiled	[CE]  cannot  find  symbol  length	253	None	replace
2003	[BUG]  [BUGGY]  return  c  +  endSurroundingSpaces;  [CE]  cannot  find  symbol  endSurroundingSpaces  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  endSurroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  endSurroundingSpaces;	  return    c    +    escapeSurroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  endSurroundingSpaces	134	None	replace
2004	[BUG]  [BUGGY]  return  c  +  END_OF_STREAM.length;  [CE]  int  cannot  be  dereferenced  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  END_OF_STREAM.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  END_OF_STREAM.length;	  return    c    +    escapeSurroundingSpaces;    	non-compiled	[CE]  int  cannot  be  dereferenced	134	None	replace
2005	[BUG]  [BUGGY]  return  c  +  END_EmptyLines;  [CE]  cannot  find  symbol  END_EmptyLines  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  END_EmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  END_EmptyLines;	  return    c    +    escapeSurroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  END_EmptyLines	134	None	replace
2006	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }  }  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	336	None	replace
2007	[BUG]  [BUGGY]  if(c  ==  'n')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	336	None	replace
2008	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }  }  [CE]  illegal  start  of  expression  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	336	None	replace
2009	[BUG]  [BUGGY]  if(c  ==  'n')  {  return  in;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }  }  [CE]  illegal  start  of  expression  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n')  {  return  in;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n')  {  return  in;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	336	None	replace
2010	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  this.commmentStart;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  END_OF_STREAM  +  this.commmentStart;	  return    END_OF_STREAM    +    c;    return    END_OF_STREAM    +    c;    	compilable	  [FE]  (entry  2)  	7	5	replace
2011	[BUG]  [BUGGY]  return  END_OF_STREAM  +  this.commmentStart;  [FE]  (entry  2)  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  this.commmentStart;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  this.commmentStart;	  return    END_OF_STREAM    +    c;    return    END_OF_STREAM    +    c;    	compilable	  [FE]  (entry  2)  	7	5	replace
2012	[BUG]  [BUGGY]  return  END_OF_STREAM  +  8;  int  c  =  getChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  8;  int  c  =  getChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    8;    int  c  =  getChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	277	None	add
2013	[BUG]  [BUGGY]  return  END_OF_STREAM  +  8;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  8;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    8;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	277	None	add
2014	[BUG]  [BUGGY]  return  END_OF_STREAM  +  8;  int  c  =  getSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  8;  int  c  =  getSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    8;    int  c  =  getSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	277	None	add
2015	[BUG]  [BUGGY]  return  END_OF_STREAM  +  8;  int  commmentStart  =  getCommentStart();  [CE]  cannot  find  symbol  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  8;  int  commmentStart  =  getCommentStart();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    8;    int  commmentStart  =  getCommentStart();	  	non-compiled	[CE]  cannot  find  symbol	277	None	add
2016	[BUG]  [BUGGY]  return  c  -  1  +  1;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1  +  1;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    1    +    1;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	301	None	add
2017	[BUG]  [BUGGY]  return  c  -  1  +  1;  int  c  =  getCurrentIndex();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1  +  1;  int  c  =  getCurrentIndex();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    1    +    1;    int  c  =  getCurrentIndex();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	301	None	add
2018	[BUG]  [BUGGY]  return  c  >  0?  1  :  DISABLED;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  DISABLED;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  DISABLED;  int  c  =  getEscapeChar();	  return    c    >    0?    1    :    c;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	256	None	replace
2019	[BUG]  [BUGGY]  return  c  >  0?  1  :  -1;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  -1;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  -1;  int  c  =  getEscapeChar();	  return    c    >    0?    1    :    c;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	256	None	replace
2020	[BUG]  [BUGGY]  switch(c)  {  case  END_OF_STREAM:  return  BACKSPACE;  [CE]  illegal  start  of  expression  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  switch(c)  {  case  END_OF_STREAM:  return  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	switch(c)  {  case  END_OF_STREAM:  return  BACKSPACE;	  return    BACKSPACE;    case    END_OF_STREAM:    return    BACKSPACE;    	non-compiled	[CE]  illegal  start  of  expression	341	None	replace
2021	[BUG]  [BUGGY]  int  commmentStart  =  in.readInt();  [CE]  cannot  find  symbol  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  commmentStart  =  in.readInt();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  commmentStart  =  in.readInt();	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readCharAt(c);    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
2022	[BUG]  [BUGGY]  int  commmentStart  =  in.readCharAt(c);  [CE]  cannot  find  symbol  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  commmentStart  =  in.readCharAt(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  commmentStart  =  in.readCharAt(c);	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readCharAt(c);    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
2023	[BUG]  [BUGGY]  int  commmentStart  =  in.read(c);  [CE]  no  suitable  method  found  for  read(int)  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  commmentStart  =  in.read(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  commmentStart  =  in.read(c);	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readCharAt(c);    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	27	None	replace
2024	[BUG]  [BUGGY]  int  len  =  in.readInt();  [CE]  cannot  find  symbol  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  len  =  in.readInt();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  len  =  in.readInt();	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readCharAt(c);    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
2025	[BUG]  [BUGGY]  Integer  commmentStart  =  in.readInt();  [CE]  cannot  find  symbol  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  commmentStart  =  in.readInt();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  commmentStart  =  in.readInt();	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readCharAt(c);    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
2026	[BUG]  [BUGGY]  int  commmentStart  =  in.read();  [CE]  missing  return  statement  [FE]                            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  commmentStart  =  in.read();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  commmentStart  =  in.read();	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readCharAt(c);    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  missing  return  statement	27	None	replace
2027	[BUG]  [BUGGY]  int  len  =  in.read(c);  [CE]  no  suitable  method  found  for  read(int)  [FE]                              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  len  =  in.read(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  len  =  in.read(c);	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readCharAt(c);    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	27	None	replace
2028	[BUG]  [BUGGY]  return  c!=  0?  c  :  END_OF_STREAM;  int  c  =  getCurrentIndex();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  c  :  END_OF_STREAM;  int  c  =  getCurrentIndex();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    c    :    END_OF_STREAM;    int  c  =  getCurrentIndex();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	143	None	add
2029	[BUG]  [BUGGY]  return  c!=  0?  c  :  END_OF_STREAM;  int  c  =  getSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  c  :  END_OF_STREAM;  int  c  =  getSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    c    :    END_OF_STREAM;    int  c  =  getSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	143	None	add
2030	[BUG]  [BUGGY]  return  c!=  0?  c  :  END_OF_STREAM;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  c  :  END_OF_STREAM;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    c    :    END_OF_STREAM;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	143	None	add
2031	[BUG]  [BUGGY]  return  c!=  0?  c  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  c  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    c    :    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	143	None	add
2032	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  *  2;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  *  2;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    *    2;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	273	None	add
2033	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  *  2;  int  c  =  getCurrentIndex();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  *  2;  int  c  =  getCurrentIndex();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    *    2;    int  c  =  getCurrentIndex();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	273	None	add
2034	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  *  2;  int  c  =  getCurrentSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  *  2;  int  c  =  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    *    2;    int  c  =  getCurrentSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	273	None	add
2035	[BUG]  [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException(  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException(  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException(	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
2036	[BUG]  [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException  [CE]  '('  or  '['  expected  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	25	None	replace
2037	[BUG]  [BUGGY]  int  commmentStart  =  escapeSurroundingSpaces.length;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( "  [CE]  unclosed  string  literal  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  commmentStart  =  escapeSurroundingSpaces.length;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( "  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  commmentStart  =  escapeSurroundingSpaces.length;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( "	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	25	None	replace
2038	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  ignoreEmptyLines);  break;  [CE]  cannot  find  symbol  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  ignoreEmptyLines);  break;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(c,  ignoreEmptyLines);  break;	  int    delimiter    =    readEscapeSurroundingSpaces(c);    break;    	non-compiled	[CE]  cannot  find  symbol	285	None	replace
2039	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(in);  break;  [CE]  cannot  find  symbol  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(in);  break;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(in);  break;	  int    delimiter    =    readEscapeSurroundingSpaces(c);    break;    	non-compiled	[CE]  cannot  find  symbol	285	None	replace
2040	[BUG]  [BUGGY]  case  END:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  return  BACKSPACE;  [CE]  cannot  find  symbol  END  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  return  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  return  BACKSPACE;	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    return    BACKSPACE;    	non-compiled	[CE]  cannot  find  symbol  END	345	None	replace
2041	[BUG]  [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  while  processing  escape  sequence ");  return  BACKSPACE;  [CE]  duplicate  case  label  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  while  processing  escape  sequence ");  return  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  throw  new  IOException( "EOF  while  processing  escape  sequence ");  return  BACKSPACE;	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    return    BACKSPACE;    	non-compiled	[CE]  duplicate  case  label	345	None	replace
2042	[BUG]  [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces().size();  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	329	None	add
2043	[BUG]  [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces().length;  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces().length;  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpaces().length;  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	329	None	add
2044	[BUG]  [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	329	None	add
2045	[BUG]  [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }  [CE]  illegal  start  of  expression  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentEnd;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
2046	[BUG]  [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }  }  [CE]  illegal  start  of  expression  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentEnd;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
2047	[BUG]  [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  in.readChar();  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }  [CE]  illegal  start  of  expression  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  in.readChar();  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  in.readChar();  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentEnd;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
2048	[BUG]  [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  comenceEnd;  }  [CE]  illegal  start  of  expression  [FE]                            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  comenceEnd;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  comenceEnd;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentEnd;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
2049	[BUG]  [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  com  [CE]  ';'  expected  [FE]                              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  com  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  com	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentEnd;    }    	non-compiled	[CE]  ';'  expected	29	None	replace
2050	[BUG]  [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  String  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }  [CE]  illegal  start  of  expression  [FE]                                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  String  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  String  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentEnd;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
2051	[BUG]  [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  String  commmentStart  =  in.readString();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }  [CE]  illegal  start  of  expression  [FE]                                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  String  commmentStart  =  in.readString();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  String  commmentStart  =  in.readString();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentEnd;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
2052	[BUG]  [BUGGY]  case  END_OBJECT:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  [CE]  cannot  find  symbol  END_OBJECT  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OBJECT:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OBJECT:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");	  return    END_OF_STREAM;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence.   ");    	non-compiled	[CE]  cannot  find  symbol  END_OBJECT	300	None	replace
2053	[BUG]  [BUGGY]  case  EOF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  [CE]  cannot  find  symbol  EOF_STREAM  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  EOF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  EOF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");	  return    END_OF_STREAM;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence.   ");    	non-compiled	[CE]  cannot  find  symbol  EOF_STREAM	300	None	replace
2054	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  *  6;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  *  6;	  return    c    +    6;    	compilable	  [FE]  (entry  2)  	93	5	replace
2055	[BUG]  [BUGGY]  return  c  *  6;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  *  6;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  *  6;	  return    c    +    6;    	compilable	  [FE]  (entry  2)  	93	5	replace
2056	[BUG]  [BUGGY]  case  END_OBJECT:  throw  new  EOFException( "EOF  whilst  processing  escape  sequence ");  [CE]  cannot  find  symbol  END_OBJECT  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OBJECT:  throw  new  EOFException( "EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OBJECT:  throw  new  EOFException( "EOF  whilst  processing  escape  sequence ");	  return    END_OF_STREAM;    case    END_OF_STREAM:    throw    new    EOFException(   "EOF    whilst    processing    escape    sequence       ");    	non-compiled	[CE]  cannot  find  symbol  END_OBJECT	298	None	replace
2057	[BUG]  [BUGGY]  case  END_EOF_STREAM:  throw  new  EOFException( "EOF  whilst  processing  escape  sequence ");  [CE]  cannot  find  symbol  END_EOF_STREAM  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_EOF_STREAM:  throw  new  EOFException( "EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_EOF_STREAM:  throw  new  EOFException( "EOF  whilst  processing  escape  sequence ");	  return    END_OF_STREAM;    case    END_OF_STREAM:    throw    new    EOFException(   "EOF    whilst    processing    escape    sequence       ");    	non-compiled	[CE]  cannot  find  symbol  END_EOF_STREAM	298	None	replace
2058	[BUG]  [BUGGY]  if(c  ==  'n')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	331	None	replace
2059	[BUG]  [BUGGY]  if(escape!=  null)  {  return  c;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(escape!=  null)  {  return  c;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(escape!=  null)  {  return  c;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	331	None	replace
2060	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	331	None	replace
2061	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignor  [CE]  ')'  expected  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignor  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignor	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  ')'  expected	331	None	replace
2062	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	331	None	replace
2063	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	331	None	replace
2064	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  c;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  c;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  c;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	331	None	replace
2065	[BUG]  [BUGGY]  return  END_OF_STREAM  +  END_SPACE;  [CE]  cannot  find  symbol  END_SPACE  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  END_SPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  END_SPACE;	  return    END_OF_STREAM    +    escapeSurroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  END_SPACE	79	None	replace
2066	[BUG]  [BUGGY]  c  +  END_OF_STREAM;  [CE]  not  a  statement  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  +  END_OF_STREAM;	  return    END_OF_STREAM    +    c;    c    +    END_OF_STREAM;    	non-compiled	[CE]  not  a  statement	8	None	replace
2067	[BUG]  [BUGGY]  return  END_OF_STREAM  +  1;  c  +  1;  [CE]  not  a  statement  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  1;  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  1;  c  +  1;	  return    END_OF_STREAM    +    c;    c    +    END_OF_STREAM;    	non-compiled	[CE]  not  a  statement	8	None	replace
2068	[BUG]  [BUGGY]  c  =  END_OF_STREAM.charAt(0);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  END_OF_STREAM.charAt(0);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  END_OF_STREAM.charAt(0);	  return    END_OF_STREAM    +    c;    c    +    END_OF_STREAM;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	8	None	replace
2069	[BUG]  [BUGGY]  c  =  END_OF_STREAM  +  1;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  END_OF_STREAM  +  1;	  return    END_OF_STREAM    +    c;    c    +    END_OF_STREAM;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	8	None	replace
2070	[BUG]  [BUGGY]  return  escape.floatValue();  [CE]  char  cannot  be  dereferenced  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  escape.floatValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  escape.floatValue();	  return    END_OF_STREAM.floatValue();    	non-compiled	[CE]  char  cannot  be  dereferenced	110	None	replace
2071	[BUG]  [BUGGY]  return  c  <  =  END_OF_STREAM;  Record  do  not  match  expected  result(c)  [CE]  illegal  start  of  expression  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  =  END_OF_STREAM;  Record  do  not  match  expected  result(c)  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  =  END_OF_STREAM;  Record  do  not  match  expected  result(c)	  return    c    &    END_OF_STREAM;    Record    do    not    match    expected    result(c)    	non-compiled	[CE]  illegal  start  of  expression	196	None	replace
2072	[BUG]  [BUGGY]  return  expected  result(c  &  END_OF_STREAM);  [CE]  ';'  expected  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  expected  result(c  &  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  expected  result(c  &  END_OF_STREAM);	  return    c    &    END_OF_STREAM;    Record    do    not    match    expected    result(c)    	non-compiled	[CE]  ';'  expected	196	None	replace
2073	[BUG]  [BUGGY]  return  expectedResult(c  &  END_OF_STREAM);  [CE]  cannot  find  symbol  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  expectedResult(c  &  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  expectedResult(c  &  END_OF_STREAM);	  return    c    &    END_OF_STREAM;    Record    do    not    match    expected    result(c)    	non-compiled	[CE]  cannot  find  symbol	196	None	replace
2074	[BUG]  [BUGGY]  return  this.ignoreSurroundingSpaces  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreSurroundingSpaces  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoreSurroundingSpaces  +  1;	  return    END_OF_SURroundingSpaces    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	324	None	replace
2075	[BUG]  [BUGGY]  return  escapeSurroundingSpaces  +  1;  [CE]  cannot  find  symbol  escapeSurroundingSpaces  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  escapeSurroundingSpaces  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  escapeSurroundingSpaces  +  1;	  return    END_OF_SURroundingSpaces    +    1;    	non-compiled	[CE]  cannot  find  symbol  escapeSurroundingSpaces	324	None	replace
2076	[BUG]  [BUGGY]  return  END_OF_STREAM  +  DISABLED;  c  +=  END_OF_STREAM;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  DISABLED;  c  +=  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  DISABLED;  c  +=  END_OF_STREAM;	  return    END_OF_STREAM    +    c;    c    +=    END_OF_STREAM;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	9	None	replace
2077	[BUG]  [BUGGY]  return  b  +  END_OF_STREAM;  c  +=  END_OF_STREAM;  [CE]  cannot  find  symbol  b  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  b  +  END_OF_STREAM;  c  +=  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  b  +  END_OF_STREAM;  c  +=  END_OF_STREAM;	  return    END_OF_STREAM    +    c;    c    +=    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  b	9	None	replace
2078	[BUG]  [BUGGY]  return  ch  +  END_OF_STREAM;  c  +=  END_OF_STREAM;  [CE]  cannot  find  symbol  ch  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  ch  +  END_OF_STREAM;  c  +=  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  ch  +  END_OF_STREAM;  c  +=  END_OF_STREAM;	  return    END_OF_STREAM    +    c;    c    +=    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  ch	9	None	replace
2079	[BUG]  [BUGGY]  return  c  +  END_OF_STREAM;  c  +=  END_OF_STREAM;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  END_OF_STREAM;  c  +=  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  END_OF_STREAM;  c  +=  END_OF_STREAM;	  return    END_OF_STREAM    +    c;    c    +=    END_OF_STREAM;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	9	None	replace
2080	[BUG]  [BUGGY]  int  c  =  getSurroundingSpaces().size();  return  END_OF_STREAM  +  d;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpaces().size();  return  END_OF_STREAM  +  d;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpaces().size();  return  END_OF_STREAM  +  d;	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpaces().size();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	189	None	replace
2081	[BUG]  [BUGGY]  int  c  =  getSurroundingSpaces().size();  return  END_OBJECT  +  c;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpaces().size();  return  END_OBJECT  +  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpaces().size();  return  END_OBJECT  +  c;	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpaces().size();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	189	None	replace
2082	[BUG]  [BUGGY]  int  c  =  getSurroundingSpaces().size();  return  END_OF_STREAM  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpaces().size();  return  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpaces().size();  return  END_OF_STREAM  +  1;	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpaces().size();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	189	None	replace
2083	[BUG]  [BUGGY]  while(c  <  =  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence.   ");  }  [CE]  illegal  start  of  expression  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  =  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence.   ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  =  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence.   ");  }	  if(c    ==    END_OF_STREAM)    {    throw    new    IOException(   "EOF    whilst    processing    escape    sequence.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
2084	[BUG]  [BUGGY]  while(c  <  =  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence.   ");  [CE]  illegal  start  of  expression  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  =  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence.   ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  =  END_OF_STREAM)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence.   ");	  if(c    ==    END_OF_STREAM)    {    throw    new    IOException(   "EOF    whilst    processing    escape    sequence.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
2085	[BUG]  [BUGGY]  [FE]  IOException  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");	  if(c    ==    END_OF_STREAM)    {    throw    new    IOException(   "EOF    whilst    processing    escape    sequence.   ");    }    	compilable	  [FE]  IOException  	21	5	replace
2086	[BUG]  [BUGGY]  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  [FE]  IOException  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");	  if(c    ==    END_OF_STREAM)    {    throw    new    IOException(   "EOF    whilst    processing    escape    sequence.   ");    }    	compilable	  [FE]  IOException  	21	5	replace
2087	[BUG]  [BUGGY]  return  in;  escape  =  readEscape(in,  escape);  [CE]  incompatible  types  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  in;  escape  =  readEscape(in,  escape);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  in;  escape  =  readEscape(in,  escape);	  return    escape;    int    escape    =    readEscape(in,    c);    	non-compiled	[CE]  incompatible  types	237	None	replace
2088	[BUG]  [BUGGY]  return  escape;  int  escape  =  readEscape(in,  END_OF_STREAM,  c);  [CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  escape;  int  escape  =  readEscape(in,  END_OF_STREAM,  c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  escape;  int  escape  =  readEscape(in,  END_OF_STREAM,  c);	  return    escape;    int    escape    =    readEscape(in,    c);    	non-compiled	[CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;	237	None	replace
2089	[BUG]  [BUGGY]  int  escape  =  readEscape(in,  c);  [CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escape  =  readEscape(in,  c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escape  =  readEscape(in,  c);	  return    escape;    int    escape    =    readEscape(in,    c);    	non-compiled	[CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;	237	None	replace
2090	[BUG]  [BUGGY]  int  escape  =  readEscape(in,  c,  escape);  [CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;  [FE]                            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escape  =  readEscape(in,  c,  escape);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escape  =  readEscape(in,  c,  escape);	  return    escape;    int    escape    =    readEscape(in,    c);    	non-compiled	[CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;	237	None	replace
2091	[BUG]  [BUGGY]  return  c;  int  escape  =  readEscape(in,  escape);  [CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;  [FE]                              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c;  int  escape  =  readEscape(in,  escape);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c;  int  escape  =  readEscape(in,  escape);	  return    escape;    int    escape    =    readEscape(in,    c);    	non-compiled	[CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;	237	None	replace
2092	[BUG]  [BUGGY]  int  commmentStart  =  escapeSurroundingSpaces.length;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  DIS  [CE]  ';'  expected  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  commmentStart  =  escapeSurroundingSpaces.length;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  DIS  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  commmentStart  =  escapeSurroundingSpaces.length;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  DIS	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    DISABLED;    }    	non-compiled	[CE]  ';'  expected	335	None	replace
2093	[BUG]  [BUGGY]  int  commmentStart  =  escapeSurroundingSpaces.length;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  DIS  [CE]  ';'  expected  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  commmentStart  =  escapeSurroundingSpaces.length;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  DIS  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  commmentStart  =  escapeSurroundingSpaces.length;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  DIS	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    DISABLED;    }    	non-compiled	[CE]  ';'  expected	335	None	replace
2094	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ign  [CE]  ')'  expected  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ign  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ign	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    DISABLED;    }    	non-compiled	[CE]  ')'  expected	335	None	replace
2095	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&  [CE]  illegal  start  of  expression  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	335	None	replace
2096	[BUG]  [BUGGY]  if(c  >=  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  }  [CE]  illegal  start  of  expression  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >=  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >=  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
2097	[BUG]  [BUGGY]  if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  [CE]  illegal  start  of  expression  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
2098	[BUG]  [BUGGY]  if(c  >=  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >=  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >=  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
2099	[BUG]  [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_SURroundingSpaces  :  END_EmptyLines;  [CE]  int  cannot  be  dereferenced  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_SURroundingSpaces  :  END_EmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.equals(c)?  END_OF_SURroundingSpaces  :  END_EmptyLines;	  return    END_OF_STREAM.equals(c)?    END_OF_SURroundingSpaces    :    END_OF_STREAM;    	non-compiled	[CE]  int  cannot  be  dereferenced	365	None	replace
2100	[BUG]  [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_SURroundingSpaces  :  END_FONT;  [CE]  int  cannot  be  dereferenced  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_SURroundingSpaces  :  END_FONT;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.equals(c)?  END_OF_SURroundingSpaces  :  END_FONT;	  return    END_OF_STREAM.equals(c)?    END_OF_SURroundingSpaces    :    END_OF_STREAM;    	non-compiled	[CE]  int  cannot  be  dereferenced	365	None	replace
2101	[BUG]  [BUGGY]  return  c  -  8;  int  c  =  Integer.MAX_VALUE;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  8;  int  c  =  Integer.MAX_VALUE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    8;    int  c  =  Integer.MAX_VALUE;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	217	None	add
2102	[BUG]  [BUGGY]  return  c  -  8;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  8;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    8;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	217	None	add
2103	[BUG]  [BUGGY]  return  c  -  8;  int  c  =  getChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  8;  int  c  =  getChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    8;    int  c  =  getChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	217	None	add
2104	[BUG]  [BUGGY]  return  c  -  8;  Integer  c  -  8;  [CE]  ';'  expected  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  8;  Integer  c  -  8;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    8;    Integer  c  -  8;	  	non-compiled	[CE]  ';'  expected	217	None	add
2105	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  return  c;  }  [CE]  illegal  start  of  expression  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  return  c;  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
2106	[BUG]  [BUGGY]  return  END_OF_STREAM  +  2;  case  END_OF_STREAM:  return  END_OF_STREAM  +  2;  [CE]  duplicate  case  label  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  2;  case  END_OF_STREAM:  return  END_OF_STREAM  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    2;    case  END_OF_STREAM:  return  END_OF_STREAM  +  2;	  	non-compiled	[CE]  duplicate  case  label	71	None	add
2107	[BUG]  [BUGGY]  return  END_OF_STREAM  +  2;  case  END_OF_STREAM  +  2;  [CE]  :  expected  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  2;  case  END_OF_STREAM  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    2;    case  END_OF_STREAM  +  2;	  	non-compiled	[CE]  :  expected	71	None	add
2108	[BUG]  [BUGGY]  return  END_OF_STREAM  +  2;  case  END_OF_STREAM:  return  END_OF_STREAM  +  1;  [CE]  duplicate  case  label  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  2;  case  END_OF_STREAM:  return  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    2;    case  END_OF_STREAM:  return  END_OF_STREAM  +  1;	  	non-compiled	[CE]  duplicate  case  label	71	None	add
2109	[BUG]  [BUGGY]  return  END_OF_STREAM  +  2;  return  END_OF_STREAM  +  1;  [CE]  unreachable  statement  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  2;  return  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    2;    return  END_OF_STREAM  +  1;	  	non-compiled	[CE]  unreachable  statement	71	None	add
2110	[BUG]  [BUGGY]  return  c  <  0?  1  :  c;  Integer  c  <  0?  1  :  c;  [CE]  ';'  expected  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  c;  Integer  c  <  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    1    :    c;    Integer  c  <  0?  1  :  c;	  	non-compiled	[CE]  ';'  expected	64	None	add
2111	[BUG]  [BUGGY]  return  c  <  0?  1  :  c;  int  c  =  getSurroundingSpaces();  return  c  <  0?  1  :  c;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  c;  int  c  =  getSurroundingSpaces();  return  c  <  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    1    :    c;    int  c  =  getSurroundingSpaces();  return  c  <  0?  1  :  c;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	64	None	add
2112	[BUG]  [BUGGY]  return  c  <  0?  1  :  c;  int  c  =  getSurroundingSpaces().length;  return  c  <  0?  1  :  c;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  c;  int  c  =  getSurroundingSpaces().length;  return  c  <  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    1    :    c;    int  c  =  getSurroundingSpaces().length;  return  c  <  0?  1  :  c;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	64	None	add
2113	[BUG]  [BUGGY]  return  c  <  0?  1  :  c;  int  c  =  getSurroundingSpaces().size();  return  c  <  0?  1  :  c;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  c;  int  c  =  getSurroundingSpaces().size();  return  c  <  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    1    :    c;    int  c  =  getSurroundingSpaces().size();  return  c  <  0?  1  :  c;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	64	None	add
2114	[BUG]  [BUGGY]  return  c  <  0?  1  :  c;  int  c  <  0?  1  :  c.intValue();  [CE]  ';'  expected  [FE]            Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  c;  int  c  <  0?  1  :  c.intValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    1    :    c;    int  c  <  0?  1  :  c.intValue();	  	non-compiled	[CE]  ';'  expected	64	None	add
2115	[BUG]  [BUGGY]  return  c  &  BACKSPACE;  return  c  &  BACKSPACE;  [CE]  unreachable  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE;  return  c  &  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    BACKSPACE;    return  c  &  BACKSPACE;	  	non-compiled	[CE]  unreachable  statement	98	None	add
2116	[BUG]  [BUGGY]  return  c  &  BACKSPACE;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    BACKSPACE;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	98	None	add
2117	[BUG]  [BUGGY]  return  c  &  BACKSPACE;  int  c  =  getSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE;  int  c  =  getSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    BACKSPACE;    int  c  =  getSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	98	None	add
2118	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  escapeSurroundingSpaces.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  i  =  0,  len  =  escapeSurroundingSpaces.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  false;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  i  =  0,  len  =  escapeSurroundingSpaces.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  false;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	337	None	replace
2119	[BUG]  [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    c    :    END_OF_STREAM;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	137	None	add
2120	[BUG]  [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  int  c  =  getSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  int  c  =  getSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    c    :    END_OF_STREAM;    int  c  =  getSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	137	None	add
2121	[BUG]  [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  int  c  =  getCurrentIndex();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  int  c  =  getCurrentIndex();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    c    :    END_OF_STREAM;    int  c  =  getCurrentIndex();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	137	None	add
2122	[BUG]  [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_Escape  :  END_OF_SURRUING;  [CE]  int  cannot  be  dereferenced  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_Escape  :  END_OF_SURRUING;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.equals(c)?  END_OF_Escape  :  END_OF_SURRUING;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_Escape;    	non-compiled	[CE]  int  cannot  be  dereferenced	364	None	replace
2123	[BUG]  [BUGGY]  return  c  +  3;  c  +  4;  [CE]  not  a  statement  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  3;  c  +  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  3;  c  +  4;	  return    c    +    2;    c    +    2;    	non-compiled	[CE]  not  a  statement	54	None	replace
2124	[BUG]  [BUGGY]  return  c  +  2;  c  +  3;  [CE]  not  a  statement  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  2;  c  +  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  2;  c  +  3;	  return    c    +    2;    c    +    2;    	non-compiled	[CE]  not  a  statement	54	None	replace
2125	[BUG]  [BUGGY]  return  c  >  0?  b  :  END_OF_STREAM;  [CE]  cannot  find  symbol  b  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  b  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  b  :  END_OF_STREAM;	  return    c    >    0?    c    :    END_OF_STREAM;    return    c    >    0?    c    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  b	313	None	replace
2126	[BUG]  [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  [CE]  >  expected  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    c;    }    	non-compiled	[CE]  >  expected	15	None	replace
2127	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  ignoreSurroundingSpaces;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  [CE]  illegal  start  of  expression  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  ignoreSurroundingSpaces;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  ignoreSurroundingSpaces;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
2128	[BUG]  [BUGGY]  return  c  +  6;  int  c  =  getChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  6;  int  c  =  getChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    6;    int  c  =  getChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	92	None	add
2129	[BUG]  [BUGGY]  return  c  +  6;  int  c  =  Integer.MAX_VALUE;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  6;  int  c  =  Integer.MAX_VALUE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    6;    int  c  =  Integer.MAX_VALUE;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	92	None	add
2130	[BUG]  [BUGGY]  return  c  +  6;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  6;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    6;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	92	None	add
2131	[BUG]  [BUGGY]  int  c  =  getSurroundingSpaces().length;  return  END_OF_STREAM  +  d;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpaces().length;  return  END_OF_STREAM  +  d;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpaces().length;  return  END_OF_STREAM  +  d;	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpaces().length;    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	339	None	replace
2132	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c!=  END_OF_STREAM  ||  c  >  END_OF_SURroundingSpaces;  [CE]  cannot  find  symbol  END_OF_SURroundingSpaces  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c!=  END_OF_STREAM  ||  c  >  END_OF_SURroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c!=  END_OF_STREAM  ||  c  >  END_OF_SURroundingSpaces;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM    ||    c    >    END_OF_SURroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  END_OF_SURroundingSpaces	266	None	replace
2133	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  ==  END_OF_STREAM  ||  c  >  END_OF_SURroundingSpaces;  [CE]  cannot  find  symbol  END_OF_SURroundingSpaces  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  ==  END_OF_STREAM  ||  c  >  END_OF_SURroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  ==  END_OF_STREAM  ||  c  >  END_OF_SURroundingSpaces;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM    ||    c    >    END_OF_SURroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  END_OF_SURroundingSpaces	266	None	replace
2134	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreSurroundingSpaces?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  this.ignoreSurroundingSpaces?  END_OF_STREAM  :  END_OF_STREAM;	  return    this.encodeEscapeSurroundingSpaces?    END_OF_STREAM    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	120	3	replace
2135	[BUG]  [BUGGY]  return  this.ignoreSurroundingSpaces?  END_OF_STREAM  :  END_OF_STREAM;  [FE]  (entry  2)  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreSurroundingSpaces?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoreSurroundingSpaces?  END_OF_STREAM  :  END_OF_STREAM;	  return    this.encodeEscapeSurroundingSpaces?    END_OF_STREAM    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	120	3	replace
2136	[BUG]  [BUGGY]  return  this.encodeEmptyLines?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  cannot  find  symbol  encodeEmptyLines  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.encodeEmptyLines?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.encodeEmptyLines?  END_OF_STREAM  :  END_OF_STREAM;	  return    this.encodeEscapeSurroundingSpaces?    END_OF_STREAM    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  encodeEmptyLines	120	None	replace
2137	[BUG]  [BUGGY]  return  c  +  1;  Integer  c  +  2;  [CE]  ';'  expected  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  1;  Integer  c  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  1;  Integer  c  +  2;	  return    c    +    1;    Integer    c    +    1;    	non-compiled	[CE]  ';'  expected	223	None	replace
2138	[BUG]  [BUGGY]  return  this.ignoreSurroundingSpaces?  END_OF_STREAM  :  END_BACKSPACE;  [CE]  cannot  find  symbol  END_BACKSPACE  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreSurroundingSpaces?  END_OF_STREAM  :  END_BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoreSurroundingSpaces?  END_OF_STREAM  :  END_BACKSPACE;	  return    this.encodeEscapeSurroundingSpaces?    END_OF_STREAM    :    END_BACKSPACE;    	non-compiled	[CE]  cannot  find  symbol  END_BACKSPACE	123	None	replace
2139	[BUG]  [BUGGY]  if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
2140	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces  ||!ignoreEmptyLines)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces  ||!ignoreEmptyLines)  {  break;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces  ||!ignoreEmptyLines)  {  break;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
2141	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
2142	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
2143	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  in.read()  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  in.read()  &  END_OF_STREAM;	  return    c    &    END_OF_STREAM;    int    c    =    in.read();    	compilable	  [FE]  (entry  2)  	43	5	replace
2144	[BUG]  [BUGGY]  return  in.read()  &  END_OF_STREAM;  [FE]  (entry  2)  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  in.read()  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  in.read()  &  END_OF_STREAM;	  return    c    &    END_OF_STREAM;    int    c    =    in.read();    	compilable	  [FE]  (entry  2)  	43	5	replace
2145	[BUG]  [BUGGY]  return  c  <  =  END_OF_STREAM;  int  c  =  in.read();  [CE]  illegal  start  of  expression  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  =  END_OF_STREAM;  int  c  =  in.read();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  =  END_OF_STREAM;  int  c  =  in.read();	  return    c    &    END_OF_STREAM;    int    c    =    in.read();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
2146	[BUG]  [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  in.read();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  in.read();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  END_OF_STREAM;  int  c  =  in.read();	  return    c    &    END_OF_STREAM;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	43	None	replace
2147	[BUG]  [BUGGY]  while(c  <  getSurroundingSpaces().size())  {  c  =  getSurroundingSpaces().size();  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  getSurroundingSpaces().size())  {  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  getSurroundingSpaces().size())  {  c  =  getSurroundingSpaces().size();	  return    END_OF_STREAM;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
2148	[BUG]  [BUGGY]  while(c  >=  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  >=  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  >=  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;	  return    END_OF_STREAM    +    1;    int    c    =    getCurrentSurroundingSpace();    	non-compiled	[CE]  illegal  start  of  expression	192	None	replace
2149	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  length;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  length;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  length;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
2150	[BUG]  [BUGGY]  return  c  -  2;  int  c  =  getCurrentSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  2;  int  c  =  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  2;  int  c  =  getCurrentSurroundingSpace();	  return    c    -    1;    int    c    =    getCurrentSurroundingSpace();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	247	None	replace
2151	[BUG]  [BUGGY]  return  END_OF_STREAM  +  2;  result  +=  END_OF_STREAM  +  2;  [CE]  cannot  find  symbol  result  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  2;  result  +=  END_OF_STREAM  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  2;  result  +=  END_OF_STREAM  +  2;	  return    END_OF_STREAM    +    1;    result    +=    END_OF_STREAM    +    1;    	non-compiled	[CE]  cannot  find  symbol  result	178	None	replace
2152	[BUG]  [BUGGY]  return  END_OF_STREAM  +  1;  result  +=  END_OF_STREAM  +  3;  [CE]  cannot  find  symbol  result  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  1;  result  +=  END_OF_STREAM  +  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  1;  result  +=  END_OF_STREAM  +  3;	  return    END_OF_STREAM    +    1;    result    +=    END_OF_STREAM    +    1;    	non-compiled	[CE]  cannot  find  symbol  result	178	None	replace
2153	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpace().length;  return  END_OF_STREAM  +  c;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpace().length;  return  END_OF_STREAM  +  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpace().length;  return  END_OF_STREAM  +  c;	  return    END_OF_STREAM    +    c;    int    c    =    getEscapeSurroundingSpace();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	340	None	replace
2154	[BUG]  [BUGGY]  return  0;  END_OF_STREAM  +  1;  [CE]  not  a  statement  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  0;  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  0;  END_OF_STREAM  +  1;	  return    END_OF_STREAM    +    1;    END_OF_STREAM    +    1;    	non-compiled	[CE]  not  a  statement	175	None	replace
2155	[BUG]  [BUGGY]  return  escape  +  1;  END_OF_STREAM  +  1;  [CE]  not  a  statement  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  escape  +  1;  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  escape  +  1;  END_OF_STREAM  +  1;	  return    END_OF_STREAM    +    1;    END_OF_STREAM    +    1;    	non-compiled	[CE]  not  a  statement	175	None	replace
2156	[BUG]  [BUGGY]  return  1;  END_OF_STREAM  +  1;  [CE]  not  a  statement  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  1;  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  1;  END_OF_STREAM  +  1;	  return    END_OF_STREAM    +    1;    END_OF_STREAM    +    1;    	non-compiled	[CE]  not  a  statement	175	None	replace
2157	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >=  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(c  >=  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }	  return    END_OF_STREAM;    return    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	125	3	replace
2158	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }  [FE]  (entry  2)  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >=  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >=  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }	  return    END_OF_STREAM;    return    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	125	3	replace
2159	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  0)  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(c  >  0)  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }	  return    END_OF_STREAM;    return    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	125	3	replace
2160	[BUG]  [BUGGY]  if(c  >  0)  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }  [FE]  (entry  2)  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  0)  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  0)  {  return  END_OF_STREAM;  }  else  {  return  END_OF_STREAM;  }	  return    END_OF_STREAM;    return    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	125	3	replace
2161	[BUG]  [BUGGY]  [FE]  IOException  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " ");  }	  return    END_OF_STREAM;    return    END_OF_STREAM;    	compilable	  [FE]  IOException  	125	5	replace
2162	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " ");  }  [FE]  IOException  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " ");  }	  return    END_OF_STREAM;    return    END_OF_STREAM;    	compilable	  [FE]  IOException  	125	5	replace
2163	[BUG]  [BUGGY]  int  escape  =  getSurroundingSpaces();  if(escape  ==  escape)  {  return  escape;  }  [CE]  cannot  find  symbol  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escape  =  getSurroundingSpaces();  if(escape  ==  escape)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escape  =  getSurroundingSpaces();  if(escape  ==  escape)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeSurroundingSpaces();    if(escape    ==    escape)    {    return    escape;    }    	non-compiled	[CE]  cannot  find  symbol	233	None	replace
2164	[BUG]  [BUGGY]  return  END_OF_STREAM  +  4;  Integer  END_OF_STREAM  +  4;  [CE]  ';'  expected  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  4;  Integer  END_OF_STREAM  +  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    4;    Integer  END_OF_STREAM  +  4;	  	non-compiled	[CE]  ';'  expected	74	None	add
2165	[BUG]  [BUGGY]  return  END_OF_STREAM  +  4;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  4;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    4;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	74	None	add
2166	[BUG]  [BUGGY]  return  END_OF_STREAM  +  4;  int  c  =  getChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  4;  int  c  =  getChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    4;    int  c  =  getChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	74	None	add
2167	[BUG]  [BUGGY]  return  END_OF_STREAM  +  4;  int  c  =  getSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  4;  int  c  =  getSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    4;    int  c  =  getSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	74	None	add
2168	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_SPACE;  [CE]  cannot  find  symbol  END_SPACE  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_SPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  END_OF_STREAM  :  END_SPACE;	  return    c    ==    0?    END_OF_STREAM    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_SPACE	213	None	replace
2169	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_SURroundingSpaces;  [CE]  cannot  find  symbol  END_SURroundingSpaces  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_SURroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  END_OF_STREAM  :  END_SURroundingSpaces;	  return    c    ==    0?    END_OF_STREAM    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_SURroundingSpaces	213	None	replace
2170	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_BACKSPACE;  [CE]  cannot  find  symbol  END_BACKSPACE  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  END_OF_STREAM  :  END_BACKSPACE;	  return    c    ==    0?    END_OF_STREAM    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_BACKSPACE	213	None	replace
2171	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_SURFACE;  [CE]  cannot  find  symbol  END_SURFACE  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_SURFACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  END_OF_STREAM  :  END_SURFACE;	  return    c    ==    0?    END_OF_STREAM    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_SURFACE	213	None	replace
2172	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OBJECT;  [CE]  cannot  find  symbol  END_OBJECT  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OBJECT;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  END_OF_STREAM  :  END_OBJECT;	  return    c    ==    0?    END_OF_STREAM    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OBJECT	213	None	replace
2173	[BUG]  [BUGGY]  return  this.escapeEmptyLines?  END_OF_STREAM  :  END_EOF;  [CE]  cannot  find  symbol  escapeEmptyLines  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.escapeEmptyLines?  END_OF_STREAM  :  END_EOF;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.escapeEmptyLines?  END_OF_STREAM  :  END_EOF;	  return    this.escapeSurroundingSpaces?    END_OF_STREAM    :    END_EOF;    	non-compiled	[CE]  cannot  find  symbol  escapeEmptyLines	208	None	replace
2174	[BUG]  [BUGGY]  return  this.escapeSurroundingSpaces?  END_EOF  :  END_EOF;  [CE]  cannot  find  symbol  escapeSurroundingSpaces  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.escapeSurroundingSpaces?  END_EOF  :  END_EOF;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.escapeSurroundingSpaces?  END_EOF  :  END_EOF;	  return    this.escapeSurroundingSpaces?    END_OF_STREAM    :    END_EOF;    	non-compiled	[CE]  cannot  find  symbol  escapeSurroundingSpaces	208	None	replace
2175	[BUG]  [BUGGY]  return  this.emptyLines?  END_OF_STREAM  :  END_EOF;  [CE]  cannot  find  symbol  emptyLines  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.emptyLines?  END_OF_STREAM  :  END_EOF;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.emptyLines?  END_OF_STREAM  :  END_EOF;	  return    this.escapeSurroundingSpaces?    END_OF_STREAM    :    END_EOF;    	non-compiled	[CE]  cannot  find  symbol  emptyLines	208	None	replace
2176	[BUG]  [BUGGY]  return  this.escapeSurroundingSpaces?  END_EOF  :  END_OF_STREAM;  [CE]  cannot  find  symbol  escapeSurroundingSpaces  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.escapeSurroundingSpaces?  END_EOF  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.escapeSurroundingSpaces?  END_EOF  :  END_OF_STREAM;	  return    this.escapeSurroundingSpaces?    END_OF_STREAM    :    END_EOF;    	non-compiled	[CE]  cannot  find  symbol  escapeSurroundingSpaces	208	None	replace
2177	[BUG]  [BUGGY]  return  default:  END_OF_STREAM  *  1;  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  default:  END_OF_STREAM  *  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  default:  END_OF_STREAM  *  1;	  return    default:    END_OF_STREAM    +    1;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
2178	[BUG]  [BUGGY]  return  c.equals(END_OF_STREAM)?  END_OF_EOF  :  END_OF_STREAM;  [CE]  int  cannot  be  dereferenced  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c.equals(END_OF_STREAM)?  END_OF_EOF  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c.equals(END_OF_STREAM)?  END_OF_EOF  :  END_OF_STREAM;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_EOF;    	non-compiled	[CE]  int  cannot  be  dereferenced	366	None	replace
2179	[BUG]  [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_EOF  :  END_OF_CHAR;  [CE]  int  cannot  be  dereferenced  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_EOF  :  END_OF_CHAR;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.equals(c)?  END_OF_EOF  :  END_OF_CHAR;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_EOF;    	non-compiled	[CE]  int  cannot  be  dereferenced	366	None	replace
2180	[BUG]  [BUGGY]  return  END_EOF.equals(c)?  END_OF_STREAM  :  END_OF_EOF;  [CE]  cannot  find  symbol  END_EOF  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_EOF.equals(c)?  END_OF_STREAM  :  END_OF_EOF;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_EOF.equals(c)?  END_OF_STREAM  :  END_OF_EOF;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_EOF;    	non-compiled	[CE]  cannot  find  symbol  END_EOF	366	None	replace
2181	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_CHAR;  [CE]  cannot  find  symbol  END_OF_CHAR  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_CHAR;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  END_OF_STREAM  :  END_OF_CHAR;	  return    c    ==    0?    c    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_CHAR	138	None	replace
2182	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  2;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  2;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    +    2;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	271	None	add
2183	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  2;  int  c  =  getCurrentIndex();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  2;  int  c  =  getCurrentIndex();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    +    2;    int  c  =  getCurrentIndex();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	271	None	add
2184	[BUG]  [BUGGY]  Integer  c  =  getEscapeChar();  return  c  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  getEscapeChar();  return  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  getEscapeChar();  return  c  +  1;	  return    c    +    1;    int    c    =    getEscapeChar();    return    c    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	361	None	replace
2185	[BUG]  [BUGGY]  while(c  <  =  END_OF_STREAM)  {  c  =  getCurrentSurroundingSpace();  [CE]  illegal  start  of  expression  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  =  END_OF_STREAM)  {  c  =  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  =  END_OF_STREAM)  {  c  =  getCurrentSurroundingSpace();	  return    BACKSPACE;    int    c    =    getCurrentSurroundingSpace();    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
2186	[BUG]  [BUGGY]  while(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getCurrentSurroundingSpace();  [CE]  illegal  start  of  expression  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getCurrentSurroundingSpace();	  return    BACKSPACE;    int    c    =    getCurrentSurroundingSpace();    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
2187	[BUG]  [BUGGY]  default:  return  BACKSPACE;  int  c  =  getCurrentSurroundingSpace();  [CE]  duplicate  default  label  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  default:  return  BACKSPACE;  int  c  =  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	default:  return  BACKSPACE;  int  c  =  getCurrentSurroundingSpace();	  return    BACKSPACE;    int    c    =    getCurrentSurroundingSpace();    	non-compiled	[CE]  duplicate  default  label	173	None	replace
2188	[BUG]  [BUGGY]  return  c  -  2;  Integer  c  -  2;  [CE]  ';'  expected  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  2;  Integer  c  -  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    2;    Integer  c  -  2;	  	non-compiled	[CE]  ';'  expected	112	None	add
2189	[BUG]  [BUGGY]  return  c  -  2;  int  c  =  getChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  2;  int  c  =  getChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    2;    int  c  =  getChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	112	None	add
2190	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'e'  ||  c  ==  'E'  ||  c  ==  'E'  ||  c  ==  'E')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	200	None	replace
2191	[BUG]  [BUGGY]  if(c  ==  'u'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'u'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'u'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	200	None	replace
2192	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM  +  1;  }  [CE]  missing  return  statement  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM  +  1;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM  +  1;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	200	None	replace
2193	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	200	None	replace
2194	[BUG]  [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_EscapeSequence  :  END_OF_STREAM;  [CE]  int  cannot  be  dereferenced  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_EscapeSequence  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.equals(c)?  END_OF_EscapeSequence  :  END_OF_STREAM;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_EscapeSequence;    	non-compiled	[CE]  int  cannot  be  dereferenced	368	None	replace
2195	[BUG]  [BUGGY]  return  c.equals(END_OF_STREAM)?  END_OF_EscapeSequence  :  END_OF_STREAM;  [CE]  int  cannot  be  dereferenced  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c.equals(END_OF_STREAM)?  END_OF_EscapeSequence  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c.equals(END_OF_STREAM)?  END_OF_EscapeSequence  :  END_OF_STREAM;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_EscapeSequence;    	non-compiled	[CE]  int  cannot  be  dereferenced	368	None	replace
2196	[BUG]  [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_EscapeSequence  :  END_OF_LINE;  [CE]  int  cannot  be  dereferenced  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_EscapeSequence  :  END_OF_LINE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.equals(c)?  END_OF_EscapeSequence  :  END_OF_LINE;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_EscapeSequence;    	non-compiled	[CE]  int  cannot  be  dereferenced	368	None	replace
2197	[BUG]  [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_EscapeSequence  :  END_OF_REACHABLE;  [CE]  int  cannot  be  dereferenced  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_EscapeSequence  :  END_OF_REACHABLE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.equals(c)?  END_OF_EscapeSequence  :  END_OF_REACHABLE;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_EscapeSequence;    	non-compiled	[CE]  int  cannot  be  dereferenced	368	None	replace
2198	[BUG]  [BUGGY]  if(c  ==  'e'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'e'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'e'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	198	None	replace
2199	[BUG]  [BUGGY]  if(c  ==  'u'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'u'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'u'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	198	None	replace
2200	[BUG]  [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  '.'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	198	None	replace
2201	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  0;  }  [CE]  missing  return  statement  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  0;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  0;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	198	None	replace
2202	[BUG]  [BUGGY]  case  END:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  [CE]  cannot  find  symbol  END  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    	non-compiled	[CE]  cannot  find  symbol  END	342	None	replace
2203	[BUG]  [BUGGY]  return  escape.intValue()  -  1;  [CE]  char  cannot  be  dereferenced  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  escape.intValue()  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  escape.intValue()  -  1;	  return    escape.intValue();    	non-compiled	[CE]  char  cannot  be  dereferenced	242	None	replace
2204	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OBJECT;  [CE]  cannot  find  symbol  END_OBJECT  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OBJECT;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  END_OF_STREAM  :  END_OBJECT;	  return    c    >    0?    END_OF_STREAM    :    END_SPACE;    	non-compiled	[CE]  cannot  find  symbol  END_OBJECT	216	None	replace
2205	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_EOF;  [CE]  cannot  find  symbol  END_EOF  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_EOF;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  END_OF_STREAM  :  END_EOF;	  return    c    >    0?    END_OF_STREAM    :    END_SPACE;    	non-compiled	[CE]  cannot  find  symbol  END_EOF	216	None	replace
2206	[BUG]  [BUGGY]  return  c  >  0?  END_SPACE  :  END_OF_STREAM;  [CE]  cannot  find  symbol  END_SPACE  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_SPACE  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  END_SPACE  :  END_OF_STREAM;	  return    c    >    0?    END_OF_STREAM    :    END_SPACE;    	non-compiled	[CE]  cannot  find  symbol  END_SPACE	216	None	replace
2207	[BUG]  [BUGGY]  if(escape!=  null)  {  return  false;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(escape!=  null)  {  return  false;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(escape!=  null)  {  return  false;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None	replace
2208	[BUG]  [BUGGY]  if(escape!=  null)  {  return  false;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }  }  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(escape!=  null)  {  return  false;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(escape!=  null)  {  return  false;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None	replace
2209	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  false;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  false;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None	replace
2210	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  false;  }  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  false;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  false;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None	replace
2211	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None	replace
2212	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }  }  [CE]  illegal  start  of  expression  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None	replace
2213	[BUG]  [BUGGY]  return  BACKSPACE.equals(END_OF_STREAM)?  BACKSPACE  :  END_OF_STREAM;  [CE]  char  cannot  be  dereferenced  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  BACKSPACE.equals(END_OF_STREAM)?  BACKSPACE  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  BACKSPACE.equals(END_OF_STREAM)?  BACKSPACE  :  END_OF_STREAM;	  return    END_OF_STREAM.equals(c)?    BACKSPACE    :    END_OF_STREAM;    	non-compiled	[CE]  char  cannot  be  dereferenced	347	None	replace
2214	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_SPACE;  [CE]  cannot  find  symbol  END_SPACE  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_SPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_SPACE;	  return    c    ==    END_OF_STREAM?    END_OF_STREAM    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_SPACE	264	None	replace
2215	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_EOF;  [CE]  cannot  find  symbol  END_EOF  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_EOF;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_EOF;	  return    c    ==    END_OF_STREAM?    END_OF_STREAM    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_EOF	264	None	replace
2216	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OBJECT;  [CE]  cannot  find  symbol  END_OBJECT  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OBJECT;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OBJECT;	  return    c    ==    END_OF_STREAM?    END_OF_STREAM    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OBJECT	264	None	replace
2217	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_TO_STREAM;  [CE]  cannot  find  symbol  END_TO_STREAM  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_TO_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_TO_STREAM;	  return    c    ==    END_OF_STREAM?    END_OF_STREAM    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_TO_STREAM	264	None	replace
2218	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  |  END_OF_STREAM;  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  |  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  |  END_OF_STREAM;	  return    c    ==    END_OF_STREAM?    END_OF_STREAM    :    END_OF_STREAM;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	264	None	replace
2219	[BUG]  [BUGGY]  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence, ");  [CE]  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence, ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence, ");	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    EOF    whilst    processing    escape    sequence       ");    	non-compiled	[CE]  	344	None	replace
2220	[BUG]  [BUGGY]  return  END_SPACE  ||  END_OF_Escape.equals(c);  [CE]  cannot  find  symbol  END_SPACE  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_SPACE  ||  END_OF_Escape.equals(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_SPACE  ||  END_OF_Escape.equals(c);	  return    END_OF_STREAM    ||    END_OF_Escape.equals(c);    	non-compiled	[CE]  cannot  find  symbol  END_SPACE	349	None	replace
2221	[BUG]  [BUGGY]  return  END_BACKSPACE  ||  END_OF_Escape.equals(c);  [CE]  cannot  find  symbol  END_BACKSPACE  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_BACKSPACE  ||  END_OF_Escape.equals(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_BACKSPACE  ||  END_OF_Escape.equals(c);	  return    END_OF_STREAM    ||    END_OF_Escape.equals(c);    	non-compiled	[CE]  cannot  find  symbol  END_BACKSPACE	349	None	replace
2222	[BUG]  [BUGGY]  return  END_SURroundingSpaces  ||  END_OF_Escape.equals(c);  [CE]  cannot  find  symbol  END_SURroundingSpaces  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_SURroundingSpaces  ||  END_OF_Escape.equals(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_SURroundingSpaces  ||  END_OF_Escape.equals(c);	  return    END_OF_STREAM    ||    END_OF_Escape.equals(c);    	non-compiled	[CE]  cannot  find  symbol  END_SURroundingSpaces	349	None	replace
2223	[BUG]  [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpaces();  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	214	None	add
2224	[BUG]  [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpaces();  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentSurroundingSpaces();  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getCurrentSurroundingSpaces();  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	214	None	add
2225	[BUG]  [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c  >>  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c  >>  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpaces();  return  c  >>  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	214	None	add
2226	[BUG]  [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces().size();  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	214	None	add
2227	[BUG]  [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	214	None	add
2228	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  c  +  2;  int  c  =  getEscapeChar();  return  c  +  2;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  c  +  2;  int  c  =  getEscapeChar();  return  c  +  2;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  c  +  2;  int  c  =  getEscapeChar();  return  c  +  2;  }	  return    c    +    2;    int    c    =    getEscapeChar();    return    c    +    2;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	353	None	replace
2229	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  c  +  2;  int  c  =  getEscapeChar();  return  c  +  1;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  c  +  2;  int  c  =  getEscapeChar();  return  c  +  1;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  c  +  2;  int  c  =  getEscapeChar();  return  c  +  1;  }	  return    c    +    2;    int    c    =    getEscapeChar();    return    c    +    2;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	353	None	replace
2230	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  c  +  2;  int  c  =  getEscapeChar();  return  c  +  2;  }  else  {  return  END_OF_STREAM;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  c  +  2;  int  c  =  getEscapeChar();  return  c  +  2;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  c  +  2;  int  c  =  getEscapeChar();  return  c  +  2;  }  else  {  return  END_OF_STREAM;  }	  return    c    +    2;    int    c    =    getEscapeChar();    return    c    +    2;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	353	None	replace
2231	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  c  +  2;  int  c  =  getEscapeChar();  return  c  +  1;  }  else  {  return  END_OF_STREAM;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  c  +  2;  int  c  =  getEscapeChar();  return  c  +  1;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  c  +  2;  int  c  =  getEscapeChar();  return  c  +  1;  }  else  {  return  END_OF_STREAM;  }	  return    c    +    2;    int    c    =    getEscapeChar();    return    c    +    2;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	353	None	replace
2232	[BUG]  [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [CE]  illegal  start  of  expression  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
2233	[BUG]  [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  comenceStart;  }  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  comenceStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  comenceStart;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
2234	[BUG]  [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  }  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
2235	[BUG]  [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
2236	[BUG]  [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  String  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  String  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  String  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
2237	[BUG]  [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commentStart;  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in!=  null)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commentStart;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
2238	[BUG]  [BUGGY]  return  END_OF_STREAM;  escape;  [CE]  not  a  statement  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM;  escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM;  escape;	  return    escape;    escape;    	non-compiled	[CE]  not  a  statement	230	None	replace
2239	[BUG]  [BUGGY]  return  END_OF_STREAM.escape;  [CE]  int  cannot  be  dereferenced  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.escape;	  return    escape;    escape;    	non-compiled	[CE]  int  cannot  be  dereferenced	230	None	replace
2240	[BUG]  [BUGGY]  return  c  &  DISABLED;  int  c  =  getSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  DISABLED;  int  c  =  getSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  DISABLED;  int  c  =  getSurroundingSpace();	  return    c    &    END_OF_STREAM;    int    c    =    getSurroundingSpace();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	45	None	replace
2241	[BUG]  [BUGGY]  return  c  <  =  END_OF_STREAM;  int  c  =  getSurroundingSpace();  [CE]  illegal  start  of  expression  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  =  END_OF_STREAM;  int  c  =  getSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  =  END_OF_STREAM;  int  c  =  getSurroundingSpace();	  return    c    &    END_OF_STREAM;    int    c    =    getSurroundingSpace();    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
2242	[BUG]  [BUGGY]  return  c  <  =  BACKSPACE;  [CE]  illegal  start  of  expression  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  =  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  =  BACKSPACE;	  return    c    &    BACKSPACE;    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
2243	[BUG]  [BUGGY]  return  c  <  =  BACKSPACE  ||  END_OF_STREAM;  [CE]  illegal  start  of  expression  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  =  BACKSPACE  ||  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  =  BACKSPACE  ||  END_OF_STREAM;	  return    c    &    BACKSPACE;    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
2244	[BUG]  [BUGGY]  result  =  END_OF_STREAM  ||  END_OF_STREAM.equals(escape);  [CE]  cannot  find  symbol  result  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result  =  END_OF_STREAM  ||  END_OF_STREAM.equals(escape);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result  =  END_OF_STREAM  ||  END_OF_STREAM.equals(escape);	  result    =    END_OF_STREAM    ||    END_OF_STREAM.equals(c);    	non-compiled	[CE]  cannot  find  symbol  result	124	None	replace
2245	[BUG]  [BUGGY]  result  =  END_OF_STREAM  ||  END_OF_STREAM.equals(c  +  1);  [CE]  cannot  find  symbol  result  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result  =  END_OF_STREAM  ||  END_OF_STREAM.equals(c  +  1);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result  =  END_OF_STREAM  ||  END_OF_STREAM.equals(c  +  1);	  result    =    END_OF_STREAM    ||    END_OF_STREAM.equals(c);    	non-compiled	[CE]  cannot  find  symbol  result	124	None	replace
2246	[BUG]  [BUGGY]  result  =  END_OF_STREAM  ||  END_OF_STREAM.equals(entry);  [CE]  cannot  find  symbol  result  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result  =  END_OF_STREAM  ||  END_OF_STREAM.equals(entry);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result  =  END_OF_STREAM  ||  END_OF_STREAM.equals(entry);	  result    =    END_OF_STREAM    ||    END_OF_STREAM.equals(c);    	non-compiled	[CE]  cannot  find  symbol  result	124	None	replace
2247	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  4  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  -  4  +  1;	  return    c    -    4;    	compilable	  [FE]  (entry  2)  	115	5	replace
2248	[BUG]  [BUGGY]  return  c  -  4  +  1;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  4  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  4  +  1;	  return    c    -    4;    	compilable	  [FE]  (entry  2)  	115	5	replace
2249	[BUG]  [BUGGY]  int  delimiter  =  getDelimiterSurroundingSpaces().size();  [CE]  cannot  find  symbol  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getDelimiterSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getDelimiterSurroundingSpaces().size();	  int    delimiter    =    getSurroundingSpaces().size();    	non-compiled	[CE]  cannot  find  symbol	288	None	replace
2250	[BUG]  [BUGGY]  return  c  +  2;  int  c  =  getChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  2;  int  c  =  getChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  2;  int  c  =  getChar();	  return    c    +    1;    int    c    =    getChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	222	None	replace
2251	[BUG]  [BUGGY]  return  c  +  4;  int  c  =  getChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  4;  int  c  =  getChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  4;  int  c  =  getChar();	  return    c    +    1;    int    c    =    getChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	222	None	replace
2252	[BUG]  [BUGGY]  return  c  *  2;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  *  2;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    *    2;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	325	None	add
2253	[BUG]  [BUGGY]  return  c  *  2;  int  c  =  getChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  *  2;  int  c  =  getChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    *    2;    int  c  =  getChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	325	None	add
2254	[BUG]  [BUGGY]  return  c  *  2;  int  c  =  Integer.MAX_VALUE;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  *  2;  int  c  =  Integer.MAX_VALUE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    *    2;    int  c  =  Integer.MAX_VALUE;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	325	None	add
2255	[BUG]  [BUGGY]  return  END_OF_STREAM  +  escape;  return  END_OF_STREAM  +  escape;  [CE]  unreachable  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  escape;  return  END_OF_STREAM  +  escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    escape;    return  END_OF_STREAM  +  escape;	  	non-compiled	[CE]  unreachable  statement	279	None	add
2256	[BUG]  [BUGGY]  return  END_OF_STREAM  +  escape;  int  escape  =  getEscapeChar();  [CE]  cannot  find  symbol  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  escape;  int  escape  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    escape;    int  escape  =  getEscapeChar();	  	non-compiled	[CE]  cannot  find  symbol	279	None	add
2257	[BUG]  [BUGGY]  return  END_OF_STREAM  +  escape;  int  escape  =  readEscape(in,  c);  [CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  escape;  int  escape  =  readEscape(in,  c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    escape;    int  escape  =  readEscape(in,  c);	  	non-compiled	[CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;	279	None	add
2258	[BUG]  [BUGGY]  case  END:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  [CE]  cannot  find  symbol  END  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence.   ");    	non-compiled	[CE]  cannot  find  symbol  END	343	None	replace
2259	[BUG]  [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence.n ");  [CE]  duplicate  case  label  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence.n ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence.n ");	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence.   ");    	non-compiled	[CE]  duplicate  case  label	343	None	replace
2260	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_EOF;  [CE]  cannot  find  symbol  END_EOF  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_EOF;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  END_EOF;	  return    c    >    0?    1    :    END_OBJECT;    	non-compiled	[CE]  cannot  find  symbol  END_EOF	67	None	replace
2261	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_NUMBER;  [CE]  cannot  find  symbol  END_NUMBER  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_NUMBER;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  END_NUMBER;	  return    c    >    0?    1    :    END_OBJECT;    	non-compiled	[CE]  cannot  find  symbol  END_NUMBER	67	None	replace
2262	[BUG]  [BUGGY]  return  c  +  END_OF_STREAM.doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  END_OF_STREAM.doubleValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  END_OF_STREAM.doubleValue();	  return    END_OF_STREAM.doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	108	None	replace
2263	[BUG]  [BUGGY]  return  escape.doubleValue();  [CE]  char  cannot  be  dereferenced  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  escape.doubleValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  escape.doubleValue();	  return    END_OF_STREAM.doubleValue();    	non-compiled	[CE]  char  cannot  be  dereferenced	108	None	replace
2264	[BUG]  [BUGGY]  return  c  >=  0?  1  :  c;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  1  :  c;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    1    :    c;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	250	None	add
2265	[BUG]  [BUGGY]  return  c  >=  0?  1  :  c;  int  c  =  Integer.MAX_VALUE;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  1  :  c;  int  c  =  Integer.MAX_VALUE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    1    :    c;    int  c  =  Integer.MAX_VALUE;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	250	None	add
2266	[BUG]  [BUGGY]  return  c  >=  0?  1  :  c;  int  c  =  getChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  1  :  c;  int  c  =  getChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    1    :    c;    int  c  =  getChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	250	None	add
2267	[BUG]  [BUGGY]  return  c  >=  0?  1  :  c;  int  c  =  getSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  1  :  c;  int  c  =  getSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    1    :    c;    int  c  =  getSurroundingSpace();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	250	None	add
2268	[BUG]  [BUGGY]  return  c  +  1;  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence   "  +  1;  [CE]  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  1;  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence   "  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  1;  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence   "  +  1;	  return    END_OF_STREAM    +    1;    case    END_OF_STREAM:    throw    new    EOF    whilst    processing    escape    sequence       "    +    1;    	non-compiled	[CE]  	319	None	replace
2269	[BUG]  [BUGGY]  return  this.ignoredEmptyLines  &&  this.ignoredEmptySurroundingSpaces;  [CE]  cannot  find  symbol  ignoredEmptyLines  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoredEmptyLines  &&  this.ignoredEmptySurroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoredEmptyLines  &&  this.ignoredEmptySurroundingSpaces;	  return    this.ignoredEmptyLines;    	non-compiled	[CE]  cannot  find  symbol  ignoredEmptyLines	147	None	replace
2270	[BUG]  [BUGGY]  return  this.ignoredEmptyLines  &&  this.ignoredEmptySpaces;  [CE]  cannot  find  symbol  ignoredEmptyLines  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoredEmptyLines  &&  this.ignoredEmptySpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoredEmptyLines  &&  this.ignoredEmptySpaces;	  return    this.ignoredEmptyLines;    	non-compiled	[CE]  cannot  find  symbol  ignoredEmptyLines	147	None	replace
2271	[BUG]  [BUGGY]  return  END_OF_STREAM,  delimiter.length;  [CE]  ';'  expected  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM,  delimiter.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM,  delimiter.length;	  return    END_OF_STREAM.length;    	non-compiled	[CE]  ';'  expected	228	None	replace
2272	[BUG]  [BUGGY]  return  END_OF_STREAM,  c.length;  [CE]  ';'  expected  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM,  c.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM,  c.length;	  return    END_OF_STREAM.length;    	non-compiled	[CE]  ';'  expected	228	None	replace
2273	[BUG]  [BUGGY]  return  c  +  12;  int  c  =  Integer.MAX_VALUE;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  12;  int  c  =  Integer.MAX_VALUE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    12;    int  c  =  Integer.MAX_VALUE;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	248	None	add
2274	[BUG]  [BUGGY]  return  c  +  12;  int  c  =  getChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  12;  int  c  =  getChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    12;    int  c  =  getChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	248	None	add
2275	[BUG]  [BUGGY]  return  c  +  12;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  12;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    12;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	248	None	add
2276	[BUG]  [BUGGY]  return  c  +  12;  Integer  c  +  12;  [CE]  ';'  expected  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  12;  Integer  c  +  12;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    12;    Integer  c  +  12;	  	non-compiled	[CE]  ';'  expected	248	None	add
2277	[BUG]  [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_RUNNING;  [CE]  cannot  find  symbol  END_OF_RUNNING  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_RUNNING;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >=  0?  END_OF_STREAM  :  END_OF_RUNNING;	  return    c    >=    0?    c    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_RUNNING	142	None	replace
2278	[BUG]  [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_RUNNSPACE;  [CE]  cannot  find  symbol  END_OF_RUNNSPACE  [FE]      Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_RUNNSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >=  0?  END_OF_STREAM  :  END_OF_RUNNSPACE;	  return    c    >=    0?    c    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_RUNNSPACE	142	None	replace
2279	[BUG]  [BUGGY]  return  END_OF_STREAM  +  'n';  int  n  =  readEscapeSurroundingSpaces(c);  [CE]  cannot  find  symbol  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  'n';  int  n  =  readEscapeSurroundingSpaces(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    'n';    int  n  =  readEscapeSurroundingSpaces(c);	  	non-compiled	[CE]  cannot  find  symbol	281	None	add
2280	[BUG]  [BUGGY]  return  END_OF_STREAM  +  'n';  int  n  =  readEscapeSurroundingSpaces();  [CE]  cannot  find  symbol  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  'n';  int  n  =  readEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    'n';    int  n  =  readEscapeSurroundingSpaces();	  	non-compiled	[CE]  cannot  find  symbol	281	None	add
2281	[BUG]  [BUGGY]  return  END_OF_STREAM  +  'n';  int  n  =  getEscapeChar();  [CE]  cannot  find  symbol  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  'n';  int  n  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    'n';    int  n  =  getEscapeChar();	  	non-compiled	[CE]  cannot  find  symbol	281	None	add
2282	[BUG]  [BUGGY]  return  END_SPACE  ||  END_OF_EscapeSequences.indexOf(c)  >=  -1;  [CE]  cannot  find  symbol  END_SPACE  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_SPACE  ||  END_OF_EscapeSequences.indexOf(c)  >=  -1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_SPACE  ||  END_OF_EscapeSequences.indexOf(c)  >=  -1;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences.indexOf(c)    >=    -1;    	non-compiled	[CE]  cannot  find  symbol  END_SPACE	350	None	replace
2283	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_SURroundingSpaces.indexOf(c)  >=  -1;  [CE]  cannot  find  symbol  END_SURroundingSpaces  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_SURroundingSpaces.indexOf(c)  >=  -1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_SURroundingSpaces.indexOf(c)  >=  -1;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences.indexOf(c)    >=    -1;    	non-compiled	[CE]  cannot  find  symbol  END_SURroundingSpaces	350	None	replace
2284	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_SPACE.indexOf(c)  >=  -1;  [CE]  cannot  find  symbol  END_SPACE  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_SPACE.indexOf(c)  >=  -1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_SPACE.indexOf(c)  >=  -1;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences.indexOf(c)    >=    -1;    	non-compiled	[CE]  cannot  find  symbol  END_SPACE	350	None	replace
2285	[BUG]  [BUGGY]  return  c  &  DISABLED;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  DISABLED;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  DISABLED;  int  c  =  getEscapeSurroundingSpaces();	  return    c    &    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	40	None	replace
2286	[BUG]  [BUGGY]  return  c  <  =  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [CE]  illegal  start  of  expression  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  =  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  =  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();	  return    c    &    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
2287	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM.length;  int  c  =  getEscapeSurroundingSpaces();  [CE]  int  cannot  be  dereferenced  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM.length;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  END_OF_STREAM.length;  int  c  =  getEscapeSurroundingSpaces();	  return    c    >    0?    1    :    c;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  int  cannot  be  dereferenced	162	None	replace
2288	[BUG]  [BUGGY]  return  COMMENT_START  +  END_OF_STREAM;  [CE]  cannot  find  symbol  COMMENT_START  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  COMMENT_START  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  COMMENT_START  +  END_OF_STREAM;	  return    END_OF_STREAM    +    commmentStart;    	non-compiled	[CE]  cannot  find  symbol  COMMENT_START	81	None	replace
2289	[BUG]  [BUGGY]  return  COMMENTStart  +  END_OF_STREAM;  [CE]  cannot  find  symbol  COMMENTStart  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  COMMENTStart  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  COMMENTStart  +  END_OF_STREAM;	  return    END_OF_STREAM    +    commmentStart;    	non-compiled	[CE]  cannot  find  symbol  COMMENTStart	81	None	replace
2290	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  commmentStart;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  commmentStart;	  return    escapeSurroundingSpaces;    	compilable	  [FE]  (entry  2)  	148	5	replace
2291	[BUG]  [BUGGY]  return  commmentStart;  [FE]  (entry  2)  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  commmentStart;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  commmentStart;	  return    escapeSurroundingSpaces;    	compilable	  [FE]  (entry  2)  	148	5	replace
2292	[BUG]  [BUGGY]  return  END_OF_STREAM.replace(c,  END_OF_STREAM);  [CE]  int  cannot  be  dereferenced  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.replace(c,  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.replace(c,  END_OF_STREAM);	  return    escapeSurroundingSpaces;    	non-compiled	[CE]  int  cannot  be  dereferenced	148	None	replace
2293	[BUG]  [BUGGY]  return  END_OF_STREAM.replace(c,  escapeSurroundingSpaces);  [CE]  cannot  find  symbol  escapeSurroundingSpaces  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.replace(c,  escapeSurroundingSpaces);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.replace(c,  escapeSurroundingSpaces);	  return    escapeSurroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  escapeSurroundingSpaces	148	None	replace
2294	[BUG]  [BUGGY]  c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(c  >  0?  1  :  c;  }  [CE]  not  a  statement  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(c  >  0?  1  :  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(c  >  0?  1  :  c;  }	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    len;    ++c)    {    if(c    >    0?    1    :    c;    }    	non-compiled	[CE]  not  a  statement	295	None	replace
2295	[BUG]  [BUGGY]  return  c  +  1;  int  c  -  1;  [CE]  ';'  expected  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  1;  int  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  1;  int  c  -  1;	  return    c    -    1;    int    c    -    1;    	non-compiled	[CE]  ';'  expected	151	None	replace
2296	[BUG]  [BUGGY]  return  c  -  1;  int  c  -=  2;  [CE]  ';'  expected  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1;  int  c  -=  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  1;  int  c  -=  2;	  return    c    -    1;    int    c    -    1;    	non-compiled	[CE]  ';'  expected	151	None	replace
2297	[BUG]  [BUGGY]  return  c  -  1;  int  c  =  0;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1;  int  c  =  0;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  1;  int  c  =  0;	  return    c    -    1;    int    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	151	None	replace
2298	[BUG]  [BUGGY]  int  delimiter  =  getSurroundingSpaces(),  c.length;  [CE]  ';'  expected  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getSurroundingSpaces(),  c.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getSurroundingSpaces(),  c.length;	  int    delimiter    =    getSurroundingSpaces().length;    	non-compiled	[CE]  ';'  expected	287	None	replace
2299	[BUG]  [BUGGY]  return  c  -  4;  int  c  =  Integer.MAX_VALUE;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  4;  int  c  =  Integer.MAX_VALUE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    4;    int  c  =  Integer.MAX_VALUE;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	114	None	add
2300	[BUG]  [BUGGY]  return  c  -  4;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  4;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    4;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	114	None	add
2301	[BUG]  [BUGGY]  return  c  -  4;  int  c  =  getChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  4;  int  c  =  getChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    4;    int  c  =  getChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	114	None	add
2302	[BUG]  [BUGGY]  c  =  getEscapeSurroundingSpace(bufferedReader);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  =  getEscapeSurroundingSpace(bufferedReader);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  =  getEscapeSurroundingSpace(bufferedReader);	  return    BACKSPACE;    int    c    =    getEscapeSurroundingSpace(c);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	171	None	replace
2303	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpace(bufferedReader);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpace(bufferedReader);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpace(bufferedReader);	  return    BACKSPACE;    int    c    =    getEscapeSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	171	None	replace
2304	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpace(end_of_STREAM);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpace(end_of_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpace(end_of_STREAM);	  return    BACKSPACE;    int    c    =    getEscapeSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	171	None	replace
2305	[BUG]  [BUGGY]  return  c  +  1;  int  c  =  getCurrentIndex()  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  1;  int  c  =  getCurrentIndex()  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  1;  int  c  =  getCurrentIndex()  +  1;	  return    c    +    1;    int    c    =    getCurrentIndex();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	220	None	replace
2306	[BUG]  [BUGGY]  return  this.escapeEmptyLines?  END_OF_STREAM  :  END_BACKSPACE;  [CE]  cannot  find  symbol  escapeEmptyLines  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.escapeEmptyLines?  END_OF_STREAM  :  END_BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.escapeEmptyLines?  END_OF_STREAM  :  END_BACKSPACE;	  return    this.escapeSurroundingSpaces?    END_OF_STREAM    :    END_BACKSPACE;    	non-compiled	[CE]  cannot  find  symbol  escapeEmptyLines	209	None	replace
2307	[BUG]  [BUGGY]  return  END_OF_STREAM?  END_OF_STREAM  :  END_BACKSPACE;  [CE]  incompatible  types  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM?  END_OF_STREAM  :  END_BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM?  END_OF_STREAM  :  END_BACKSPACE;	  return    this.escapeSurroundingSpaces?    END_OF_STREAM    :    END_BACKSPACE;    	non-compiled	[CE]  incompatible  types	209	None	replace
2308	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  Integer.parseInt(quoteChar);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  Integer.parseInt(quoteChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  Integer.parseInt(quoteChar);	  return    c    >    0?    c    :    END_OF_STREAM;    int    c    =    Integer.parseInt(quoteChar);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	314	None	replace
2309	[BUG]  [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  Integer.parseInt(quoteChar);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  Integer.parseInt(quoteChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  Integer.parseInt(quoteChar);	  return    c    >    0?    c    :    END_OF_STREAM;    int    c    =    Integer.parseInt(quoteChar);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	314	None	replace
2310	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }  [CE]  unreachable  statement  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }	  return    BACKSPACE;    return    BACKSPACE;    	non-compiled	[CE]  unreachable  statement	224	None	replace
2311	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(c  ==  'n'  ||  c  ==  'r')  {  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }	  return    BACKSPACE;    return    BACKSPACE;    	compilable	  [FE]  (entry  2)  	224	3	replace
2312	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }  [FE]  (entry  2)  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }	  return    BACKSPACE;    return    BACKSPACE;    	compilable	  [FE]  (entry  2)  	224	3	replace
2313	[BUG]  [BUGGY]  if(c!=  END_OF_STREAM)  {  return  BACKSPACE;  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }  [CE]  unreachable  statement  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c!=  END_OF_STREAM)  {  return  BACKSPACE;  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c!=  END_OF_STREAM)  {  return  BACKSPACE;  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }	  return    BACKSPACE;    return    BACKSPACE;    	non-compiled	[CE]  unreachable  statement	224	None	replace
2314	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  BACKSPACE;  }  [CE]  missing  return  statement  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  BACKSPACE;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  BACKSPACE;  }	  return    BACKSPACE;    return    BACKSPACE;    	non-compiled	[CE]  missing  return  statement	224	None	replace
2315	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  return  BACKSPACE;  }  else  {  throw  new  IOException( " ");  }  [CE]  unreachable  statement  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  return  BACKSPACE;  }  else  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  return  BACKSPACE;  }  else  {  throw  new  IOException( " ");  }	  return    BACKSPACE;    return    BACKSPACE;    	non-compiled	[CE]  unreachable  statement	224	None	replace
2316	[BUG]  [BUGGY]  if(c  >=  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeSurroundingSpaces();  return  c  -  1;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >=  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeSurroundingSpaces();  return  c  -  1;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >=  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeSurroundingSpaces();  return  c  -  1;  }	  return    c    -    1;    int    c    =    getEscapeSurroundingSpaces();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	309	None	replace
2317	[BUG]  [BUGGY]  if(c  >=  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeSurroundingSpaces();  return  c  -  1;  }  else  {  return  END_OF_STREAM;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >=  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeSurroundingSpaces();  return  c  -  1;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >=  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeSurroundingSpaces();  return  c  -  1;  }  else  {  return  END_OF_STREAM;  }	  return    c    -    1;    int    c    =    getEscapeSurroundingSpaces();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	309	None	replace
2318	[BUG]  [BUGGY]  if(c  >=  END_OF_STREAM)  {  return  c  -  1;  }  else  {  int  c  =  getEscapeSurroundingSpaces();  return  c  -  1;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >=  END_OF_STREAM)  {  return  c  -  1;  }  else  {  int  c  =  getEscapeSurroundingSpaces();  return  c  -  1;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >=  END_OF_STREAM)  {  return  c  -  1;  }  else  {  int  c  =  getEscapeSurroundingSpaces();  return  c  -  1;  }	  return    c    -    1;    int    c    =    getEscapeSurroundingSpaces();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	309	None	replace
2319	[BUG]  [BUGGY]  if(c  >=  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeSurroundingSpaces();  return  c  -  1;  }  else  {  throw  new  IOException( " ");  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >=  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeSurroundingSpaces();  return  c  -  1;  }  else  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >=  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getEscapeSurroundingSpaces();  return  c  -  1;  }  else  {  throw  new  IOException( " ");  }	  return    c    -    1;    int    c    =    getEscapeSurroundingSpaces();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	309	None	replace
2320	[BUG]  [BUGGY]  return  b  ||  END_OF_EscapeSequences;  [CE]  cannot  find  symbol  b  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  b  ||  END_OF_EscapeSequences;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  b  ||  END_OF_EscapeSequences;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences;    	non-compiled	[CE]  cannot  find  symbol  b	348	None	replace
2321	[BUG]  [BUGGY]  return  escapeChar  ||  END_OF_EscapeSequences;  [CE]  cannot  find  symbol  escapeChar  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  escapeChar  ||  END_OF_EscapeSequences;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  escapeChar  ||  END_OF_EscapeSequences;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences;    	non-compiled	[CE]  cannot  find  symbol  escapeChar	348	None	replace
2322	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_SPACE;  [CE]  cannot  find  symbol  END_SPACE  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_SPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_SPACE;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences;    	non-compiled	[CE]  cannot  find  symbol  END_SPACE	348	None	replace
2323	[BUG]  [BUGGY]  return  ch  ||  END_OF_EscapeSequences;  [CE]  cannot  find  symbol  ch  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  ch  ||  END_OF_EscapeSequences;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  ch  ||  END_OF_EscapeSequences;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences;    	non-compiled	[CE]  cannot  find  symbol  ch	348	None	replace
2324	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  DISABLED  *  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  DISABLED  *  END_OF_STREAM;	  return    END_OF_STREAM    +    DISABLED;    	compilable	  [FE]  (entry  2)  	183	5	replace
2325	[BUG]  [BUGGY]  return  DISABLED  *  END_OF_STREAM;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  DISABLED  *  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  DISABLED  *  END_OF_STREAM;	  return    END_OF_STREAM    +    DISABLED;    	compilable	  [FE]  (entry  2)  	183	5	replace
2326	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  DISABLED  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  END_OF_STREAM  +  DISABLED  +  2;	  return    END_OF_STREAM    +    DISABLED;    	compilable	  [FE]  (entry  2)  	183	5	replace
2327	[BUG]  [BUGGY]  return  END_OF_STREAM  +  DISABLED  +  2;  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  DISABLED  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  DISABLED  +  2;	  return    END_OF_STREAM    +    DISABLED;    	compilable	  [FE]  (entry  2)  	183	5	replace
2328	[BUG]  [BUGGY]  return  this.ignoreSurroundingSpaces?  null  :  this.ignoreSurroundingSpaces;  [CE]  incompatible  types  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreSurroundingSpaces?  null  :  this.ignoreSurroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoreSurroundingSpaces?  null  :  this.ignoreSurroundingSpaces;	  return    this.ignoreSurroundingSpaces;    	non-compiled	[CE]  incompatible  types	149	None	replace
2329	[BUG]  [BUGGY]  return  this.ignoreSurroundingSpaces?  0  :  ignoreEmptyLines;  [CE]  incompatible  types  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreSurroundingSpaces?  0  :  ignoreEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoreSurroundingSpaces?  0  :  ignoreEmptyLines;	  return    this.ignoreSurroundingSpaces;    	non-compiled	[CE]  incompatible  types	149	None	replace
2330	[BUG]  [BUGGY]  int  delimiter  =  getDelimiter()  &  END_OF_STREAM;  [CE]  cannot  find  symbol  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getDelimiter()  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getDelimiter()  &  END_OF_STREAM;	  int    delimiter    =    getDelimiter();    	non-compiled	[CE]  cannot  find  symbol	284	None	replace
2331	[BUG]  [BUGGY]  return  this.escapeEmptyLines?  END_OF_STREAM  :  END_EXPECTED;  [CE]  cannot  find  symbol  escapeEmptyLines  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.escapeEmptyLines?  END_OF_STREAM  :  END_EXPECTED;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.escapeEmptyLines?  END_OF_STREAM  :  END_EXPECTED;	  return    this.escapeSurroundingSpaces?    END_OF_STREAM    :    END_EXPECTED;    	non-compiled	[CE]  cannot  find  symbol  escapeEmptyLines	211	None	replace
2332	[BUG]  [BUGGY]  int  c  =  getSurroundingSpaces();  Integer  c  >  0?  1  :  c;  [CE]  ';'  expected  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpaces();  Integer  c  >  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpaces();  Integer  c  >  0?  1  :  c;	  return    c    >    0?    1    :    c;    Integer    c    >    0?    1    :    c;    	non-compiled	[CE]  ';'  expected	160	None	replace
2333	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces();  Integer  c  >  0?  1  :  c;  [CE]  ';'  expected  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces();  Integer  c  >  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces();  Integer  c  >  0?  1  :  c;	  return    c    >    0?    1    :    c;    Integer    c    >    0?    1    :    c;    	non-compiled	[CE]  ';'  expected	160	None	replace
2334	[BUG]  [BUGGY]  return  CSVFormat.BACKSPACE  +  END_OF_STREAM;  [CE]  cannot  find  symbol  BACKSPACE  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.BACKSPACE  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.BACKSPACE  +  END_OF_STREAM;	  return    CSVFormat.BACKSPACE;    	non-compiled	[CE]  cannot  find  symbol  BACKSPACE	135	None	replace
2335	[BUG]  [BUGGY]  case  END_EOF:  throw  new  EOF  whilst  processing  escape  sequence ");  [CE]  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_EOF:  throw  new  EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_EOF:  throw  new  EOF  whilst  processing  escape  sequence ");	  return    END_OF_STREAM;    case    END_OF_STREAM:    throw    new    EOF    whilst    processing    escape    sequence       ");    	non-compiled	[CE]  	299	None	replace
2336	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  &  END_OF_STREAM  -  1;	  return    c    &    END_OF_STREAM    |    1;    	compilable	  [FE]  (entry  2)  	105	4	replace
2337	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  -  1;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  END_OF_STREAM  -  1;	  return    c    &    END_OF_STREAM    |    1;    	compilable	  [FE]  (entry  2)  	105	4	replace
2338	[BUG]  [BUGGY]  return  c  <  =  END_OF_STREAM;  Record  do  not  match  expected  result(c  &  END_OF_STREAM);  [CE]  illegal  start  of  expression  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  =  END_OF_STREAM;  Record  do  not  match  expected  result(c  &  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  =  END_OF_STREAM;  Record  do  not  match  expected  result(c  &  END_OF_STREAM);	  return    c    &    END_OF_STREAM;    Record    do    not    match    expected    result(c    &    END_OF_STREAM);    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
2339	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM;  Record  do  not  match  expected  result(c  +  END_OF_STREAM);  [CE]  not  a  statement  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM;  Record  do  not  match  expected  result(c  +  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  END_OF_STREAM;  Record  do  not  match  expected  result(c  +  END_OF_STREAM);	  return    c    &    END_OF_STREAM;    Record    do    not    match    expected    result(c    &    END_OF_STREAM);    	non-compiled	[CE]  not  a  statement	194	None	replace
2340	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM;  Record  do  not  match  expected  result(c  &  END_OF_STREAM,  escapeChar);  [CE]  not  a  statement  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM;  Record  do  not  match  expected  result(c  &  END_OF_STREAM,  escapeChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  END_OF_STREAM;  Record  do  not  match  expected  result(c  &  END_OF_STREAM,  escapeChar);	  return    c    &    END_OF_STREAM;    Record    do    not    match    expected    result(c    &    END_OF_STREAM);    	non-compiled	[CE]  not  a  statement	194	None	replace
2341	[BUG]  [BUGGY]  return  b.intValue()  *  2;  [CE]  cannot  find  symbol  b  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  b.intValue()  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  b.intValue()  *  2;	  return    END_OF_STREAM.intValue()    *    2;    	non-compiled	[CE]  cannot  find  symbol  b	111	None	replace
2342	[BUG]  [BUGGY]  return  c  >  0?  1  :  this.ignoreEmptyLines;  [CE]  incompatible  types  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  this.ignoreEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  this.ignoreEmptyLines;	  return    c    >    0?    1    :    escapeSurroundingSpaces;    	non-compiled	[CE]  incompatible  types	66	None	replace
2343	[BUG]  [BUGGY]  return  c  >  0?  1  :  this.ignoredEmptyLines;  [CE]  cannot  find  symbol  ignoredEmptyLines  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  this.ignoredEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  this.ignoredEmptyLines;	  return    c    >    0?    1    :    escapeSurroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  ignoredEmptyLines	66	None	replace
2344	[BUG]  [BUGGY]  c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0  [CE]  not  a  statement  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    len;    ++c)    {    if(!ignoreEmptyLines)    {    return    c    >    0?    1    :    c;    }    	non-compiled	[CE]  not  a  statement	293	None	replace
2345	[BUG]  [BUGGY]  c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  [CE]  not  a  statement  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    len;    ++c)    {    if(!ignoreEmptyLines)    {    return    c    >    0?    1    :    c;    }    	non-compiled	[CE]  not  a  statement	293	None	replace
2346	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  &  END_OF_STREAM  +  3;	  return    c    &    END_OF_STREAM    +    1;    	compilable	  [FE]  (entry  2)  	101	5	replace
2347	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  3;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  END_OF_STREAM  +  3;	  return    c    &    END_OF_STREAM    +    1;    	compilable	  [FE]  (entry  2)  	101	5	replace
2348	[BUG]  [BUGGY]  return  END_SPACE  ||  END_OF_EscapeSequences.indexOf(c)  >=  0;  [CE]  cannot  find  symbol  END_SPACE  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_SPACE  ||  END_OF_EscapeSequences.indexOf(c)  >=  0;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_SPACE  ||  END_OF_EscapeSequences.indexOf(c)  >=  0;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences.indexOf(c)    >=    0;    	non-compiled	[CE]  cannot  find  symbol  END_SPACE	351	None	replace
2349	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_SURroundingSpaces.indexOf(c)  >=  0;  [CE]  cannot  find  symbol  END_SURroundingSpaces  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_SURroundingSpaces.indexOf(c)  >=  0;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_SURroundingSpaces.indexOf(c)  >=  0;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences.indexOf(c)    >=    0;    	non-compiled	[CE]  cannot  find  symbol  END_SURroundingSpaces	351	None	replace
2350	[BUG]  [BUGGY]  return  c  ||  END_OF_EscapeSequences.indexOf(c)  >>  0;  [CE]  cannot  find  symbol  END_OF_EscapeSequences  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ||  END_OF_EscapeSequences.indexOf(c)  >>  0;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ||  END_OF_EscapeSequences.indexOf(c)  >>  0;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences.indexOf(c)    >=    0;    	non-compiled	[CE]  cannot  find  symbol  END_OF_EscapeSequences	351	None	replace
2351	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_SPACE.indexOf(c)  >=  0;  [CE]  cannot  find  symbol  END_SPACE  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_SPACE.indexOf(c)  >=  0;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_SPACE.indexOf(c)  >=  0;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences.indexOf(c)    >=    0;    	non-compiled	[CE]  cannot  find  symbol  END_SPACE	351	None	replace
2352	[BUG]  [BUGGY]  return  c  ==  0?  1  :  END_OF_STREAM.length;  [CE]  int  cannot  be  dereferenced  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  END_OF_STREAM.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  1  :  END_OF_STREAM.length;	  return    c    ==    0?    1    :    c;    	non-compiled	[CE]  int  cannot  be  dereferenced	255	None	replace
2353	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]      Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  ==  0?  1  :  END_OF_STREAM  +  1;	  return    c    ==    0?    1    :    c;    	compilable	  [FE]  (entry  2)  	255	5	replace
2354	[BUG]  [BUGGY]  return  c  ==  0?  1  :  END_OF_STREAM  +  1;  [FE]  (entry  2)  [FE]      Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  1  :  END_OF_STREAM  +  1;	  return    c    ==    0?    1    :    c;    	compilable	  [FE]  (entry  2)  	255	5	replace
2355	[BUG]  [BUGGY]  return  c  +  4;  int  c  =  Integer.MAX_VALUE;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  4;  int  c  =  Integer.MAX_VALUE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    4;    int  c  =  Integer.MAX_VALUE;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	88	None	add
2356	[BUG]  [BUGGY]  return  c  +  4;  Integer  c  +  4;  [CE]  ';'  expected  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  4;  Integer  c  +  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    4;    Integer  c  +  4;	  	non-compiled	[CE]  ';'  expected	88	None	add
2357	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c);  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c);  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c);  }	  return    BACKSPACE;    Integer    c    =    getEscapeSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	170	None	replace
2358	[BUG]  [BUGGY]  if(c!=  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c);  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c!=  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c);  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c!=  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c);  }	  return    BACKSPACE;    Integer    c    =    getEscapeSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	170	None	replace
2359	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c);  }  else  {  throw  new  IOException( " ");  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c);  }  else  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c);  }  else  {  throw  new  IOException( " ");  }	  return    BACKSPACE;    Integer    c    =    getEscapeSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	170	None	replace
2360	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c);  }  else  {  return  END_OF_STREAM;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c);  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c);  }  else  {  return  END_OF_STREAM;  }	  return    BACKSPACE;    Integer    c    =    getEscapeSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	170	None	replace
2361	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  %  END_OF_STREAM  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  %  END_OF_STREAM  *  2;	  return    c    %    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	103	5	replace
2362	[BUG]  [BUGGY]  return  c  %  END_OF_STREAM  *  2;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  %  END_OF_STREAM  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  %  END_OF_STREAM  *  2;	  return    c    %    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	103	5	replace
2363	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  %  END_OF_STREAM  +  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  %  END_OF_STREAM  +  4;	  return    c    %    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	103	5	replace
2364	[BUG]  [BUGGY]  return  c  %  END_OF_STREAM  +  4;  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  %  END_OF_STREAM  +  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  %  END_OF_STREAM  +  4;	  return    c    %    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	103	5	replace
2365	[BUG]  [BUGGY]  default:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  break  BACKSPACE;  [CE]  duplicate  default  label  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  default:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  break  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	default:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  break  BACKSPACE;	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    break    BACKSPACE;    	non-compiled	[CE]  duplicate  default  label	346	None	replace
2366	[BUG]  [BUGGY]  case  END:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  break  BACKSPACE;  [CE]  cannot  find  symbol  END  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  break  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  break  BACKSPACE;	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    break    BACKSPACE;    	non-compiled	[CE]  cannot  find  symbol  END	346	None	replace
2367	[BUG]  [BUGGY]  case  END_OBJECT:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  break  BACKSPACE;  [CE]  cannot  find  symbol  END_OBJECT  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OBJECT:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  break  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OBJECT:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  break  BACKSPACE;	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    break    BACKSPACE;    	non-compiled	[CE]  cannot  find  symbol  END_OBJECT	346	None	replace
2368	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  c;  c++)  {  return  c  >  0?  1  :  c;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  c;  c++)  {  return  c  >  0?  1  :  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  c;  c++)  {  return  c  >  0?  1  :  c;  }	  return    c    >    0?    1    :    c;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	161	None	replace
2369	[BUG]  [BUGGY]  return  c.equals(END_OF_Escape)?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  cannot  find  symbol  END_OF_Escape  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c.equals(END_OF_Escape)?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c.equals(END_OF_Escape)?  END_OF_STREAM  :  END_OF_STREAM;	  return    END_OF_STREAM.equals(c)?    END_OF_Escape    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_Escape	367	None	replace
2370	[BUG]  [BUGGY]  return  END_OF_Escape.equals(c)?  END_OF_REACHABLE  :  END_OF_STREAM;  [CE]  cannot  find  symbol  END_OF_Escape  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_Escape.equals(c)?  END_OF_REACHABLE  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_Escape.equals(c)?  END_OF_REACHABLE  :  END_OF_STREAM;	  return    END_OF_STREAM.equals(c)?    END_OF_Escape    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_Escape	367	None	replace
2371	[BUG]  [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentIndex();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentIndex();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getCurrentIndex();	  return    c    >    0?    c    :    END_OF_STREAM;    int    c    =    getCurrentIndex();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	275	None	replace
2372	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_SPACE;  int  c  =  getCurrentIndex();  [CE]  cannot  find  symbol  END_SPACE  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_SPACE;  int  c  =  getCurrentIndex();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  END_OF_STREAM  :  END_SPACE;  int  c  =  getCurrentIndex();	  return    c    >    0?    c    :    END_OF_STREAM;    int    c    =    getCurrentIndex();    	non-compiled	[CE]  cannot  find  symbol  END_SPACE	275	None	replace
2373	[BUG]  [BUGGY]  int  c  =  Integer.valueOf(0);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  Integer.valueOf(0);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  Integer.valueOf(0);	  return    c    -    1;    Integer    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	245	None	replace
2374	[BUG]  [BUGGY]  return  CSVFormat.START_EOF,  END_OF_STREAM;  [CE]  ';'  expected  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.START_EOF,  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.START_EOF,  END_OF_STREAM;	  return    CSVFormat.START_EOF;    	non-compiled	[CE]  ';'  expected	136	None	replace
2375	[BUG]  [BUGGY]  return  CSVFormat.START_EOF  ||  END_OF_STREAM;  [CE]  cannot  find  symbol  START_EOF  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.START_EOF  ||  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.START_EOF  ||  END_OF_STREAM;	  return    CSVFormat.START_EOF;    	non-compiled	[CE]  cannot  find  symbol  START_EOF	136	None	replace
2376	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_EmptyLines;  int  c  =  getSurroundingSpaces().size();  [CE]  cannot  find  symbol  END_EmptyLines  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_EmptyLines;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  END_EmptyLines;  int  c  =  getSurroundingSpaces().size();	  return    c    >    0?    1    :    c;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  cannot  find  symbol  END_EmptyLines	164	None	replace
2377	[BUG]  [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  =  Integer.MAX_VALUE;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  =  Integer.MAX_VALUE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    c    +    1;    int  c  =  Integer.MAX_VALUE;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	307	None	add
2378	[BUG]  [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    c    +    1;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	307	None	add
2379	[BUG]  [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  =  getChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  =  getChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    c    +    1;    int  c  =  getChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	307	None	add
2380	[BUG]  [BUGGY]  return  c  &  DISABLED;  int  c  =  getEscapeSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  DISABLED;  int  c  =  getEscapeSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  DISABLED;  int  c  =  getEscapeSurroundingSpace();	  return    c    &    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpace();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	197	None	replace
2381	[BUG]  [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpace();	  return    c    &    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpace();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	197	None	replace
2382	[BUG]  [BUGGY]  return  c  <  =  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpace();  [CE]  illegal  start  of  expression  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  =  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  =  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpace();	  return    c    &    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpace();    	non-compiled	[CE]  illegal  start  of  expression	197	None	replace
2383	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  unreachable  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    END_OF_STREAM?    END_OF_STREAM    :    END_OF_STREAM;    return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  unreachable  statement	263	None	add
2384	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    END_OF_STREAM?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	263	None	add
2385	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    END_OF_STREAM?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces();  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	263	None	add
2386	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  'n';  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  'n';	  return    END_OF_STREAM    +    'n';    	compilable	  [FE]  (entry  2)  	282	5	replace
2387	[BUG]  [BUGGY]  return  'n';  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  'n';  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  'n';	  return    END_OF_STREAM    +    'n';    	compilable	  [FE]  (entry  2)  	282	5	replace
2388	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  escape  +  'n';  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  escape  +  'n';	  return    END_OF_STREAM    +    'n';    	compilable	  [FE]  (entry  2)  	282	5	replace
2389	[BUG]  [BUGGY]  return  escape  +  'n';  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  escape  +  'n';  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  escape  +  'n';	  return    END_OF_STREAM    +    'n';    	compilable	  [FE]  (entry  2)  	282	5	replace
2390	[BUG]  [BUGGY]  return  b.intValue();  [CE]  cannot  find  symbol  b  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  b.intValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  b.intValue();	  return    d.intValue();    	non-compiled	[CE]  cannot  find  symbol  b	244	None	replace
2391	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  >=  END_OF_Escape  ||  c  >  END_OF_Escape;  [CE]  cannot  find  symbol  END_OF_Escape  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  >=  END_OF_Escape  ||  c  >  END_OF_Escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  >=  END_OF_Escape  ||  c  >  END_OF_Escape;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM    ||    c    >    END_OF_Escape;    	non-compiled	[CE]  cannot  find  symbol  END_OF_Escape	265	None	replace
2392	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  <  =  END_OF_Escape  ||  c  >  END_OF_Escape;  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  <  =  END_OF_Escape  ||  c  >  END_OF_Escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  <  =  END_OF_Escape  ||  c  >  END_OF_Escape;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM    ||    c    >    END_OF_Escape;    	non-compiled	[CE]  illegal  start  of  expression	265	None	replace
2393	[BUG]  [BUGGY]  return  c.intValue()  +  4;  [CE]  int  cannot  be  dereferenced  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c.intValue()  +  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c.intValue()  +  4;	  return    c.intValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	106	None	replace
2394	[BUG]  [BUGGY]  return  c  +  2;  int  c  =  getCurrentSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  2;  int  c  =  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  2;  int  c  =  getCurrentSurroundingSpace();	  return    c    +    1;    int    c    =    getCurrentSurroundingSpace();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	221	None	replace
2395	[BUG]  [BUGGY]  return  c  +  1;  int  c  =  getCurrentSurroundingSpace()  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  1;  int  c  =  getCurrentSurroundingSpace()  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  1;  int  c  =  getCurrentSurroundingSpace()  +  1;	  return    c    +    1;    int    c    =    getCurrentSurroundingSpace();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	221	None	replace
2396	[BUG]  [BUGGY]  Integer  c  =  getSurroundingSpaces();  return  c  -  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Integer  c  =  getSurroundingSpaces();  return  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Integer  c  =  getSurroundingSpaces();  return  c  -  1;	  return    c    -    1;    int    c    =    getSurroundingSpaces();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	310	None	replace
2397	[BUG]  [BUGGY]  int  c  =  getSurroundingSpaces().length;  return  c  -  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpaces().length;  return  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpaces().length;  return  c  -  1;	  return    c    -    1;    int    c    =    getSurroundingSpaces();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	310	None	replace
2398	[BUG]  [BUGGY]  return  c  +  1;  result  +=  END_OF_STREAM;  [CE]  cannot  find  symbol  result  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  1;  result  +=  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  1;  result  +=  END_OF_STREAM;	  return    END_OF_STREAM    +    1;    result    +=    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  result	181	None	replace
2399	[BUG]  [BUGGY]  return  END_OF_STREAM  +  1;  this.result  +=  END_OF_STREAM;  [CE]  cannot  find  symbol  result  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  1;  this.result  +=  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  1;  this.result  +=  END_OF_STREAM;	  return    END_OF_STREAM    +    1;    result    +=    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  result	181	None	replace
2400	[BUG]  [BUGGY]  return  END_OF_STREAM  +  1;  default  =  END_OF_STREAM;  [CE]  :  expected  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  1;  default  =  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  1;  default  =  END_OF_STREAM;	  return    END_OF_STREAM    +    1;    result    +=    END_OF_STREAM;    	non-compiled	[CE]  :  expected	181	None	replace
2401	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  16;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  +  16;	  return    c    +    18;    	compilable	  [FE]  (entry  2)  	370	5	replace
2402	[BUG]  [BUGGY]  return  c  +  16;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  16;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  16;	  return    c    +    18;    	compilable	  [FE]  (entry  2)  	370	5	replace
2403	[BUG]  [BUGGY]  return  c  <  0?  1  :  END_OF_SURroundingSpaces;  [CE]  cannot  find  symbol  END_OF_SURroundingSpaces  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  END_OF_SURroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  0?  1  :  END_OF_SURroundingSpaces;	  return    c    <    0?    1    :    c;    	non-compiled	[CE]  cannot  find  symbol  END_OF_SURroundingSpaces	65	None	replace
2404	[BUG]  [BUGGY]  return  c  <  0?  1  :  END_OF_STREAM.length;  [CE]  int  cannot  be  dereferenced  [FE]      Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  END_OF_STREAM.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  0?  1  :  END_OF_STREAM.length;	  return    c    <    0?    1    :    c;    	non-compiled	[CE]  int  cannot  be  dereferenced	65	None	replace
2405	[BUG]  [BUGGY]  return  c  <  0?  1  :  END_OPTIONAL_SURroundingSpaces;  [CE]  cannot  find  symbol  END_OPTIONAL_SURroundingSpaces  [FE]        Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  END_OPTIONAL_SURroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  0?  1  :  END_OPTIONAL_SURroundingSpaces;	  return    c    <    0?    1    :    c;    	non-compiled	[CE]  cannot  find  symbol  END_OPTIONAL_SURroundingSpaces	65	None	replace
2406	[BUG]  [BUGGY]  return  c  >  0?  1  :  -1;  Integer  c  >  0?  1  :  -1;  [CE]  ';'  expected  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  -1;  Integer  c  >  0?  1  :  -1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    -1;    Integer  c  >  0?  1  :  -1;	  	non-compiled	[CE]  ';'  expected	305	None	add
2407	[BUG]  [BUGGY]  return  c  >  0?  1  :  -1;  int  c  =  getChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  -1;  int  c  =  getChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    -1;    int  c  =  getChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	305	None	add
2408	[BUG]  [BUGGY]  return  c  >  0?  1  :  -1;  int  c  =  Integer.MAX_VALUE;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  -1;  int  c  =  Integer.MAX_VALUE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    -1;    int  c  =  Integer.MAX_VALUE;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	305	None	add
2409	[BUG]  [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c;  }  else  {  throw  new  IOException( " ");  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c;  }  else  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(ignoreEmptyLines)  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c;  }  else  {  throw  new  IOException( " ");  }	  return    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces();    return    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	262	None	replace
2410	[BUG]  [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c;  }  else  {  return  DISABLED;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(ignoreEmptyLines)  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c;  }  else  {  return  DISABLED;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(ignoreEmptyLines)  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c;  }  else  {  return  DISABLED;  }	  return    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces();    return    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	262	None	replace
2411	[BUG]  [BUGGY]  if(escape!=  END_OF_STREAM)  {  return  escape;  int  escape  =  readEscape(c,  END_OF_STREAM);  }  [CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(escape!=  END_OF_STREAM)  {  return  escape;  int  escape  =  readEscape(c,  END_OF_STREAM);  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(escape!=  END_OF_STREAM)  {  return  escape;  int  escape  =  readEscape(c,  END_OF_STREAM);  }	  return    escape;    int    escape    =    readEscape(c,    END_OF_STREAM);    	non-compiled	[CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;	235	None	replace
2412	[BUG]  [BUGGY]  if(escape  ==  END_OF_STREAM)  {  return  escape;  int  escape  =  readEscape(c,  END_OF_STREAM);  }  [CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(escape  ==  END_OF_STREAM)  {  return  escape;  int  escape  =  readEscape(c,  END_OF_STREAM);  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(escape  ==  END_OF_STREAM)  {  return  escape;  int  escape  =  readEscape(c,  END_OF_STREAM);  }	  return    escape;    int    escape    =    readEscape(c,    END_OF_STREAM);    	non-compiled	[CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;	235	None	replace
2413	[BUG]  [BUGGY]  if(escape!=  0)  {  return  escape;  int  escape  =  readEscape(c,  END_OF_STREAM);  }  [CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(escape!=  0)  {  return  escape;  int  escape  =  readEscape(c,  END_OF_STREAM);  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(escape!=  0)  {  return  escape;  int  escape  =  readEscape(c,  END_OF_STREAM);  }	  return    escape;    int    escape    =    readEscape(c,    END_OF_STREAM);    	non-compiled	[CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;	235	None	replace
2414	[BUG]  [BUGGY]  if(escape  ==  END_OF_STREAM)  {  return  escape;  int  escape  =  readEscape(c,  END_OF_STREAM);  }  else  {  throw  new  IOException( " ");  }  [CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(escape  ==  END_OF_STREAM)  {  return  escape;  int  escape  =  readEscape(c,  END_OF_STREAM);  }  else  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(escape  ==  END_OF_STREAM)  {  return  escape;  int  escape  =  readEscape(c,  END_OF_STREAM);  }  else  {  throw  new  IOException( " ");  }	  return    escape;    int    escape    =    readEscape(c,    END_OF_STREAM);    	non-compiled	[CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;	235	None	replace
2415	[BUG]  [BUGGY]  if(escape!=  END_OF_STREAM)  {  return  escape;  int  escape  =  readEscape(c,  END_OF_STREAM);  }  else  {  throw  new  IOException( " ");  }  [CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(escape!=  END_OF_STREAM)  {  return  escape;  int  escape  =  readEscape(c,  END_OF_STREAM);  }  else  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(escape!=  END_OF_STREAM)  {  return  escape;  int  escape  =  readEscape(c,  END_OF_STREAM);  }  else  {  throw  new  IOException( " ");  }	  return    escape;    int    escape    =    readEscape(c,    END_OF_STREAM);    	non-compiled	[CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;	235	None	replace
2416	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  *  8;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  &  END_OF_STREAM  *  8;	  return    c    &    END_OF_STREAM    *    2;    	compilable	  [FE]  (entry  2)  	274	5	replace
2417	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  *  8;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  *  8;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  END_OF_STREAM  *  8;	  return    c    &    END_OF_STREAM    *    2;    	compilable	  [FE]  (entry  2)  	274	5	replace
2418	[BUG]  [BUGGY]  default:  return  c;  Integer  c  =  getEscapeSurroundingSpaces();  [CE]  duplicate  default  label  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  default:  return  c;  Integer  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	default:  return  c;  Integer  c  =  getEscapeSurroundingSpaces();	  return    END_OF_STREAM;    Integer    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  duplicate  default  label	259	None	replace
2419	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  length;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  length;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  length;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  throw  new  IOException( " ");  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
2420	[BUG]  [BUGGY]  return  c  +  18;  int  c  =  Integer.MAX_VALUE;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  18;  int  c  =  Integer.MAX_VALUE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    18;    int  c  =  Integer.MAX_VALUE;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	369	None	add
2421	[BUG]  [BUGGY]  return  c  +  18;  int  c  =  getChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  18;  int  c  =  getChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    18;    int  c  =  getChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	369	None	add
2422	[BUG]  [BUGGY]  return  c  +  18;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  18;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    18;    int  c  =  getEscapeChar();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	369	None	add
2423	[BUG]  [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  unreachable  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    END_OF_STREAM    :    END_OF_STREAM;    return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  unreachable  statement	327	None	add
2424	[BUG]  [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces();  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	327	None	add
2425	[BUG]  [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpaces();  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	327	None	add
2426	[BUG]  [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces().length;  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	327	None	add
2427	[BUG]  [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  return  c  >>  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  return  c  >>  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces();  return  c  >>  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	327	None	add
2428	[BUG]  [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c  >>  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c  >>  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpaces();  return  c  >>  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	327	None	add
2429	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  -  1;  }  [CE]  ';'  expected  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  -  1;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  -  1;  }	  return    c    -    1;    int    c    -    1;    	non-compiled	[CE]  ';'  expected	151	None	replace
2430	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    -    1;    int    c    -    1;    	non-compiled	[CE]  	151	None	replace
2431	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  -  1;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  -  1;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  -  1;  }  else  {  throw  new  IllegalStateException( " ");  }	  return    c    -    1;    int    c    -    1;    	non-compiled	[CE]  	151	None	replace
2432	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  c  -  1;  int  c  -  1;  [CE]  ';'  expected  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  c  -  1;  int  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  c  -  1;  int  c  -  1;	  return    c    -    1;    int    c    -    1;    	non-compiled	[CE]  ';'  expected	151	None	replace
2433	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  -  1;  }  else  {  return  END_OF_STREAM;  }  [CE]  ';'  expected  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  -  1;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  -  1;  }  else  {  return  END_OF_STREAM;  }	  return    c    -    1;    int    c    -    1;    	non-compiled	[CE]  ';'  expected	151	None	replace
2434	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  -  1;  }  else  {  throw  new  EOFException( " ");  }  [CE]  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  -  1;  }  else  {  throw  new  EOFException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  -  1;  }  else  {  throw  new  EOFException( " ");  }	  return    c    -    1;    int    c    -    1;    	non-compiled	[CE]  	151	None	replace
2435	[BUG]  [BUGGY]  int  c  =  0?  c  :  END_OF_STREAM;  c  >  0?  c  :  END_OF_STREAM;  [CE]  not  a  statement  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  0?  c  :  END_OF_STREAM;  c  >  0?  c  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  0?  c  :  END_OF_STREAM;  c  >  0?  c  :  END_OF_STREAM;	  return    c    >    0?    c    :    END_OF_STREAM;    c    >    0?    c    :    END_OF_STREAM;    	non-compiled	[CE]  not  a  statement	46	None	replace
2436	[BUG]  [BUGGY]  int  c  =  0;  c  >  0?  c  :  END_OF_STREAM;  [CE]  not  a  statement  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  0;  c  >  0?  c  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  0;  c  >  0?  c  :  END_OF_STREAM;	  return    c    >    0?    c    :    END_OF_STREAM;    c    >    0?    c    :    END_OF_STREAM;    	non-compiled	[CE]  not  a  statement	46	None	replace
2437	[BUG]  [BUGGY]  return  c  >  0?  -1  :  END_OF_STREAM;  c  >  0?  1  :  0;  [CE]  not  a  statement  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  -1  :  END_OF_STREAM;  c  >  0?  1  :  0;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  -1  :  END_OF_STREAM;  c  >  0?  1  :  0;	  return    c    >    0?    c    :    END_OF_STREAM;    c    >    0?    c    :    END_OF_STREAM;    	non-compiled	[CE]  not  a  statement	46	None	replace
2438	[BUG]  [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  int  cannot  be  dereferenced  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.equals(c)?  END_OF_STREAM  :  END_OF_STREAM;	  return    END_OF_STREAM.equals(c)?    BACKSPACE    :    END_OF_STREAM;    	non-compiled	[CE]  int  cannot  be  dereferenced	347	None	replace
2439	[BUG]  [BUGGY]  return  b.equals(END_OF_STREAM)?  BACKSPACE  :  END_OF_STREAM;  [CE]  cannot  find  symbol  b  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  b.equals(END_OF_STREAM)?  BACKSPACE  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  b.equals(END_OF_STREAM)?  BACKSPACE  :  END_OF_STREAM;	  return    END_OF_STREAM.equals(c)?    BACKSPACE    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  b	347	None	replace
2440	[BUG]  [BUGGY]  return  END_OF_STREAM.startsWith(c)?  BACKSPACE  :  END_OF_STREAM;  [CE]  int  cannot  be  dereferenced  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.startsWith(c)?  BACKSPACE  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.startsWith(c)?  BACKSPACE  :  END_OF_STREAM;	  return    END_OF_STREAM.equals(c)?    BACKSPACE    :    END_OF_STREAM;    	non-compiled	[CE]  int  cannot  be  dereferenced	347	None	replace
2441	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OCCURRENCE;  [CE]  cannot  find  symbol  END_OCCURRENCE  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OCCURRENCE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  END_OF_STREAM  :  END_OCCURRENCE;	  return    c    >    0?    END_OF_STREAM    :    END_SPACE;    	non-compiled	[CE]  cannot  find  symbol  END_OCCURRENCE	216	None	replace
2442	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_SUBSCRIPT;  [CE]  cannot  find  symbol  END_SUBSCRIPT  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_SUBSCRIPT;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  END_OF_STREAM  :  END_SUBSCRIPT;	  return    c    >    0?    END_OF_STREAM    :    END_SPACE;    	non-compiled	[CE]  cannot  find  symbol  END_SUBSCRIPT	216	None	replace
2443	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_EXPECT;  [CE]  cannot  find  symbol  END_EXPECT  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_EXPECT;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  END_OF_STREAM  :  END_EXPECT;	  return    c    >    0?    END_OF_STREAM    :    END_SPACE;    	non-compiled	[CE]  cannot  find  symbol  END_EXPECT	216	None	replace
2444	[BUG]  [BUGGY]  return  END_OF_STREAM  +  escape;  case  END_OF_STREAM:  return  END_OF_STREAM  +  escape;  [CE]  duplicate  case  label  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  escape;  case  END_OF_STREAM:  return  END_OF_STREAM  +  escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    escape;    case  END_OF_STREAM:  return  END_OF_STREAM  +  escape;	  	non-compiled	[CE]  duplicate  case  label	279	None	add
2445	[BUG]  [BUGGY]  return  END_OF_STREAM  +  escape;  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence   ");  [CE]  duplicate  case  label  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  escape;  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence   ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    escape;    case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence   ");	  	non-compiled	[CE]  duplicate  case  label	279	None	add
2446	[BUG]  [BUGGY]  return  END_OF_STREAM  +  escape;  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence   ");  [CE]  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  escape;  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence   ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    escape;    case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence   ");	  	non-compiled	[CE]  	279	None	add
2447	[BUG]  [BUGGY]  return  END_OF_STREAM  +  escape;  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  [CE]  duplicate  case  label  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  escape;  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    escape;    case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");	  	non-compiled	[CE]  duplicate  case  label	279	None	add
2448	[BUG]  [BUGGY]  return  END_OF_STREAM  |  in.readLine();  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  |  in.readLine();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  |  in.readLine();	  return    END_OF_STREAM    +    in.readLine();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	283	None	replace
2449	[BUG]  [BUGGY]  return  escapeChar.intValue();  [CE]  cannot  find  symbol  escapeChar  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  escapeChar.intValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  escapeChar.intValue();	  return    c.intValue();    	non-compiled	[CE]  cannot  find  symbol  escapeChar	106	None	replace
2450	[BUG]  [BUGGY]  return  this.escapeChar.intValue();  [CE]  cannot  find  symbol  escapeChar  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.escapeChar.intValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.escapeChar.intValue();	  return    c.intValue();    	non-compiled	[CE]  cannot  find  symbol  escapeChar	106	None	replace
2451	[BUG]  [BUGGY]  int  delimiter  =  getEscapeSurroundingSpaces(ignoreEmptyLines);  [CE]  cannot  find  symbol  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getEscapeSurroundingSpaces(ignoreEmptyLines);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getEscapeSurroundingSpaces(ignoreEmptyLines);	  int    delimiter    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  cannot  find  symbol	290	None	replace
2452	[BUG]  [BUGGY]  int  delimiter  =  getEscapeSurroundingSpaces()  &  END_OF_STREAM;  [CE]  cannot  find  symbol  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getEscapeSurroundingSpaces()  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getEscapeSurroundingSpaces()  &  END_OF_STREAM;	  int    delimiter    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  cannot  find  symbol	290	None	replace
2453	[BUG]  [BUGGY]  return  c  >  0?  1  :  'n';  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  'n';  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  'n';  int  c  =  getEscapeChar();	  return    c    >    0?    1    :    c;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	256	None	replace
2454	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }  }  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	336	None	replace
2455	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  DISABLED)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  DISABLED)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	336	None	replace
2456	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }  [CE]  illegal  start  of  expression  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  in.read();  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	336	None	replace
2457	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  in.read();  }  }  [CE]  illegal  start  of  expression  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  in.read();  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  in.read();  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	336	None	replace
2458	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  in.read();  }  }  [CE]  illegal  start  of  expression  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  in.read();  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  in.read();  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    in.read();    }    	non-compiled	[CE]  illegal  start  of  expression	336	None	replace
2459	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpaces();  }  [CE]  class,  interface,  or  enum  expected  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpaces();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpaces();  }	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  class,  interface,  or  enum  expected	176	None	replace
2460	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  int  c  =  getSurroundingSpaces();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  int  c  =  getSurroundingSpaces();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  int  c  =  getSurroundingSpaces();  }	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	176	None	replace
2461	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpaces();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpaces();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpaces();  }	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	176	None	replace
2462	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpaces();  }  else  {  return  END_OF_STREAM;  }  [CE]  'else'  without  'if'  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpaces();  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpaces();  }  else  {  return  END_OF_STREAM;  }	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  'else'  without  'if'	176	None	replace
2463	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpaces();  }  else  {  throw  new  IOException( " ");  }  [CE]  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpaces();  }  else  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpaces();  }  else  {  throw  new  IOException( " ");  }	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  	176	None	replace
2464	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')return  END_OF_STREAM;  }  [CE]  class,  interface,  or  enum  expected  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	201	None	replace
2465	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	201	None	replace
2466	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [CE]  illegal  start  of  expression  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  <  =  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  <  =  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  illegal  start  of  expression	201	None	replace
2467	[BUG]  [BUGGY]  int  c  <  0?  1  :  c;  [CE]  ';'  expected  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  <  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  <  0?  1  :  c;	  return    c    >    0?    1    :    c;    int    c    >    0?    1    :    c;    	non-compiled	[CE]  ';'  expected	159	None	replace
2468	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None	replace
2469	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  false;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  false;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None	replace
2470	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None	replace
2471	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None	replace
2472	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  false;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  false;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None	replace
2473	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  false;  }  }  [CE]  illegal  start  of  expression  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  false;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  false;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	334	None	replace
2474	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false  [CE]  ';'  expected  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  false	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	334	None	replace
2475	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	202	None	replace
2476	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [CE]  illegal  start  of  expression  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  <  =  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  <  =  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  illegal  start  of  expression	202	None	replace
2477	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpace(c,  ignoreEmptyLines);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpace(c,  ignoreEmptyLines);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpace(c,  ignoreEmptyLines);	  return    c    +    2;    int    c    =    getEscapeSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	59	None	replace
2478	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  END_OF_STREAM  &  END_OF_STREAM;	  return    entry    &    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	291	3	replace
2479	[BUG]  [BUGGY]  return  END_OF_STREAM  &  END_OF_STREAM;  [FE]  (entry  2)  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  &  END_OF_STREAM;	  return    entry    &    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	291	3	replace
2480	[BUG]  [BUGGY]  return  escapeChar  &  END_OF_STREAM;  [CE]  cannot  find  symbol  escapeChar  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  escapeChar  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  escapeChar  &  END_OF_STREAM;	  return    entry    &    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  escapeChar	291	None	replace
2481	[BUG]  [BUGGY]  return  ch  &  END_OF_STREAM;  [CE]  cannot  find  symbol  ch  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  ch  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  ch  &  END_OF_STREAM;	  return    entry    &    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  ch	291	None	replace
2482	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  escape,  END_OF_STREAM);  break;  [CE]  cannot  find  symbol  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  escape,  END_OF_STREAM);  break;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(c,  escape,  END_OF_STREAM);  break;	  int    delimiter    =    readEscapeSurroundingSpaces(c,    escape);    break;    	non-compiled	[CE]  cannot  find  symbol	289	None	replace
2483	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  escape,  ignoreEmptyLines);  break;  [CE]  cannot  find  symbol  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  escape,  ignoreEmptyLines);  break;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(c,  escape,  ignoreEmptyLines);  break;	  int    delimiter    =    readEscapeSurroundingSpaces(c,    escape);    break;    	non-compiled	[CE]  cannot  find  symbol	289	None	replace
2484	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  start,  escape);  break;  [CE]  cannot  find  symbol  start  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  start,  escape);  break;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(c,  start,  escape);  break;	  int    delimiter    =    readEscapeSurroundingSpaces(c,    escape);    break;    	non-compiled	[CE]  cannot  find  symbol  start	289	None	replace
2485	[BUG]  [BUGGY]  return  END_OF_STREAM  +  END_OF_STREAM.length;  [CE]  int  cannot  be  dereferenced  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  END_OF_STREAM.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  END_OF_STREAM.length;	  return    END_OF_STREAM    +    escapeSurroundingSpaces.length;    	non-compiled	[CE]  int  cannot  be  dereferenced	227	None	replace
2486	[BUG]  [BUGGY]  return  CSVFormat.EXPR_RESULT  +  1;  [CE]  cannot  find  symbol  EXPR_RESULT  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.EXPR_RESULT  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.EXPR_RESULT  +  1;	  return    CSVFormat.EXPR_RESULT;    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT	133	None	replace
2487	[BUG]  [BUGGY]  return  CSVFormat.EXPR_RESULT  ||  END_OF_STREAM;  [CE]  cannot  find  symbol  EXPR_RESULT  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.EXPR_RESULT  ||  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.EXPR_RESULT  ||  END_OF_STREAM;	  return    CSVFormat.EXPR_RESULT;    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT	133	None	replace
2488	[BUG]  [BUGGY]  return  CSVFormat.EXPR_SECOND;  [CE]  cannot  find  symbol  EXPR_SECOND  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.EXPR_SECOND;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.EXPR_SECOND;	  return    CSVFormat.EXPR_RESULT;    	non-compiled	[CE]  cannot  find  symbol  EXPR_SECOND	133	None	replace
2489	[BUG]  [BUGGY]  return  CSVFormat.EXPR_RESULT  -  1;  [CE]  cannot  find  symbol  EXPR_RESULT  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.EXPR_RESULT  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.EXPR_RESULT  -  1;	  return    CSVFormat.EXPR_RESULT;    	non-compiled	[CE]  cannot  find  symbol  EXPR_RESULT	133	None	replace
2490	[BUG]  [BUGGY]  return  c  &  BACKSPACE;  int  c  =  getSurroundingSpaces();  return  c  &  BACKSPACE;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE;  int  c  =  getSurroundingSpaces();  return  c  &  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    BACKSPACE;    int  c  =  getSurroundingSpaces();  return  c  &  BACKSPACE;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	98	None	add
2491	[BUG]  [BUGGY]  return  c  &  BACKSPACE;  int  c  =  getEscapeSurroundingSpaces();  return  c  &  BACKSPACE;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE;  int  c  =  getEscapeSurroundingSpaces();  return  c  &  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    BACKSPACE;    int  c  =  getEscapeSurroundingSpaces();  return  c  &  BACKSPACE;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	98	None	add
2492	[BUG]  [BUGGY]  return  c  &  BACKSPACE;  int  c  =  getEscapeChar();  return  c  &  BACKSPACE;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE;  int  c  =  getEscapeChar();  return  c  &  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    BACKSPACE;    int  c  =  getEscapeChar();  return  c  &  BACKSPACE;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	98	None	add
2493	[BUG]  [BUGGY]  return  c  &  BACKSPACE;  int  c  =  getSurroundingSpace();  return  c  &  BACKSPACE;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE;  int  c  =  getSurroundingSpace();  return  c  &  BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    BACKSPACE;    int  c  =  getSurroundingSpace();  return  c  &  BACKSPACE;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	98	None	add
2494	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  return  c  >  0?  1  :  END_OF_STREAM;  [CE]  unreachable  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  return  c  >  0?  1  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    END_OF_STREAM;    return  c  >  0?  1  :  END_OF_STREAM;	  	non-compiled	[CE]  unreachable  statement	62	None	add
2495	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  return  c  >  0?  1  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  return  c  >  0?  1  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces();  return  c  >  0?  1  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	62	None	add
2496	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  int  c  =  Character.toLowerCase(getEscapeChar());  return  c  >  0?  1  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  int  c  =  Character.toLowerCase(getEscapeChar());  return  c  >  0?  1  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    END_OF_STREAM;    int  c  =  Character.toLowerCase(getEscapeChar());  return  c  >  0?  1  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	62	None	add
2497	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  int  c  >  0?  1  :  END_OF_STREAM.intValue();  [CE]  ';'  expected  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM;  int  c  >  0?  1  :  END_OF_STREAM.intValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    END_OF_STREAM;    int  c  >  0?  1  :  END_OF_STREAM.intValue();	  	non-compiled	[CE]  ';'  expected	62	None	add
2498	[BUG]  [BUGGY]  return  c  +  length;  [CE]  cannot  find  symbol  length  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  length;	  return    c    +    escapeSurroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  length	134	None	replace
2499	[BUG]  [BUGGY]  return  END_OF_STREAM  +  END_EmptyLines;  [CE]  cannot  find  symbol  END_EmptyLines  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  END_EmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  END_EmptyLines;	  return    END_OF_STREAM    +    escapeSurroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  END_EmptyLines	79	None	replace
2500	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  1;  return  c  &  END_OF_STREAM  +  1;  [CE]  unreachable  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  1;  return  c  &  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    +    1;    return  c  &  END_OF_STREAM  +  1;	  	non-compiled	[CE]  unreachable  statement	100	None	add
2501	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  1;  int  c  =  getEscapeSurroundingSpaces();  return  c  &  END_OF_STREAM  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  1;  int  c  =  getEscapeSurroundingSpaces();  return  c  &  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    +    1;    int  c  =  getEscapeSurroundingSpaces();  return  c  &  END_OF_STREAM  +  1;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	100	None	add
2502	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  1;  int  c  =  getEscapeSurroundingSpaces().length;  return  c  &  END_OF_STREAM  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  1;  int  c  =  getEscapeSurroundingSpaces().length;  return  c  &  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    +    1;    int  c  =  getEscapeSurroundingSpaces().length;  return  c  &  END_OF_STREAM  +  1;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	100	None	add
2503	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  1;  int  c  =  getEscapeSurroundingSpaces().size();  return  c  &  END_OF_STREAM  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  1;  int  c  =  getEscapeSurroundingSpaces().size();  return  c  &  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    +    1;    int  c  =  getEscapeSurroundingSpaces().size();  return  c  &  END_OF_STREAM  +  1;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	100	None	add
2504	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  BACKSPACE;  int  c  =  in.readInt();  [CE]  duplicate  case  label  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  BACKSPACE;  int  c  =  in.readInt();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  BACKSPACE;  int  c  =  in.readInt();	  return    BACKSPACE;    Integer    c    =    in.readInt();    	non-compiled	[CE]  duplicate  case  label	168	None	replace
2505	[BUG]  [BUGGY]  while(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  in.readInt();  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  in.readInt();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  in.readInt();	  return    BACKSPACE;    Integer    c    =    in.readInt();    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
2506	[BUG]  [BUGGY]  return  c  +  8;  int  c  =  Integer.parseInt(quoteChar);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  8;  int  c  =  Integer.parseInt(quoteChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    8;    int  c  =  Integer.parseInt(quoteChar);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	90	None	add
2507	[BUG]  [BUGGY]  return  c  +  8;  int  c  =  Integer.parseInt(quoteChar);  return  c  +  8;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  8;  int  c  =  Integer.parseInt(quoteChar);  return  c  +  8;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    8;    int  c  =  Integer.parseInt(quoteChar);  return  c  +  8;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	90	None	add
2508	[BUG]  [BUGGY]  return  c  +  8;  int  c  =  getSurroundingSpaces();  return  c  +  8;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  8;  int  c  =  getSurroundingSpaces();  return  c  +  8;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    8;    int  c  =  getSurroundingSpaces();  return  c  +  8;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	90	None	add
2509	[BUG]  [BUGGY]  return  c  +  8;  int  c  =  Integer.parseInt(text.getChars());  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  8;  int  c  =  Integer.parseInt(text.getChars());  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    8;    int  c  =  Integer.parseInt(text.getChars());	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	90	None	add
2510	[BUG]  [BUGGY]  switch(c)  {  case  END_OF_STREAM:  return  END;  [CE]  illegal  start  of  expression  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  switch(c)  {  case  END_OF_STREAM:  return  END;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	switch(c)  {  case  END_OF_STREAM:  return  END;	  return    BACKSPACE;    case    END_OF_STREAM:    return    BACKSPACE;    	non-compiled	[CE]  illegal  start  of  expression	341	None	replace
2511	[BUG]  [BUGGY]  return  c  <  0?  1  :  c;  return  c  <  0?  1  :  c;  [CE]  unreachable  statement  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  c;  return  c  <  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    1    :    c;    return  c  <  0?  1  :  c;	  	non-compiled	[CE]  unreachable  statement	64	None	add
2512	[BUG]  [BUGGY]  return  c  <  0?  1  :  c;  for(int  c  <  0?  1  :  c;  [CE]  ';'  expected  [FE]      Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  c;  for(int  c  <  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    1    :    c;    for(int  c  <  0?  1  :  c;	  	non-compiled	[CE]  ';'  expected	64	None	add
2513	[BUG]  [BUGGY]  return  c  <  0?  1  :  c;  (c  <  0?  1  :  c);  [CE]  not  a  statement  [FE]        Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  c;  (c  <  0?  1  :  c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    1    :    c;    (c  <  0?  1  :  c);	  	non-compiled	[CE]  not  a  statement	64	None	add
2514	[BUG]  [BUGGY]  return  c  <  0?  1  :  c;  for(int  c  <  0?  1  :  c);  [CE]  ';'  expected  [FE]          Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  c;  for(int  c  <  0?  1  :  c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    1    :    c;    for(int  c  <  0?  1  :  c);	  	non-compiled	[CE]  ';'  expected	64	None	add
2515	[BUG]  [BUGGY]  return  c  <  0?  1  :  c;  while(c  <  0?  1  :  c);  [CE]  incompatible  types  [FE]            Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  c;  while(c  <  0?  1  :  c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    1    :    c;    while(c  <  0?  1  :  c);	  	non-compiled	[CE]  incompatible  types	64	None	add
2516	[BUG]  [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence, ");  [CE]  duplicate  case  label  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence, ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence, ");	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    	non-compiled	[CE]  duplicate  case  label	342	None	replace
2517	[BUG]  [BUGGY]  char  c  =  getCurrentSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  char  c  =  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	char  c  =  getCurrentSurroundingSpace();	  return    c    -    1;    int    c    =    getCurrentSurroundingSpace();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	247	None	replace
2518	[BUG]  [BUGGY]  int  c  >  0?  1  :  c;  (c  >  0?  1  :  c);  [CE]  ';'  expected  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  >  0?  1  :  c;  (c  >  0?  1  :  c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  >  0?  1  :  c;  (c  >  0?  1  :  c);	  return    c    >    0?    1    :    c;    (c    >    0?    1    :    c);    	non-compiled	[CE]  ';'  expected	163	None	replace
2519	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }  [CE]  illegal  start  of  expression  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  DISABLED)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  DISABLED)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentEnd;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
2520	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  DISABLED;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }  [CE]  illegal  start  of  expression  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  DISABLED)  {  return  DISABLED;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  DISABLED)  {  return  DISABLED;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentEnd;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
2521	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }  }  [CE]  illegal  start  of  expression  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  DISABLED)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  DISABLED)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentEnd;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
2522	[BUG]  [BUGGY]  if(in.readLine()  <  len)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }  [CE]  illegal  start  of  expression  [FE]                            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in.readLine()  <  len)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in.readLine()  <  len)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentEnd;    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
2523	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  DISABLED;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEn  [CE]  ';'  expected  [FE]                              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  DISABLED)  {  return  DISABLED;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEn  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  DISABLED)  {  return  DISABLED;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEn	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentEnd;    }    	non-compiled	[CE]  ';'  expected	29	None	replace
2524	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  DISABLED;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  com  [CE]  ';'  expected  [FE]                                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  DISABLED)  {  return  DISABLED;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  com  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  DISABLED)  {  return  DISABLED;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  com	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentEnd;    }    	non-compiled	[CE]  ';'  expected	29	None	replace
2525	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  DISABLED;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd  [CE]  ';'  expected  [FE]                                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  DISABLED)  {  return  DISABLED;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  DISABLED)  {  return  DISABLED;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentEnd	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentEnd;    }    	non-compiled	[CE]  ';'  expected	29	None	replace
2526	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_BACKSPACE;  [CE]  cannot  find  symbol  END_BACKSPACE  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_BACKSPACE;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences;    	non-compiled	[CE]  cannot  find  symbol  END_BACKSPACE	348	None	replace
2527	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OCCURRENCES;  [CE]  cannot  find  symbol  END_OCCURRENCES  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OCCURRENCES;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OCCURRENCES;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences;    	non-compiled	[CE]  cannot  find  symbol  END_OCCURRENCES	348	None	replace
2528	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  c  +  1;  }  [CE]  missing  return  statement  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  c  +  1;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  c  +  1;  }	  return    c    +    1;    int    c    =    getChar();    return    c    +    1;    	non-compiled	[CE]  missing  return  statement	363	None	replace
2529	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_CRC;  [CE]  cannot  find  symbol  END_OF_CRC  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_CRC;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_CRC;	  return    END_OF_STREAM    ||    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_CRC	355	None	replace
2530	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM.length;  [CE]  int  cannot  be  dereferenced  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_STREAM.length;	  return    END_OF_STREAM    ||    END_OF_STREAM;    	non-compiled	[CE]  int  cannot  be  dereferenced	355	None	replace
2531	[BUG]  [BUGGY]  return  c  <  =  END_OF_STREAM;  Collections.sort(c);  [CE]  illegal  start  of  expression  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  =  END_OF_STREAM;  Collections.sort(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  =  END_OF_STREAM;  Collections.sort(c);	  return    c    &    END_OF_STREAM;    Collections.sort(c);    	non-compiled	[CE]  illegal  start  of  expression	322	None	replace
2532	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  delimiter;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  >  0?  1  :  delimiter;	  return    c    >    0?    1    :    d;    	compilable	  [FE]  (entry  2)  	70	5	replace
2533	[BUG]  [BUGGY]  return  c  >  0?  1  :  delimiter;  [FE]  (entry  2)  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  delimiter;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  delimiter;	  return    c    >    0?    1    :    d;    	compilable	  [FE]  (entry  2)  	70	5	replace
2534	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  in.read();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  >  0?  1  :  in.read();	  return    c    >    0?    1    :    d;    	compilable	  [FE]  (entry  2)  	70	5	replace
2535	[BUG]  [BUGGY]  return  c  >  0?  1  :  in.read();  [FE]  (entry  2)  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  in.read();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  in.read();	  return    c    >    0?    1    :    d;    	compilable	  [FE]  (entry  2)  	70	5	replace
2536	[BUG]  [BUGGY]  return  END_OF_STREAM  +  DISABLED;  case  DISABLED:  return  END_OF_STREAM  +  DISABLED;  [CE]  unreachable  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  DISABLED;  case  DISABLED:  return  END_OF_STREAM  +  DISABLED;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    DISABLED;    case  DISABLED:  return  END_OF_STREAM  +  DISABLED;	  	non-compiled	[CE]  unreachable  statement	182	None	add
2537	[BUG]  [BUGGY]  return  END_OF_STREAM  +  DISABLED;  int  DISABLED  =  getSurroundingSpaces().length;  return  END_OF_STREAM  +  DISABLED;  [CE]  cannot  find  symbol  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  DISABLED;  int  DISABLED  =  getSurroundingSpaces().length;  return  END_OF_STREAM  +  DISABLED;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    DISABLED;    int  DISABLED  =  getSurroundingSpaces().length;  return  END_OF_STREAM  +  DISABLED;	  	non-compiled	[CE]  cannot  find  symbol	182	None	add
2538	[BUG]  [BUGGY]  return  END_OF_STREAM  +  DISABLED;  int  DISABLED  =  getEscapeSurroundingSpaces();  return  END_OF_STREAM  +  DISABLED;  [CE]  cannot  find  symbol  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  DISABLED;  int  DISABLED  =  getEscapeSurroundingSpaces();  return  END_OF_STREAM  +  DISABLED;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    DISABLED;    int  DISABLED  =  getEscapeSurroundingSpaces();  return  END_OF_STREAM  +  DISABLED;	  	non-compiled	[CE]  cannot  find  symbol	182	None	add
2539	[BUG]  [BUGGY]  return  END_OF_STREAM  +  DISABLED;  int  DISABLED  =  getSurroundingSpaces().size();  return  END_OF_STREAM  +  DISABLED;  [CE]  cannot  find  symbol  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  DISABLED;  int  DISABLED  =  getSurroundingSpaces().size();  return  END_OF_STREAM  +  DISABLED;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    DISABLED;    int  DISABLED  =  getSurroundingSpaces().size();  return  END_OF_STREAM  +  DISABLED;	  	non-compiled	[CE]  cannot  find  symbol	182	None	add
2540	[BUG]  [BUGGY]  return  END_OF_STREAM  +  DISABLED;  int  DISABLED  =  getEmptyLines().length;  return  END_OF_STREAM  +  DISABLED;  [CE]  cannot  find  symbol  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  DISABLED;  int  DISABLED  =  getEmptyLines().length;  return  END_OF_STREAM  +  DISABLED;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    DISABLED;    int  DISABLED  =  getEmptyLines().length;  return  END_OF_STREAM  +  DISABLED;	  	non-compiled	[CE]  cannot  find  symbol	182	None	add
2541	[BUG]  [BUGGY]  return  END_OF_STREAM  +  DISABLED;  int  DISABLED  =  getEscapeSurroundingSpaces().length;  return  END_OF_STREAM  +  DISABLED;  [CE]  cannot  find  symbol  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  DISABLED;  int  DISABLED  =  getEscapeSurroundingSpaces().length;  return  END_OF_STREAM  +  DISABLED;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    DISABLED;    int  DISABLED  =  getEscapeSurroundingSpaces().length;  return  END_OF_STREAM  +  DISABLED;	  	non-compiled	[CE]  cannot  find  symbol	182	None	add
2542	[BUG]  [BUGGY]  return  END_OF_STREAM  +  DISABLED;  int  DISABLED  =  getEscapeSurroundingSpaces().size();  return  END_OF_STREAM  +  DISABLED;  [CE]  cannot  find  symbol  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  DISABLED;  int  DISABLED  =  getEscapeSurroundingSpaces().size();  return  END_OF_STREAM  +  DISABLED;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    DISABLED;    int  DISABLED  =  getEscapeSurroundingSpaces().size();  return  END_OF_STREAM  +  DISABLED;	  	non-compiled	[CE]  cannot  find  symbol	182	None	add
2543	[BUG]  [BUGGY]  return  c  <  END_OF_STREAM;  Record  do  not  match  expected  result(c  &  END_OF_STREAM);  [CE]  not  a  statement  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  END_OF_STREAM;  Record  do  not  match  expected  result(c  &  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  END_OF_STREAM;  Record  do  not  match  expected  result(c  &  END_OF_STREAM);	  return    c    &    END_OF_STREAM;    Record    do    not    match    expected    result(c    &    END_OF_STREAM);    	non-compiled	[CE]  not  a  statement	194	None	replace
2544	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreSurroundingSpaces?  1  :  0;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  this.ignoreSurroundingSpaces?  1  :  0;	  return    this.ignoreSurroundingSpaces;    	compilable	  [FE]  (entry  2)  	149	5	replace
2545	[BUG]  [BUGGY]  return  this.ignoreSurroundingSpaces?  1  :  0;  [FE]  (entry  2)  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreSurroundingSpaces?  1  :  0;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoreSurroundingSpaces?  1  :  0;	  return    this.ignoreSurroundingSpaces;    	compilable	  [FE]  (entry  2)  	149	5	replace
2546	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  c  +  1;  int  c  =  getEscapeChar();  return  c  +  1;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  c  +  1;  int  c  =  getEscapeChar();  return  c  +  1;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  c  +  1;  int  c  =  getEscapeChar();  return  c  +  1;  }	  return    c    +    1;    int    c    =    getEscapeChar();    return    c    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	361	None	replace
2547	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  c  +  1;  }  else  {  int  c  =  getEscapeChar();  return  c  +  1;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  c  +  1;  }  else  {  int  c  =  getEscapeChar();  return  c  +  1;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  c  +  1;  }  else  {  int  c  =  getEscapeChar();  return  c  +  1;  }	  return    c    +    1;    int    c    =    getEscapeChar();    return    c    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	361	None	replace
2548	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  DISABLED);  [CE]  cannot  find  symbol  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  DISABLED);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(c,  DISABLED);	  int    delimiter    =    readEscapeSurroundingSpaces(c);    	non-compiled	[CE]  cannot  find  symbol	286	None	replace
2549	[BUG]  [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  escapeChar);  [CE]  cannot  find  symbol  escapeChar  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  readEscapeSurroundingSpaces(c,  escapeChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  readEscapeSurroundingSpaces(c,  escapeChar);	  int    delimiter    =    readEscapeSurroundingSpaces(c);    	non-compiled	[CE]  cannot  find  symbol  escapeChar	286	None	replace
2550	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces(default);  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces(default);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces(default);	  return    c    +    1;    int    c    =    getEscapeSurroundingSpaces(c);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
2551	[BUG]  [BUGGY]  return  c  >  0?  1  :  escape;  return  c  >  0?  1  :  escape;  [CE]  unreachable  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  escape;  return  c  >  0?  1  :  escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    escape;    return  c  >  0?  1  :  escape;	  	non-compiled	[CE]  unreachable  statement	303	None	add
2552	[BUG]  [BUGGY]  return  c  >  0?  1  :  escape;  (c  >  0?  1  :  escape);  [CE]  not  a  statement  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  escape;  (c  >  0?  1  :  escape);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    escape;    (c  >  0?  1  :  escape);	  	non-compiled	[CE]  not  a  statement	303	None	add
2553	[BUG]  [BUGGY]  return  c  >  0?  1  :  escape;  int  c  =  getEscape();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  escape;  int  c  =  getEscape();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    escape;    int  c  =  getEscape();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	303	None	add
2554	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace();  return  END_OF_STREAM  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace();  return  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace();  return  END_OF_STREAM  +  1;	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpace();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	188	None	replace
2555	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getSurroundingSpace();  return  c  -  1;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getSurroundingSpace();  return  c  -  1;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getSurroundingSpace();  return  c  -  1;  }	  return    c    -    1;    int    c    =    getSurroundingSpace();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	312	None	replace
2556	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getSurroundingSpace();  return  c  -  1;  }  else  {  return  END_OF_STREAM;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getSurroundingSpace();  return  c  -  1;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getSurroundingSpace();  return  c  -  1;  }  else  {  return  END_OF_STREAM;  }	  return    c    -    1;    int    c    =    getSurroundingSpace();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	312	None	replace
2557	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  }  else  {  int  c  =  getSurroundingSpace();  return  c  -  1;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  }  else  {  int  c  =  getSurroundingSpace();  return  c  -  1;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  c  -  1;  }  else  {  int  c  =  getSurroundingSpace();  return  c  -  1;  }	  return    c    -    1;    int    c    =    getSurroundingSpace();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	312	None	replace
2558	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getSurroundingSpace();  return  c  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getSurroundingSpace();  return  c  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getSurroundingSpace();  return  c  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    -    1;    int    c    =    getSurroundingSpace();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	312	None	replace
2559	[BUG]  [BUGGY]  return  c  +  3;  int  c  =  Integer.parseInt(quoteChar);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  3;  int  c  =  Integer.parseInt(quoteChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    3;    int  c  =  Integer.parseInt(quoteChar);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	86	None	add
2560	[BUG]  [BUGGY]  return  c  +  3;  int  c  =  getSurroundingSpaces();  return  c  +  3;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  3;  int  c  =  getSurroundingSpaces();  return  c  +  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    3;    int  c  =  getSurroundingSpaces();  return  c  +  3;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	86	None	add
2561	[BUG]  [BUGGY]  return  c  +  3;  return  c  +  3;  [CE]  unreachable  statement  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  3;  return  c  +  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    3;    return  c  +  3;	  	non-compiled	[CE]  unreachable  statement	86	None	add
2562	[BUG]  [BUGGY]  return  c  +  3;  int  c  =  getEscapeSurroundingSpaces();  return  c  +  3;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  3;  int  c  =  getEscapeSurroundingSpaces();  return  c  +  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    3;    int  c  =  getEscapeSurroundingSpaces();  return  c  +  3;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	86	None	add
2563	[BUG]  [BUGGY]  return  c  +  3;  int  c  =  Integer.parseInt(text.getChars());  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  3;  int  c  =  Integer.parseInt(text.getChars());  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    3;    int  c  =  Integer.parseInt(text.getChars());	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	86	None	add
2564	[BUG]  [BUGGY]  return  c  -  1  +  1;  int  c  =  getSurroundingSpaces();  return  c  -  1  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1  +  1;  int  c  =  getSurroundingSpaces();  return  c  -  1  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    1    +    1;    int  c  =  getSurroundingSpaces();  return  c  -  1  +  1;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	301	None	add
2565	[BUG]  [BUGGY]  return  c  -  1  +  1;  int  c  =  getEscapeSurroundingSpaces();  return  c  -  1  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1  +  1;  int  c  =  getEscapeSurroundingSpaces();  return  c  -  1  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    1    +    1;    int  c  =  getEscapeSurroundingSpaces();  return  c  -  1  +  1;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	301	None	add
2566	[BUG]  [BUGGY]  return  c  -  1  +  1;  int  c  =  getSurroundingSpace();  return  c  -  1  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1  +  1;  int  c  =  getSurroundingSpace();  return  c  -  1  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    1    +    1;    int  c  =  getSurroundingSpace();  return  c  -  1  +  1;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	301	None	add
2567	[BUG]  [BUGGY]  return  c  -  1  +  1;  int  c  =  getChar();  return  c  -  1  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1  +  1;  int  c  =  getChar();  return  c  -  1  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    1    +    1;    int  c  =  getChar();  return  c  -  1  +  1;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	301	None	add
2568	[BUG]  [BUGGY]  return  c  -  1  +  1;  int  c  =  getSurroundingSpaces().length;  return  c  -  1  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1  +  1;  int  c  =  getSurroundingSpaces().length;  return  c  -  1  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    1    +    1;    int  c  =  getSurroundingSpaces().length;  return  c  -  1  +  1;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	301	None	add
2569	[BUG]  [BUGGY]  int  escape  =  readEscape(c,  END_OF_STREAM,  DISABLED);  [CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escape  =  readEscape(c,  END_OF_STREAM,  DISABLED);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escape  =  readEscape(c,  END_OF_STREAM,  DISABLED);	  return    escape;    int    escape    =    readEscape(c,    END_OF_STREAM);    	non-compiled	[CE]  method  readEscape  in  class  Lexer  cannot  be  applied  to  given  types;	235	None	replace
2570	[BUG]  [BUGGY]  return  c;  escape  =  readEscape(escape,  END_OF_STREAM);  [CE]  cannot  assign  a  value  to  final  variable  escape  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c;  escape  =  readEscape(escape,  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c;  escape  =  readEscape(escape,  END_OF_STREAM);	  return    escape;    int    escape    =    readEscape(c,    END_OF_STREAM);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  escape	235	None	replace
2571	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  c  +  2;  int  c  =  getEscapeChar();  return  c  +  3;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  c  +  2;  int  c  =  getEscapeChar();  return  c  +  3;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  c  +  2;  int  c  =  getEscapeChar();  return  c  +  3;  }	  return    c    +    2;    int    c    =    getEscapeChar();    return    c    +    2;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	353	None	replace
2572	[BUG]  [BUGGY]  if(c  ==  'n')  {  return  c  +  2;  int  c  =  getEscapeChar();  return  c  +  1;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n')  {  return  c  +  2;  int  c  =  getEscapeChar();  return  c  +  1;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n')  {  return  c  +  2;  int  c  =  getEscapeChar();  return  c  +  1;  }	  return    c    +    2;    int    c    =    getEscapeChar();    return    c    +    2;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	353	None	replace
2573	[BUG]  [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  int  c  =  0?  c  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  int  c  =  0?  c  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    c    :    END_OF_STREAM;    int  c  =  0?  c  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	137	None	add
2574	[BUG]  [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  return  c  ==  0?  c  :  END_OF_STREAM;  [CE]  unreachable  statement  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  return  c  ==  0?  c  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    c    :    END_OF_STREAM;    return  c  ==  0?  c  :  END_OF_STREAM;	  	non-compiled	[CE]  unreachable  statement	137	None	add
2575	[BUG]  [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  return  c  ==  0?  c  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  return  c  ==  0?  c  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    c    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces();  return  c  ==  0?  c  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	137	None	add
2576	[BUG]  [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  int  c  =  Integer.parseInt(quoteChar);  return  c  ==  0?  c  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  int  c  =  Integer.parseInt(quoteChar);  return  c  ==  0?  c  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    c    :    END_OF_STREAM;    int  c  =  Integer.parseInt(quoteChar);  return  c  ==  0?  c  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	137	None	add
2577	[BUG]  [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  int  c  =  Integer.parseInt(text.getChars());  return  c  ==  0?  c  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  c  :  END_OF_STREAM;  int  c  =  Integer.parseInt(text.getChars());  return  c  ==  0?  c  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    c    :    END_OF_STREAM;    int  c  =  Integer.parseInt(text.getChars());  return  c  ==  0?  c  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	137	None	add
2578	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  't')  {  return  BACKSPACE;  int  c  =  getEscapeChar();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  't')  {  return  BACKSPACE;  int  c  =  getEscapeChar();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  't')  {  return  BACKSPACE;  int  c  =  getEscapeChar();  }	  return    BACKSPACE;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	226	None	replace
2579	[BUG]  [BUGGY]  if(c  ==  'n')  {  return  BACKSPACE;  int  c  =  getEscapeChar();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n')  {  return  BACKSPACE;  int  c  =  getEscapeChar();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n')  {  return  BACKSPACE;  int  c  =  getEscapeChar();  }	  return    BACKSPACE;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	226	None	replace
2580	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  BACKSPACE;  int  c  =  getCurrentSurroundingSpace();  [CE]  duplicate  case  label  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  BACKSPACE;  int  c  =  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  BACKSPACE;  int  c  =  getCurrentSurroundingSpace();	  return    BACKSPACE;    int    c    =    getCurrentSurroundingSpace();    	non-compiled	[CE]  duplicate  case  label	173	None	replace
2581	[BUG]  [BUGGY]  return  c  -  1,  delimiter  +  1;  [CE]  ';'  expected  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1,  delimiter  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  1,  delimiter  +  1;	  return    c    -    1    +    1;    	non-compiled	[CE]  ';'  expected	302	None	replace
2582	[BUG]  [BUGGY]  return  c  -  1,  escapeSurroundingSpaces;  [CE]  ';'  expected  [FE]      Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1,  escapeSurroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  1,  escapeSurroundingSpaces;	  return    c    -    1    +    1;    	non-compiled	[CE]  ';'  expected	302	None	replace
2583	[BUG]  [BUGGY]  return  c  -  1,  escapeSurroundingSpaces  -  1;  [CE]  ';'  expected  [FE]        Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  1,  escapeSurroundingSpaces  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  1,  escapeSurroundingSpaces  -  1;	  return    c    -    1    +    1;    	non-compiled	[CE]  ';'  expected	302	None	replace
2584	[BUG]  [BUGGY]  c  >  0?  END_OF_STREAM  :  END_SPACE;  [CE]  not  a  statement  [FE]        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  >  0?  END_OF_STREAM  :  END_SPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  >  0?  END_OF_STREAM  :  END_SPACE;	  return    c    >    0?    c    :    END_OF_STREAM;    int    c    =    getCurrentIndex();    	non-compiled	[CE]  not  a  statement	275	None	replace
2585	[BUG]  [BUGGY]  return  END_OF_STREAM?  END_OF_STREAM  :  END_EmptyLines;  [CE]  incompatible  types  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM?  END_OF_STREAM  :  END_EmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM?  END_OF_STREAM  :  END_EmptyLines;	  return    this.escapeSurroundingSpaces?    END_OF_STREAM    :    END_EXPECTED;    	non-compiled	[CE]  incompatible  types	211	None	replace
2586	[BUG]  [BUGGY]  return  ignoreEmptyLines?  END_OF_STREAM  :  END_EXPECTED;  [CE]  cannot  find  symbol  END_EXPECTED  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  ignoreEmptyLines?  END_OF_STREAM  :  END_EXPECTED;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  ignoreEmptyLines?  END_OF_STREAM  :  END_EXPECTED;	  return    this.escapeSurroundingSpaces?    END_OF_STREAM    :    END_EXPECTED;    	non-compiled	[CE]  cannot  find  symbol  END_EXPECTED	211	None	replace
2587	[BUG]  [BUGGY]  [FE]  Records  do  not  match  expected  result  (entry  8)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  *  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  &  END_OF_STREAM  *  1;	  return    c    &    END_OF_STREAM    +    1;    	compilable	  [FE]  Records  do  not  match  expected  result  (entry  8)  	101	3	replace
2588	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  *  1;  [FE]  Records  do  not  match  expected  result  (entry  8)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  *  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  END_OF_STREAM  *  1;	  return    c    &    END_OF_STREAM    +    1;    	compilable	  [FE]  Records  do  not  match  expected  result  (entry  8)  	101	3	replace
2589	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  1L;  [CE]  possible  loss  of  precision  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  1L;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  END_OF_STREAM  +  1L;	  return    c    &    END_OF_STREAM    +    1;    	non-compiled	[CE]  possible  loss  of  precision	101	None	replace
2590	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  }	  return    END_OF_STREAM;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	129	None	replace
2591	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getSurroundingSpaces().size();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getSurroundingSpaces().size();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getSurroundingSpaces().size();  }	  return    END_OF_STREAM;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	129	None	replace
2592	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  return  getSurroundingSpaces().size();  }  [CE]  cannot  find  symbol  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  return  getSurroundingSpaces().size();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  return  getSurroundingSpaces().size();  }	  return    END_OF_STREAM;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
2593	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [CE]  illegal  start  of  expression  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  DISABLED)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  DISABLED)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
2594	[BUG]  [BUGGY]  if(in.readLine()!=  0)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in.readLine()!=  0)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in.readLine()!=  0)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
2595	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  DISABLED;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  DISABLED)  {  return  DISABLED;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  DISABLED)  {  return  DISABLED;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
2596	[BUG]  [BUGGY]  if(in.readLine()  <  len)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in.readLine()  <  len)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in.readLine()  <  len)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
2597	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  }  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  DISABLED)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  DISABLED)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
2598	[BUG]  [BUGGY]  if(in.readLine()!=  0)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in.readLine()!=  0)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in.readLine()!=  0)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
2599	[BUG]  [BUGGY]  return  c  >  0?  1  :  exceptionSurroundingSpaces;  [CE]  cannot  find  symbol  exceptionSurroundingSpaces  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  exceptionSurroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  exceptionSurroundingSpaces;	  return    c    >    0?    1    :    escapeSurroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  exceptionSurroundingSpaces	66	None	replace
2600	[BUG]  [BUGGY]  return  c  >  0?  1  :  end_OF_STREAM;  [CE]  cannot  find  symbol  end_OF_STREAM  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  end_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  end_OF_STREAM;	  return    c    >    0?    1    :    escapeSurroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  end_OF_STREAM	66	None	replace
2601	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces()  +  1;  return  c  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces()  +  1;  return  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces()  +  1;  return  c  +  1;	  return    c    +    2;    int    c    =    getEscapeSurroundingSpaces();    return    c    +    2;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	238	None	replace
2602	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces();  return  c  +  4;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces();  return  c  +  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces();  return  c  +  4;	  return    c    +    2;    int    c    =    getEscapeSurroundingSpaces();    return    c    +    2;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	238	None	replace
2603	[BUG]  [BUGGY]  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence, "  +  1;  [CE]  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence, "  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence, "  +  1;	  return    END_OF_STREAM    +    1;    case    END_OF_STREAM:    throw    new    EOF    whilst    processing    escape    sequence       "    +    1;    	non-compiled	[CE]  	319	None	replace
2604	[BUG]  [BUGGY]  Int  c  =  getEscapeSurroundingSpace();  [CE]  cannot  find  symbol  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Int  c  =  getEscapeSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Int  c  =  getEscapeSurroundingSpace();	  return    c    &    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpace();    	non-compiled	[CE]  cannot  find  symbol	197	None	replace
2605	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces  ||  ignoreEmptyLines)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces  ||  ignoreEmptyLines)  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreSurroundingSpaces  ||  ignoreEmptyLines)  {  throw  new  IOException( " ");  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
2606	[BUG]  [BUGGY]  return  c  >=  0?  c  :  END_OF_STREAM;  return  c  >=  0?  c  :  END_OF_STREAM;  [CE]  unreachable  statement  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  c  :  END_OF_STREAM;  return  c  >=  0?  c  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    c    :    END_OF_STREAM;    return  c  >=  0?  c  :  END_OF_STREAM;	  	non-compiled	[CE]  unreachable  statement	141	None	add
2607	[BUG]  [BUGGY]  return  c  >>  0?  1  :  c;  [CE]  incompatible  types  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >>  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >>  0?  1  :  c;	  return    c    >=    0?    1    :    c;    	non-compiled	[CE]  incompatible  types	251	None	replace
2608	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException(   "   ");  }  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( ". ");  }  [CE]  unreachable  statement  [FE]    IOException    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException(   "   ");  }  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( ". ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    else    {    throw    new    IOException(   "   ");    }    if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( ". ");  }	  	non-compiled	[CE]  unreachable  statement	203	None	add
2609	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException(   "   ");  }  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " "));  }  [CE]  [FE]      IOException    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException(   "   ");  }  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " "));  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    else    {    throw    new    IOException(   "   ");    }    if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( " "));  }	  	non-compiled	[CE]  	203	None	add
2610	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  END_OF_STREAM.length;  [CE]  duplicate  case  label  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  END_OF_STREAM.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  END_OF_STREAM.length;	  case    END_OF_STREAM:    return    c;    	non-compiled	[CE]  duplicate  case  label	1	None	replace
2611	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  END_OBJECT;  [CE]  duplicate  case  label  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  END_OBJECT;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  END_OBJECT;	  case    END_OF_STREAM:    return    c;    	non-compiled	[CE]  duplicate  case  label	1	None	replace
2612	[BUG]  [BUGGY]  return  c  %  END_OF_STREAM;  return  c  %  END_OF_STREAM;  [CE]  unreachable  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  %  END_OF_STREAM;  return  c  %  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    %    END_OF_STREAM;    return  c  %  END_OF_STREAM;	  	non-compiled	[CE]  unreachable  statement	102	None	add
2613	[BUG]  [BUGGY]  return  c  %  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  return  c  %  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  %  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  return  c  %  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    %    END_OF_STREAM;    int  c  =  getSurroundingSpaces();  return  c  %  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	102	None	add
2614	[BUG]  [BUGGY]  return  c  %  END_OF_STREAM;  Integer  c  %  END_OF_STREAM;  [CE]  ';'  expected  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  %  END_OF_STREAM;  Integer  c  %  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    %    END_OF_STREAM;    Integer  c  %  END_OF_STREAM;	  	non-compiled	[CE]  ';'  expected	102	None	add
2615	[BUG]  [BUGGY]  return  c  %  END_OF_STREAM;  int  c  =  getSurroundingSpace();  return  c  %  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  %  END_OF_STREAM;  int  c  =  getSurroundingSpace();  return  c  %  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    %    END_OF_STREAM;    int  c  =  getSurroundingSpace();  return  c  %  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	102	None	add
2616	[BUG]  [BUGGY]  return  c  %  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  return  c  %  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  %  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  return  c  %  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    %    END_OF_STREAM;    int  c  =  getSurroundingSpaces().length;  return  c  %  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	102	None	add
2617	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  DIS  [CE]  ';'  expected  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  DIS  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  DIS	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    DISABLED;    }    	non-compiled	[CE]  ';'  expected	335	None	replace
2618	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  DIS  [CE]  ';'  expected  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  DIS  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  DIS	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    DISABLED;    }    	non-compiled	[CE]  ';'  expected	335	None	replace
2619	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  DISABLED;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  DISABLED;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	335	None	replace
2620	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  DISABLED  [CE]  ';'  expected  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  DISABLED  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  DISABLED	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    DISABLED;    }    	non-compiled	[CE]  ';'  expected	335	None	replace
2621	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  DISABLED  [CE]  ';'  expected  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  DISABLED  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  DISABLED	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    DISABLED;    }    	non-compiled	[CE]  ';'  expected	335	None	replace
2622	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  DISABLED;  }  [CE]  illegal  start  of  expression  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  DISABLED;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  DISABLED;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    DISABLED;    }    	non-compiled	[CE]  illegal  start  of  expression	335	None	replace
2623	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  DISABLE  [CE]  ';'  expected  [FE]                            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  DISABLE  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  DISABLE	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    DISABLED;    }    	non-compiled	[CE]  ';'  expected	335	None	replace
2624	[BUG]  [BUGGY]  return  c  >=  END_OF_STREAM  ||  c  ==  END_OF_STREAM  ||  c  >=  END_OF_Escape;  [CE]  cannot  find  symbol  END_OF_Escape  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  END_OF_STREAM  ||  c  ==  END_OF_STREAM  ||  c  >=  END_OF_Escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >=  END_OF_STREAM  ||  c  ==  END_OF_STREAM  ||  c  >=  END_OF_Escape;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM    ||    c    >=    END_OF_Escape;    	non-compiled	[CE]  cannot  find  symbol  END_OF_Escape	267	None	replace
2625	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  >=  END_OF_Escape;  [CE]  cannot  find  symbol  END_OF_Escape  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  >=  END_OF_Escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  >=  END_OF_Escape;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM    ||    c    >=    END_OF_Escape;    	non-compiled	[CE]  cannot  find  symbol  END_OF_Escape	267	None	replace
2626	[BUG]  [BUGGY]  return  c  >  END_OF_STREAM  ||  c  <  =  END_OF_STREAM  ||  c  >=  END_OF_Escape;  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  END_OF_STREAM  ||  c  <  =  END_OF_STREAM  ||  c  >=  END_OF_Escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  END_OF_STREAM  ||  c  <  =  END_OF_STREAM  ||  c  >=  END_OF_Escape;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM    ||    c    >=    END_OF_Escape;    	non-compiled	[CE]  illegal  start  of  expression	267	None	replace
2627	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getSurroundingSpaces();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getSurroundingSpaces();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getSurroundingSpaces();  }	  return    BACKSPACE;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	166	None	replace
2628	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  BACKSPACE;  int  c  =  getSurroundingSpaces();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')  {  return  BACKSPACE;  int  c  =  getSurroundingSpaces();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')  {  return  BACKSPACE;  int  c  =  getSurroundingSpaces();  }	  return    BACKSPACE;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	166	None	replace
2629	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getSurroundingSpaces();  }  else  {  return  c;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getSurroundingSpaces();  }  else  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  BACKSPACE;  int  c  =  getSurroundingSpaces();  }  else  {  return  c;  }	  return    BACKSPACE;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	166	None	replace
2630	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  0)  {  return  c  >  0?  1  :  c;  }  else  {  return  c  >  0?  1  :  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(c  >  0)  {  return  c  >  0?  1  :  c;  }  else  {  return  c  >  0?  1  :  c;  }	  return    c    >    0?    1    :    c;    return    c    >    0?    1    :    c;    	compilable	  [FE]  (entry  2)  	292	5	replace
2631	[BUG]  [BUGGY]  if(c  >  0)  {  return  c  >  0?  1  :  c;  }  else  {  return  c  >  0?  1  :  c;  }  [FE]  (entry  2)  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  0)  {  return  c  >  0?  1  :  c;  }  else  {  return  c  >  0?  1  :  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  0)  {  return  c  >  0?  1  :  c;  }  else  {  return  c  >  0?  1  :  c;  }	  return    c    >    0?    1    :    c;    return    c    >    0?    1    :    c;    	compilable	  [FE]  (entry  2)  	292	5	replace
2632	[BUG]  [BUGGY]  if(c  >  0)  {  return  c  >  0?  1;  }  else  {  return  c  >  0?  1;  }  [CE]  :  expected  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  0)  {  return  c  >  0?  1;  }  else  {  return  c  >  0?  1;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  0)  {  return  c  >  0?  1;  }  else  {  return  c  >  0?  1;  }	  return    c    >    0?    1    :    c;    return    c    >    0?    1    :    c;    	non-compiled	[CE]  :  expected	292	None	replace
2633	[BUG]  [BUGGY]  if(c  >  0)  {  return  c  >  0?  1  :  c;  }  [CE]  missing  return  statement  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  0)  {  return  c  >  0?  1  :  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  0)  {  return  c  >  0?  1  :  c;  }	  return    c    >    0?    1    :    c;    return    c    >    0?    1    :    c;    	non-compiled	[CE]  missing  return  statement	292	None	replace
2634	[BUG]  [BUGGY]  if(c  >  0)  {  return  c  >  0?  1  :  c;  }  else  {  return  c  >  0?  1;  }  [CE]  :  expected  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  0)  {  return  c  >  0?  1  :  c;  }  else  {  return  c  >  0?  1;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  0)  {  return  c  >  0?  1  :  c;  }  else  {  return  c  >  0?  1;  }	  return    c    >    0?    1    :    c;    return    c    >    0?    1    :    c;    	non-compiled	[CE]  :  expected	292	None	replace
2635	[BUG]  [BUGGY]  return  END_OF_STREAM  +  getSurroundingSpaces().size();  [CE]  cannot  find  symbol  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  getSurroundingSpaces().size();	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpaces().size();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
2636	[BUG]  [BUGGY]  int  c  =  getSurroundingSpaces().size()  +  1;  return  END_OF_STREAM  +  c;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpaces().size()  +  1;  return  END_OF_STREAM  +  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpaces().size()  +  1;  return  END_OF_STREAM  +  c;	  return    END_OF_STREAM    +    c;    int    c    =    getSurroundingSpaces().size();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	189	None	replace
2637	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  0;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  >  0?  1  :  0;	  return    c    >    0?    1    :    escape;    	compilable	  [FE]  (entry  2)  	304	5	replace
2638	[BUG]  [BUGGY]  return  c  >  0?  1  :  0;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  0;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  0;	  return    c    >    0?    1    :    escape;    	compilable	  [FE]  (entry  2)  	304	5	replace
2639	[BUG]  [BUGGY]  return  default:  END_OF_STREAM  /  1;  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  default:  END_OF_STREAM  /  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  default:  END_OF_STREAM  /  1;	  return    default:    END_OF_STREAM    +    1;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
2640	[BUG]  [BUGGY]  return  default:  END_OF_STREAM  -  1;  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  default:  END_OF_STREAM  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  default:  END_OF_STREAM  -  1;	  return    default:    END_OF_STREAM    +    1;    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
2641	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpace();  }  [CE]  class,  interface,  or  enum  expected  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpace();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpace();  }	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpace();    	non-compiled	[CE]  class,  interface,  or  enum  expected	193	None	replace
2642	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  int  c  =  getSurroundingSpace();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  int  c  =  getSurroundingSpace();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  int  c  =  getSurroundingSpace();  }	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpace();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	193	None	replace
2643	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpace();  }  else  {  throw  new  IOException( " ");  }  [CE]  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpace();  }  else  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpace();  }  else  {  throw  new  IOException( " ");  }	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpace();    	non-compiled	[CE]  	193	None	replace
2644	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpace();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpace();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpace();  }	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpace();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	193	None	replace
2645	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpace();  }  else  {  return  END_OF_STREAM;  }  [CE]  'else'  without  'if'  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpace();  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpace();  }  else  {  return  END_OF_STREAM;  }	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpace();    	non-compiled	[CE]  'else'  without  'if'	193	None	replace
2646	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM);  [CE]  ';'  expected  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM;  return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    END_OF_STREAM?    END_OF_STREAM    :    END_OF_STREAM;    return  c  ==  END_OF_STREAM?  END_OF_STREAM  :  END_OF_STREAM);	  	non-compiled	[CE]  ';'  expected	263	None	add
2647	[BUG]  [BUGGY]  return  END_OF_STREAM,  c.floatValue();  [CE]  ';'  expected  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM,  c.floatValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM,  c.floatValue();	  return    END_OF_STREAM.floatValue();    	non-compiled	[CE]  ';'  expected	110	None	replace
2648	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces(c,  ignoreEmptyLines);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces(c,  ignoreEmptyLines);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces(c,  ignoreEmptyLines);	  return    c    -    1;    int    c    =    getEscapeSurroundingSpaces(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	155	None	replace
2649	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace(seriousEmptyLines);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace(seriousEmptyLines);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace(seriousEmptyLines);	  return    c    +    1;    int    c    =    getSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	33	None	replace
2650	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace(inputStart);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace(inputStart);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace(inputStart);	  return    c    +    1;    int    c    =    getSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	33	None	replace
2651	[BUG]  [BUGGY]  if(c  >  0)  {  return  c  -  1;  int  c  =  getEscapeChar();  return  c  -  1;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  0)  {  return  c  -  1;  int  c  =  getEscapeChar();  return  c  -  1;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  0)  {  return  c  -  1;  int  c  =  getEscapeChar();  return  c  -  1;  }	  return    c    -    1;    int    c    =    getEscapeChar();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	311	None	replace
2652	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  }  else  {  int  c  =  getEscapeChar();  return  c  -  1;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  }  else  {  int  c  =  getEscapeChar();  return  c  -  1;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  c  -  1;  }  else  {  int  c  =  getEscapeChar();  return  c  -  1;  }	  return    c    -    1;    int    c    =    getEscapeChar();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	311	None	replace
2653	[BUG]  [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_STREAM  :  END_OF_EscapeSequence  +  1;  [CE]  int  cannot  be  dereferenced  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_STREAM  :  END_OF_EscapeSequence  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.equals(c)?  END_OF_STREAM  :  END_OF_EscapeSequence  +  1;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_EscapeSequence;    	non-compiled	[CE]  int  cannot  be  dereferenced	368	None	replace
2654	[BUG]  [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_STREAM  :  END_OF_EscapeSeq;  [CE]  int  cannot  be  dereferenced  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_STREAM  :  END_OF_EscapeSeq;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.equals(c)?  END_OF_STREAM  :  END_OF_EscapeSeq;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_EscapeSequence;    	non-compiled	[CE]  int  cannot  be  dereferenced	368	None	replace
2655	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM;  int  c  =  this.in.read();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM;  int  c  =  this.in.read();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  END_OF_STREAM;  int  c  =  this.in.read();	  return    c    &    END_OF_STREAM;    int    c    =    in.read();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	43	None	replace
2656	[BUG]  [BUGGY]  return  END_OF_STREAM,  c.doubleValue();  [CE]  ';'  expected  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM,  c.doubleValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM,  c.doubleValue();	  return    END_OF_STREAM.doubleValue();    	non-compiled	[CE]  ';'  expected	108	None	replace
2657	[BUG]  [BUGGY]  return  c.equals(END_OF_Escape)?  END_OF_STREAM  :  END_OF_Escape;  [CE]  cannot  find  symbol  END_OF_Escape  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c.equals(END_OF_Escape)?  END_OF_STREAM  :  END_OF_Escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c.equals(END_OF_Escape)?  END_OF_STREAM  :  END_OF_Escape;	  return    END_OF_STREAM.equals(c)?    END_OF_Escape    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_Escape	367	None	replace
2658	[BUG]  [BUGGY]  if(c!=  'n')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoredEmptyLines.contains(c))  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c!=  'n')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoredEmptyLines.contains(c))  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c!=  'n')  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoredEmptyLines.contains(c))  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoredEmptyLines.contains(c))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	332	None	replace
2659	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  c.length;  i  <  len;  ++i)  {  if(ignoredEmptyLines.contains(c))  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  c.length;  i  <  len;  ++i)  {  if(ignoredEmptyLines.contains(c))  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  c.length;  i  <  len;  ++i)  {  if(ignoredEmptyLines.contains(c))  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoredEmptyLines.contains(c))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	332	None	replace
2660	[BUG]  [BUGGY]  return  END_OF_STREAM?  -1  :  END_OF_STREAM;  [CE]  incompatible  types  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM?  -1  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM?  -1  :  END_OF_STREAM;	  return    this.escapeSurroundingSpaces?    -1    :    END_OF_STREAM;    	non-compiled	[CE]  incompatible  types	210	None	replace
2661	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c);  [CE]  duplicate  case  label  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c);	  return    BACKSPACE;    Integer    c    =    getEscapeSurroundingSpace(c);    	non-compiled	[CE]  duplicate  case  label	170	None	replace
2662	[BUG]  [BUGGY]  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c,  ignoreEmptyLines);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c,  ignoreEmptyLines);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpace(c,  ignoreEmptyLines);	  return    BACKSPACE;    Integer    c    =    getEscapeSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	170	None	replace
2663	[BUG]  [BUGGY]  return  c  +  1;  int  c  =  getSurroundingSpaces().length  -  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  1;  int  c  =  getSurroundingSpaces().length  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  1;  int  c  =  getSurroundingSpaces().length  -  1;	  return    c    +    1;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	36	None	replace
2664	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  'n';  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  ==  0?  1  :  'n';	  return    c    ==    0?    1    :    c;    	compilable	  [FE]  (entry  2)  	255	5	replace
2665	[BUG]  [BUGGY]  return  c  ==  0?  1  :  'n';  [FE]  (entry  2)  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  'n';  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  1  :  'n';	  return    c    ==    0?    1    :    c;    	compilable	  [FE]  (entry  2)  	255	5	replace
2666	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]      Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c!=  0?  1  :  c;	  return    c    ==    0?    1    :    c;    	compilable	  [FE]  (entry  2)  	255	5	replace
2667	[BUG]  [BUGGY]  return  c!=  0?  1  :  c;  [FE]  (entry  2)  [FE]      Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c!=  0?  1  :  c;	  return    c    ==    0?    1    :    c;    	compilable	  [FE]  (entry  2)  	255	5	replace
2668	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  c  -  3  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  >  0?  c  -  3  :  c;	  return    c    -    3;    	compilable	  [FE]  (entry  2)  	119	5	replace
2669	[BUG]  [BUGGY]  return  c  >  0?  c  -  3  :  c;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  c  -  3  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  c  -  3  :  c;	  return    c    -    3;    	compilable	  [FE]  (entry  2)  	119	5	replace
2670	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  c  -  1  :  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  >  0?  c  -  1  :  c  -  1;	  return    c    -    3;    	compilable	  [FE]  (entry  2)  	119	5	replace
2671	[BUG]  [BUGGY]  return  c  >  0?  c  -  1  :  c  -  1;  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  c  -  1  :  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  c  -  1  :  c  -  1;	  return    c    -    3;    	compilable	  [FE]  (entry  2)  	119	5	replace
2672	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  c  -  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  >  0?  c  -  1  :  c;	  return    c    -    3;    	compilable	  [FE]  (entry  2)  	119	5	replace
2673	[BUG]  [BUGGY]  return  c  >  0?  c  -  1  :  c;  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  c  -  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  c  -  1  :  c;	  return    c    -    3;    	compilable	  [FE]  (entry  2)  	119	5	replace
2674	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  c  -  1  :  c  -  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  >  0?  c  -  1  :  c  -  3;	  return    c    -    3;    	compilable	  [FE]  (entry  2)  	119	5	replace
2675	[BUG]  [BUGGY]  return  c  >  0?  c  -  1  :  c  -  3;  [FE]  (entry  2)  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  c  -  1  :  c  -  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  c  -  1  :  c  -  3;	  return    c    -    3;    	compilable	  [FE]  (entry  2)  	119	5	replace
2676	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM;  int  c  =  getEscapeChar();  }  [CE]  class,  interface,  or  enum  expected  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM;  int  c  =  getEscapeChar();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)return  END_OF_STREAM;  int  c  =  getEscapeChar();  }	  return    END_OF_STREAM;    int    c    =    getEscapeChar();    	non-compiled	[CE]  class,  interface,  or  enum  expected	258	None	replace
2677	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM;  int  c  =  getEscapeChar();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM;  int  c  =  getEscapeChar();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)return  END_OF_STREAM;  int  c  =  getEscapeChar();	  return    END_OF_STREAM;    int    c    =    getEscapeChar();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	258	None	replace
2678	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')return  END_OF_STREAM;  int  c  =  getEscapeChar();  }  [CE]  class,  interface,  or  enum  expected  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')return  END_OF_STREAM;  int  c  =  getEscapeChar();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')return  END_OF_STREAM;  int  c  =  getEscapeChar();  }	  return    END_OF_STREAM;    int    c    =    getEscapeChar();    	non-compiled	[CE]  class,  interface,  or  enum  expected	258	None	replace
2679	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  *  2;  case  END_OF_STREAM  :  return  c  &  END_OF_STREAM  *  2;  [CE]  duplicate  case  label  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  *  2;  case  END_OF_STREAM  :  return  c  &  END_OF_STREAM  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    *    2;    case  END_OF_STREAM  :  return  c  &  END_OF_STREAM  *  2;	  	non-compiled	[CE]  duplicate  case  label	273	None	add
2680	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  *  2;  int  c  =  getSurroundingSpaces();  return  c  &  END_OF_STREAM  *  2;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  *  2;  int  c  =  getSurroundingSpaces();  return  c  &  END_OF_STREAM  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    *    2;    int  c  =  getSurroundingSpaces();  return  c  &  END_OF_STREAM  *  2;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	273	None	add
2681	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  *  2;  int  c  =  getSurroundingSpace();  return  c  &  END_OF_STREAM  *  2;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  *  2;  int  c  =  getSurroundingSpace();  return  c  &  END_OF_STREAM  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    *    2;    int  c  =  getSurroundingSpace();  return  c  &  END_OF_STREAM  *  2;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	273	None	add
2682	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  *  2;  int  c  =  getSurroundingSpaces();  return  c  &  END_OF_STREAM  *  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  *  2;  int  c  =  getSurroundingSpaces();  return  c  &  END_OF_STREAM  *  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    *    2;    int  c  =  getSurroundingSpaces();  return  c  &  END_OF_STREAM  *  1;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	273	None	add
2683	[BUG]  [BUGGY]  int  c  =  getSurroundingSpaces();  return  c  +  4;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpaces();  return  c  +  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpaces();  return  c  +  4;	  return    c    +    2;    int    c    =    getSurroundingSpaces();    return    c    +    2;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	239	None	replace
2684	[BUG]  [BUGGY]  return  c  +  12;  int  c  =  Integer.parseInt(quoteChar);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  12;  int  c  =  Integer.parseInt(quoteChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    12;    int  c  =  Integer.parseInt(quoteChar);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	248	None	add
2685	[BUG]  [BUGGY]  return  c  +  12;  int  c  =  getSurroundingSpaces();  return  c  +  12;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  12;  int  c  =  getSurroundingSpaces();  return  c  +  12;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    12;    int  c  =  getSurroundingSpaces();  return  c  +  12;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	248	None	add
2686	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  END_OF_STREAM  -  1;	  return    c    -    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	97	5	replace
2687	[BUG]  [BUGGY]  return  END_OF_STREAM  -  1;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  -  1;	  return    c    -    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	97	5	replace
2688	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM;  int  c  =  getSurroundingSpace()  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM;  int  c  =  getSurroundingSpace()  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  END_OF_STREAM;  int  c  =  getSurroundingSpace()  +  1;	  return    c    &    END_OF_STREAM;    int    c    =    getSurroundingSpace();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	45	None	replace
2689	[BUG]  [BUGGY]  if(escape  <  =  0)  {  int  escape  =  getEscapeChar();  if(escape!=  null)  {  return  escape;  }  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(escape  <  =  0)  {  int  escape  =  getEscapeChar();  if(escape!=  null)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(escape  <  =  0)  {  int  escape  =  getEscapeChar();  if(escape!=  null)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeChar();    if(escape!=    null)    {    return    escape;    }    	non-compiled	[CE]  illegal  start  of  expression	232	None	replace
2690	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  escape;  if(escape!=  0)  {  int  escape  =  getEscapeChar();  if(escape!=  null)  {  return  escape;  }  [CE]  ')'  expected  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  escape;  if(escape!=  0)  {  int  escape  =  getEscapeChar();  if(escape!=  null)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  escape;  if(escape!=  0)  {  int  escape  =  getEscapeChar();  if(escape!=  null)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeChar();    if(escape!=    null)    {    return    escape;    }    	non-compiled	[CE]  ')'  expected	232	None	replace
2691	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  escape;  if(escape!=  0)  {  int  escape  =  getEscapeChar();  if(escape!=  null)  {  return  escape;  }  [CE]  ')'  expected  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  escape;  if(escape!=  0)  {  int  escape  =  getEscapeChar();  if(escape!=  null)  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  escape;  if(escape!=  0)  {  int  escape  =  getEscapeChar();  if(escape!=  null)  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeChar();    if(escape!=    null)    {    return    escape;    }    	non-compiled	[CE]  ')'  expected	232	None	replace
2692	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  escape;  if(escape!=  0)  {  int  escape  =  getEscapeChar();  if(escape!=  null)  {  return  escape;  }  }  [CE]  ')'  expected  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  escape;  if(escape!=  0)  {  int  escape  =  getEscapeChar();  if(escape!=  null)  {  return  escape;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  escape;  if(escape!=  0)  {  int  escape  =  getEscapeChar();  if(escape!=  null)  {  return  escape;  }  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeChar();    if(escape!=    null)    {    return    escape;    }    	non-compiled	[CE]  ')'  expected	232	None	replace
2693	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  escape;  if(escape!=  0)  {  return  c;  }  [CE]  ')'  expected  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  escape;  if(escape!=  0)  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  escape;  if(escape!=  0)  {  return  c;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeChar();    if(escape!=    null)    {    return    escape;    }    	non-compiled	[CE]  ')'  expected	232	None	replace
2694	[BUG]  [BUGGY]  int  c  =  0?  1  :  c;  c  >  0?  1  :  c;  [CE]  not  a  statement  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  0?  1  :  c;  c  >  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  0?  1  :  c;  c  >  0?  1  :  c;	  return    c    >    0?    1    :    c;    c    >    0?    1    :    c;    	non-compiled	[CE]  not  a  statement	158	None	replace
2695	[BUG]  [BUGGY]  (c  >  0?  1  :  c);  c  >  0?  1  :  c;  [CE]  not  a  statement  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  (c  >  0?  1  :  c);  c  >  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	(c  >  0?  1  :  c);  c  >  0?  1  :  c;	  return    c    >    0?    1    :    c;    c    >    0?    1    :    c;    	non-compiled	[CE]  not  a  statement	158	None	replace
2696	[BUG]  [BUGGY]  int  c  =  0;  c  >  0?  1  :  c;  [CE]  not  a  statement  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  0;  c  >  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  0;  c  >  0?  1  :  c;	  return    c    >    0?    1    :    c;    c    >    0?    1    :    c;    	non-compiled	[CE]  not  a  statement	158	None	replace
2697	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getSurroundingSpaces();  return  c  -  1;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getSurroundingSpaces();  return  c  -  1;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getSurroundingSpaces();  return  c  -  1;  }	  return    c    -    1;    int    c    =    getSurroundingSpaces();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	310	None	replace
2698	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getSurroundingSpaces();  return  c  -  1;  }  else  {  return  END_OF_STREAM;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getSurroundingSpaces();  return  c  -  1;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getSurroundingSpaces();  return  c  -  1;  }  else  {  return  END_OF_STREAM;  }	  return    c    -    1;    int    c    =    getSurroundingSpaces();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	310	None	replace
2699	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  }  else  {  int  c  =  getSurroundingSpaces();  return  c  -  1;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  }  else  {  int  c  =  getSurroundingSpaces();  return  c  -  1;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  c  -  1;  }  else  {  int  c  =  getSurroundingSpaces();  return  c  -  1;  }	  return    c    -    1;    int    c    =    getSurroundingSpaces();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	310	None	replace
2700	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getSurroundingSpaces();  return  c  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getSurroundingSpaces();  return  c  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  c  -  1;  int  c  =  getSurroundingSpaces();  return  c  -  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    c    -    1;    int    c    =    getSurroundingSpaces();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	310	None	replace
2701	[BUG]  [BUGGY]  return  c  *  2;  return  c  *  2;  [CE]  unreachable  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  *  2;  return  c  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    *    2;    return  c  *  2;	  	non-compiled	[CE]  unreachable  statement	325	None	add
2702	[BUG]  [BUGGY]  return  c  *  2;  int  c  =  getEscapeSurroundingSpaces();  return  c  *  2;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  *  2;  int  c  =  getEscapeSurroundingSpaces();  return  c  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    *    2;    int  c  =  getEscapeSurroundingSpaces();  return  c  *  2;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	325	None	add
2703	[BUG]  [BUGGY]  return  c  *  2;  int  c  =  getSurroundingSpaces();  return  c  *  2;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  *  2;  int  c  =  getSurroundingSpaces();  return  c  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    *    2;    int  c  =  getSurroundingSpaces();  return  c  *  2;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	325	None	add
2704	[BUG]  [BUGGY]  return  c  *  2;  int  c  =  getEscapeChar();  return  c  *  2;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  *  2;  int  c  =  getEscapeChar();  return  c  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    *    2;    int  c  =  getEscapeChar();  return  c  *  2;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	325	None	add
2705	[BUG]  [BUGGY]  int  c  =  0?  1  :  c;  Integer  c  >  0?  1  :  c;  [CE]  ';'  expected  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  0?  1  :  c;  Integer  c  >  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  0?  1  :  c;  Integer  c  >  0?  1  :  c;	  return    c    >    0?    1    :    c;    Integer    c    >    0?    1    :    c;    	non-compiled	[CE]  ';'  expected	160	None	replace
2706	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  *  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  END_OF_STREAM  *  4;	  return    END_OF_STREAM    +    4;    	compilable	  [FE]  (entry  2)  	75	5	replace
2707	[BUG]  [BUGGY]  return  END_OF_STREAM  *  4;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  *  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  *  4;	  return    END_OF_STREAM    +    4;    	compilable	  [FE]  (entry  2)  	75	5	replace
2708	[BUG]  [BUGGY]  return  c  >  0?  1  :  escape(c,  DISABLED);  [CE]  cannot  find  symbol  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  escape(c,  DISABLED);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  escape(c,  DISABLED);	  return    c    >    0?    1    :    escape(c);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
2709	[BUG]  [BUGGY]  return  CSVFormat.START_EOF,  END_OF_STREAM);  [CE]  ';'  expected  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.START_EOF,  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.START_EOF,  END_OF_STREAM);	  return    CSVFormat.START_EOF;    	non-compiled	[CE]  ';'  expected	136	None	replace
2710	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(c  >  END_OF_STREAM)  {  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }	  return    BACKSPACE;    return    BACKSPACE;    	compilable	  [FE]  (entry  2)  	224	5	replace
2711	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }  [FE]  (entry  2)  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }	  return    BACKSPACE;    return    BACKSPACE;    	compilable	  [FE]  (entry  2)  	224	5	replace
2712	[BUG]  [BUGGY]  if(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }  [CE]  illegal  start  of  expression  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }	  return    BACKSPACE;    return    BACKSPACE;    	non-compiled	[CE]  illegal  start  of  expression	224	None	replace
2713	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  BACKSPACE;  }  [CE]  missing  return  statement  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  BACKSPACE;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  BACKSPACE;  }	  return    BACKSPACE;    return    BACKSPACE;    	non-compiled	[CE]  missing  return  statement	224	None	replace
2714	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >=  END_OF_STREAM)  {  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(c  >=  END_OF_STREAM)  {  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }	  return    BACKSPACE;    return    BACKSPACE;    	compilable	  [FE]  (entry  2)  	224	5	replace
2715	[BUG]  [BUGGY]  if(c  >=  END_OF_STREAM)  {  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }  [FE]  (entry  2)  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >=  END_OF_STREAM)  {  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >=  END_OF_STREAM)  {  return  BACKSPACE;  }  else  {  return  END_OF_STREAM;  }	  return    BACKSPACE;    return    BACKSPACE;    	compilable	  [FE]  (entry  2)  	224	5	replace
2716	[BUG]  [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  return  c  +  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  return  c  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    END_OF_STREAM;    int  c  =  getSurroundingSpaces();  return  c  +  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	77	None	add
2717	[BUG]  [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  Integer.parseInt(quoteChar);  return  c  +  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  Integer.parseInt(quoteChar);  return  c  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    END_OF_STREAM;    int  c  =  Integer.parseInt(quoteChar);  return  c  +  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	77	None	add
2718	[BUG]  [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  Integer.parseInt(text.getChars());  return  c  +  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  Integer.parseInt(text.getChars());  return  c  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    END_OF_STREAM;    int  c  =  Integer.parseInt(text.getChars());  return  c  +  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	77	None	add
2719	[BUG]  [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  Integer.parseInt(graph.toString());  return  c  +  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  Integer.parseInt(graph.toString());  return  c  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    END_OF_STREAM;    int  c  =  Integer.parseInt(graph.toString());  return  c  +  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	77	None	add
2720	[BUG]  [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  Integer.parseInt(quoteChar);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  END_OF_STREAM;  int  c  =  Integer.parseInt(quoteChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    END_OF_STREAM;    int  c  =  Integer.parseInt(quoteChar);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	77	None	add
2721	[BUG]  [BUGGY]  return  c  >  0?  1  :  c  +  1;  return  c  >  0?  1  :  c  +  1;  [CE]  unreachable  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c  +  1;  return  c  >  0?  1  :  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    c    +    1;    return  c  >  0?  1  :  c  +  1;	  	non-compiled	[CE]  unreachable  statement	307	None	add
2722	[BUG]  [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  =  getSurroundingSpaces();  return  c  >  0?  1  :  c  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  =  getSurroundingSpaces();  return  c  >  0?  1  :  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    c    +    1;    int  c  =  getSurroundingSpaces();  return  c  >  0?  1  :  c  +  1;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	307	None	add
2723	[BUG]  [BUGGY]  return  c  >  0?  1  :  c  +  1;  (c  >  0?  1  :  c  +  1);  [CE]  not  a  statement  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c  +  1;  (c  >  0?  1  :  c  +  1);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    c    +    1;    (c  >  0?  1  :  c  +  1);	  	non-compiled	[CE]  not  a  statement	307	None	add
2724	[BUG]  [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  =  getSurroundingSpaces().length;  return  c  >  0?  1  :  c  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  =  getSurroundingSpaces().length;  return  c  >  0?  1  :  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    c    +    1;    int  c  =  getSurroundingSpaces().length;  return  c  >  0?  1  :  c  +  1;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	307	None	add
2725	[BUG]  [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  =  getSurroundingSpaces().size();  return  c  >  0?  1  :  c  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  =  getSurroundingSpaces().size();  return  c  >  0?  1  :  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    c    +    1;    int  c  =  getSurroundingSpaces().size();  return  c  >  0?  1  :  c  +  1;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	307	None	add
2726	[BUG]  [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  =  Character.toLowerCase(c);  return  c  >  0?  1  :  c  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c  +  1;  int  c  =  Character.toLowerCase(c);  return  c  >  0?  1  :  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    c    +    1;    int  c  =  Character.toLowerCase(c);  return  c  >  0?  1  :  c  +  1;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	307	None	add
2727	[BUG]  [BUGGY]  if(c  >  0?  1  :  c;  for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  }  [CE]  ')'  expected  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  0?  1  :  c;  for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  0?  1  :  c;  for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  }	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    2;    ++c)    {    if(!ignoreEmptyLines)    {    return    c    >    0?    1    :    c;    }    	non-compiled	[CE]  ')'  expected	294	None	replace
2728	[BUG]  [BUGGY]  if(c  >  0?  1  :  c);  for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  }  [CE]  incompatible  types  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  0?  1  :  c);  for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  0?  1  :  c);  for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  }	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    2;    ++c)    {    if(!ignoreEmptyLines)    {    return    c    >    0?    1    :    c;    }    	non-compiled	[CE]  incompatible  types	294	None	replace
2729	[BUG]  [BUGGY]  c  >  0?  1  :  c;  for(int  c  =  0;  c  <  2;  ++c)  {  if(ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  [CE]  not  a  statement  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  c  >  0?  1  :  c;  for(int  c  =  0;  c  <  2;  ++c)  {  if(ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	c  >  0?  1  :  c;  for(int  c  =  0;  c  <  2;  ++c)  {  if(ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    2;    ++c)    {    if(!ignoreEmptyLines)    {    return    c    >    0?    1    :    c;    }    	non-compiled	[CE]  not  a  statement	294	None	replace
2730	[BUG]  [BUGGY]  if(c  >  0?  1  :  c;  for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  [CE]  ')'  expected  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  0?  1  :  c;  for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  0?  1  :  c;  for(int  c  =  0;  c  <  2;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    2;    ++c)    {    if(!ignoreEmptyLines)    {    return    c    >    0?    1    :    c;    }    	non-compiled	[CE]  ')'  expected	294	None	replace
2731	[BUG]  [BUGGY]  return  END_OF_STREAM  +  commmentStart;  return  END_OF_STREAM  +  commmentStart;  [CE]  unreachable  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  commmentStart;  return  END_OF_STREAM  +  commmentStart;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    commmentStart;    return  END_OF_STREAM  +  commmentStart;	  	non-compiled	[CE]  unreachable  statement	80	None	add
2732	[BUG]  [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  getCommentStart();  return  END_OF_STREAM  +  commmentStart;  [CE]  cannot  find  symbol  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  getCommentStart();  return  END_OF_STREAM  +  commmentStart;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    commmentStart;    int  commmentStart  =  getCommentStart();  return  END_OF_STREAM  +  commmentStart;	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
2733	[BUG]  [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  getEscapeSurroundingSpaces();  return  END_OF_STREAM  +  commmentStart;  [CE]  cannot  find  symbol  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  getEscapeSurroundingSpaces();  return  END_OF_STREAM  +  commmentStart;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    commmentStart;    int  commmentStart  =  getEscapeSurroundingSpaces();  return  END_OF_STREAM  +  commmentStart;	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
2734	[BUG]  [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  getEscapeSurroundingSpaces().length;  return  END_OF_STREAM  +  commmentStart;  [CE]  cannot  find  symbol  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  getEscapeSurroundingSpaces().length;  return  END_OF_STREAM  +  commmentStart;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    commmentStart;    int  commmentStart  =  getEscapeSurroundingSpaces().length;  return  END_OF_STREAM  +  commmentStart;	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
2735	[BUG]  [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  getCommmentStart();  return  END_OF_STREAM  +  commmentStart;  [CE]  cannot  find  symbol  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  getCommmentStart();  return  END_OF_STREAM  +  commmentStart;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    commmentStart;    int  commmentStart  =  getCommmentStart();  return  END_OF_STREAM  +  commmentStart;	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
2736	[BUG]  [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  Character.toLowerCase(c);  return  END_OF_STREAM  +  commmentStart;  [CE]  unreachable  statement  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  Character.toLowerCase(c);  return  END_OF_STREAM  +  commmentStart;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    commmentStart;    int  commmentStart  =  Character.toLowerCase(c);  return  END_OF_STREAM  +  commmentStart;	  	non-compiled	[CE]  unreachable  statement	80	None	add
2737	[BUG]  [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  getEscapeSurroundingSpaces().size();  return  END_OF_STREAM  +  commmentStart;  [CE]  cannot  find  symbol  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  commmentStart;  int  commmentStart  =  getEscapeSurroundingSpaces().size();  return  END_OF_STREAM  +  commmentStart;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    commmentStart;    int  commmentStart  =  getEscapeSurroundingSpaces().size();  return  END_OF_STREAM  +  commmentStart;	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
2738	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getEscapeSurroundingSpaces();  }  [CE]  class,  interface,  or  enum  expected  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getEscapeSurroundingSpaces();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getEscapeSurroundingSpaces();  }	  return    END_OF_STREAM    +    1;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  class,  interface,  or  enum  expected	177	None	replace
2739	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  int  c  =  getEscapeSurroundingSpaces();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  int  c  =  getEscapeSurroundingSpaces();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  int  c  =  getEscapeSurroundingSpaces();  }	  return    END_OF_STREAM    +    1;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	177	None	replace
2740	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  int  c  =  getEscapeSurroundingSpaces();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  int  c  =  getEscapeSurroundingSpaces();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  int  c  =  getEscapeSurroundingSpaces();  }	  return    END_OF_STREAM    +    1;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	177	None	replace
2741	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  }	  return    END_OF_STREAM;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	132	None	replace
2742	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r')return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r')return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  }	  return    END_OF_STREAM;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	132	None	replace
2743	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    END_OF_STREAM;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	132	None	replace
2744	[BUG]  [BUGGY]  return  END_OF_STREAM  +  'n';  case  END_OF_STREAM:  return  END_OF_STREAM  +  'n';  [CE]  duplicate  case  label  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  'n';  case  END_OF_STREAM:  return  END_OF_STREAM  +  'n';  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    'n';    case  END_OF_STREAM:  return  END_OF_STREAM  +  'n';	  	non-compiled	[CE]  duplicate  case  label	281	None	add
2745	[BUG]  [BUGGY]  return  END_OF_STREAM  +  'n';  if(c  ==  'n')  {  return  END_OF_STREAM  +  'n';  }  [CE]  unreachable  statement  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  'n';  if(c  ==  'n')  {  return  END_OF_STREAM  +  'n';  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    'n';    if(c  ==  'n')  {  return  END_OF_STREAM  +  'n';  }	  	non-compiled	[CE]  unreachable  statement	281	None	add
2746	[BUG]  [BUGGY]  return  END_OF_STREAM  +  'n';  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence   ");  [CE]  duplicate  case  label  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  'n';  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence   ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    'n';    case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence   ");	  	non-compiled	[CE]  duplicate  case  label	281	None	add
2747	[BUG]  [BUGGY]  return  END_OF_STREAM  +  'n';  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence   "  +  'n';  [CE]  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  'n';  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence   "  +  'n';  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    'n';    case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence   "  +  'n';	  	non-compiled	[CE]  	281	None	add
2748	[BUG]  [BUGGY]  return  END_OF_STREAM  +  'n';  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence   ";  [CE]  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  'n';  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence   ";  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    'n';    case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence   ";	  	non-compiled	[CE]  	281	None	add
2749	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM;  Record  do  not  match  expected  result(c);  [CE]  not  a  statement  [FE]            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM;  Record  do  not  match  expected  result(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  END_OF_STREAM;  Record  do  not  match  expected  result(c);	  return    c    &    END_OF_STREAM;    Record    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	196	None	replace
2750	[BUG]  [BUGGY]  return  c  +  END_OF_STREAM;  Record  do  not  match  expected  result(c)  [CE]  not  a  statement  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  END_OF_STREAM;  Record  do  not  match  expected  result(c)  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  END_OF_STREAM;  Record  do  not  match  expected  result(c)	  return    c    &    END_OF_STREAM;    Record    do    not    match    expected    result(c)    	non-compiled	[CE]  not  a  statement	196	None	replace
2751	[BUG]  [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_CREAM;  [CE]  cannot  find  symbol  END_OF_CREAM  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_CREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c!=  0?  END_OF_STREAM  :  END_OF_CREAM;	  return    c!=    0?    c    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_CREAM	144	None	replace
2752	[BUG]  [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_RUNNING;  [CE]  cannot  find  symbol  END_OF_RUNNING  [FE]      Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  END_OF_STREAM  :  END_OF_RUNNING;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c!=  0?  END_OF_STREAM  :  END_OF_RUNNING;	  return    c!=    0?    c    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_RUNNING	144	None	replace
2753	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c  +  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  >  0?  1  :  c  +  3;	  return    c    >    0?    1    :    c    +    1;    	compilable	  [FE]  (entry  2)  	308	5	replace
2754	[BUG]  [BUGGY]  return  c  >  0?  1  :  c  +  3;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c  +  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  c  +  3;	  return    c    >    0?    1    :    c    +    1;    	compilable	  [FE]  (entry  2)  	308	5	replace
2755	[BUG]  [BUGGY]  if(c  <  len)  {  return  0;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }  }  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  <  len)  {  return  0;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  <  len)  {  return  0;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
2756	[BUG]  [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence  [CE]  unclosed  string  literal  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	25	None	replace
2757	[BUG]  [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence   ");  }  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence   ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence   ");  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
2758	[BUG]  [BUGGY]  if(c  <  len)  {  return  0;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  <  len)  {  return  0;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  <  len)  {  return  0;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( " ");  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
2759	[BUG]  [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  c;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence  [CE]  unclosed  string  literal  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  c;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(!ignoreSurroundingSpaces)  {  return  c;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	25	None	replace
2760	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_EscapeSequences.indexOf(c  +  1)  >=  0;  [CE]  cannot  find  symbol  END_OF_EscapeSequences  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_EscapeSequences.indexOf(c  +  1)  >=  0;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_EscapeSequences.indexOf(c  +  1)  >=  0;	  return    END_OF_STREAM    ||    END_OF_EscapeSequences.indexOf(c)    >=    0;    	non-compiled	[CE]  cannot  find  symbol  END_OF_EscapeSequences	351	None	replace
2761	[BUG]  [BUGGY]  return  END_OF_STREAM.startsWith(END_OF_STREAM)?  END_OF_STREAM  :  END_OF_Escape;  [CE]  int  cannot  be  dereferenced  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.startsWith(END_OF_STREAM)?  END_OF_STREAM  :  END_OF_Escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.startsWith(END_OF_STREAM)?  END_OF_STREAM  :  END_OF_Escape;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_Escape;    	non-compiled	[CE]  int  cannot  be  dereferenced	364	None	replace
2762	[BUG]  [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_STREAM  :  END_OF_ESCAPE;  [CE]  int  cannot  be  dereferenced  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_STREAM  :  END_OF_ESCAPE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.equals(c)?  END_OF_STREAM  :  END_OF_ESCAPE;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_Escape;    	non-compiled	[CE]  int  cannot  be  dereferenced	364	None	replace
2763	[BUG]  [BUGGY]  char  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  char  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	char  c  =  getEscapeSurroundingSpaces();	  return    c    -    1;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	152	None	replace
2764	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  in.read();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  END_OF_STREAM  +  in.read();	  return    END_OF_STREAM    +    c;    return    END_OF_STREAM    +    c;    	compilable	  [FE]  (entry  2)  	7	5	replace
2765	[BUG]  [BUGGY]  return  END_OF_STREAM  +  in.read();  [FE]  (entry  2)  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  in.read();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  in.read();	  return    END_OF_STREAM    +    c;    return    END_OF_STREAM    +    c;    	compilable	  [FE]  (entry  2)  	7	5	replace
2766	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	331	None	replace
2767	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	331	None	replace
2768	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	331	None	replace
2769	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	331	None	replace
2770	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	331	None	replace
2771	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	331	None	replace
2772	[BUG]  [BUGGY]  for(int  c  =  1;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  [CE]  illegal  start  of  expression  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  1;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  1;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
2773	[BUG]  [BUGGY]  while(c  <  len)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  [CE]  illegal  start  of  expression  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  len)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  len)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
2774	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  2;  case  END_OF_STREAM:  return  c  &  END_OF_STREAM  +  2;  [CE]  duplicate  case  label  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  2;  case  END_OF_STREAM:  return  c  &  END_OF_STREAM  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    +    2;    case  END_OF_STREAM:  return  c  &  END_OF_STREAM  +  2;	  	non-compiled	[CE]  duplicate  case  label	271	None	add
2775	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  2;  int  c  =  getSurroundingSpaces();  return  c  &  END_OF_STREAM  +  2;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  2;  int  c  =  getSurroundingSpaces();  return  c  &  END_OF_STREAM  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    +    2;    int  c  =  getSurroundingSpaces();  return  c  &  END_OF_STREAM  +  2;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	271	None	add
2776	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  +  2;  int  c  =  getSurroundingSpaces();  return  c  &  END_OF_STREAM  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  +  2;  int  c  =  getSurroundingSpaces();  return  c  &  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    +    2;    int  c  =  getSurroundingSpaces();  return  c  &  END_OF_STREAM  +  1;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	271	None	add
2777	[BUG]  [BUGGY]  if(END_OF_STREAM!=  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  int  c  =  getSurroundingSpaces().size();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(END_OF_STREAM!=  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  int  c  =  getSurroundingSpaces().size();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(END_OF_STREAM!=  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  int  c  =  getSurroundingSpaces().size();  }	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	179	None	replace
2778	[BUG]  [BUGGY]  if(END_OF_STREAM!=  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  return  getSurroundingSpaces().size();  }  [CE]  cannot  find  symbol  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(END_OF_STREAM!=  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  return  getSurroundingSpaces().size();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(END_OF_STREAM!=  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  }  else  {  return  getSurroundingSpaces().size();  }	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  cannot  find  symbol	179	None	replace
2779	[BUG]  [BUGGY]  if(END_OF_STREAM!=  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpaces().size();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(END_OF_STREAM!=  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpaces().size();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(END_OF_STREAM!=  END_OF_STREAM)  {  return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpaces().size();  }	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	179	None	replace
2780	[BUG]  [BUGGY]  if(END_OF_STREAM!=  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpaces().size();  }  [CE]  class,  interface,  or  enum  expected  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(END_OF_STREAM!=  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpaces().size();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(END_OF_STREAM!=  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getSurroundingSpaces().size();  }	  return    END_OF_STREAM    +    1;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  class,  interface,  or  enum  expected	179	None	replace
2781	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  11;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  +  11;	  return    c    +    12;    	compilable	  [FE]  (entry  2)  	249	5	replace
2782	[BUG]  [BUGGY]  return  c  +  11;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  11;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  11;	  return    c    +    12;    	compilable	  [FE]  (entry  2)  	249	5	replace
2783	[BUG]  [BUGGY]  return  c  -  8;  int  c  =  getEscapeSurroundingSpaces();  return  c  -  8;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  8;  int  c  =  getEscapeSurroundingSpaces();  return  c  -  8;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    8;    int  c  =  getEscapeSurroundingSpaces();  return  c  -  8;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	217	None	add
2784	[BUG]  [BUGGY]  return  c  -  8;  int  c  =  getSurroundingSpaces();  return  c  -  8;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  8;  int  c  =  getSurroundingSpaces();  return  c  -  8;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    8;    int  c  =  getSurroundingSpaces();  return  c  -  8;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	217	None	add
2785	[BUG]  [BUGGY]  return  c  -  8;  int  c  =  getEscapeChar();  return  c  -  8;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  8;  int  c  =  getEscapeChar();  return  c  -  8;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    8;    int  c  =  getEscapeChar();  return  c  -  8;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	217	None	add
2786	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_EmptyLines;  [CE]  cannot  find  symbol  END_EmptyLines  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_EmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  0?  END_OF_STREAM  :  END_EmptyLines;	  return    c    ==    0?    c    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_EmptyLines	138	None	replace
2787	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	212	None	add
2788	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  unreachable  statement  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    END_OF_STREAM    :    END_OF_STREAM;    return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  unreachable  statement	212	None	add
2789	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces();  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	212	None	add
2790	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces().length;  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	212	None	add
2791	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces().size();  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	212	None	add
2792	[BUG]  [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  0?  END_OF_STREAM  :  END_OF_STREAM.intValue();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  0?  END_OF_STREAM  :  END_OF_STREAM.intValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  0?  END_OF_STREAM  :  END_OF_STREAM.intValue();	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	212	None	add
2793	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  BACKSPACE;  int  c  =  getSurroundingSpaces().size();  [CE]  duplicate  case  label  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  BACKSPACE;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  BACKSPACE;  int  c  =  getSurroundingSpaces().size();	  return    BACKSPACE;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  duplicate  case  label	172	None	replace
2794	[BUG]  [BUGGY]  return  c.equals(END_OF_SURroundingSpaces)?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  cannot  find  symbol  END_OF_SURroundingSpaces  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c.equals(END_OF_SURroundingSpaces)?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c.equals(END_OF_SURroundingSpaces)?  END_OF_STREAM  :  END_OF_STREAM;	  return    END_OF_STREAM.equals(c)?    END_OF_SURroundingSpaces    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  END_OF_SURroundingSpaces	365	None	replace
2795	[BUG]  [BUGGY]  return  _OF_STREAM.equals(c)?  END_OF_SURroundingSpaces  :  END_OF_STREAM;  [CE]  cannot  find  symbol  _OF_STREAM  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  _OF_STREAM.equals(c)?  END_OF_SURroundingSpaces  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  _OF_STREAM.equals(c)?  END_OF_SURroundingSpaces  :  END_OF_STREAM;	  return    END_OF_STREAM.equals(c)?    END_OF_SURroundingSpaces    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  _OF_STREAM	365	None	replace
2796	[BUG]  [BUGGY]  int  delimiter  =  getDelimiter().delimiter;  [CE]  cannot  find  symbol  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getDelimiter().delimiter;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getDelimiter().delimiter;	  int    delimiter    =    getDelimiter();    	non-compiled	[CE]  cannot  find  symbol	284	None	replace
2797	[BUG]  [BUGGY]  int  delimiter  =  getDelimiterInstantiator();  [CE]  cannot  find  symbol  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getDelimiterInstantiator();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getDelimiterInstantiator();	  int    delimiter    =    getDelimiter();    	non-compiled	[CE]  cannot  find  symbol	284	None	replace
2798	[BUG]  [BUGGY]  return  c  >  0?  1  :  EOF_STREAM;  [CE]  cannot  find  symbol  EOF_STREAM  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  EOF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  EOF_STREAM;	  return    c    >    0?    1    :    END_OBJECT;    	non-compiled	[CE]  cannot  find  symbol  EOF_STREAM	67	None	replace
2799	[BUG]  [BUGGY]  return  this.in.intValue();  [CE]  cannot  find  symbol  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.in.intValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.in.intValue();	  return    in.intValue();    	non-compiled	[CE]  cannot  find  symbol	243	None	replace
2800	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getCurrentIndex();  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getCurrentIndex();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getCurrentIndex();  }	  return    END_OF_STREAM;    int    c    =    getCurrentIndex();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	261	None	replace
2801	[BUG]  [BUGGY]  while(c  <  =  END_OF_STREAM)  {  c  =  getCurrentIndex();  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  =  END_OF_STREAM)  {  c  =  getCurrentIndex();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  =  END_OF_STREAM)  {  c  =  getCurrentIndex();	  return    END_OF_STREAM;    int    c    =    getCurrentIndex();    	non-compiled	[CE]  illegal  start  of  expression	261	None	replace
2802	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM;  int  c  =  getCurrentIndex();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM;  int  c  =  getCurrentIndex();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)return  END_OF_STREAM;  int  c  =  getCurrentIndex();	  return    END_OF_STREAM;    int    c    =    getCurrentIndex();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	261	None	replace
2803	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM;  int  c  =  getCurrentIndex();  }  [CE]  class,  interface,  or  enum  expected  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM;  int  c  =  getCurrentIndex();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)return  END_OF_STREAM;  int  c  =  getCurrentIndex();  }	  return    END_OF_STREAM;    int    c    =    getCurrentIndex();    	non-compiled	[CE]  class,  interface,  or  enum  expected	261	None	replace
2804	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  return  getCurrentIndex();  }  [CE]  cannot  find  symbol  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  return  getCurrentIndex();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  return  getCurrentIndex();  }	  return    END_OF_STREAM;    int    c    =    getCurrentIndex();    	non-compiled	[CE]  cannot  find  symbol	261	None	replace
2805	[BUG]  [BUGGY]  else  if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [CE]  'else'  without  'if'  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  else  if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	else  if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }	  return    END_OF_STREAM;    case    END_OF_STREAM:    return    END_OF_STREAM;    	non-compiled	[CE]  'else'  without  'if'	296	None	replace
2806	[BUG]  [BUGGY]  return  default:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  default:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  default:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    return    BACKSPACE;    	non-compiled	[CE]  illegal  start  of  expression	345	None	replace
2807	[BUG]  [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  return  END_OBJECT;  [CE]  duplicate  case  label  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  return  END_OBJECT;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  return  END_OBJECT;	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    return    BACKSPACE;    	non-compiled	[CE]  duplicate  case  label	345	None	replace
2808	[BUG]  [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  return  END;  [CE]  duplicate  case  label  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  return  END;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  return  END;	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence   ");    return    BACKSPACE;    	non-compiled	[CE]  duplicate  case  label	345	None	replace
2809	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')return  END_OF_STREAM;  }  [CE]  class,  interface,  or  enum  expected  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	199	None	replace
2810	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	199	None	replace
2811	[BUG]  [BUGGY]  return  v  +  END_OF_STREAM;  [CE]  cannot  find  symbol  v  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  v  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  v  +  END_OF_STREAM;	  return    ch    +    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  v	184	None	replace
2812	[BUG]  [BUGGY]  return  ch  +  1;  [CE]  cannot  find  symbol  ch  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  ch  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  ch  +  1;	  return    ch    +    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  ch	184	None	replace
2813	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  ==  END_OF_STREAM  ||  c  >  END_OF_Escape;  [CE]  cannot  find  symbol  END_OF_Escape  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  ==  END_OF_STREAM  ||  c  >  END_OF_Escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  ==  END_OF_STREAM  ||  c  >  END_OF_Escape;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM    ||    c    >    END_OF_Escape;    	non-compiled	[CE]  cannot  find  symbol  END_OF_Escape	265	None	replace
2814	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  ==  END_OF_Escape  ||  c  >  END_OF_Escape;  [CE]  cannot  find  symbol  END_OF_Escape  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  ==  END_OF_Escape  ||  c  >  END_OF_Escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  ==  END_OF_Escape  ||  c  >  END_OF_Escape;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM    ||    c    >    END_OF_Escape;    	non-compiled	[CE]  cannot  find  symbol  END_OF_Escape	265	None	replace
2815	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  0;  }  [CE]  missing  return  statement  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  0;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  0;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	200	None	replace
2816	[BUG]  [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  unreachable  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    END_OF_STREAM    :    END_OF_STREAM;    return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  unreachable  statement	214	None	add
2817	[BUG]  [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces();  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	214	None	add
2818	[BUG]  [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces().length;  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	214	None	add
2819	[BUG]  [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  return  c  >>  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  return  c  >>  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces();  return  c  >>  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	214	None	add
2820	[BUG]  [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)return  commmentStart;  }  [CE]  >  expected  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)return  commmentStart;  }	  for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  >  expected	20	None	replace
2821	[BUG]  [BUGGY]  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [CE]  cannot  find  symbol  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	char  commmentStart  =  in.readChar();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }	  for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
2822	[BUG]  [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readString();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [CE]  >  expected  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readString();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readString();  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }	  for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  >  expected	20	None	replace
2823	[BUG]  [BUGGY]  return  c  +  2;  c  +  4;  [CE]  not  a  statement  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  2;  c  +  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  2;  c  +  4;	  return    c    +    1;    c    +    1;    	non-compiled	[CE]  not  a  statement	30	None	replace
2824	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getCurrentSurroundingSpace();  }  [CE]  class,  interface,  or  enum  expected  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getCurrentSurroundingSpace();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getCurrentSurroundingSpace();  }	  return    END_OF_STREAM    +    1;    int    c    =    getCurrentSurroundingSpace();    	non-compiled	[CE]  class,  interface,  or  enum  expected	192	None	replace
2825	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getCurrentSurroundingSpace();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getCurrentSurroundingSpace();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getCurrentSurroundingSpace();	  return    END_OF_STREAM    +    1;    int    c    =    getCurrentSurroundingSpace();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	192	None	replace
2826	[BUG]  [BUGGY]  if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
2827	[BUG]  [BUGGY]  if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
2828	[BUG]  [BUGGY]  if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  <  =  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines  ||!ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
2829	[BUG]  [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(!ignoreSurroundingSpaces)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
2830	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  ',';  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  END_OF_STREAM  +  ',';	  return    END_OF_STREAM    +    'ufffd';    	compilable	  [FE]  (entry  2)  	185	5	replace
2831	[BUG]  [BUGGY]  return  END_OF_STREAM  +  ',';  [FE]  (entry  2)  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  ',';  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  ',';	  return    END_OF_STREAM    +    'ufffd';    	compilable	  [FE]  (entry  2)  	185	5	replace
2832	[BUG]  [BUGGY]  [FE]  IOException  [FE]    IOException    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence: ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence: ");  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    else    {    throw    new    IOException(   "   ");    }    	compilable	  [FE]  IOException  	204	5	replace
2833	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence: ");  }  [FE]  IOException  [FE]    IOException    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence: ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence: ");  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    else    {    throw    new    IOException(   "   ");    }    	compilable	  [FE]  IOException  	204	5	replace
2834	[BUG]  [BUGGY]  [FE]  IOException  [FE]      IOException    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    else    {    throw    new    IOException(   "   ");    }    	compilable	  [FE]  IOException  	204	5	replace
2835	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }  [FE]  IOException  [FE]      IOException    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r')    {    return    END_OF_STREAM;    }    else    {    throw    new    IOException(   "   ");    }    	compilable	  [FE]  IOException  	204	5	replace
2836	[BUG]  [BUGGY]  return  this.encodeEmptyLines?  END_OF_STREAM  :  END_BACKSPACE;  [CE]  cannot  find  symbol  encodeEmptyLines  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.encodeEmptyLines?  END_OF_STREAM  :  END_BACKSPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.encodeEmptyLines?  END_OF_STREAM  :  END_BACKSPACE;	  return    this.encodeEscapeSurroundingSpaces?    END_OF_STREAM    :    END_BACKSPACE;    	non-compiled	[CE]  cannot  find  symbol  encodeEmptyLines	123	None	replace
2837	[BUG]  [BUGGY]  Int  c  =  getSurroundingSpaces().size();  [CE]  cannot  find  symbol  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Int  c  =  getSurroundingSpaces().size();	  return    c    >    0?    1    :    c;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
2838	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace(c,  ignoreEmptyLines);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace(c,  ignoreEmptyLines);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace(c,  ignoreEmptyLines);	  return    c    >    0?    1    :    c;    int    c    =    getSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	165	None	replace
2839	[BUG]  [BUGGY]  int  delimiter  =  getEmptyLines().size();  [CE]  cannot  find  symbol  [FE]                                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getEmptyLines().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getEmptyLines().size();	  int    delimiter    =    getSurroundingSpaces().size();    	non-compiled	[CE]  cannot  find  symbol	288	None	replace
2840	[BUG]  [BUGGY]  int  delimiter  =  getSurroundingSpaces().size()  -  4;  [CE]  cannot  find  symbol  [FE]                                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  delimiter  =  getSurroundingSpaces().size()  -  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  delimiter  =  getSurroundingSpaces().size()  -  4;	  int    delimiter    =    getSurroundingSpaces().size();    	non-compiled	[CE]  cannot  find  symbol	288	None	replace
2841	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace(endpoint);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace(endpoint);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace(endpoint);	  return    END_OF_STREAM;    int    c    =    getSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	130	None	replace
2842	[BUG]  [BUGGY]  int  c  =  getSurroundingSpace(encodeEscapeChar(c));  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getSurroundingSpace(encodeEscapeChar(c));  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getSurroundingSpace(encodeEscapeChar(c));	  return    END_OF_STREAM;    int    c    =    getSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	130	None	replace
2843	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  return  c;  }  }  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  return  c;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  return  c;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
2844	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  }  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
2845	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  return  c;  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines.contains(c))  {  return  c;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
2846	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  [CE]  illegal  start  of  expression  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines.contains(c))  {  return  c;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
2847	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_SPACE;  int  c  =  Integer.parseInt(quoteChar);  [CE]  cannot  find  symbol  END_SPACE  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_SPACE;  int  c  =  Integer.parseInt(quoteChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  END_OF_STREAM  :  END_SPACE;  int  c  =  Integer.parseInt(quoteChar);	  return    c    >    0?    c    :    END_OF_STREAM;    int    c    =    Integer.parseInt(quoteChar);    	non-compiled	[CE]  cannot  find  symbol  END_SPACE	314	None	replace
2848	[BUG]  [BUGGY]  while(c  <  =  END_OF_STREAM)  {  return  c  -  1;  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  =  END_OF_STREAM)  {  return  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  =  END_OF_STREAM)  {  return  c  -  1;	  return    c    -    1;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
2849	[BUG]  [BUGGY]  return  END_OF_STREAM?  0  :  this.encodeEscapeSurroundingSpaces;  [CE]  incompatible  types  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM?  0  :  this.encodeEscapeSurroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM?  0  :  this.encodeEscapeSurroundingSpaces;	  return    this.encodeEscapeSurroundingSpaces?    0    :    END_OF_STREAM;    	non-compiled	[CE]  incompatible  types	121	None	replace
2850	[BUG]  [BUGGY]  while(c  <  =  END_OF_STREAM)  {  return  c  +  1;  int  c  =  getSurroundingSpaces();  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  =  END_OF_STREAM)  {  return  c  +  1;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  =  END_OF_STREAM)  {  return  c  +  1;  int  c  =  getSurroundingSpaces();	  return    c    +    1;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
2851	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  c  +  1;  int  c  =  getSurroundingSpaces();  [CE]  duplicate  case  label  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  c  +  1;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  c  +  1;  int  c  =  getSurroundingSpaces();	  return    c    +    1;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  duplicate  case  label	32	None	replace
2852	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  END_OF_STREAM  +  END_SPACE;  [CE]  duplicate  case  label  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  END_OF_STREAM  +  END_SPACE;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  END_OF_STREAM  +  END_SPACE;	  return    END_OF_STREAM    +    c;    (c    +    END_OF_STREAM));    	non-compiled	[CE]  duplicate  case  label	12	None	replace
2853	[BUG]  [BUGGY]  int  c  =  END_OF_STREAM  +  1;  (c  +  END_OF_STREAM));  [CE]  not  a  statement  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  END_OF_STREAM  +  1;  (c  +  END_OF_STREAM));  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  END_OF_STREAM  +  1;  (c  +  END_OF_STREAM));	  return    END_OF_STREAM    +    c;    (c    +    END_OF_STREAM));    	non-compiled	[CE]  not  a  statement	12	None	replace
2854	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getEscapeChar();  }  [CE]  class,  interface,  or  enum  expected  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getEscapeChar();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getEscapeChar();  }	  return    END_OF_STREAM    +    1;    int    c    =    getEscapeChar();    	non-compiled	[CE]  class,  interface,  or  enum  expected	190	None	replace
2855	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getEscapeChar();  }  else  {  return  END_OF_STREAM;  }  [CE]  'else'  without  'if'  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getEscapeChar();  }  else  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getEscapeChar();  }  else  {  return  END_OF_STREAM;  }	  return    END_OF_STREAM    +    1;    int    c    =    getEscapeChar();    	non-compiled	[CE]  'else'  without  'if'	190	None	replace
2856	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getEscapeChar();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getEscapeChar();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)return  END_OF_STREAM  +  1;  int  c  =  getEscapeChar();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    END_OF_STREAM    +    1;    int    c    =    getEscapeChar();    	non-compiled	[CE]  	190	None	replace
2857	[BUG]  [BUGGY]  return  END_OF_STREAM  +  8;  if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM  +  8;  }  else  {  return  END_OF_STREAM  +  8;  }  [CE]  unreachable  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  8;  if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM  +  8;  }  else  {  return  END_OF_STREAM  +  8;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    8;    if(c  ==  'n'  ||  c  ==  'r')  {  return  END_OF_STREAM  +  8;  }  else  {  return  END_OF_STREAM  +  8;  }	  	non-compiled	[CE]  unreachable  statement	277	None	add
2858	[BUG]  [BUGGY]  return  END_OF_STREAM  +  8;  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM  +  8;  }  [CE]  unreachable  statement  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  8;  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM  +  8;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    8;    if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM  +  8;  }	  	non-compiled	[CE]  unreachable  statement	277	None	add
2859	[BUG]  [BUGGY]  return  END_OF_STREAM  +  8;  if(c  ==  'n'  ||  c  ==  'r')  {  for(int  i  =  0;  i  <  c;  ++i)  {  return  END_OF_STREAM  +  8;  }  [CE]  illegal  start  of  expression  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  8;  if(c  ==  'n'  ||  c  ==  'r')  {  for(int  i  =  0;  i  <  c;  ++i)  {  return  END_OF_STREAM  +  8;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    8;    if(c  ==  'n'  ||  c  ==  'r')  {  for(int  i  =  0;  i  <  c;  ++i)  {  return  END_OF_STREAM  +  8;  }	  	non-compiled	[CE]  illegal  start  of  expression	277	None	add
2860	[BUG]  [BUGGY]  return  END_OF_STREAM  +  8;  if(c  >  END_OF_STREAM)  {  if(c  <  END_OF_STREAM)  {  return  END_OF_STREAM  +  8;  }  [CE]  illegal  start  of  expression  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  8;  if(c  >  END_OF_STREAM)  {  if(c  <  END_OF_STREAM)  {  return  END_OF_STREAM  +  8;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    8;    if(c  >  END_OF_STREAM)  {  if(c  <  END_OF_STREAM)  {  return  END_OF_STREAM  +  8;  }	  	non-compiled	[CE]  illegal  start  of  expression	277	None	add
2861	[BUG]  [BUGGY]  return  END_OF_STREAM  +  8;  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM  +  8;  }  else  {  return  END_OF_STREAM  +  8;  }  [CE]  unreachable  statement  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  8;  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM  +  8;  }  else  {  return  END_OF_STREAM  +  8;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    8;    if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM  +  8;  }  else  {  return  END_OF_STREAM  +  8;  }	  	non-compiled	[CE]  unreachable  statement	277	None	add
2862	[BUG]  [BUGGY]  return  END_OF_STREAM  +  8;  if(c  >  END_OF_STREAM)  {  return  END_OF_STREAM  +  8;  }  else  {  return  END_OF_STREAM  +  8;  }  [CE]  unreachable  statement  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  8;  if(c  >  END_OF_STREAM)  {  return  END_OF_STREAM  +  8;  }  else  {  return  END_OF_STREAM  +  8;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    8;    if(c  >  END_OF_STREAM)  {  return  END_OF_STREAM  +  8;  }  else  {  return  END_OF_STREAM  +  8;  }	  	non-compiled	[CE]  unreachable  statement	277	None	add
2863	[BUG]  [BUGGY]  return  END_OF_STREAM  +  8;  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM  +  8;  }  [CE]  unreachable  statement  [FE]                (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  8;  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM  +  8;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    8;    if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM  +  8;  }	  	non-compiled	[CE]  unreachable  statement	277	None	add
2864	[BUG]  [BUGGY]  return  END_OF_STREAM  +  indentSurroundingSpaces[c];  [CE]  cannot  find  symbol  indentSurroundingSpaces  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  indentSurroundingSpaces[c];  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  indentSurroundingSpaces[c];	  return    END_OF_STREAM    +    escapeSurroundingSpaces[c];    	non-compiled	[CE]  cannot  find  symbol  indentSurroundingSpaces	229	None	replace
2865	[BUG]  [BUGGY]  return  END_OF_STREAM  +  overrideEmptyLines[c];  [CE]  cannot  find  symbol  overrideEmptyLines  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  overrideEmptyLines[c];  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  overrideEmptyLines[c];	  return    END_OF_STREAM    +    escapeSurroundingSpaces[c];    	non-compiled	[CE]  cannot  find  symbol  overrideEmptyLines	229	None	replace
2866	[BUG]  [BUGGY]  return  END_OF_STREAM  +  handleEmptyLines[c];  [CE]  cannot  find  symbol  handleEmptyLines  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  handleEmptyLines[c];  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  handleEmptyLines[c];	  return    END_OF_STREAM    +    escapeSurroundingSpaces[c];    	non-compiled	[CE]  cannot  find  symbol  handleEmptyLines	229	None	replace
2867	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OBJECT.equals(c);  [CE]  cannot  find  symbol  END_OBJECT  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OBJECT.equals(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OBJECT.equals(c);	  return    END_OF_STREAM    ||    END_OF_Escape.equals(c);    	non-compiled	[CE]  cannot  find  symbol  END_OBJECT	349	None	replace
2868	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpace(end_OF_STREAM);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpace(end_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpace(end_OF_STREAM);	  return    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpace(c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	131	None	replace
2869	[BUG]  [BUGGY]  return  c  +  1;  c  +=  3;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  1;  c  +=  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  1;  c  +=  3;	  return    c    +    2;    c    +    2;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	54	None	replace
2870	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  DISABLED)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  DISABLED)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readCharAt(c);    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
2871	[BUG]  [BUGGY]  if(escape)  {  return  DISABLED;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(escape)  {  return  DISABLED;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(escape)  {  return  DISABLED;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readCharAt(c);    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
2872	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  DISABLED;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  com  [CE]  ';'  expected  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  DISABLED)  {  return  DISABLED;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  com  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  DISABLED)  {  return  DISABLED;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  com	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readCharAt(c);    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
2873	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  com  [CE]  ';'  expected  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  DISABLED)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  com  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  DISABLED)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  com	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readCharAt(c);    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
2874	[BUG]  [BUGGY]  if(escape)  {  return  DISABLED;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  com  [CE]  ';'  expected  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(escape)  {  return  DISABLED;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  com  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(escape)  {  return  DISABLED;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  com	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readCharAt(c);    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
2875	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  commmentStar  [CE]  ';'  expected  [FE]                            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  DISABLED)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  commmentStar  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  DISABLED)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  commmentStar	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readCharAt(c);    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  ';'  expected	27	None	replace
2876	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  }  [CE]  illegal  start  of  expression  [FE]                              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  DISABLED)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  DISABLED)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readCharAt(c);  if(commmentStart  ==  commmentStart)  {  return  commmentStart;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readCharAt(c);    if(commmentStart    ==    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
2877	[BUG]  [BUGGY]  return  d.intValue()  +  1;  [CE]  cannot  find  symbol  d  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  d.intValue()  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  d.intValue()  +  1;	  return    END_OF_STREAM.intValue()    +    1;    	non-compiled	[CE]  cannot  find  symbol  d	107	None	replace
2878	[BUG]  [BUGGY]  return  END_OF_STREAM  +  offset;  c  +=  END_OF_STREAM;  [CE]  cannot  find  symbol  offset  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  offset;  c  +=  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  offset;  c  +=  END_OF_STREAM;	  return    END_OF_STREAM    +    c;    c    +=    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  offset	9	None	replace
2879	[BUG]  [BUGGY]  int  c  =  c  &  END_OF_STREAM;  Record  do  not  match  expected  result(c  -  END_OF_STREAM);  [CE]  not  a  statement  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  c  &  END_OF_STREAM;  Record  do  not  match  expected  result(c  -  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  c  &  END_OF_STREAM;  Record  do  not  match  expected  result(c  -  END_OF_STREAM);	  return    c    &    END_OF_STREAM;    Record    do    not    match    expected    result(c    -    END_OF_STREAM);    	non-compiled	[CE]  not  a  statement	195	None	replace
2880	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  &  BACKSPACE  &  END_OF_STREAM;	  return    c    &    BACKSPACE;    	compilable	  [FE]  (entry  2)  	99	5	replace
2881	[BUG]  [BUGGY]  return  c  &  BACKSPACE  &  END_OF_STREAM;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  BACKSPACE  &  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  BACKSPACE  &  END_OF_STREAM;	  return    c    &    BACKSPACE;    	compilable	  [FE]  (entry  2)  	99	5	replace
2882	[BUG]  [BUGGY]  return  this.end_OF_STREAM.longValue();  [CE]  cannot  find  symbol  end_OF_STREAM  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.end_OF_STREAM.longValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.end_OF_STREAM.longValue();	  return    END_OF_STREAM.longValue();    	non-compiled	[CE]  cannot  find  symbol  end_OF_STREAM	109	None	replace
2883	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'r'  ||  c  ==  't')  {  return  END_OF_STREAM;  }	  return    END_OF_STREAM;    return    END_OF_STREAM;    	non-compiled	[CE]  missing  return  statement	125	None	replace
2884	[BUG]  [BUGGY]  return  this.ignoredSurroundingSpaces  ||  this.ignoredEmptyLines;  [CE]  cannot  find  symbol  ignoredSurroundingSpaces  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoredSurroundingSpaces  ||  this.ignoredEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoredSurroundingSpaces  ||  this.ignoredEmptyLines;	  return    this.ignoredSurroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  ignoredSurroundingSpaces	270	None	replace
2885	[BUG]  [BUGGY]  return  this.ignoredSurroundingSpaces  &&  this.ignoredEmptyLines  >  0;  [CE]  cannot  find  symbol  ignoredSurroundingSpaces  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoredSurroundingSpaces  &&  this.ignoredEmptyLines  >  0;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoredSurroundingSpaces  &&  this.ignoredEmptyLines  >  0;	  return    this.ignoredSurroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  ignoredSurroundingSpaces	270	None	replace
2886	[BUG]  [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  <  =  END_OF_SURroundingSpaces  ||  c  >  END_OF_SURroundingSpaces;  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  END_OF_STREAM  ||  c  <  =  END_OF_SURroundingSpaces  ||  c  >  END_OF_SURroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  ==  END_OF_STREAM  ||  c  <  =  END_OF_SURroundingSpaces  ||  c  >  END_OF_SURroundingSpaces;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM    ||    c    >    END_OF_SURroundingSpaces;    	non-compiled	[CE]  illegal  start  of  expression	266	None	replace
2887	[BUG]  [BUGGY]  return  in.ignoreEmptyLines;  [CE]  cannot  find  symbol  ignoreEmptyLines  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  in.ignoreEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  in.ignoreEmptyLines;	  return    this.ignoreEmptyLines;    	non-compiled	[CE]  cannot  find  symbol  ignoreEmptyLines	145	None	replace
2888	[BUG]  [BUGGY]  return  this.ignoreEmptyLines  &&  this.ignoreEmptyLines;  [CE]  incompatible  types  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreEmptyLines  &&  this.ignoreEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoreEmptyLines  &&  this.ignoreEmptyLines;	  return    this.ignoreEmptyLines;    	non-compiled	[CE]  incompatible  types	145	None	replace
2889	[BUG]  [BUGGY]  return  this.ignoreEmptyLines?  in  'n'  :  ignoreEmptyLines;  [CE]  :  expected  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.ignoreEmptyLines?  in  'n'  :  ignoreEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.ignoreEmptyLines?  in  'n'  :  ignoreEmptyLines;	  return    this.ignoreEmptyLines;    	non-compiled	[CE]  :  expected	145	None	replace
2890	[BUG]  [BUGGY]  return  c  +  5;  int  c  =  Integer.parseInt(quoteChar);  return  c  +  5;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  5;  int  c  =  Integer.parseInt(quoteChar);  return  c  +  5;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    5;    int  c  =  Integer.parseInt(quoteChar);  return  c  +  5;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	94	None	add
2891	[BUG]  [BUGGY]  return  c  +  5;  int  c  =  getSurroundingSpaces();  return  c  +  5;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  5;  int  c  =  getSurroundingSpaces();  return  c  +  5;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    5;    int  c  =  getSurroundingSpaces();  return  c  +  5;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	94	None	add
2892	[BUG]  [BUGGY]  return  c  +  5;  int  c  =  Integer.parseInt(text.getChars());  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  5;  int  c  =  Integer.parseInt(text.getChars());  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    5;    int  c  =  Integer.parseInt(text.getChars());	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	94	None	add
2893	[BUG]  [BUGGY]  return  c  +  5;  int  c  +  5;  [CE]  ';'  expected  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  5;  int  c  +  5;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    5;    int  c  +  5;	  	non-compiled	[CE]  ';'  expected	94	None	add
2894	[BUG]  [BUGGY]  return  this.end_OF_STREAM  +  1L;  [CE]  cannot  find  symbol  end_OF_STREAM  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.end_OF_STREAM  +  1L;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.end_OF_STREAM  +  1L;	  return    END_OF_STREAM    +    1L;    	non-compiled	[CE]  cannot  find  symbol  end_OF_STREAM	73	None	replace
2895	[BUG]  [BUGGY]  return  c  -  END_OF_STREAM;  return  c  -  END_OF_STREAM;  [CE]  unreachable  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM;  return  c  -  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    END_OF_STREAM;    return  c  -  END_OF_STREAM;	  	non-compiled	[CE]  unreachable  statement	96	None	add
2896	[BUG]  [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  return  c  -  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  return  c  -  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    END_OF_STREAM;    int  c  =  getSurroundingSpaces();  return  c  -  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	96	None	add
2897	[BUG]  [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c  -  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c  -  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    END_OF_STREAM;    int  c  =  getEscapeSurroundingSpaces();  return  c  -  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	96	None	add
2898	[BUG]  [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  getSurroundingSpace();  return  c  -  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  getSurroundingSpace();  return  c  -  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    END_OF_STREAM;    int  c  =  getSurroundingSpace();  return  c  -  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	96	None	add
2899	[BUG]  [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  return  c  -  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  return  c  -  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    END_OF_STREAM;    int  c  =  getSurroundingSpaces().length;  return  c  -  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	96	None	add
2900	[BUG]  [BUGGY]  if(in.readLine()!=  0)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in.readLine()!=  0)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in.readLine()!=  0)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart!=    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
2901	[BUG]  [BUGGY]  if(in.readLine()  ==  0)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in.readLine()  ==  0)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in.readLine()  ==  0)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart!=    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
2902	[BUG]  [BUGGY]  if(c  ==  DISABLED)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  DISABLED)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  DISABLED)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart!=    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
2903	[BUG]  [BUGGY]  if(in.readLine()  <  len)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in.readLine()  <  len)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in.readLine()  <  len)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart!=    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
2904	[BUG]  [BUGGY]  if(in.readLine()  ==  0)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in.readLine()  ==  0)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in.readLine()  ==  0)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart!=    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
2905	[BUG]  [BUGGY]  if(in.readLine()!=  0)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }  }  [CE]  illegal  start  of  expression  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in.readLine()!=  0)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in.readLine()!=  0)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStart;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart!=    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
2906	[BUG]  [BUGGY]  if(in.readLine()!=  0)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStar  [CE]  ';'  expected  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(in.readLine()!=  0)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStar  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(in.readLine()!=  0)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  char  commmentStart  =  in.readChar();  if(commmentStart!=  commmentStart)  {  return  commmentStar	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    char    commmentStart    =    in.readChar();    if(commmentStart!=    commmentStart)    {    return    commmentStart;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
2907	[BUG]  [BUGGY]  return  c  >=  0?  1  :  c;  return  c  >=  0?  1  :  c;  [CE]  unreachable  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  1  :  c;  return  c  >=  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    1    :    c;    return  c  >=  0?  1  :  c;	  	non-compiled	[CE]  unreachable  statement	250	None	add
2908	[BUG]  [BUGGY]  return  c  >=  0?  1  :  c;  int  c  >=  0?  1  :  c;  [CE]  ';'  expected  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  1  :  c;  int  c  >=  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    1    :    c;    int  c  >=  0?  1  :  c;	  	non-compiled	[CE]  ';'  expected	250	None	add
2909	[BUG]  [BUGGY]  return  c  >=  0?  1  :  c;  int  c  <  0?  1  :  c;  [CE]  ';'  expected  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  1  :  c;  int  c  <  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    1    :    c;    int  c  <  0?  1  :  c;	  	non-compiled	[CE]  ';'  expected	250	None	add
2910	[BUG]  [BUGGY]  return  c  >=  0?  1  :  c;  (c  >=  0?  1  :  c);  [CE]  not  a  statement  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >=  0?  1  :  c;  (c  >=  0?  1  :  c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >=    0?    1    :    c;    (c  >=  0?  1  :  c);	  	non-compiled	[CE]  not  a  statement	250	None	add
2911	[BUG]  [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  unreachable  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    END_OF_STREAM    :    END_OF_STREAM;    return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  unreachable  statement	329	None	add
2912	[BUG]  [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  ';'  expected  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  ';'  expected	329	None	add
2913	[BUG]  [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces();  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	329	None	add
2914	[BUG]  [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    <    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces().length;  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	329	None	add
2915	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  return  c;  }	  return    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces();    return    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	262	None	replace
2916	[BUG]  [BUGGY]  while(c  <  =  END_OF_STREAM)  {  c  =  getEscapeSurroundingSpaces();  return  c;  }  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  =  END_OF_STREAM)  {  c  =  getEscapeSurroundingSpaces();  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  =  END_OF_STREAM)  {  c  =  getEscapeSurroundingSpaces();  return  c;  }	  return    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces();    return    c;    	non-compiled	[CE]  illegal  start  of  expression	262	None	replace
2917	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getEscapeSurroundingSpaces();  return  c;  }  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getEscapeSurroundingSpaces();  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  END_OF_STREAM;  }  else  {  int  c  =  getEscapeSurroundingSpaces();  return  c;  }	  return    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces();    return    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	262	None	replace
2918	[BUG]  [BUGGY]  return  END_OF_STREAM  +  escapeSequences;  [CE]  cannot  find  symbol  escapeSequences  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  escapeSequences;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  escapeSequences;	  return    END_OF_STREAM    +    commmentSurroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  escapeSequences	83	None	replace
2919	[BUG]  [BUGGY]  return  END_OF_STREAM  +  escapeSequence;  [CE]  cannot  find  symbol  escapeSequence  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  escapeSequence;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  escapeSequence;	  return    END_OF_STREAM    +    commmentSurroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  escapeSequence	83	None	replace
2920	[BUG]  [BUGGY]  int  c  =  c  -  1;  Integer  c  -  1;  [CE]  ';'  expected  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  c  -  1;  Integer  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  c  -  1;  Integer  c  -  1;	  return    c    -    1;    Integer    c    -    1;    	non-compiled	[CE]  ';'  expected	245	None	replace
2921	[BUG]  [BUGGY]  int  c  =  Integer.valueOf(c  -  1);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  Integer.valueOf(c  -  1);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  Integer.valueOf(c  -  1);	  return    c    -    1;    Integer    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	245	None	replace
2922	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length  -  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length  -  1;	  return    c    &    END_OF_STREAM;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	44	None	replace
2923	[BUG]  [BUGGY]  Int  c  =  getSurroundingSpaces();  [CE]  cannot  find  symbol  [FE]          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Int  c  =  getSurroundingSpaces();	  return    c    &    END_OF_STREAM;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
2924	[BUG]  [BUGGY]  case  END:  throw  new  EOF  whilst  processing  escape  sequence ");  [CE]  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END:  throw  new  EOF  whilst  processing  escape  sequence ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END:  throw  new  EOF  whilst  processing  escape  sequence ");	  return    BACKSPACE;    case    END_OF_STREAM:    throw    new    EOF    whilst    processing    escape    sequence       ");    	non-compiled	[CE]  	344	None	replace
2925	[BUG]  [BUGGY]  return  this.c  +  3;  [CE]  cannot  find  symbol  c  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.c  +  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.c  +  3;	  return    c    +    3;    	non-compiled	[CE]  cannot  find  symbol  c	87	None	replace
2926	[BUG]  [BUGGY]  return  CSVFormat.START_OF_STREAM  -  1;  [CE]  cannot  find  symbol  START_OF_STREAM  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.START_OF_STREAM  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.START_OF_STREAM  -  1;	  return    CSVFormat.START_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  START_OF_STREAM	5	None	replace
2927	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  unreachable  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    END_OF_STREAM    :    END_OF_STREAM;    return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  unreachable  statement	139	None	add
2928	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces();  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	139	None	add
2929	[BUG]  [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  int  c  =  getSurroundingSpaces().length;  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    END_OF_STREAM    :    END_OF_STREAM;    int  c  =  getSurroundingSpaces().length;  return  c  >  0?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	139	None	add
2930	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  BACKSPACE;  int  c  =  getSurroundingSpace(c);  [CE]  duplicate  case  label  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  BACKSPACE;  int  c  =  getSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  BACKSPACE;  int  c  =  getSurroundingSpace(c);	  return    BACKSPACE;    int    c    =    getSurroundingSpace(c);    	non-compiled	[CE]  duplicate  case  label	169	None	replace
2931	[BUG]  [BUGGY]  return  c!=  0?  c  :  END_OF_STREAM;  return  c!=  0?  c  :  END_OF_STREAM;  [CE]  unreachable  statement  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c!=  0?  c  :  END_OF_STREAM;  return  c!=  0?  c  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c!=    0?    c    :    END_OF_STREAM;    return  c!=  0?  c  :  END_OF_STREAM;	  	non-compiled	[CE]  unreachable  statement	143	None	add
2932	[BUG]  [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  c  ==  0?  1  :  c;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  c  ==  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    1    :    c;    int  c  =  c  ==  0?  1  :  c;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	254	None	add
2933	[BUG]  [BUGGY]  return  c  ==  0?  1  :  c;  return  c  ==  0?  1  :  c;  [CE]  unreachable  statement  [FE]      Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  c;  return  c  ==  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    1    :    c;    return  c  ==  0?  1  :  c;	  	non-compiled	[CE]  unreachable  statement	254	None	add
2934	[BUG]  [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  getSurroundingSpaces();  return  c  ==  0?  1  :  c;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  getSurroundingSpaces();  return  c  ==  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    1    :    c;    int  c  =  getSurroundingSpaces();  return  c  ==  0?  1  :  c;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	254	None	add
2935	[BUG]  [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  getEscapeSurroundingSpaces();  return  c  ==  0?  1  :  c;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  getEscapeSurroundingSpaces();  return  c  ==  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    1    :    c;    int  c  =  getEscapeSurroundingSpaces();  return  c  ==  0?  1  :  c;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	254	None	add
2936	[BUG]  [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  0?  1  :  c;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    1    :    c;    int  c  =  0?  1  :  c;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	254	None	add
2937	[BUG]  [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  getSurroundingSpace();  return  c  ==  0?  1  :  c;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  getSurroundingSpace();  return  c  ==  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    1    :    c;    int  c  =  getSurroundingSpace();  return  c  ==  0?  1  :  c;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	254	None	add
2938	[BUG]  [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  getSurroundingSpaces().length;  return  c  ==  0?  1  :  c;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  ==  0?  1  :  c;  int  c  =  getSurroundingSpaces().length;  return  c  ==  0?  1  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    ==    0?    1    :    c;    int  c  =  getSurroundingSpaces().length;  return  c  ==  0?  1  :  c;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	254	None	add
2939	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')return  END_OF_STREAM;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	198	None	replace
2940	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	198	None	replace
2941	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [CE]  missing  return  statement  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  missing  return  statement	198	None	replace
2942	[BUG]  [BUGGY]  if(c  <  =  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [CE]  illegal  start  of  expression  [FE]                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  <  =  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  <  =  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  't')  {  return  END_OF_STREAM;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    't')    {    return    END_OF_STREAM;    }    	non-compiled	[CE]  illegal  start  of  expression	198	None	replace
2943	[BUG]  [BUGGY]  return  c  >  0?  1  :  c  +  getSurroundingSpaces().length;  [CE]  cannot  find  symbol  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  c  +  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  c  +  getSurroundingSpaces().length;	  return    c    >    0?    1    :    c;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  cannot  find  symbol	257	None	replace
2944	[BUG]  [BUGGY]  char  c  >  0?  1  :  c;  int  c  =  getSurroundingSpaces().length;  [CE]  ';'  expected  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  char  c  >  0?  1  :  c;  int  c  =  getSurroundingSpaces().length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	char  c  >  0?  1  :  c;  int  c  =  getSurroundingSpaces().length;	  return    c    >    0?    1    :    c;    int    c    =    getSurroundingSpaces().length;    	non-compiled	[CE]  ';'  expected	257	None	replace
2945	[BUG]  [BUGGY]  return  c  +  6;  int  c  =  Integer.parseInt(quoteChar);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  6;  int  c  =  Integer.parseInt(quoteChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    6;    int  c  =  Integer.parseInt(quoteChar);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	92	None	add
2946	[BUG]  [BUGGY]  return  c  +  6;  int  c  =  getSurroundingSpaces();  return  c  +  6;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  6;  int  c  =  getSurroundingSpaces();  return  c  +  6;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    6;    int  c  =  getSurroundingSpaces();  return  c  +  6;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	92	None	add
2947	[BUG]  [BUGGY]  return  c  +  6;  int  c  =  getEscapeSurroundingSpaces();  return  c  +  6;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  6;  int  c  =  getEscapeSurroundingSpaces();  return  c  +  6;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    6;    int  c  =  getEscapeSurroundingSpaces();  return  c  +  6;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	92	None	add
2948	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  false;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  false;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	337	None	replace
2949	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  false;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  false;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	337	None	replace
2950	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  false;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  false;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	337	None	replace
2951	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  false;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  false;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	337	None	replace
2952	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  false  [CE]  ';'  expected  [FE]                            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  false  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  return  false	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	337	None	replace
2953	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  false;  }  }  [CE]  illegal  start  of  expression  [FE]                              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  false;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&  ignoreEmptyLines)  {  return  false;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	337	None	replace
2954	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  c;  }  [CE]  illegal  start  of  expression  [FE]                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||  ignoreEmptyLines)  {  return  c;  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
2955	[BUG]  [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  [CE]  illegal  start  of  expression  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
2956	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  END_OF_STREAM  +  END_OF_STREAM;  [CE]  duplicate  case  label  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  END_OF_STREAM  +  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  END_OF_STREAM  +  END_OF_STREAM;	  return    END_OF_STREAM    +    c;    c    +    END_OF_STREAM;    	non-compiled	[CE]  duplicate  case  label	8	None	replace
2957	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  END_OF_STREAM  +  END_SURroundingSpaces;  [CE]  duplicate  case  label  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  END_OF_STREAM  +  END_SURroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  END_OF_STREAM  +  END_SURroundingSpaces;	  return    END_OF_STREAM    +    c;    c    +    END_OF_STREAM;    	non-compiled	[CE]  duplicate  case  label	8	None	replace
2958	[BUG]  [BUGGY]  return  END_OF_STREAM?  END_OF_STREAM  :  END_EOF;  [CE]  incompatible  types  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM?  END_OF_STREAM  :  END_EOF;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM?  END_OF_STREAM  :  END_EOF;	  return    this.escapeSurroundingSpaces?    END_OF_STREAM    :    END_EOF;    	non-compiled	[CE]  incompatible  types	208	None	replace
2959	[BUG]  [BUGGY]  return  this.escapeSurroundingSpaces?  END_EOF_STREAM  :  END_EOF;  [CE]  cannot  find  symbol  escapeSurroundingSpaces  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  this.escapeSurroundingSpaces?  END_EOF_STREAM  :  END_EOF;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  this.escapeSurroundingSpaces?  END_EOF_STREAM  :  END_EOF;	  return    this.escapeSurroundingSpaces?    END_OF_STREAM    :    END_EOF;    	non-compiled	[CE]  cannot  find  symbol  escapeSurroundingSpaces	208	None	replace
2960	[BUG]  [BUGGY]  return  default:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  default:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  default:  throw  new  IOException( "EOF  whilst  processing  escape  sequence. ");	  return    END_OF_STREAM    +    1;    case    END_OF_STREAM:    throw    new    IOException(   "EOF    whilst    processing    escape    sequence.   ");    	non-compiled	[CE]  illegal  start  of  expression	320	None	replace
2961	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  c;  }  [CE]  missing  return  statement  [FE]                    (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  c;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeChar();    if(escape!=    0)    {    return    escape;    }    	non-compiled	[CE]  missing  return  statement	236	None	replace
2962	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  escape;  }  [CE]  missing  return  statement  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeChar();    if(escape!=    0)    {    return    escape;    }    	non-compiled	[CE]  missing  return  statement	236	None	replace
2963	[BUG]  [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  c;  }  [CE]  missing  return  statement  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c!=  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  c;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeChar();    if(escape!=    0)    {    return    escape;    }    	non-compiled	[CE]  missing  return  statement	236	None	replace
2964	[BUG]  [BUGGY]  return  CSVFormat.END_OF_SURroundingSpaces  &&  this.ignoreEmptyLines;  [CE]  cannot  find  symbol  END_OF_SURroundingSpaces  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  CSVFormat.END_OF_SURroundingSpaces  &&  this.ignoreEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  CSVFormat.END_OF_SURroundingSpaces  &&  this.ignoreEmptyLines;	  return    CSVFormat.END_OF_SURroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  END_OF_SURroundingSpaces	146	None	replace
2965	[BUG]  [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_STREAM  :  EOF;  [CE]  int  cannot  be  dereferenced  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.equals(c)?  END_OF_STREAM  :  EOF;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.equals(c)?  END_OF_STREAM  :  EOF;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_EOF;    	non-compiled	[CE]  int  cannot  be  dereferenced	366	None	replace
2966	[BUG]  [BUGGY]  return  END_OF_STREAM.startsWith(END_OF_STREAM)?  END_OF_EOF  :  END_OF_STREAM;  [CE]  int  cannot  be  dereferenced  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM.startsWith(END_OF_STREAM)?  END_OF_EOF  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM.startsWith(END_OF_STREAM)?  END_OF_EOF  :  END_OF_STREAM;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_EOF;    	non-compiled	[CE]  int  cannot  be  dereferenced	366	None	replace
2967	[BUG]  [BUGGY]  return  c.equals(END_OF_STREAM)?  END_OF_STREAM  :  END_OF_EOF;  [CE]  int  cannot  be  dereferenced  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c.equals(END_OF_STREAM)?  END_OF_STREAM  :  END_OF_EOF;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c.equals(END_OF_STREAM)?  END_OF_STREAM  :  END_OF_EOF;	  return    END_OF_STREAM.equals(c)?    END_OF_STREAM    :    END_OF_EOF;    	non-compiled	[CE]  int  cannot  be  dereferenced	366	None	replace
2968	[BUG]  [BUGGY]  return  END_OF_STREAM  +  DISABLED;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  DISABLED;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  DISABLED;  int  c  =  getEscapeSurroundingSpaces();	  return    END_OF_STREAM    +    c;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	11	None	replace
2969	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces().length;  return  END_OF_STREAM  +  c;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces().length;  return  END_OF_STREAM  +  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces().length;  return  END_OF_STREAM  +  c;	  return    END_OF_STREAM    +    c;    int    c    =    getEscapeSurroundingSpaces();    return    END_OF_STREAM    +    c;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	187	None	replace
2970	[BUG]  [BUGGY]  return  in.ignoredEmptyLines;  [CE]  cannot  find  symbol  ignoredEmptyLines  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  in.ignoredEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  in.ignoredEmptyLines;	  return    this.ignoredEmptyLines;    	non-compiled	[CE]  cannot  find  symbol  ignoredEmptyLines	147	None	replace
2971	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces();  return  c  -  2;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces();  return  c  -  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces();  return  c  -  2;	  return    c    -    1;    int    c    =    getEscapeSurroundingSpaces();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	309	None	replace
2972	[BUG]  [BUGGY]  int  c  =  getEscapeSurroundingSpaces().length;  return  c  -  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  getEscapeSurroundingSpaces().length;  return  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  getEscapeSurroundingSpaces().length;  return  c  -  1;	  return    c    -    1;    int    c    =    getEscapeSurroundingSpaces();    return    c    -    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	309	None	replace
2973	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&  ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&  ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&  ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	333	None	replace
2974	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&  ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&  ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&  ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	333	None	replace
2975	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&!ignoreEmptyLines)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&!ignoreEmptyLines)  {  break;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(ignoreEmptyLines  &&!ignoreEmptyLines)  {  break;  }  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	333	None	replace
2976	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  break;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)  {  return  escape;  for(int  i  =  0,  len  =  escape.length;  i  <  len;  ++i)  {  if(!ignoreEmptyLines  &&!ignoreEmptyLines)  {  break;  }	  return    escape;    for(int    i    =    0,    len    =    escape.length;    i    <    len;    ++i)    {    if(!ignoreEmptyLines    &&!ignoreEmptyLines)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	333	None	replace
2977	[BUG]  [BUGGY]  return  c  -  2;  return  c  -  2;  [CE]  unreachable  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  2;  return  c  -  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    2;    return  c  -  2;	  	non-compiled	[CE]  unreachable  statement	112	None	add
2978	[BUG]  [BUGGY]  return  c  -  2;  int  c  =  getEscapeSurroundingSpaces();  return  c  -  2;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  2;  int  c  =  getEscapeSurroundingSpaces();  return  c  -  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    2;    int  c  =  getEscapeSurroundingSpaces();  return  c  -  2;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	112	None	add
2979	[BUG]  [BUGGY]  return  c  -  2;  int  c  =  getSurroundingSpaces();  return  c  -  2;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  2;  int  c  =  getSurroundingSpaces();  return  c  -  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    2;    int  c  =  getSurroundingSpaces();  return  c  -  2;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	112	None	add
2980	[BUG]  [BUGGY]  return  c  -  2;  int  c  =  getEscapeChar();  return  c  -  2;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  2;  int  c  =  getEscapeChar();  return  c  -  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    2;    int  c  =  getEscapeChar();  return  c  -  2;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	112	None	add
2981	[BUG]  [BUGGY]  return  c  -  2;  int  c  =  getEscapeSurroundingSpaces();  return  c  -  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  2;  int  c  =  getEscapeSurroundingSpaces();  return  c  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    2;    int  c  =  getEscapeSurroundingSpaces();  return  c  -  1;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	112	None	add
2982	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  |  1;  return  c  &  END_OF_STREAM  |  1;  [CE]  unreachable  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  |  1;  return  c  &  END_OF_STREAM  |  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    |    1;    return  c  &  END_OF_STREAM  |  1;	  	non-compiled	[CE]  unreachable  statement	104	None	add
2983	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  |  1;  int  c  =  getSurroundingSpaces();  return  c  &  END_OF_STREAM  |  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  |  1;  int  c  =  getSurroundingSpaces();  return  c  &  END_OF_STREAM  |  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    |    1;    int  c  =  getSurroundingSpaces();  return  c  &  END_OF_STREAM  |  1;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	104	None	add
2984	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  |  1;  int  c  =  getEscapeSurroundingSpaces();  return  c  &  END_OF_STREAM  |  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  |  1;  int  c  =  getEscapeSurroundingSpaces();  return  c  &  END_OF_STREAM  |  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    |    1;    int  c  =  getEscapeSurroundingSpaces();  return  c  &  END_OF_STREAM  |  1;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	104	None	add
2985	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  |  1;  int  c  =  getEscapeSurroundingSpace();  return  c  &  END_OF_STREAM  |  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  |  1;  int  c  =  getEscapeSurroundingSpace();  return  c  &  END_OF_STREAM  |  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    |    1;    int  c  =  getEscapeSurroundingSpace();  return  c  &  END_OF_STREAM  |  1;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	104	None	add
2986	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  |  1;  int  c  =  getSurroundingSpaces().length;  return  c  &  END_OF_STREAM  |  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  |  1;  int  c  =  getSurroundingSpaces().length;  return  c  &  END_OF_STREAM  |  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    |    1;    int  c  =  getSurroundingSpaces().length;  return  c  &  END_OF_STREAM  |  1;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	104	None	add
2987	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM  |  1;  int  c  =  getEscapeSurroundingSpaces().length;  return  c  &  END_OF_STREAM  |  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM  |  1;  int  c  =  getEscapeSurroundingSpaces().length;  return  c  &  END_OF_STREAM  |  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    &    END_OF_STREAM    |    1;    int  c  =  getEscapeSurroundingSpaces().length;  return  c  &  END_OF_STREAM  |  1;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	104	None	add
2988	[BUG]  [BUGGY]  return  c  +  1,  END_OF_STREAM;  [CE]  ';'  expected  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  1,  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  +  1,  END_OF_STREAM;	  return    c    +    END_OF_STREAM;    	non-compiled	[CE]  ';'  expected	78	None	replace
2989	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  &  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  END_OF_STREAM  &  END_OF_STREAM  +  1;	  return    c    &    END_OF_STREAM    +    2;    	compilable	  [FE]  (entry  2)  	272	5	replace
2990	[BUG]  [BUGGY]  return  END_OF_STREAM  &  END_OF_STREAM  +  1;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  &  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  &  END_OF_STREAM  +  1;	  return    c    &    END_OF_STREAM    +    2;    	compilable	  [FE]  (entry  2)  	272	5	replace
2991	[BUG]  [BUGGY]  while(c  >  0?  1  :  c;  c  =  getSurroundingSpaces();  [CE]  ')'  expected  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  >  0?  1  :  c;  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  >  0?  1  :  c;  c  =  getSurroundingSpaces();	  return    c    >    0?    1    :    c;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  ')'  expected	161	None	replace
2992	[BUG]  [BUGGY]  return  escape.intValue()  *  2;  [CE]  char  cannot  be  dereferenced  [FE]                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  escape.intValue()  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  escape.intValue()  *  2;	  return    END_OF_STREAM.intValue()    *    2;    	non-compiled	[CE]  char  cannot  be  dereferenced	111	None	replace
2993	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM  +  1;	  return    c    <    0?    END_OF_STREAM    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	330	5	replace
2994	[BUG]  [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM  +  1;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  0?  END_OF_STREAM  :  END_OF_STREAM  +  1;	  return    c    <    0?    END_OF_STREAM    :    END_OF_STREAM;    	compilable	  [FE]  (entry  2)  	330	5	replace
2995	[BUG]  [BUGGY]  return  c  >  END_OF_STREAM  ||  c  <  =  END_OF_STREAM;  [CE]  illegal  start  of  expression  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  END_OF_STREAM  ||  c  <  =  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  END_OF_STREAM  ||  c  <  =  END_OF_STREAM;	  return    c    ==    END_OF_STREAM    ||    c    <    =    END_OF_STREAM;    	non-compiled	[CE]  illegal  start  of  expression	268	None	replace
2996	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  DISABLED)  {  return  delimiter;  }  [CE]  missing  return  statement  [FE]                                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  DISABLED)  {  return  delimiter;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  DISABLED)  {  return  delimiter;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    return    delimiter;    }    	non-compiled	[CE]  missing  return  statement	205	None	replace
2997	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  statement;  }  [CE]  cannot  find  symbol  statement  [FE]                                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  statement;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  statement;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    return    delimiter;    }    	non-compiled	[CE]  cannot  find  symbol  statement	205	None	replace
2998	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  END_OF_STREAM)  {  return  delimiter;  }  [CE]  missing  return  statement  [FE]                                        Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  END_OF_STREAM)  {  return  delimiter;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  END_OF_STREAM)  {  return  delimiter;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    return    delimiter;    }    	non-compiled	[CE]  missing  return  statement	205	None	replace
2999	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  delimiter  +  1;  }  [CE]  missing  return  statement  [FE]                                          Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  delimiter  +  1;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  delimiter  +  1;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    return    delimiter;    }    	non-compiled	[CE]  missing  return  statement	205	None	replace
3000	[BUG]  [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  delimiter;  }  [CE]  missing  return  statement  [FE]                                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  delimiter;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >=  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  delimiter;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    return    delimiter;    }    	non-compiled	[CE]  missing  return  statement	205	None	replace
3001	[BUG]  [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  this;  }  [CE]  incompatible  types  [FE]                                              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  this;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  'n'  ||  c  ==  'r'  ||  c  ==  't')  {  return  this;  }	  if(c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    'n'    ||    c    ==    'r'    ||    c    ==    't')    {    return    delimiter;    }    	non-compiled	[CE]  incompatible  types	205	None	replace
3002	[BUG]  [BUGGY]  return  c  +  18;  int  c  =  Integer.parseInt(quoteChar);  return  c  +  18;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  18;  int  c  =  Integer.parseInt(quoteChar);  return  c  +  18;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    18;    int  c  =  Integer.parseInt(quoteChar);  return  c  +  18;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	369	None	add
3003	[BUG]  [BUGGY]  return  c  +  18;  int  c  =  getSurroundingSpaces();  return  c  +  18;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  18;  int  c  =  getSurroundingSpaces();  return  c  +  18;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    18;    int  c  =  getSurroundingSpaces();  return  c  +  18;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	369	None	add
3004	[BUG]  [BUGGY]  return  c  +  18;  int  c  =  getEscapeSurroundingSpaces();  return  c  +  18;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  18;  int  c  =  getEscapeSurroundingSpaces();  return  c  +  18;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    18;    int  c  =  getEscapeSurroundingSpaces();  return  c  +  18;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	369	None	add
3005	[BUG]  [BUGGY]  return  c  +  18;  int  c  =  Integer.parseInt(text.getChars());  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  18;  int  c  =  Integer.parseInt(text.getChars());  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    18;    int  c  =  Integer.parseInt(text.getChars());	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	369	None	add
3006	[BUG]  [BUGGY]  while(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpaces();  [CE]  illegal  start  of  expression  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  =  END_OF_STREAM)  {  return  BACKSPACE;  Integer  c  =  getEscapeSurroundingSpaces();	  return    BACKSPACE;    Integer    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  illegal  start  of  expression	225	None	replace
3007	[BUG]  [BUGGY]  return  c  <  =  2;  [CE]  illegal  start  of  expression  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  =  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  =  2;	  return    c    *    2;    	non-compiled	[CE]  illegal  start  of  expression	326	None	replace
3008	[BUG]  [BUGGY]  return  _escapeChar.intValue();  [CE]  cannot  find  symbol  _escapeChar  [FE]                    Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  _escapeChar.intValue();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  _escapeChar.intValue();	  return    d.intValue();    	non-compiled	[CE]  cannot  find  symbol  _escapeChar	244	None	replace
3009	[BUG]  [BUGGY]  return  c  -  3;  int  c  =  getEscapeSurroundingSpaces();  return  c  -  3;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  3;  int  c  =  getEscapeSurroundingSpaces();  return  c  -  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    3;    int  c  =  getEscapeSurroundingSpaces();  return  c  -  3;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	118	None	add
3010	[BUG]  [BUGGY]  return  c  -  3;  int  c  =  getSurroundingSpaces();  return  c  -  3;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  3;  int  c  =  getSurroundingSpaces();  return  c  -  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    3;    int  c  =  getSurroundingSpaces();  return  c  -  3;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	118	None	add
3011	[BUG]  [BUGGY]  return  c  -  3;  int  c  =  getSurroundingSpace();  return  c  -  3;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  3;  int  c  =  getSurroundingSpace();  return  c  -  3;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    3;    int  c  =  getSurroundingSpace();  return  c  -  3;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	118	None	add
3012	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  END_OF_STREAM;  escape;  [CE]  not  a  statement  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  END_OF_STREAM;  escape;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  END_OF_STREAM;  escape;	  return    escape;    escape;    	non-compiled	[CE]  not  a  statement	230	None	replace
3013	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  END_OF_STREAM;  break;  [CE]  duplicate  case  label  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  END_OF_STREAM;  break;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  END_OF_STREAM;  break;	  return    escape;    escape;    	non-compiled	[CE]  duplicate  case  label	230	None	replace
3014	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  /  DISABLED;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  END_OF_STREAM  /  DISABLED;	  return    END_OF_STREAM    +    DISABLED;    	compilable	  [FE]  (entry  2)  	183	5	replace
3015	[BUG]  [BUGGY]  return  END_OF_STREAM  /  DISABLED;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  /  DISABLED;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  /  DISABLED;	  return    END_OF_STREAM    +    DISABLED;    	compilable	  [FE]  (entry  2)  	183	5	replace
3016	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  DISABLED  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  END_OF_STREAM  +  DISABLED  -  1;	  return    END_OF_STREAM    +    DISABLED;    	compilable	  [FE]  (entry  2)  	183	5	replace
3017	[BUG]  [BUGGY]  return  END_OF_STREAM  +  DISABLED  -  1;  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  DISABLED  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  DISABLED  -  1;	  return    END_OF_STREAM    +    DISABLED;    	compilable	  [FE]  (entry  2)  	183	5	replace
3018	[BUG]  [BUGGY]  return  c  <  =  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  [CE]  illegal  start  of  expression  [FE]              Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  =  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  =  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size();	  return    c    &    END_OF_STREAM;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
3019	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size()  -  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size()  -  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size()  -  1;	  return    c    &    END_OF_STREAM;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	41	None	replace
3020	[BUG]  [BUGGY]  return  c  &  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size()  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                  Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  &  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size()  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  &  END_OF_STREAM;  int  c  =  getSurroundingSpaces().size()  +  1;	  return    c    &    END_OF_STREAM;    int    c    =    getSurroundingSpaces().size();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	41	None	replace
3021	[BUG]  [BUGGY]  return  in;  escape  =  readEscape(in,  escapeChar,  c);  [CE]  incompatible  types  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  in;  escape  =  readEscape(in,  escapeChar,  c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  in;  escape  =  readEscape(in,  escapeChar,  c);	  return    escape;    int    escape    =    readEscape(in,    c);    	non-compiled	[CE]  incompatible  types	237	None	replace
3022	[BUG]  [BUGGY]  if(c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  }  [CE]  ')'  expected  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  }	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    len;    ++c)    {    if(!ignoreEmptyLines)    {    return    c    >    0?    1    :    c;    }    	non-compiled	[CE]  ')'  expected	293	None	replace
3023	[BUG]  [BUGGY]  if(c  >  0?  1  :  c);  for(int  c  =  0;  c  <  len;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  }  [CE]  incompatible  types  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  0?  1  :  c);  for(int  c  =  0;  c  <  len;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  0?  1  :  c);  for(int  c  =  0;  c  <  len;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  }	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    len;    ++c)    {    if(!ignoreEmptyLines)    {    return    c    >    0?    1    :    c;    }    	non-compiled	[CE]  incompatible  types	293	None	replace
3024	[BUG]  [BUGGY]  if(c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  [CE]  ')'  expected  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  0?  1  :  c;  for(int  c  =  0;  c  <  len;  ++c)  {  if(!ignoreEmptyLines)  {  return  c  >  0?  1  :  c;  }	  return    c    >    0?    1    :    c;    for(int    c    =    0;    c    <    len;    ++c)    {    if(!ignoreEmptyLines)    {    return    c    >    0?    1    :    c;    }    	non-compiled	[CE]  ')'  expected	293	None	replace
3025	[BUG]  [BUGGY]  return  _escapeSurroundingSpaces?  0  :  END_OF_STREAM;  [CE]  cannot  find  symbol  _escapeSurroundingSpaces  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  _escapeSurroundingSpaces?  0  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  _escapeSurroundingSpaces?  0  :  END_OF_STREAM;	  return    this.escapeSurroundingSpaces?    0    :    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  _escapeSurroundingSpaces	207	None	replace
3026	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  c  -  2  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  >  0?  c  -  2  :  c;	  return    c    -    2;    	compilable	  [FE]  (entry  2)  	113	5	replace
3027	[BUG]  [BUGGY]  return  c  >  0?  c  -  2  :  c;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  c  -  2  :  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  c  -  2  :  c;	  return    c    -    2;    	compilable	  [FE]  (entry  2)  	113	5	replace
3028	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  c  -  2  :  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  >  0?  c  -  2  :  c  +  1;	  return    c    -    2;    	compilable	  [FE]  (entry  2)  	113	5	replace
3029	[BUG]  [BUGGY]  return  c  >  0?  c  -  2  :  c  +  1;  [FE]  (entry  2)  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  c  -  2  :  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  c  -  2  :  c  +  1;	  return    c    -    2;    	compilable	  [FE]  (entry  2)  	113	5	replace
3030	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  c  -  2  :  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  >  0?  c  -  2  :  1;	  return    c    -    2;    	compilable	  [FE]  (entry  2)  	113	5	replace
3031	[BUG]  [BUGGY]  return  c  >  0?  c  -  2  :  1;  [FE]  (entry  2)  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  c  -  2  :  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  c  -  2  :  1;	  return    c    -    2;    	compilable	  [FE]  (entry  2)  	113	5	replace
3032	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  }  [CE]  class,  interface,  or  enum  expected  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  }	  return    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  class,  interface,  or  enum  expected	128	None	replace
3033	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)return  END_OF_STREAM;  int  c  =  getEscapeSurroundingSpaces();	  return    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	128	None	replace
3034	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM,  END_OF_STREAM.length;  [CE]  ';'  expected  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM,  END_OF_STREAM.length;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  END_OF_STREAM,  END_OF_STREAM.length;	  return    c    >    0?    1    :    END_OF_STREAM.length;    	non-compiled	[CE]  ';'  expected	253	None	replace
3035	[BUG]  [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM,  delimiter);  [CE]  ';'  expected  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  END_OF_STREAM,  delimiter);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  END_OF_STREAM,  delimiter);	  return    c    >    0?    1    :    END_OF_STREAM.length;    	non-compiled	[CE]  ';'  expected	253	None	replace
3036	[BUG]  [BUGGY]  return  c  -  4;  int  c  =  Integer.parseInt(quoteChar);  return  c  -  4;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  4;  int  c  =  Integer.parseInt(quoteChar);  return  c  -  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    4;    int  c  =  Integer.parseInt(quoteChar);  return  c  -  4;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	114	None	add
3037	[BUG]  [BUGGY]  return  c  -  4;  int  c  =  getEscapeSurroundingSpaces();  return  c  -  4;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  4;  int  c  =  getEscapeSurroundingSpaces();  return  c  -  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    4;    int  c  =  getEscapeSurroundingSpaces();  return  c  -  4;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	114	None	add
3038	[BUG]  [BUGGY]  return  c  -  4;  int  c  =  getSurroundingSpaces();  return  c  -  4;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  4;  int  c  =  getSurroundingSpaces();  return  c  -  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    4;    int  c  =  getSurroundingSpaces();  return  c  -  4;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	114	None	add
3039	[BUG]  [BUGGY]  return  END_OF_STREAM  +  4;  case  END_OF_STREAM:  return  END_OF_STREAM  +  4;  [CE]  duplicate  case  label  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  4;  case  END_OF_STREAM:  return  END_OF_STREAM  +  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    4;    case  END_OF_STREAM:  return  END_OF_STREAM  +  4;	  	non-compiled	[CE]  duplicate  case  label	74	None	add
3040	[BUG]  [BUGGY]  return  END_OF_STREAM  +  4;  if(c  >  END_OF_STREAM)  {  return  END_OF_STREAM  +  4;  }  else  {  return  END_OF_STREAM  +  4;  }  [CE]  unreachable  statement  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  4;  if(c  >  END_OF_STREAM)  {  return  END_OF_STREAM  +  4;  }  else  {  return  END_OF_STREAM  +  4;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    4;    if(c  >  END_OF_STREAM)  {  return  END_OF_STREAM  +  4;  }  else  {  return  END_OF_STREAM  +  4;  }	  	non-compiled	[CE]  unreachable  statement	74	None	add
3041	[BUG]  [BUGGY]  return  END_OF_STREAM  +  4;  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence   ");  [CE]  duplicate  case  label  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  4;  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence   ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    4;    case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence   ");	  	non-compiled	[CE]  duplicate  case  label	74	None	add
3042	[BUG]  [BUGGY]  return  END_OF_STREAM  +  4;  if(c  >  END_OF_STREAM)  {  return  END_OF_STREAM  +  4;  }  [CE]  unreachable  statement  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  4;  if(c  >  END_OF_STREAM)  {  return  END_OF_STREAM  +  4;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    4;    if(c  >  END_OF_STREAM)  {  return  END_OF_STREAM  +  4;  }	  	non-compiled	[CE]  unreachable  statement	74	None	add
3043	[BUG]  [BUGGY]  return  END_OF_STREAM  +  4;  if(c  >  END_OF_STREAM)  {  return  END_OF_STREAM  +  4;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }  [CE]  unreachable  statement  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  4;  if(c  >  END_OF_STREAM)  {  return  END_OF_STREAM  +  4;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    4;    if(c  >  END_OF_STREAM)  {  return  END_OF_STREAM  +  4;  }  else  {  throw  new  IOException( "EOF  whilst  processing  escape  sequence ");  }	  	non-compiled	[CE]  unreachable  statement	74	None	add
3044	[BUG]  [BUGGY]  return  END_OF_STREAM  +  quoteChar;  int  quoteChar  =  getSurroundingSpaces().length;  return  END_OF_STREAM  +  quoteChar;  [CE]  cannot  find  symbol  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  quoteChar;  int  quoteChar  =  getSurroundingSpaces().length;  return  END_OF_STREAM  +  quoteChar;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    quoteChar;    int  quoteChar  =  getSurroundingSpaces().length;  return  END_OF_STREAM  +  quoteChar;	  	non-compiled	[CE]  cannot  find  symbol	84	None	add
3045	[BUG]  [BUGGY]  return  END_OF_STREAM  +  quoteChar;  int  quoteChar  =  getSurroundingSpaces().size();  return  END_OF_STREAM  +  quoteChar;  [CE]  cannot  find  symbol  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  quoteChar;  int  quoteChar  =  getSurroundingSpaces().size();  return  END_OF_STREAM  +  quoteChar;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    quoteChar;    int  quoteChar  =  getSurroundingSpaces().size();  return  END_OF_STREAM  +  quoteChar;	  	non-compiled	[CE]  cannot  find  symbol	84	None	add
3046	[BUG]  [BUGGY]  return  END_OF_STREAM  +  quoteChar;  Character.isWhitespace(c)?  END_OF_STREAM  +  quoteChar  :  END_OF_STREAM;  [CE]  not  a  statement  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  quoteChar;  Character.isWhitespace(c)?  END_OF_STREAM  +  quoteChar  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    quoteChar;    Character.isWhitespace(c)?  END_OF_STREAM  +  quoteChar  :  END_OF_STREAM;	  	non-compiled	[CE]  not  a  statement	84	None	add
3047	[BUG]  [BUGGY]  return  END_OF_STREAM  +  quoteChar;  Character.isWhitespace(c)?  END_OF_STREAM  :  END_OF_STREAM  +  quoteChar;  [CE]  not  a  statement  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  quoteChar;  Character.isWhitespace(c)?  END_OF_STREAM  :  END_OF_STREAM  +  quoteChar;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    quoteChar;    Character.isWhitespace(c)?  END_OF_STREAM  :  END_OF_STREAM  +  quoteChar;	  	non-compiled	[CE]  not  a  statement	84	None	add
3048	[BUG]  [BUGGY]  return  END_OF_STREAM  +  quoteChar;  Character.isWhitespace(c)?  END_OF_STREAM  :  END_OF_STREAM;  [CE]  not  a  statement  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  quoteChar;  Character.isWhitespace(c)?  END_OF_STREAM  :  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    quoteChar;    Character.isWhitespace(c)?  END_OF_STREAM  :  END_OF_STREAM;	  	non-compiled	[CE]  not  a  statement	84	None	add
3049	[BUG]  [BUGGY]  case  END_OF_STREAM:  return  BACKSPACE;  int  c  =  getEscapeSurroundingSpace(c);  [CE]  duplicate  case  label  [FE]                  (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  case  END_OF_STREAM:  return  BACKSPACE;  int  c  =  getEscapeSurroundingSpace(c);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	case  END_OF_STREAM:  return  BACKSPACE;  int  c  =  getEscapeSurroundingSpace(c);	  return    BACKSPACE;    int    c    =    getEscapeSurroundingSpace(c);    	non-compiled	[CE]  duplicate  case  label	171	None	replace
3050	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM.equals(Character.toLowerCase(c));  [CE]  int  cannot  be  dereferenced  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM.equals(Character.toLowerCase(c));  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_STREAM.equals(Character.toLowerCase(c));	  return    END_OF_STREAM    ||    END_OF_STREAM.equals(c);    	non-compiled	[CE]  int  cannot  be  dereferenced	356	None	replace
3051	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM.equals(c,  END_OF_STREAM);  [CE]  int  cannot  be  dereferenced  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM.equals(c,  END_OF_STREAM);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_STREAM.equals(c,  END_OF_STREAM);	  return    END_OF_STREAM    ||    END_OF_STREAM.equals(c);    	non-compiled	[CE]  int  cannot  be  dereferenced	356	None	replace
3052	[BUG]  [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM.equals(Character.toUpperCase(c));  [CE]  int  cannot  be  dereferenced  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  ||  END_OF_STREAM.equals(Character.toUpperCase(c));  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  ||  END_OF_STREAM.equals(Character.toUpperCase(c));	  return    END_OF_STREAM    ||    END_OF_STREAM.equals(c);    	non-compiled	[CE]  int  cannot  be  dereferenced	356	None	replace
3053	[BUG]  [BUGGY]  result  =  END_OF_STREAM  ||  END_OF_STREAM  +  1;  [CE]  cannot  find  symbol  result  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result  =  END_OF_STREAM  ||  END_OF_STREAM  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result  =  END_OF_STREAM  ||  END_OF_STREAM  +  1;	  result    =    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  result	4	None	replace
3054	[BUG]  [BUGGY]  result  =  END_OF_STREAM  ||  END_OF_STREAM  *  2;  [CE]  cannot  find  symbol  result  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result  =  END_OF_STREAM  ||  END_OF_STREAM  *  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result  =  END_OF_STREAM  ||  END_OF_STREAM  *  2;	  result    =    END_OF_STREAM;    	non-compiled	[CE]  cannot  find  symbol  result	4	None	replace
3055	[BUG]  [BUGGY]  return  c  +  4;  int  c  =  Integer.parseInt(quoteChar);  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  4;  int  c  =  Integer.parseInt(quoteChar);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    4;    int  c  =  Integer.parseInt(quoteChar);	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	88	None	add
3056	[BUG]  [BUGGY]  return  c  +  4;  return  c  +  4;  [CE]  unreachable  statement  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  4;  return  c  +  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    4;    return  c  +  4;	  	non-compiled	[CE]  unreachable  statement	88	None	add
3057	[BUG]  [BUGGY]  return  c  +  4;  int  c  =  Integer.parseInt(quoteChar);  return  c  +  4;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  4;  int  c  =  Integer.parseInt(quoteChar);  return  c  +  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    4;    int  c  =  Integer.parseInt(quoteChar);  return  c  +  4;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	88	None	add
3058	[BUG]  [BUGGY]  return  c  +  4;  int  c  =  getSurroundingSpaces();  return  c  +  4;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  4;  int  c  =  getSurroundingSpaces();  return  c  +  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    4;    int  c  =  getSurroundingSpaces();  return  c  +  4;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	88	None	add
3059	[BUG]  [BUGGY]  return  c  +  4;  int  c  =  getEscapeSurroundingSpaces();  return  c  +  4;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  4;  int  c  =  getEscapeSurroundingSpaces();  return  c  +  4;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    4;    int  c  =  getEscapeSurroundingSpaces();  return  c  +  4;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	88	None	add
3060	[BUG]  [BUGGY]  return  c  +  4;  int  c  =  Integer.parseInt(text.getChars());  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  +  4;  int  c  =  Integer.parseInt(text.getChars());  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    +    4;    int  c  =  Integer.parseInt(text.getChars());	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	88	None	add
3061	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  'n';  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  <  0?  1  :  'n';	  return    c    <    0?    1    :    c;    	compilable	  [FE]  (entry  2)  	65	5	replace
3062	[BUG]  [BUGGY]  return  c  <  0?  1  :  'n';  [FE]  (entry  2)  [FE]    Records  do  not  match  expected  result  (entry  8)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  <  0?  1  :  'n';  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  <  0?  1  :  'n';	  return    c    <    0?    1    :    c;    	compilable	  [FE]  (entry  2)  	65	5	replace
3063	[BUG]  [BUGGY]  return  c  >  0?  1  :  -1;  return  c  >  0?  1  :  -1;  [CE]  unreachable  statement  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  -1;  return  c  >  0?  1  :  -1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    -1;    return  c  >  0?  1  :  -1;	  	non-compiled	[CE]  unreachable  statement	305	None	add
3064	[BUG]  [BUGGY]  return  c  >  0?  1  :  -1;  (c  >  0?  1  :  -1);  [CE]  not  a  statement  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  -1;  (c  >  0?  1  :  -1);  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    >    0?    1    :    -1;    (c  >  0?  1  :  -1);	  	non-compiled	[CE]  not  a  statement	305	None	add
3065	[BUG]  [BUGGY]  return  END_OF_STREAM  +  1;  default:  throw  new  IllegalArgumentException( " ");  [CE]  duplicate  default  label  [FE]                      (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  1;  default:  throw  new  IllegalArgumentException( " ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  1;  default:  throw  new  IllegalArgumentException( " ");	  return    END_OF_STREAM    +    1;    result    +=    END_OF_STREAM;    	non-compiled	[CE]  duplicate  default  label	181	None	replace
3066	[BUG]  [BUGGY]  return  END_OF_STREAM  +  1;  default:  throw  new  IllegalStateException( " ");  [CE]  duplicate  default  label  [FE]                        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  1;  default:  throw  new  IllegalStateException( " ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  +  1;  default:  throw  new  IllegalStateException( " ");	  return    END_OF_STREAM    +    1;    result    +=    END_OF_STREAM;    	non-compiled	[CE]  duplicate  default  label	181	None	replace
3067	[BUG]  [BUGGY]  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM  |  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	add	return  c  -  END_OF_STREAM  |  1;	  return    c    &    END_OF_STREAM    |    1;    	compilable	  [FE]  (entry  2)  	105	5	replace
3068	[BUG]  [BUGGY]  return  c  -  END_OF_STREAM  |  1;  [FE]  (entry  2)  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  END_OF_STREAM  |  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  -  END_OF_STREAM  |  1;	  return    c    &    END_OF_STREAM    |    1;    	compilable	  [FE]  (entry  2)  	105	5	replace
3069	[BUG]  [BUGGY]  int  c  =  c  +  1;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  c  =  c  +  1;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  c  =  c  +  1;	  return    c    +    1;    Integer    c    +    1;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	223	None	replace
3070	[BUG]  [BUGGY]  result  =  END_OF_STREAM  ||  END_OF_STREAM.equals(Character.toUpperCase(c));  [CE]  cannot  find  symbol  result  [FE]                (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  result  =  END_OF_STREAM  ||  END_OF_STREAM.equals(Character.toUpperCase(c));  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	result  =  END_OF_STREAM  ||  END_OF_STREAM.equals(Character.toUpperCase(c));	  result    =    END_OF_STREAM    ||    END_OF_STREAM.equals(c);    	non-compiled	[CE]  cannot  find  symbol  result	124	None	replace
3071	[BUG]  [BUGGY]  return  c  -  6;  int  c  =  getEscapeSurroundingSpaces();  return  c  -  6;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  6;  int  c  =  getEscapeSurroundingSpaces();  return  c  -  6;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    6;    int  c  =  getEscapeSurroundingSpaces();  return  c  -  6;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	116	None	add
3072	[BUG]  [BUGGY]  return  c  -  6;  int  c  =  getSurroundingSpaces();  return  c  -  6;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  6;  int  c  =  getSurroundingSpaces();  return  c  -  6;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    6;    int  c  =  getSurroundingSpaces();  return  c  -  6;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	116	None	add
3073	[BUG]  [BUGGY]  return  c  -  6;  int  c  =  getEscapeChar();  return  c  -  6;  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  -  6;  int  c  =  getEscapeChar();  return  c  -  6;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    c    -    6;    int  c  =  getEscapeChar();  return  c  -  6;	  	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	116	None	add
3074	[BUG]  [BUGGY]  return  c  >  0?  1  :  EOF_SURroundingSpaces;  [CE]  cannot  find  symbol  EOF_SURroundingSpaces  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  c  >  0?  1  :  EOF_SURroundingSpaces;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  c  >  0?  1  :  EOF_SURroundingSpaces;	  return    c    >    0?    1    :    END_OF_SURroundingSpaces;    	non-compiled	[CE]  cannot  find  symbol  EOF_SURroundingSpaces	252	None	replace
3075	[BUG]  [BUGGY]  return  END_OF_STREAM  =  END_OF_STREAM;  [CE]  cannot  assign  a  value  to  final  variable  END_OF_STREAM  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  =  END_OF_STREAM;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM  =  END_OF_STREAM;	  return    END_OF_STREAM;    result    =    END_OF_STREAM;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  END_OF_STREAM	126	None	replace
3076	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  }  [CE]  illegal  start  of  expression  [FE]        (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
3077	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  [CE]  illegal  start  of  expression  [FE]          (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(!ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
3078	[BUG]  [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  }  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  >  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  >  END_OF_STREAM)  {  return  escape;  for(int  c  =  0;  c  <  len;  c++)  {  if(ignoreEmptyLines  ||!ignoreEmptyLines)  {  return  c;  }  }	  return    escape;    for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines    ||!ignoreEmptyLines)    {    return    c;    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
3079	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  }  [CE]  class,  interface,  or  enum  expected  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)return  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  }	  return    END_OF_STREAM;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  class,  interface,  or  enum  expected	127	None	replace
3080	[BUG]  [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  [CE]  variable  c  is  already  defined  in  method  readEscape()  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  if(c  ==  END_OF_STREAM)return  END_OF_STREAM;  int  c  =  getSurroundingSpaces();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	if(c  ==  END_OF_STREAM)return  END_OF_STREAM;  int  c  =  getSurroundingSpaces();	  return    END_OF_STREAM;    int    c    =    getSurroundingSpaces();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  readEscape()	127	None	replace
3081	[BUG]  [BUGGY]  Int  c  =  getEscapeSurroundingSpaces().size();  [CE]  cannot  find  symbol  [FE]                Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  Int  c  =  getEscapeSurroundingSpaces().size();  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	Int  c  =  getEscapeSurroundingSpaces().size();	  return    c    &    END_OF_STREAM;    int    c    =    getEscapeSurroundingSpaces().size();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
3082	[BUG]  [BUGGY]  return  END_OF_STREAM,  ignoreEmptyLines;  [CE]  ';'  expected  [FE]                      Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM,  ignoreEmptyLines;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return  END_OF_STREAM,  ignoreEmptyLines;	  return    escapeSurroundingSpaces;    	non-compiled	[CE]  ';'  expected	148	None	replace
3083	[BUG]  [BUGGY]  int  escape  =  getEscapeSurroundingSpaces();  if(escape  ==  escape)return  escape;  }  [CE]  class,  interface,  or  enum  expected  [FE]              (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  int  escape  =  getEscapeSurroundingSpaces();  if(escape  ==  escape)return  escape;  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	int  escape  =  getEscapeSurroundingSpaces();  if(escape  ==  escape)return  escape;  }	  return    escape;    if(escape!=    0)    {    int    escape    =    getEscapeSurroundingSpaces();    if(escape    ==    escape)    {    return    escape;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	233	None	replace
3084	[BUG]  [BUGGY]  return  END_OF_STREAM  +  2;  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence   ");  [CE]  duplicate  case  label  [FE]    (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  2;  case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence   ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    2;    case  END_OF_STREAM:  throw  new  IOException( "EOF  whilst  processing  escape  sequence   ");	  	non-compiled	[CE]  duplicate  case  label	71	None	add
3085	[BUG]  [BUGGY]  return  END_OF_STREAM  +  2;  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence   ");  [CE]  [FE]      (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  2;  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence   ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    2;    case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence   ");	  	non-compiled	[CE]  	71	None	add
3086	[BUG]  [BUGGY]  return  END_OF_STREAM  +  2;  throw  new  IOException( "EOF  whilst  processing  escape  sequence   ");  [CE]  unreachable  statement  [FE]        (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  2;  throw  new  IOException( "EOF  whilst  processing  escape  sequence   ");  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    2;    throw  new  IOException( "EOF  whilst  processing  escape  sequence   ");	  	non-compiled	[CE]  unreachable  statement	71	None	add
3087	[BUG]  [BUGGY]  return  END_OF_STREAM  +  2;  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence   ";  [CE]  [FE]          (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  2;  case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence   ";  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    2;    case  END_OF_STREAM:  throw  new  EOF  whilst  processing  escape  sequence   ";	  	non-compiled	[CE]  	71	None	add
3088	[BUG]  [BUGGY]  return  END_OF_STREAM  +  2;  result:  return  END_OF_STREAM  +  2;  [CE]  unreachable  statement  [FE]            (entry  2)    [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  return  END_OF_STREAM  +  2;  result:  return  END_OF_STREAM  +  2;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	return    END_OF_STREAM    +    2;    result:  return  END_OF_STREAM  +  2;	  	non-compiled	[CE]  unreachable  statement	71	None	add
3089	[BUG]  [BUGGY]  while(c  <  len)  {  if(!ignoreEmptyLines.contains(c))  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            Records  do  not  match  expected  result  (entry  8)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  len)  {  if(!ignoreEmptyLines.contains(c))  {  throw  new  IOException( " ");  }  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  len)  {  if(!ignoreEmptyLines.contains(c))  {  throw  new  IOException( " ");  }	  for(int    c    =    0;    c    <    len;    c++)    {    if(!ignoreEmptyLines.contains(c))    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
3090	[BUG]  [BUGGY]  while(c  <  =  END_OF_STREAM)  {  c  =  getEscapeSurroundingSpaces();  return  c;  [CE]  illegal  start  of  expression  [FE]            (entry  2)      [CONTEXT]      case  CR:  case  LF:  case  FF:  //  TODO  is  this  correct?  case  TAB:  //  TODO  is  this  correct?  Do  tabs  need  to  be  escaped?  case  BACKSPACE:  //  TODO  is  this  correct?  return  c;  case  END_OF_STREAM:  throw  new  IOException(     "EOF  whilst  processing  escape  sequence     ");  default:        [BUGGY]  while(c  <  =  END_OF_STREAM)  {  c  =  getEscapeSurroundingSpaces();  return  c;  [BUGGY]        }  }  [CLASS]  Lexer  [METHOD]  readEscape  [RETURN_TYPE]  int  [VARIABLES]  char  DISABLED  commmentStart  delimiter  escape  quoteChar  ExtendedBufferedReader  in  CSVFormat  format  boolean  ignoreEmptyLines  ignoreSurroundingSpaces  int  c  	projects/Csv3/src/main/java/org/apache/commons/csv/Lexer.java	0.7745966692414834	111	111	3	replace	while(c  <  =  END_OF_STREAM)  {  c  =  getEscapeSurroundingSpaces();  return  c;	  return    END_OF_STREAM;    Integer    c    =    getEscapeSurroundingSpaces();    return    c;    	non-compiled	[CE]  illegal  start  of  expression	260	None	replace
